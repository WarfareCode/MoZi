<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RichTextBox4.Text" xml:space="preserve">
    <value>U			取消所选单元分配的任务
G			将所选单元进行编组
D			将所选单元脱离编组
A			切换所选单元武器禁射/继承发射授权
Ctrl + A 		切换所有单元武器禁射/继承发射授权
I			切换所选单元攻击时忽略计划航线
Ctrl + I 		切换所有单元攻击时忽略计划航线
E			放弃目标
Ctrl + E  		脱离接战(放弃所有目标)
L			所选单元保持阵位
Ctrl + L		所有单元保持阵位
Shift + [	 	投放被动吊放声纳, 浅-温跃层上
[			投放被动吊放声纳, 深-温跃层下
Shift + ]	 	投放主动吊放声纳, 浅-温跃层上
]			投放主动吊放声纳, 深-温跃层下
Shift + D		部署吊放声纳
O			显示本方战斗序列</value>
  </data>
  <data name="RichTextBox6.Text" xml:space="preserve">
    <value>Ctrl + V			导演视角(全部可见)
Ins			添加单元
C			复制单元
Shift + C		克隆单元
M			移动单元
R			调整单元名称
Del			删除单元
Alt + S		切换作战方
Ctrl + X		将地图坐标系拷贝到粘贴板
Ctrl + F6		添加/删除飞机
Ctrl + F7		添加/删除停靠舰艇</value>
  </data>
  <data name="RichTextBox7.Text" xml:space="preserve">
    <value>创建新航路点--按下并保持Ctrl键，选择并拖动现有航路点.
创建新参考点--按下并保持Ctrl键，选择并拖动现有参考点
结束航线规划--双击最后航路点.</value>
  </data>
  <data name="RichTextBox1.Text" xml:space="preserve">
    <value>F1			自动接战目标
Shift + F1		手动接战目标
Ctrl + F1		纯方位攻击
F2			油门-高度/深度
F3			航线规划
F4			编队编辑
F5			弹药库
F6			空中行动
F7			舰船停靠行动
F8			挂载-武器
F9			传感器
Ctrl + F9	 单元/编组作战条令、电磁频谱管控、武器发射授权
Ctrl + Shift +F9 作战方作战条令、电磁频谱管控、武器发射授权
F10			系统毁伤状态
F11			任务编辑器
Ctrl + F11		创建新任务</value>
  </data>
  <data name="RichTextBox2.Text" xml:space="preserve">
    <value>鼠标右键点击		位置居中
上箭头,数字键8		地图上移
右箭头,数字键6		地图右移
左箭头,数字键4		地图左移
下箭头,数字键2		地图下移
Z , 鼠标滚轮		放大
X , 鼠标滚轮		缩小
V , PgUp, 数字键9 	切换作战编组/单元视图
| (Vert. Separator)	选择下一单元
Backspace	 	选择前一单元
T			跟踪所选单元
Del			删除所选航路点
Ctrl + Ins		添加参考点
Ctrl + R		重命名参考点
Ctrl + Del		删除参考点
Ctrl + End		取消对所有参考点选择
Ctrl + D		测距/测向工具
End, Num 1		切换显示目标照射矢量
Home, Num 7		切换显示标准矢量
* (star)		切换显示数据块
Ctrl + M		清空消息输出
Ctrl + Shift + M 	消息输出单窗显示</value>
  </data>
  <data name="RichTextBox3.Text" xml:space="preserve">
    <value>空格键 Ctrl+回车键	启动/恢复/暂停推演
+ (plus)		增加时间压缩比
- (minus)		减小时间压缩比
Enter			实时模式(1:1秒)
Ctrl + S	 	保存推演想定
Ctrl + Q	 	切换离散事件推进</value>
  </data>
</root>