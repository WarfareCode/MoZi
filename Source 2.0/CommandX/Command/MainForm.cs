using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data.SQLite;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.Integration;
using System.Xml;
using ClipperLib;
using Command_Core;
using Command_Core.DAL;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using ns0;
using ns1;
using ns11;
using ns15;
using ns16;
using ns18;
using ns19;
using ns2;
using ns28;
using ns3;
using ns31;
using ns32;
using ns33;
using ns34;
using ns35;
using ns4;
using ns6;

namespace Command
{
	// Token: 主窗体
	[DesignerGenerated]
	public sealed partial class MainForm : Form
	{
		// Token: 0x06006D0D RID: 27917 RVA: 0x003D28FC File Offset: 0x003D0AFC
		public static bool imethod_28(ActiveUnit activeUnit_0)
		{
			bool result;
			if (activeUnit_0.IsOperating() && WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, activeUnit_0))
			{
				Contact contact = null;
				result = Client.smethod_73(ref activeUnit_0, false, ref contact);
			}
			else
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06006D0E RID: 27918 RVA: 0x003D2938 File Offset: 0x003D0B38
		public MainForm()
		{
			base.FormClosing += new FormClosingEventHandler(this.MainForm_FormClosing);
			base.GotFocus += new EventHandler(this.MainForm_GotFocus);
			base.KeyDown += new KeyEventHandler(this.MainForm_KeyDown);
			base.Load += new EventHandler(this.MainForm_Load);
			base.Resize += new EventHandler(this.MainForm_Resize);
			base.Shown += new EventHandler(this.MainForm_Shown);
			this.SelectionRectangle = default(Rectangle);
			this.list_0 = new List<Unit>();
			this.bool_3 = false;
			this.class1970_0 = null;
			this.m_TiledPlacenameSets = new List<TiledPlacenameSet>();
			this.dateTime_0 = default(DateTime);
			this.dictionary_1 = new Dictionary<string, Bitmap>();
			this.refreshTimes = 0;
			this.object_0 = RuntimeHelpers.GetObjectValue(new object());
			this.int_1 = 3600;
			this.object_1 = RuntimeHelpers.GetObjectValue(new object());
			this.UnitList = new List<Unit>();
			this.dictionary_2 = new Dictionary<Unit, Tuple<int, int>>();
			this.list_3 = new List<Unit>();
			this.bool_6 = true;
			this.bool_7 = false;
			this.bool_8 = false;
			this.int_2 = 0;
			this.rectangle_1 = default(Rectangle);
			this.timer_8 = new Timer();this.timer_8.Tick += new EventHandler(this.method_191);
			this.collection_0 = new Collection<Point>();
			this.list_4 = new List<FixedGeoPolygon>();
			this.point_6 = default(Point);
			this.geoPoint_4 = new GeoPoint();
			this.bool_11 = false;
			this.int_13 = 255;
			this.font_0 = new System.Drawing.Font("Verdana", 11f, FontStyle.Bold);
			this.font_1 = new System.Drawing.Font("Verdana", 9f, FontStyle.Regular);
			this.font_2 = new System.Drawing.Font("Verdana", 9f, FontStyle.Regular);
			this.font_3 = new System.Drawing.Font("Verdana", 9f, FontStyle.Regular);
			this.font_4 = new System.Drawing.Font("Verdana", 11f, FontStyle.Regular);
			this.font_5 = new System.Drawing.Font("Verdana", 11f, FontStyle.Regular);
			this.font_6 = new System.Drawing.Font("Verdana", 11f, FontStyle.Regular);
			this.font_7 = new System.Drawing.Font("Microsoft Sans Serif", 11f, FontStyle.Bold);
			this.method_4(new Class2476());
			this.list_5 = new List<GeoPoint>();
			this.list_6 = new List<Waypoint>();
			this.list_7 = new List<Waypoint>();
			this.list_8 = new List<Waypoint>();
			this.list_9 = new List<Mission.Flight>();
			this.dictionary_3 = new Dictionary<Color, SolidBrush>();
			this.object_2 = RuntimeHelpers.GetObjectValue(new object());
			this.InitializeComponent();
		}

		// Token: Cargo操作
		public void OnCargoOps()
		{
			ActiveUnit activeUnit = (ActiveUnit)Client.GetHookedUnit();
			if (activeUnit != null)
			{
				CommandFactory.GetCommandMain().GetCargoOps().activeUnit_0 = activeUnit;
				CommandFactory.GetCommandMain().GetCargoOps().activeUnit_1 = null;
				CommandFactory.GetCommandMain().GetCargoOps().Show();
			}
		}

		// Token: 0x06006D10 RID: 27920 RVA: 0x003D2C88 File Offset: 0x003D0E88
		private void Click_Unit_DischargeCargo(object sender, EventArgs e)
		{
			if (Client.GetClientSide() != null)
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (!Information.IsNothing(current) && current.IsActiveUnit())
					{
						((ActiveUnit)current).GetDockingOps().method_21();
					}
				}
				this.RefreshMap();
			}
		}

		// Token: 0x06006D11 RID: 27921 RVA: 0x003D2D0C File Offset: 0x003D0F0C
		private void Click_UO_EditCargo(object sender, EventArgs e)
		{
			if (Information.IsNothing(Client.GetHookedUnit()))
			{
				Interaction.MsgBox("没有选择作战单元!", MsgBoxStyle.OkOnly, null);
			}
			else if (Client.GetHookedUnit().IsActiveUnit())
			{
				CommandFactory.GetCommandMain().GetEditCargo().ParentPlatform = (ActiveUnit)Client.GetHookedUnit();
				CommandFactory.GetCommandMain().GetEditCargo().Show();
			}
		}

        // Token: 0x06006D14 RID: 27924 RVA: 0x003DBF5C File Offset: 0x003DA15C
        ////		[CompilerGenerated]
        ////		internal  MenuStrip GetMenuStrip1()
        ////		{
        ////			return this.menuStrip_0;
        ////		}

        // Token: 0x06006D15 RID: 27925 RVA: 0x0002EAA8 File Offset: 0x0002CCA8
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_1(MenuStrip menuStrip_1)
        //		{
        //			this.menuStrip_0 = menuStrip_1;
        //		}

        // Token: 0x06006D16 RID: 27926 RVA: 0x003DBF74 File Offset: 0x003DA174
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetFileToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_FileControl;
        ////		}

        // Token: 0x06006D17 RID: 27927 RVA: 0x003DBF8C File Offset: 0x003DA18C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_3(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_520);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_FileControl;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_FileControl = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_FileControl;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D18 RID: 27928 RVA: 0x003DBFD8 File Offset: 0x003DA1D8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetHelpToolStripMenuItem()
        ////		{
        ////			return this.toolStripMenuItem_1;
        ////		}

        // Token: 0x06006D19 RID: 27929 RVA: 0x0002EAB1 File Offset: 0x0002CCB1
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_5(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.toolStripMenuItem_1 = toolStripMenuItem_365;
        //		}

        // Token: 0x06006D1A RID: 27930 RVA: 0x003DBFF0 File Offset: 0x003DA1F0
        ////		[CompilerGenerated]
        ////		internal  ToolStripLabel vmethod_6()
        ////		{
        ////			return this.Label_GameRunSpeed;
        ////		}

        // Token: 0x06006D1B RID: 27931 RVA: 0x0002EABA File Offset: 0x0002CCBA
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_7(ToolStripLabel toolStripLabel_2)
        //		{
        //			this.Label_GameRunSpeed = toolStripLabel_2;
        //		}

        // Token: 0x06006D1C RID: 27932 RVA: 0x003DC008 File Offset: 0x003DA208
        ////		[CompilerGenerated]
        ////		internal  ToolStripComboBox vmethod_8()
        ////		{
        ////			return this.toolStripComboBox_0;
        ////		}

        // Token: 0x06006D1D RID: 27933 RVA: 0x0002EAC3 File Offset: 0x0002CCC3
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_9(ToolStripComboBox toolStripComboBox_2)
        //		{
        //			this.toolStripComboBox_0 = toolStripComboBox_2;
        //		}

        // Token: 0x06006D1E RID: 27934 RVA: 0x003DC020 File Offset: 0x003DA220
        ////		[CompilerGenerated]
        ////		internal  ContextMenuStrip GetCMenu_AddUnit()
        ////		{
        ////			return this.contextMenuStrip_0;
        ////		}

        // Token: 0x06006D1F RID: 27935 RVA: 0x0002EACC File Offset: 0x0002CCCC
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_11(ContextMenuStrip contextMenuStrip_5)
        //		{
        //			this.contextMenuStrip_0 = contextMenuStrip_5;
        //		}

        // Token: 0x06006D20 RID: 27936 RVA: 0x003DC038 File Offset: 0x003DA238
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAddPlatformToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AU_AddUnit;
        ////		}

        // Token: 0x06006D21 RID: 27937 RVA: 0x003DC050 File Offset: 0x003DA250
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_13(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_72);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AU_AddUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AU_AddUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AU_AddUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D22 RID: 27938 RVA: 0x003DC09C File Offset: 0x003DA29C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetNewToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_NewScenario;
        ////		}

        // Token: 0x06006D23 RID: 27939 RVA: 0x003DC0B4 File Offset: 0x003DA2B4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_15(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_69);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_NewScenario;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_NewScenario = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_NewScenario;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D24 RID: 27940 RVA: 0x003DC100 File Offset: 0x003DA300
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetLoadToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_LoadScenario;
        ////		}

        // Token: 0x06006D25 RID: 27941 RVA: 0x003DC118 File Offset: 0x003DA318
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_17(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.ShowLoadScenario);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_LoadScenario;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_LoadScenario = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_LoadScenario;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D26 RID: 27942 RVA: 0x003DC164 File Offset: 0x003DA364
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_Editor()
        ////		{
        ////			return this.MenuItem_ScenarioEditor;
        ////		}

        // Token: 0x06006D27 RID: 27943 RVA: 0x003DC17C File Offset: 0x003DA37C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_19(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_407);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ScenarioEditor;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.DropDownOpening -= value;
        ////			}
        ////			this.MenuItem_ScenarioEditor = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ScenarioEditor;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.DropDownOpening += value;
        ////			}
        ////		}

        // Token: 0x06006D28 RID: 27944 RVA: 0x003DC1C8 File Offset: 0x003DA3C8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAddUnitToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UO_AddUnit;
        ////		}

        // Token: 0x06006D29 RID: 27945 RVA: 0x003DC1E0 File Offset: 0x003DA3E0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_21(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_522);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UO_AddUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UO_AddUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UO_AddUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D2A RID: 27946 RVA: 0x003DC22C File Offset: 0x003DA42C
        ////		[CompilerGenerated]
        ////		internal  ToolStripButton GetTSB_StartGame()
        ////		{
        ////			return this.Button_StartOrRecover;
        ////		}

        // Token: 0x06006D2B RID: 27947 RVA: 0x003DC244 File Offset: 0x003DA444
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_23(ToolStripButton toolStripButton_4)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_70);
        ////			ToolStripButton toolStripButton = this.Button_StartOrRecover;
        ////			if (toolStripButton != null)
        ////			{
        ////				toolStripButton.Click -= value;
        ////			}
        ////			this.Button_StartOrRecover = toolStripButton_4;
        ////			toolStripButton = this.Button_StartOrRecover;
        ////			if (toolStripButton != null)
        ////			{
        ////				toolStripButton.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D2C RID: 27948 RVA: 0x003DC290 File Offset: 0x003DA490
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSaveAsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SaveAs;
        ////		}

        // Token: 0x06006D2D RID: 27949 RVA: 0x003DC2A8 File Offset: 0x003DA4A8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_25(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.SaveScenario);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SaveAs;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SaveAs = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SaveAs;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D2E RID: 27950 RVA: 0x003DC2F4 File Offset: 0x003DA4F4
        [CompilerGenerated]
        internal  SaveFileDialog vmethod_26()
        {
        	return this.saveFileDialog_0;
        }

        // Token: 0x06006D2F RID: 27951 RVA: 0x003DC30C File Offset: 0x003DA50C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_27(SaveFileDialog saveFileDialog_3)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_73);
        ////			SaveFileDialog saveFileDialog = this.saveFileDialog_0;
        ////			if (saveFileDialog != null)
        ////			{
        ////				saveFileDialog.Disposed -= value;
        ////			}
        ////			this.saveFileDialog_0 = saveFileDialog_3;
        ////			saveFileDialog = this.saveFileDialog_0;
        ////			if (saveFileDialog != null)
        ////			{
        ////				saveFileDialog.Disposed += value;
        ////			}
        ////		}

        // Token: 0x06006D30 RID: 27952 RVA: 0x003DC358 File Offset: 0x003DA558
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTitleDescriptionToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ScenarioDescribe;
        ////		}

        // Token: 0x06006D31 RID: 27953 RVA: 0x003DC370 File Offset: 0x003DA570
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_29(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_81);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ScenarioDescribe;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ScenarioDescribe = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ScenarioDescribe;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D32 RID: 27954 RVA: 0x003DC3BC File Offset: 0x003DA5BC
        ////		[CompilerGenerated]
        ////		internal  Timer EventSchedulerTime()
        ////		{
        ////			return this.timer_0;
        ////		}

        // Token: 0x06006D33 RID: 27955 RVA: 0x003DC3D4 File Offset: 0x003DA5D4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_31(Timer timer_9)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_143);
        ////			Timer timer = this.timer_0;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick -= value;
        ////			}
        ////			this.timer_0 = timer_9;
        ////			timer = this.timer_0;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick += value;
        ////			}
        ////		}

        // Token: 0x06006D34 RID: 27956 RVA: 0x003DC420 File Offset: 0x003DA620
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetGoBackTSMI()
        ////		{
        ////			return this.MenuItem_ReturnTo;
        ////		}

        // Token: 0x06006D35 RID: 27957 RVA: 0x0002EAD5 File Offset: 0x0002CCD5
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_33(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_ReturnTo = toolStripMenuItem_365;
        //		}

        // Token: 0x06006D36 RID: 27958 RVA: 0x003DC438 File Offset: 0x003DA638
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSides_TSMI()
        ////		{
        ////			return this.MenuItem_NewOrEditRole;
        ////		}

        // Token: 0x06006D37 RID: 27959 RVA: 0x003DC450 File Offset: 0x003DA650
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_35(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_148);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_NewOrEditRole;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_NewOrEditRole = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_NewOrEditRole;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D38 RID: 27960 RVA: 0x003DC49C File Offset: 0x003DA69C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetExitToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_Exit;
        ////		}

        // Token: 0x06006D39 RID: 27961 RVA: 0x003DC4B4 File Offset: 0x003DA6B4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_37(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_147);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Exit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Exit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Exit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D3A RID: 27962 RVA: 0x003DC500 File Offset: 0x003DA700
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSwitchTo_TSMI()
        ////		{
        ////			return this.MenuItem_SwitchToRole;
        ////		}

        // Token: 0x06006D3B RID: 27963 RVA: 0x0002EADE File Offset: 0x0002CCDE
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_39(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_SwitchToRole = toolStripMenuItem_365;
        //		}

        // Token: 0x06006D3C RID: 27964 RVA: 0x003DC518 File Offset: 0x003DA718
        [CompilerGenerated]
        internal  ToolStripStatusLabel GetTSL_Status()
        {
        	return this.toolStripStatusLabel_0;
        }

        // Token: 0x06006D3D RID: 27965 RVA: 0x0002EAE7 File Offset: 0x0002CCE7
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_41(ToolStripStatusLabel toolStripStatusLabel_1)
        //		{
        //			this.toolStripStatusLabel_0 = toolStripStatusLabel_1;
        //		}

        // Token: 0x06006D3E RID: 27966 RVA: 0x003DC530 File Offset: 0x003DA730
        ////		[CompilerGenerated]
        ////		internal  StatusStrip vmethod_42()
        ////		{
        ////			return this.statusStrip_0;
        ////		}

        // Token: 0x06006D3F RID: 27967 RVA: 0x0002EAF0 File Offset: 0x0002CCF0
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_43(StatusStrip statusStrip_1)
        //		{
        //			this.statusStrip_0 = statusStrip_1;
        //		}

        // Token: 0x06006D40 RID: 27968 RVA: 0x003DC548 File Offset: 0x003DA748
        ////		[CompilerGenerated]
        ////		internal  ContextMenuStrip vmethod_44()
        ////		{
        ////			return this.contextMenuStrip_1;
        ////		}

        // Token: 0x06006D41 RID: 27969 RVA: 0x0002EAF9 File Offset: 0x0002CCF9
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_45(ContextMenuStrip contextMenuStrip_5)
        //		{
        //			this.contextMenuStrip_1 = contextMenuStrip_5;
        //		}

        // Token: 0x06006D42 RID: 27970 RVA: 0x003DC560 File Offset: 0x003DA760
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_Scripts()
        ////		{
        ////			return this.MenuItem_TestScript;
        ////		}

        // Token: 0x06006D43 RID: 27971 RVA: 0x0002EB02 File Offset: 0x0002CD02
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_47(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_TestScript = toolStripMenuItem_365;
        //		}

        // Token: 0x06006D44 RID: 27972 RVA: 0x003DC578 File Offset: 0x003DA778
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_48()
        ////		{
        ////			return this.MenuItem_Unit_SE_EditUnitProp;
        ////		}

        // Token: 0x06006D45 RID: 27973 RVA: 0x0002EB0B File Offset: 0x0002CD0B
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_49(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_SE_EditUnitProp = toolStripMenuItem_365;
        //		}

        // Token: 0x06006D46 RID: 27974 RVA: 0x003DC590 File Offset: 0x003DA790
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_50()
        ////		{
        ////			return this.MenuItem_Unit_SE_EUP_Magazine;
        ////		}

        // Token: 0x06006D47 RID: 27975 RVA: 0x003DC5A8 File Offset: 0x003DA7A8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_51(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_165);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SE_EUP_Magazine;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SE_EUP_Magazine = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SE_EUP_Magazine;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D48 RID: 27976 RVA: 0x003DC5F4 File Offset: 0x003DA7F4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_52()
        ////		{
        ////			return this.MenuItem_Unit_SE_EUP_AmmunitionReserve;
        ////		}

        // Token: 0x06006D49 RID: 27977 RVA: 0x0002EB14 File Offset: 0x0002CD14
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_53(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_SE_EUP_AmmunitionReserve = toolStripMenuItem_365;
        //		}

        // Token: 0x06006D4A RID: 27978 RVA: 0x003DC60C File Offset: 0x003DA80C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_54()
        ////		{
        ////			return this.MenuItem_Unit_SE_EUP_Airplane;
        ////		}

        // Token: 0x06006D4B RID: 27979 RVA: 0x0002EB1D File Offset: 0x0002CD1D
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_55(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_SE_EUP_Airplane = toolStripMenuItem_365;
        //		}

        // Token: 0x06006D4C RID: 27980 RVA: 0x003DC624 File Offset: 0x003DA824
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_56()
        ////		{
        ////			return this.MenuItem_Unit_ReturnToBase;
        ////		}

        // Token: 0x06006D4D RID: 27981 RVA: 0x003DC63C File Offset: 0x003DA83C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_57(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_164);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_ReturnToBase;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_ReturnToBase = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_ReturnToBase;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D4E RID: 27982 RVA: 0x003DC688 File Offset: 0x003DA888
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_58()
        ////		{
        ////			return this.toolStripMenuItem_19;
        ////		}

        // Token: 0x06006D4F RID: 27983 RVA: 0x0002EB26 File Offset: 0x0002CD26
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_59(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.toolStripMenuItem_19 = toolStripMenuItem_365;
        //		}

        // Token: 0x06006D50 RID: 27984 RVA: 0x003DC6A0 File Offset: 0x003DA8A0
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_60()
        ////		{
        ////			return this.MenuItem_AU_AddUnit0;
        ////		}

        // Token: 0x06006D51 RID: 27985 RVA: 0x003DC6B8 File Offset: 0x003DA8B8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_61(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_167);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AU_AddUnit0;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AU_AddUnit0 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AU_AddUnit0;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D52 RID: 27986 RVA: 0x003DC704 File Offset: 0x003DA904
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_62()
        ////		{
        ////			return this.MenuItem_AU_AddUnit1;
        ////		}

        // Token: 0x06006D53 RID: 27987 RVA: 0x003DC71C File Offset: 0x003DA91C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_63(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_168);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AU_AddUnit1;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AU_AddUnit1 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AU_AddUnit1;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D54 RID: 27988 RVA: 0x003DC768 File Offset: 0x003DA968
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_64()
        ////		{
        ////			return this.MenuItem_AU_AddUnit2;
        ////		}

        // Token: 0x06006D55 RID: 27989 RVA: 0x003DC780 File Offset: 0x003DA980
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_65(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_169);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AU_AddUnit2;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AU_AddUnit2 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AU_AddUnit2;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D56 RID: 27990 RVA: 0x003DC7CC File Offset: 0x003DA9CC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetGroupToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AU_AddUnit3;
        ////		}

        // Token: 0x06006D57 RID: 27991 RVA: 0x003DC7E4 File Offset: 0x003DA9E4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_67(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_170);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AU_AddUnit3;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AU_AddUnit3 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AU_AddUnit3;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D58 RID: 27992 RVA: 0x003DC830 File Offset: 0x003DAA30
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_68()
        ////		{
        ////			return this.MenuItem_AU_AddUnit4;
        ////		}

        // Token: 0x06006D59 RID: 27993 RVA: 0x0002EB2F File Offset: 0x0002CD2F
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_69(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_AU_AddUnit4 = toolStripMenuItem_365;
        //		}

        // Token: 0x06006D5A RID: 27994 RVA: 0x003DC848 File Offset: 0x003DAA48
        ////		[CompilerGenerated]
        ////		internal  Timer vmethod_70()
        ////		{
        ////			return this.timer_1;
        ////		}

        // Token: 0x06006D5B RID: 27995 RVA: 0x003DC860 File Offset: 0x003DAA60
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_71(Timer timer_9)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_171);
        ////			Timer timer = this.timer_1;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick -= value;
        ////			}
        ////			this.timer_1 = timer_9;
        ////			timer = this.timer_1;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick += value;
        ////			}
        ////		}

        // Token: 0x06006D5C RID: 27996 RVA: 0x003DC8AC File Offset: 0x003DAAAC
        ////		[CompilerGenerated]
        ////		internal  BackgroundWorker vmethod_72()
        ////		{
        ////			return this.backgroundWorker_0;
        ////		}

        // Token: 0x06006D5D RID: 27997 RVA: 0x003DC8C4 File Offset: 0x003DAAC4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_73(BackgroundWorker backgroundWorker_1)
        ////		{
        ////			DoWorkEventHandler value = new DoWorkEventHandler(this.method_172);
        ////			BackgroundWorker backgroundWorker = this.backgroundWorker_0;
        ////			if (backgroundWorker != null)
        ////			{
        ////				backgroundWorker.DoWork -= value;
        ////			}
        ////			this.backgroundWorker_0 = backgroundWorker_1;
        ////			backgroundWorker = this.backgroundWorker_0;
        ////			if (backgroundWorker != null)
        ////			{
        ////				backgroundWorker.DoWork += value;
        ////			}
        ////		}

        // Token: 0x06006D5E RID: 27998 RVA: 0x003DC910 File Offset: 0x003DAB10
        ////		[CompilerGenerated]
        ////		internal  Timer vmethod_74()
        ////		{
        ////			return this.timer_2;
        ////		}

        // Token: 0x06006D5F RID: 27999 RVA: 0x003DC928 File Offset: 0x003DAB28
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_75(Timer timer_9)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_176);
        ////			Timer timer = this.timer_2;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick -= value;
        ////			}
        ////			this.timer_2 = timer_9;
        ////			timer = this.timer_2;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick += value;
        ////			}
        ////		}

        // Token: 0x06006D60 RID: 28000 RVA: 0x003DC974 File Offset: 0x003DAB74
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMainToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_StartUpWindow;
        ////		}

        // Token: 0x06006D61 RID: 28001 RVA: 0x003DC98C File Offset: 0x003DAB8C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_77(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_177);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_StartUpWindow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_StartUpWindow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_StartUpWindow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D62 RID: 28002 RVA: 0x003DC9D8 File Offset: 0x003DABD8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetInstallationsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UnitImportAndExport;
        ////		}

        // Token: 0x06006D63 RID: 28003 RVA: 0x0002EB38 File Offset: 0x0002CD38
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_79(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_UnitImportAndExport = toolStripMenuItem_365;
        //		}

        // Token: 0x06006D64 RID: 28004 RVA: 0x003DC9F0 File Offset: 0x003DABF0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSaveSelectedInstallationToFileToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UIAE_SelectedUnitOrGroupSaveAsFile;
        ////		}

        // Token: 0x06006D65 RID: 28005 RVA: 0x003DCA08 File Offset: 0x003DAC08
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_81(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_178);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UIAE_SelectedUnitOrGroupSaveAsFile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UIAE_SelectedUnitOrGroupSaveAsFile = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UIAE_SelectedUnitOrGroupSaveAsFile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D66 RID: 28006 RVA: 0x003DCA54 File Offset: 0x003DAC54
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetLoadInstallationFromFileToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UIAE_LoadUnitOrGroupForFile;
        ////		}

        // Token: 0x06006D67 RID: 28007 RVA: 0x003DCA6C File Offset: 0x003DAC6C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_83(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_179);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UIAE_LoadUnitOrGroupForFile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UIAE_LoadUnitOrGroupForFile = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UIAE_LoadUnitOrGroupForFile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D68 RID: 28008 RVA: 0x003DCAB8 File Offset: 0x003DACB8
        ////		[CompilerGenerated]
        ////		internal  ImageList vmethod_84()
        ////		{
        ////			return this.imageList_0;
        ////		}

        // Token: 0x06006D69 RID: 28009 RVA: 0x0002EB41 File Offset: 0x0002CD41
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_85(ImageList imageList_1)
        //		{
        //			this.imageList_0 = imageList_1;
        //		}

        // Token: 0x06006D6A RID: 28010 RVA: 0x003DCAD0 File Offset: 0x003DACD0
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_86()
        ////		{
        ////			return this.toolStripSeparator_0;
        ////		}

        // Token: 0x06006D6B RID: 28011 RVA: 0x0002EB4A File Offset: 0x0002CD4A
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_87(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_0 = toolStripSeparator_37;
        //		}

        // Token: 0x06006D6C RID: 28012 RVA: 0x003DCAE8 File Offset: 0x003DACE8
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_88()
        ////		{
        ////			return this.toolStripSeparator_1;
        ////		}

        // Token: 0x06006D6D RID: 28013 RVA: 0x0002EB53 File Offset: 0x0002CD53
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_89(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_1 = toolStripSeparator_37;
        //		}

        // Token: 0x06006D6E RID: 28014 RVA: 0x003DCB00 File Offset: 0x003DAD00
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetBriefingToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_EditMissionBriefReport;
        ////		}

        // Token: 0x06006D6F RID: 28015 RVA: 0x003DCB18 File Offset: 0x003DAD18
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_91(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_180);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_EditMissionBriefReport;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_EditMissionBriefReport = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_EditMissionBriefReport;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D70 RID: 28016 RVA: 0x003DCB64 File Offset: 0x003DAD64
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetReportsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SimulationControl;
        ////		}

        // Token: 0x06006D71 RID: 28017 RVA: 0x003DCB7C File Offset: 0x003DAD7C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_93(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_408);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SimulationControl;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.DropDownOpening -= value;
        ////			}
        ////			this.MenuItem_SimulationControl = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SimulationControl;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.DropDownOpening += value;
        ////			}
        ////		}

        // Token: 0x06006D72 RID: 28018 RVA: 0x003DCBC8 File Offset: 0x003DADC8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetOptionsToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_Options;
        ////		}

        // Token: 0x06006D73 RID: 28019 RVA: 0x003DCBE0 File Offset: 0x003DADE0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_95(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_149);
        ////			EventHandler value2 = new EventHandler(this.method_182);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Options;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////				toolStripMenuItem.Click -= value2;
        ////			}
        ////			this.MenuItem_Options = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Options;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////				toolStripMenuItem.Click += value2;
        ////			}
        ////		}

        // Token: 0x06006D74 RID: 28020 RVA: 0x003DCC44 File Offset: 0x003DAE44
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem vmethod_96()
        ////		{
        ////			return this.toolStripMenuItem_32;
        ////		}

        // Token: 0x06006D75 RID: 28021 RVA: 0x003DCC5C File Offset: 0x003DAE5C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_97(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_181);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_32;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_32 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_32;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D76 RID: 28022 RVA: 0x003DCCA8 File Offset: 0x003DAEA8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAddRemoveAircraftToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UO_EditWarplane;
        ////		}

        // Token: 0x06006D77 RID: 28023 RVA: 0x003DCCC0 File Offset: 0x003DAEC0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_99(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_183);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UO_EditWarplane;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UO_EditWarplane = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UO_EditWarplane;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D78 RID: 28024 RVA: 0x003DCD0C File Offset: 0x003DAF0C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetGodsEyeViewToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_DirectorView;
        ////		}

        // Token: 0x06006D79 RID: 28025 RVA: 0x003DCD24 File Offset: 0x003DAF24
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_101(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_185);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DirectorView;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DirectorView = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DirectorView;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D7A RID: 28026 RVA: 0x003DCD70 File Offset: 0x003DAF70
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetLOSTerrainMaskingToolStripMenuItem()
        ////		{
        ////			return this.toolStripMenuItem_35;
        ////		}

        // Token: 0x06006D7B RID: 28027 RVA: 0x003DCD88 File Offset: 0x003DAF88
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_103(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_187);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_35;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_35 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_35;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D7C RID: 28028 RVA: 0x003DCDD4 File Offset: 0x003DAFD4
        ////		[CompilerGenerated]
        ////		internal  Timer vmethod_104()
        ////		{
        ////			return this.timer_3;
        ////		}

        // Token: 0x06006D7D RID: 28029 RVA: 0x003DCDEC File Offset: 0x003DAFEC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_105(Timer timer_9)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_200);
        ////			Timer timer = this.timer_3;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick -= value;
        ////			}
        ////			this.timer_3 = timer_9;
        ////			timer = this.timer_3;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick += value;
        ////			}
        ////		}

        // Token: 0x06006D7E RID: 28030 RVA: 0x003DCE38 File Offset: 0x003DB038
        ////		[CompilerGenerated]
        ////		internal  ToolStripButton vmethod_106()
        ////		{
        ////			return this.Button_CustomLayer;
        ////		}

        // Token: 0x06006D7F RID: 28031 RVA: 0x003DCE50 File Offset: 0x003DB050
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_107(ToolStripButton toolStripButton_4)
        ////		{
        ////			EventHandler value = new EventHandler(this.ShowCustomLayersForm);
        ////			ToolStripButton toolStripButton = this.Button_CustomLayer;
        ////			if (toolStripButton != null)
        ////			{
        ////				toolStripButton.Click -= value;
        ////			}
        ////			this.Button_CustomLayer = toolStripButton_4;
        ////			toolStripButton = this.Button_CustomLayer;
        ////			if (toolStripButton != null)
        ////			{
        ////				toolStripButton.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D80 RID: 28032 RVA: 0x003DCE9C File Offset: 0x003DB09C
        [CompilerGenerated]
        internal OpenFileDialog vmethod_108()
        {
            return this.openFileDialog_0;
        }

        // Token: 0x06006D81 RID: 28033 RVA: 0x0002EB5C File Offset: 0x0002CD5C
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_109(OpenFileDialog openFileDialog_4)
        //		{
        //			this.openFileDialog_0 = openFileDialog_4;
        //		}

        // Token: 0x06006D82 RID: 28034 RVA: 0x003DCEB4 File Offset: 0x003DB0B4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_110()
        ////		{
        ////			return this.MenuItem_About;
        ////		}

        // Token: 0x06006D83 RID: 28035 RVA: 0x003DCECC File Offset: 0x003DB0CC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_111(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_208);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_About;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_About = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_About;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D84 RID: 28036 RVA: 0x003DCF18 File Offset: 0x003DB118
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetViewToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SituationControl;
        ////		}

        // Token: 0x06006D85 RID: 28037 RVA: 0x003DCF30 File Offset: 0x003DB130
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_113(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_405);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SituationControl;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.DropDownOpening -= value;
        ////			}
        ////			this.MenuItem_SituationControl = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SituationControl;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.DropDownOpening += value;
        ////			}
        ////		}

        // Token: 0x06006D86 RID: 28038 RVA: 0x003DCF7C File Offset: 0x003DB17C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAirSensorsMenuItem()
        ////		{
        ////			return this.MenuItem_ToAirDetectRange;
        ////		}

        // Token: 0x06006D87 RID: 28039 RVA: 0x003DCF94 File Offset: 0x003DB194
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_115(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_209);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ToAirDetectRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ToAirDetectRange = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ToAirDetectRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D88 RID: 28040 RVA: 0x003DCFE0 File Offset: 0x003DB1E0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSurfaceSensorsMenuItem()
        ////		{
        ////			return this.MenuItem_ToSurfaceDetectRange;
        ////		}

        // Token: 0x06006D89 RID: 28041 RVA: 0x003DCFF8 File Offset: 0x003DB1F8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_117(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_210);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ToSurfaceDetectRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ToSurfaceDetectRange = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ToSurfaceDetectRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D8A RID: 28042 RVA: 0x003DD044 File Offset: 0x003DB244
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetUnderwaterSensorsMenuItem()
        ////		{
        ////			return this.MenuItem_ToUnderWaterDetectRange;
        ////		}

        // Token: 0x06006D8B RID: 28043 RVA: 0x003DD05C File Offset: 0x003DB25C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_119(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_211);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ToUnderWaterDetectRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ToUnderWaterDetectRange = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ToUnderWaterDetectRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D8C RID: 28044 RVA: 0x003DD0A8 File Offset: 0x003DB2A8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAirWeaponsMenuItem()
        ////		{
        ////			return this.MenuItem_ToAirAttackRange;
        ////		}

        // Token: 0x06006D8D RID: 28045 RVA: 0x003DD0C0 File Offset: 0x003DB2C0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_121(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_212);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ToAirAttackRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ToAirAttackRange = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ToAirAttackRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D8E RID: 28046 RVA: 0x003DD10C File Offset: 0x003DB30C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSurfaceWeaponsMenuItem()
        ////		{
        ////			return this.MenuItem_ToSurfaceAttackRange;
        ////		}

        // Token: 0x06006D8F RID: 28047 RVA: 0x003DD124 File Offset: 0x003DB324
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_123(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.SurfaceWeaponsToolStripMenuItem_Click);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ToSurfaceAttackRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ToSurfaceAttackRange = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ToSurfaceAttackRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D90 RID: 28048 RVA: 0x003DD170 File Offset: 0x003DB370
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetUnderwaterWeaponsMenuItem()
        ////		{
        ////			return this.MenuItem_ToUnderwaterAttackRange;
        ////		}

        // Token: 0x06006D91 RID: 28049 RVA: 0x003DD188 File Offset: 0x003DB388
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_125(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_215);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ToUnderwaterAttackRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ToUnderwaterAttackRange = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ToUnderwaterAttackRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D92 RID: 28050 RVA: 0x003DD1D4 File Offset: 0x003DB3D4
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_126()
        ////		{
        ////			return this.toolStripSeparator_2;
        ////		}

        // Token: 0x06006D93 RID: 28051 RVA: 0x0002EB65 File Offset: 0x0002CD65
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_127(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_2 = toolStripSeparator_37;
        //		}

        // Token: 0x06006D94 RID: 28052 RVA: 0x003DD1EC File Offset: 0x003DB3EC
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_128()
        ////		{
        ////			return this.MenuItem_LlluminationVectors;
        ////		}

        // Token: 0x06006D95 RID: 28053 RVA: 0x0002EB6E File Offset: 0x0002CD6E
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_129(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_LlluminationVectors = toolStripMenuItem_365;
        //		}

        // Token: 0x06006D96 RID: 28054 RVA: 0x003DD204 File Offset: 0x003DB404
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_130()
        ////		{
        ////			return this.MenuItem_LV_SelectedUnit;
        ////		}

        // Token: 0x06006D97 RID: 28055 RVA: 0x003DD21C File Offset: 0x003DB41C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_131(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_216);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_LV_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_LV_SelectedUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_LV_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D98 RID: 28056 RVA: 0x003DD268 File Offset: 0x003DB468
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_132()
        ////		{
        ////			return this.MenuItem_LV_AllUnit;
        ////		}

        // Token: 0x06006D99 RID: 28057 RVA: 0x003DD280 File Offset: 0x003DB480
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_133(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_217);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_LV_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_LV_AllUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_LV_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D9A RID: 28058 RVA: 0x003DD2CC File Offset: 0x003DB4CC
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_134()
        ////		{
        ////			return this.MenuItem_LV_NotShow;
        ////		}

        // Token: 0x06006D9B RID: 28059 RVA: 0x003DD2E4 File Offset: 0x003DB4E4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_135(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_218);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_LV_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_LV_NotShow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_LV_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006D9C RID: 28060 RVA: 0x003DD330 File Offset: 0x003DB530
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTargetingVectorsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_TargetingVectors;
        ////		}

        // Token: 0x06006D9D RID: 28061 RVA: 0x0002EB77 File Offset: 0x0002CD77
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetTargetingVectorsToolStripMenuItem(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			this.MenuItem_TargetingVectors = toolStripMenuItem_365;
        ////		}

        // Token: 0x06006D9E RID: 28062 RVA: 0x003DD348 File Offset: 0x003DB548
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_138()
        ////		{
        ////			return this.MenuItem_TV_SelectedUnit;
        ////		}

        // Token: 0x06006D9F RID: 28063 RVA: 0x003DD360 File Offset: 0x003DB560
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_139(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_219);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_TV_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_TV_SelectedUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_TV_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DA0 RID: 28064 RVA: 0x003DD3AC File Offset: 0x003DB5AC
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_140()
        ////		{
        ////			return this.MenuItem_TV_AllUnit;
        ////		}

        // Token: 0x06006DA1 RID: 28065 RVA: 0x003DD3C4 File Offset: 0x003DB5C4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_141(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_220);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_TV_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_TV_AllUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_TV_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DA2 RID: 28066 RVA: 0x003DD410 File Offset: 0x003DB610
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_142()
        ////		{
        ////			return this.MenuItem_TV_NotShow;
        ////		}

        // Token: 0x06006DA3 RID: 28067 RVA: 0x003DD428 File Offset: 0x003DB628
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_143(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_221);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_TV_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_TV_NotShow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_TV_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DA4 RID: 28068 RVA: 0x003DD474 File Offset: 0x003DB674
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDatablocksToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UnitPropVisibility;
        ////		}

        // Token: 0x06006DA5 RID: 28069 RVA: 0x0002EB80 File Offset: 0x0002CD80
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_145(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_UnitPropVisibility = toolStripMenuItem_365;
        //		}

        // Token: 0x06006DA6 RID: 28070 RVA: 0x003DD48C File Offset: 0x003DB68C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_146()
        ////		{
        ////			return this.MenuItem_DataLink;
        ////		}

        // Token: 0x06006DA7 RID: 28071 RVA: 0x0002EB89 File Offset: 0x0002CD89
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_147(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_DataLink = toolStripMenuItem_365;
        //		}

        // Token: 0x06006DA8 RID: 28072 RVA: 0x003DD4A4 File Offset: 0x003DB6A4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_148()
        ////		{
        ////			return this.MenuItem_UPV_SelectedUnit;
        ////		}

        // Token: 0x06006DA9 RID: 28073 RVA: 0x003DD4BC File Offset: 0x003DB6BC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_149(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_222);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UPV_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UPV_SelectedUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UPV_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DAA RID: 28074 RVA: 0x003DD508 File Offset: 0x003DB708
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_150()
        ////		{
        ////			return this.MenuItem_UPV_AllUnit;
        ////		}

        // Token: 0x06006DAB RID: 28075 RVA: 0x003DD520 File Offset: 0x003DB720
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_151(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_223);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UPV_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UPV_AllUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UPV_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DAC RID: 28076 RVA: 0x003DD56C File Offset: 0x003DB76C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_152()
        ////		{
        ////			return this.MenuItem_UPV_NotShow;
        ////		}

        // Token: 0x06006DAD RID: 28077 RVA: 0x003DD584 File Offset: 0x003DB784
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_153(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_224);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UPV_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UPV_NotShow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UPV_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DAE RID: 28078 RVA: 0x003DD5D0 File Offset: 0x003DB7D0
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_154()
        ////		{
        ////			return this.MenuItem_DL_SelectedUnit;
        ////		}

        // Token: 0x06006DAF RID: 28079 RVA: 0x003DD5E8 File Offset: 0x003DB7E8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_155(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_225);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DL_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DL_SelectedUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DL_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DB0 RID: 28080 RVA: 0x003DD634 File Offset: 0x003DB834
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_156()
        ////		{
        ////			return this.MenuItem_DL_AllUnit;
        ////		}

        // Token: 0x06006DB1 RID: 28081 RVA: 0x003DD64C File Offset: 0x003DB84C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_157(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_226);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DL_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DL_AllUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DL_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DB2 RID: 28082 RVA: 0x003DD698 File Offset: 0x003DB898
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_158()
        ////		{
        ////			return this.MenuItem_DL_NotShow;
        ////		}

        // Token: 0x06006DB3 RID: 28083 RVA: 0x003DD6B0 File Offset: 0x003DB8B0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_159(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_227);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DL_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DL_NotShow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DL_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DB4 RID: 28084 RVA: 0x003DD6FC File Offset: 0x003DB8FC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_Recorder()
        ////		{
        ////			return this.MenuItem_TSMI_Recorder;
        ////		}

        // Token: 0x06006DB5 RID: 28085 RVA: 0x003DD714 File Offset: 0x003DB914
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetTSMI_Recorder(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.TSMI_Recorder_Click);
        ////			ToolStripMenuItem MenuItem_TSMI_Recorder = this.MenuItem_TSMI_Recorder;
        ////			if (MenuItem_TSMI_Recorder != null)
        ////			{
        ////				MenuItem_TSMI_Recorder.Click -= value;
        ////			}
        ////			this.MenuItem_TSMI_Recorder = toolStripMenuItem_365;
        ////			MenuItem_TSMI_Recorder = this.MenuItem_TSMI_Recorder;
        ////			if (MenuItem_TSMI_Recorder != null)
        ////			{
        ////				MenuItem_TSMI_Recorder.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DB6 RID: 28086 RVA: 0x003DD760 File Offset: 0x003DB960
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_Testing()
        ////		{
        ////			return this.toolStripMenuItem_61;
        ////		}

        // Token: 0x06006DB7 RID: 28087 RVA: 0x0002EB92 File Offset: 0x0002CD92
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_163(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.toolStripMenuItem_61 = toolStripMenuItem_365;
        //		}

        // Token: 0x06006DB8 RID: 28088 RVA: 0x003DD778 File Offset: 0x003DB978
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetRegressionTestsToolStripMenuItem()
        ////		{
        ////			return this.toolStripMenuItem_62;
        ////		}

        // Token: 0x06006DB9 RID: 28089 RVA: 0x003DD790 File Offset: 0x003DB990
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_165(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_233);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_62;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_62 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_62;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DBA RID: 28090 RVA: 0x003DD7DC File Offset: 0x003DB9DC
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_166()
        ////		{
        ////			return this.toolStripMenuItem_63;
        ////		}

        // Token: 0x06006DBB RID: 28091 RVA: 0x003DD7F4 File Offset: 0x003DB9F4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_167(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_234);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_63;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_63 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_63;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DBC RID: 28092 RVA: 0x003DD840 File Offset: 0x003DBA40
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetScenarioMigrationTSMI()
        ////		{
        ////			return this.MenuItem_ScenarioMigration;
        ////		}

        // Token: 0x06006DBD RID: 28093 RVA: 0x0002EB9B File Offset: 0x0002CD9B
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_169(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_ScenarioMigration = toolStripMenuItem_365;
        //		}

        // Token: 0x06006DBE RID: 28094 RVA: 0x003DD858 File Offset: 0x003DBA58
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetExportToToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SM_ExportToFile;
        ////		}

        // Token: 0x06006DBF RID: 28095 RVA: 0x003DD870 File Offset: 0x003DBA70
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_171(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_235);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SM_ExportToFile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SM_ExportToFile = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SM_ExportToFile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DC0 RID: 28096 RVA: 0x003DD8BC File Offset: 0x003DBABC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetImportFromTestExportxmlToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SM_ImportForFile;
        ////		}

        // Token: 0x06006DC1 RID: 28097 RVA: 0x003DD8D4 File Offset: 0x003DBAD4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_173(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_236);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SM_ImportForFile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SM_ImportForFile = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SM_ImportForFile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DC2 RID: 28098 RVA: 0x003DD920 File Offset: 0x003DBB20
        ////		[CompilerGenerated]
        ////		internal  OpenFileDialog vmethod_174()
        ////		{
        ////			return this.openFileDialog_1;
        ////		}

        // Token: 0x06006DC3 RID: 28099 RVA: 0x0002EBA4 File Offset: 0x0002CDA4
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_175(OpenFileDialog openFileDialog_4)
        //		{
        //			this.openFileDialog_1 = openFileDialog_4;
        //		}

        // Token: 0x06006DC4 RID: 28100 RVA: 0x003DD938 File Offset: 0x003DBB38
        ////		[CompilerGenerated]
        ////		internal  SaveFileDialog vmethod_176()
        ////		{
        ////			return this.saveFileDialog_1;
        ////		}

        // Token: 0x06006DC5 RID: 28101 RVA: 0x0002EBAD File Offset: 0x0002CDAD
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_177(SaveFileDialog saveFileDialog_3)
        //		{
        //			this.saveFileDialog_1 = saveFileDialog_3;
        //		}

        // Token: 0x06006DC6 RID: 28102 RVA: 0x003DD950 File Offset: 0x003DBB50
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_178()
        ////		{
        ////			return this.toolStripSeparator_3;
        ////		}

        // Token: 0x06006DC7 RID: 28103 RVA: 0x0002EBB6 File Offset: 0x0002CDB6
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_179(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_3 = toolStripSeparator_37;
        //		}

        // Token: 0x06006DC8 RID: 28104 RVA: 0x003DD968 File Offset: 0x003DBB68
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMissionsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_MissionAndReferencePoint;
        ////		}

        // Token: 0x06006DC9 RID: 28105 RVA: 0x003DD980 File Offset: 0x003DBB80
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_181(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_251);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MissionAndReferencePoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.MouseEnter -= value;
        ////			}
        ////			this.MenuItem_MissionAndReferencePoint = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MissionAndReferencePoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.MouseEnter += value;
        ////			}
        ////		}

        // Token: 0x06006DCA RID: 28106 RVA: 0x003DD9CC File Offset: 0x003DBBCC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAddNewMissionToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_NewMission;
        ////		}

        // Token: 0x06006DCB RID: 28107 RVA: 0x003DD9E4 File Offset: 0x003DBBE4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_183(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_239);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_NewMission;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_NewMission = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_NewMission;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DCC RID: 28108 RVA: 0x003DDA30 File Offset: 0x003DBC30
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMissionEditorToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_MissionEditor;
        ////		}

        // Token: 0x06006DCD RID: 28109 RVA: 0x003DDA48 File Offset: 0x003DBC48
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_185(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_237);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MissionEditor;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_MissionEditor = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MissionEditor;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DCE RID: 28110 RVA: 0x003DDA94 File Offset: 0x003DBC94
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_186()
        ////		{
        ////			return this.toolStripSeparator_4;
        ////		}

        // Token: 0x06006DCF RID: 28111 RVA: 0x0002EBBF File Offset: 0x0002CDBF
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_187(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_4 = toolStripSeparator_37;
        //		}

        // Token: 0x06006DD0 RID: 28112 RVA: 0x003DDAAC File Offset: 0x003DBCAC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetKillAllUnitsofThisSideToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_DeleteOurSideAllUnit;
        ////		}

        // Token: 0x06006DD1 RID: 28113 RVA: 0x003DDAC4 File Offset: 0x003DBCC4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_189(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_238);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DeleteOurSideAllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DeleteOurSideAllUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DeleteOurSideAllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DD2 RID: 28114 RVA: 0x003DDB10 File Offset: 0x003DBD10
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_EditScoring()
        ////		{
        ////			return this.MenuItem_EditScoreRules;
        ////		}

        // Token: 0x06006DD3 RID: 28115 RVA: 0x003DDB28 File Offset: 0x003DBD28
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_191(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_347);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_EditScoreRules;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_EditScoreRules = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_EditScoreRules;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DD4 RID: 28116 RVA: 0x003DDB74 File Offset: 0x003DBD74
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_192()
        ////		{
        ////			return this.MenuItem_Unit_SelectNewBase;
        ////		}

        // Token: 0x06006DD5 RID: 28117 RVA: 0x003DDB8C File Offset: 0x003DBD8C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_193(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_240);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SelectNewBase;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SelectNewBase = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SelectNewBase;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DD6 RID: 28118 RVA: 0x003DDBD8 File Offset: 0x003DBDD8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetScenToXMLToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SM_TransformToXML;
        ////		}

        // Token: 0x06006DD7 RID: 28119 RVA: 0x003DDBF0 File Offset: 0x003DBDF0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_195(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_241);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SM_TransformToXML;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SM_TransformToXML = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SM_TransformToXML;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DD8 RID: 28120 RVA: 0x003DDC3C File Offset: 0x003DBE3C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAddReferencePointToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AddReferencePoint;
        ////		}

        // Token: 0x06006DD9 RID: 28121 RVA: 0x003DDC54 File Offset: 0x003DBE54
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_197(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_243);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AddReferencePoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AddReferencePoint = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AddReferencePoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DDA RID: 28122 RVA: 0x003DDCA0 File Offset: 0x003DBEA0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDeleteSelectedRefPointsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_DeleteSelectedRefPoint;
        ////		}

        // Token: 0x06006DDB RID: 28123 RVA: 0x003DDCB8 File Offset: 0x003DBEB8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_199(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_244);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DeleteSelectedRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DeleteSelectedRefPoint = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DeleteSelectedRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DDC RID: 28124 RVA: 0x003DDD04 File Offset: 0x003DBF04
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMessageLogToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_MessageOutput;
        ////		}

        // Token: 0x06006DDD RID: 28125 RVA: 0x0002EBC8 File Offset: 0x0002CDC8
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_201(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_MessageOutput = toolStripMenuItem_365;
        //		}

        // Token: 0x06006DDE RID: 28126 RVA: 0x003DDD1C File Offset: 0x003DBF1C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetClearToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ClearMessageLog;
        ////		}

        // Token: 0x06006DDF RID: 28127 RVA: 0x003DDD34 File Offset: 0x003DBF34
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_203(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_246);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ClearMessageLog;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ClearMessageLog = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ClearMessageLog;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DE0 RID: 28128 RVA: 0x003DDD80 File Offset: 0x003DBF80
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetPrintToFileToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_PrintToFile;
        ////		}

        // Token: 0x06006DE1 RID: 28129 RVA: 0x003DDD98 File Offset: 0x003DBF98
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_205(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_247);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_PrintToFile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_PrintToFile = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_PrintToFile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DE2 RID: 28130 RVA: 0x003DDDE4 File Offset: 0x003DBFE4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_206()
        ////		{
        ////			return this.MenuItem_AU_AddRefPoint;
        ////		}

        // Token: 0x06006DE3 RID: 28131 RVA: 0x003DDDFC File Offset: 0x003DBFFC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_207(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_248);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AU_AddRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AU_AddRefPoint = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AU_AddRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DE4 RID: 28132 RVA: 0x003DDE48 File Offset: 0x003DC048
        ////		[CompilerGenerated]
        ////		internal  ContextMenuStrip vmethod_208()
        ////		{
        ////			return this.contextMenuStrip_2;
        ////		}

        // Token: 0x06006DE5 RID: 28133 RVA: 0x0002EBD1 File Offset: 0x0002CDD1
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_209(ContextMenuStrip contextMenuStrip_5)
        //		{
        //			this.contextMenuStrip_2 = contextMenuStrip_5;
        //		}

        // Token: 0x06006DE6 RID: 28134 RVA: 0x003DDE60 File Offset: 0x003DC060
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_210()
        ////		{
        ////			return this.MenuItem_ScenarioDescribe0;
        ////		}

        // Token: 0x06006DE7 RID: 28135 RVA: 0x003DDE78 File Offset: 0x003DC078
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_211(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_249);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ScenarioDescribe0;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ScenarioDescribe0 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ScenarioDescribe0;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DE8 RID: 28136 RVA: 0x003DDEC4 File Offset: 0x003DC0C4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_212()
        ////		{
        ////			return this.MenuItem_ScenarioDescribe1;
        ////		}

        // Token: 0x06006DE9 RID: 28137 RVA: 0x0002EBDA File Offset: 0x0002CDDA
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_213(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_ScenarioDescribe1 = toolStripMenuItem_365;
        //		}

        // Token: 0x06006DEA RID: 28138 RVA: 0x003DDEDC File Offset: 0x003DC0DC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMakeSelectedRfPointsRelativeToToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_RelativeSelectedRefPoint_FixedBearing;
        ////		}

        // Token: 0x06006DEB RID: 28139 RVA: 0x003DDEF4 File Offset: 0x003DC0F4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_215(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_250);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_RelativeSelectedRefPoint_FixedBearing;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_RelativeSelectedRefPoint_FixedBearing = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_RelativeSelectedRefPoint_FixedBearing;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DEC RID: 28140 RVA: 0x003DDF40 File Offset: 0x003DC140
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_UnitIsAutodetectable()
        ////		{
        ////			return this.MenuItem_Unit_SE_AutoDetectedUnit;
        ////		}

        // Token: 0x06006DED RID: 28141 RVA: 0x003DDF58 File Offset: 0x003DC158
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_217(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_252);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SE_AutoDetectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SE_AutoDetectedUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SE_AutoDetectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DEE RID: 28142 RVA: 0x003DDFA4 File Offset: 0x003DC1A4
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_218()
        ////		{
        ////			return this.toolStripSeparator_5;
        ////		}

        // Token: 0x06006DEF RID: 28143 RVA: 0x0002EBE3 File Offset: 0x0002CDE3
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_219(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_5 = toolStripSeparator_37;
        //		}

        // Token: 0x06006DF0 RID: 28144 RVA: 0x003DDFBC File Offset: 0x003DC1BC
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_220()
        ////		{
        ////			return this.MenuItem_Unit_Doctrine_RoE_EMCON;
        ////		}

        // Token: 0x06006DF1 RID: 28145 RVA: 0x003DDFD4 File Offset: 0x003DC1D4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_221(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_255);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_Doctrine_RoE_EMCON;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_Doctrine_RoE_EMCON = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_Doctrine_RoE_EMCON;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DF2 RID: 28146 RVA: 0x003DE020 File Offset: 0x003DC220
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_SetOrientation()
        ////		{
        ////			return this.MenuItem_Unit_SE_SetBearing;
        ////		}

        // Token: 0x06006DF3 RID: 28147 RVA: 0x003DE038 File Offset: 0x003DC238
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_223(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_256);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SE_SetBearing;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SE_SetBearing = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SE_SetBearing;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DF4 RID: 28148 RVA: 0x003DE084 File Offset: 0x003DC284
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_224()
        ////		{
        ////			return this.toolStripSeparator_6;
        ////		}

        // Token: 0x06006DF5 RID: 28149 RVA: 0x0002EBEC File Offset: 0x0002CDEC
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_225(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_6 = toolStripSeparator_37;
        //		}

        // Token: 0x06006DF6 RID: 28150 RVA: 0x003DE09C File Offset: 0x003DC29C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetLossesExpendituresToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_LossesAndExpenditures;
        ////		}

        // Token: 0x06006DF7 RID: 28151 RVA: 0x003DE0B4 File Offset: 0x003DC2B4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_227(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_265);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_LossesAndExpenditures;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_LossesAndExpenditures = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_LossesAndExpenditures;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DF8 RID: 28152 RVA: 0x003DE100 File Offset: 0x003DC300
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetStartDurationToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ScenarioTime;
        ////		}

        // Token: 0x06006DF9 RID: 28153 RVA: 0x003DE118 File Offset: 0x003DC318
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_229(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_266);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ScenarioTime;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ScenarioTime = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ScenarioTime;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DFA RID: 28154 RVA: 0x003DE164 File Offset: 0x003DC364
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetViewCurrentScoreToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_Score;
        ////		}

        // Token: 0x06006DFB RID: 28155 RVA: 0x003DE17C File Offset: 0x003DC37C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_231(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_267);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Score;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Score = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Score;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DFC RID: 28156 RVA: 0x003DE1C8 File Offset: 0x003DC3C8
        [CompilerGenerated]
        internal ToolStripButton GetTSB_Record()
        {
            return this.Button_VideoRecord;
        }

        // Token: 0x06006DFD RID: 28157 RVA: 0x003DE1E0 File Offset: 0x003DC3E0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetTSB_Record(ToolStripButton toolStripButton_4)
        ////		{
        ////			EventHandler value = new EventHandler(this.TSB_Record_Click);
        ////			ToolStripButton Button_VideoRecord = this.Button_VideoRecord;
        ////			if (Button_VideoRecord != null)
        ////			{
        ////				Button_VideoRecord.Click -= value;
        ////			}
        ////			this.Button_VideoRecord = toolStripButton_4;
        ////			Button_VideoRecord = this.Button_VideoRecord;
        ////			if (Button_VideoRecord != null)
        ////			{
        ////				Button_VideoRecord.Click += value;
        ////			}
        ////		}

        // Token: 0x06006DFE RID: 28158 RVA: 0x003DE22C File Offset: 0x003DC42C
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_234()
        ////		{
        ////			return this.toolStripSeparator_7;
        ////		}

        // Token: 0x06006DFF RID: 28159 RVA: 0x0002EBF5 File Offset: 0x0002CDF5
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_235(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_7 = toolStripSeparator_37;
        //		}

        // Token: 0x06006E00 RID: 28160 RVA: 0x003DE244 File Offset: 0x003DC444
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_236()
        ////		{
        ////			return this.toolStripSeparator_8;
        ////		}

        // Token: 0x06006E01 RID: 28161 RVA: 0x0002EBFE File Offset: 0x0002CDFE
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_237(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_8 = toolStripSeparator_37;
        //		}

        // Token: 0x06006E02 RID: 28162 RVA: 0x003DE25C File Offset: 0x003DC45C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSBRToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SpecialAction;
        ////		}

        // Token: 0x06006E03 RID: 28163 RVA: 0x0002EC07 File Offset: 0x0002CE07
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_239(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_SpecialAction = toolStripMenuItem_365;
        //		}

        // Token: 0x06006E04 RID: 28164 RVA: 0x003DE274 File Offset: 0x003DC474
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetGenerateTemplateToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SA_CreateTemplate;
        ////		}

        // Token: 0x06006E05 RID: 28165 RVA: 0x003DE28C File Offset: 0x003DC48C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_241(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_270);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SA_CreateTemplate;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SA_CreateTemplate = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SA_CreateTemplate;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E06 RID: 28166 RVA: 0x003DE2D8 File Offset: 0x003DC4D8
        ////		[CompilerGenerated]
        ////		internal  SaveFileDialog vmethod_242()
        ////		{
        ////			return this.saveFileDialog_2;
        ////		}

        // Token: 0x06006E07 RID: 28167 RVA: 0x0002EC10 File Offset: 0x0002CE10
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_243(SaveFileDialog saveFileDialog_3)
        //		{
        //			this.saveFileDialog_2 = saveFileDialog_3;
        //		}

        // Token: 0x06006E08 RID: 28168 RVA: 0x003DE2F0 File Offset: 0x003DC4F0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetApplySBRScriptToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SA_UseSpecialEventScript;
        ////		}

        // Token: 0x06006E09 RID: 28169 RVA: 0x003DE308 File Offset: 0x003DC508
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_245(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_271);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SA_UseSpecialEventScript;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SA_UseSpecialEventScript = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SA_UseSpecialEventScript;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E0A RID: 28170 RVA: 0x003DE354 File Offset: 0x003DC554
        ////		[CompilerGenerated]
        ////		internal  OpenFileDialog vmethod_246()
        ////		{
        ////			return this.openFileDialog_2;
        ////		}

        // Token: 0x06006E0B RID: 28171 RVA: 0x0002EC19 File Offset: 0x0002CE19
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_247(OpenFileDialog openFileDialog_4)
        //		{
        //			this.openFileDialog_2 = openFileDialog_4;
        //		}

        // Token: 0x06006E0C RID: 28172 RVA: 0x003DE36C File Offset: 0x003DC56C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMinefieldsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_TorpedoArea;
        ////		}

        // Token: 0x06006E0D RID: 28173 RVA: 0x0002EC22 File Offset: 0x0002CE22
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_249(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_TorpedoArea = toolStripMenuItem_365;
        //		}

        // Token: 0x06006E0E RID: 28174 RVA: 0x003DE384 File Offset: 0x003DC584
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetCreateMinefieldFromDesignatedAreaToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_TA_DesignatedAreaMine;
        ////		}

        // Token: 0x06006E0F RID: 28175 RVA: 0x003DE39C File Offset: 0x003DC59C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_251(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_272);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_TA_DesignatedAreaMine;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_TA_DesignatedAreaMine = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_TA_DesignatedAreaMine;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E10 RID: 28176 RVA: 0x003DE3E8 File Offset: 0x003DC5E8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetRemoveMinesFromDesignatedAreaToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_TA_DesignatedAreaMineClearance;
        ////		}

        // Token: 0x06006E11 RID: 28177 RVA: 0x003DE400 File Offset: 0x003DC600
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_253(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_273);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_TA_DesignatedAreaMineClearance;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_TA_DesignatedAreaMineClearance = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_TA_DesignatedAreaMineClearance;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E12 RID: 28178 RVA: 0x003DE44C File Offset: 0x003DC64C
        ////		[CompilerGenerated]
        ////		internal  Button vmethod_254()
        ////		{
        ////			return this.button_0;
        ////		}

        // Token: 0x06006E13 RID: 28179 RVA: 0x003DE464 File Offset: 0x003DC664
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_255(Button button_1)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_294);
        ////			Button button = this.button_0;
        ////			if (button != null)
        ////			{
        ////				button.Click -= value;
        ////			}
        ////			this.button_0 = button_1;
        ////			button = this.button_0;
        ////			if (button != null)
        ////			{
        ////				button.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E14 RID: 28180 RVA: 0x003DE4B0 File Offset: 0x003DC6B0
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_256()
        ////		{
        ////			return this.MenuItem_Unit_AirRefuel;
        ////		}

        // Token: 0x06006E15 RID: 28181 RVA: 0x0002EC2B File Offset: 0x0002CE2B
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_257(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_AirRefuel = toolStripMenuItem_365;
        //		}

        // Token: 0x06006E16 RID: 28182 RVA: 0x003DE4C8 File Offset: 0x003DC6C8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetUnitOrdersToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UnitOrder;
        ////		}

        // Token: 0x06006E17 RID: 28183 RVA: 0x003DE4E0 File Offset: 0x003DC6E0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_259(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_406);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UnitOrder;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.DropDownOpening -= value;
        ////			}
        ////			this.MenuItem_UnitOrder = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UnitOrder;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.DropDownOpening += value;
        ////			}
        ////		}

        // Token: 0x06006E18 RID: 28184 RVA: 0x003DE52C File Offset: 0x003DC72C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetThrottleAltitudeToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ThrottleAltOrDeep;
        ////		}

        // Token: 0x06006E19 RID: 28185 RVA: 0x003DE544 File Offset: 0x003DC744
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_261(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_297);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ThrottleAltOrDeep;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ThrottleAltOrDeep = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ThrottleAltOrDeep;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E1A RID: 28186 RVA: 0x003DE590 File Offset: 0x003DC790
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetPlotCourseToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_PlotCourse;
        ////		}

        // Token: 0x06006E1B RID: 28187 RVA: 0x003DE5A8 File Offset: 0x003DC7A8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_263(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_298);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_PlotCourse;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_PlotCourse = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_PlotCourse;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E1C RID: 28188 RVA: 0x003DE5F4 File Offset: 0x003DC7F4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAirOpsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AirOperations;
        ////		}

        // Token: 0x06006E1D RID: 28189 RVA: 0x003DE60C File Offset: 0x003DC80C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_265(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_311);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AirOperations;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AirOperations = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AirOperations;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E1E RID: 28190 RVA: 0x003DE658 File Offset: 0x003DC858
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetWeaponsToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_WeaponStatus;
        ////		}

        // Token: 0x06006E1F RID: 28191 RVA: 0x003DE670 File Offset: 0x003DC870
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_267(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_301);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_WeaponStatus;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_WeaponStatus = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_WeaponStatus;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E20 RID: 28192 RVA: 0x003DE6BC File Offset: 0x003DC8BC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMagazinesToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_Magazines;
        ////		}

        // Token: 0x06006E21 RID: 28193 RVA: 0x003DE6D4 File Offset: 0x003DC8D4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_269(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_312);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Magazines;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Magazines = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Magazines;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E22 RID: 28194 RVA: 0x003DE720 File Offset: 0x003DC920
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSensorsToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_SensorsStatus;
        ////		}

        // Token: 0x06006E23 RID: 28195 RVA: 0x003DE738 File Offset: 0x003DC938
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_271(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_300);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SensorsStatus;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SensorsStatus = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SensorsStatus;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E24 RID: 28196 RVA: 0x003DE784 File Offset: 0x003DC984
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDamageControlToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SystemDamageStatus;
        ////		}

        // Token: 0x06006E25 RID: 28197 RVA: 0x003DE79C File Offset: 0x003DC99C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_273(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_299);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SystemDamageStatus;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SystemDamageStatus = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SystemDamageStatus;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E26 RID: 28198 RVA: 0x003DE7E8 File Offset: 0x003DC9E8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetEditFormationToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_GO_GroupEditor;
        ////		}

        // Token: 0x06006E27 RID: 28199 RVA: 0x003DE800 File Offset: 0x003DCA00
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_275(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_302);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_GO_GroupEditor;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_GO_GroupEditor = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_GO_GroupEditor;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E28 RID: 28200 RVA: 0x003DE84C File Offset: 0x003DCA4C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetEventEditorToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_EventEditor;
        ////		}

        // Token: 0x06006E29 RID: 28201 RVA: 0x0002EC34 File Offset: 0x0002CE34
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_277(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_EventEditor = toolStripMenuItem_365;
        //		}

        // Token: 0x06006E2A RID: 28202 RVA: 0x003DE864 File Offset: 0x003DCA64
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetEventsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_EE_Event;
        ////		}

        // Token: 0x06006E2B RID: 28203 RVA: 0x003DE87C File Offset: 0x003DCA7C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_279(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_305);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_EE_Event;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_EE_Event = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_EE_Event;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E2C RID: 28204 RVA: 0x003DE8C8 File Offset: 0x003DCAC8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTriggersToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_EE_Trigger;
        ////		}

        // Token: 0x06006E2D RID: 28205 RVA: 0x003DE8E0 File Offset: 0x003DCAE0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_281(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_304);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_EE_Trigger;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_EE_Trigger = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_EE_Trigger;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E2E RID: 28206 RVA: 0x003DE92C File Offset: 0x003DCB2C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetActionsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_EE_Action;
        ////		}

        // Token: 0x06006E2F RID: 28207 RVA: 0x003DE944 File Offset: 0x003DCB44
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_283(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_306);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_EE_Action;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_EE_Action = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_EE_Action;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E30 RID: 28208 RVA: 0x003DE990 File Offset: 0x003DCB90
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetConditionsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_EE_Condition;
        ////		}

        // Token: 0x06006E31 RID: 28209 RVA: 0x003DE9A8 File Offset: 0x003DCBA8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_285(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_362);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_EE_Condition;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_EE_Condition = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_EE_Condition;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E32 RID: 28210 RVA: 0x003DE9F4 File Offset: 0x003DCBF4
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_286()
        ////		{
        ////			return this.toolStripSeparator_9;
        ////		}

        // Token: 0x06006E33 RID: 28211 RVA: 0x0002EC3D File Offset: 0x0002CE3D
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_287(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_9 = toolStripSeparator_37;
        //		}

        // Token: 0x06006E34 RID: 28212 RVA: 0x003DEA0C File Offset: 0x003DCC0C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetWeatherToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_Weather;
        ////		}

        // Token: 0x06006E35 RID: 28213 RVA: 0x003DEA24 File Offset: 0x003DCC24
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_289(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_307);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Weather;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Weather = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Weather;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E36 RID: 28214 RVA: 0x003DEA70 File Offset: 0x003DCC70
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetEditDockedBoatsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UO_EditBerthedBoats;
        ////		}

        // Token: 0x06006E37 RID: 28215 RVA: 0x003DEA88 File Offset: 0x003DCC88
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_291(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_308);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UO_EditBerthedBoats;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UO_EditBerthedBoats = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UO_EditBerthedBoats;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E38 RID: 28216 RVA: 0x003DEAD4 File Offset: 0x003DCCD4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMergeRangesymbolsMenuItem()
        ////		{
        ////			return this.MenuItem_MergeShowRange;
        ////		}

        // Token: 0x06006E39 RID: 28217 RVA: 0x003DEAEC File Offset: 0x003DCCEC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_293(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_310);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MergeShowRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_MergeShowRange = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MergeShowRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E3A RID: 28218 RVA: 0x003DEB38 File Offset: 0x003DCD38
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_294()
        ////		{
        ////			return this.toolStripSeparator_10;
        ////		}

        // Token: 0x06006E3B RID: 28219 RVA: 0x0002EC46 File Offset: 0x0002CE46
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_295(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_10 = toolStripSeparator_37;
        //		}

        // Token: 0x06006E3C RID: 28220 RVA: 0x003DEB50 File Offset: 0x003DCD50
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDockingOpsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_BoatDockingOperations;
        ////		}

        // Token: 0x06006E3D RID: 28221 RVA: 0x003DEB68 File Offset: 0x003DCD68
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_297(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_313);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_BoatDockingOperations;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_BoatDockingOperations = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_BoatDockingOperations;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E3E RID: 28222 RVA: 0x003DEBB4 File Offset: 0x003DCDB4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetScenarioBriefingToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_MissileBriefReport;
        ////		}

        // Token: 0x06006E3F RID: 28223 RVA: 0x003DEBCC File Offset: 0x003DCDCC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_299(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_314);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MissileBriefReport;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_MissileBriefReport = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MissileBriefReport;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E40 RID: 28224 RVA: 0x003DEC18 File Offset: 0x003DCE18
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMenuItem_Unit_AssignMissionToUnit()
        ////		{
        ////			return this.MenuItem_Unit_AssignMissionToUnit;
        ////		}

        // Token: 0x06006E41 RID: 28225 RVA: 0x0002EC4F File Offset: 0x0002CE4F
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetMenuItem_Unit_AssignMissionToUnit(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			this.MenuItem_Unit_AssignMissionToUnit = toolStripMenuItem_365;
        ////		}

        // Token: 0x06006E42 RID: 28226 RVA: 0x003DEC30 File Offset: 0x003DCE30
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDefineAreaToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AU_DefineArea;
        ////		}

        // Token: 0x06006E43 RID: 28227 RVA: 0x003DEC48 File Offset: 0x003DCE48
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_303(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_315);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AU_DefineArea;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AU_DefineArea = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AU_DefineArea;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E44 RID: 28228 RVA: 0x003DEC94 File Offset: 0x003DCE94
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAddSatelliteToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UO_AddSatellite;
        ////		}

        // Token: 0x06006E45 RID: 28229 RVA: 0x003DECAC File Offset: 0x003DCEAC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_305(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_316);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UO_AddSatellite;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UO_AddSatellite = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UO_AddSatellite;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E46 RID: 28230 RVA: 0x003DECF8 File Offset: 0x003DCEF8
        ////		[CompilerGenerated]
        ////		internal  CheckBox vmethod_306()
        ////		{
        ////			return this.checkBox_0;
        ////		}

        // Token: 0x06006E47 RID: 28231 RVA: 0x0002EC58 File Offset: 0x0002CE58
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_307(CheckBox checkBox_1)
        //		{
        //			this.checkBox_0 = checkBox_1;
        //		}

        // Token: 0x06006E48 RID: 28232 RVA: 0x003DED10 File Offset: 0x003DCF10
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_308()
        ////		{
        ////			return this.MenuItem_Unit_AttackOptions;
        ////		}

        // Token: 0x06006E49 RID: 28233 RVA: 0x0002EC61 File Offset: 0x0002CE61
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_309(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_AttackOptions = toolStripMenuItem_365;
        //		}

        // Token: 0x06006E4A RID: 28234 RVA: 0x003DED28 File Offset: 0x003DCF28
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_310()
        ////		{
        ////			return this.MenuItem_Unit_AO_DropTarget;
        ////		}

        // Token: 0x06006E4B RID: 28235 RVA: 0x003DED40 File Offset: 0x003DCF40
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_311(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_331);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_DropTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_DropTarget = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_DropTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E4C RID: 28236 RVA: 0x003DED8C File Offset: 0x003DCF8C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_312()
        ////		{
        ////			return this.MenuItem_Unit_AO_DropAllTarget;
        ////		}

        // Token: 0x06006E4D RID: 28237 RVA: 0x003DEDA4 File Offset: 0x003DCFA4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_313(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_332);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_DropAllTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_DropAllTarget = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_DropAllTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E4E RID: 28238 RVA: 0x003DEDF0 File Offset: 0x003DCFF0
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_314()
        ////		{
        ////			return this.MenuItem_Unit_ThrottleAltOrDeep;
        ////		}

        // Token: 0x06006E4F RID: 28239 RVA: 0x003DEE08 File Offset: 0x003DD008
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_315(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_333);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_ThrottleAltOrDeep;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_ThrottleAltOrDeep = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_ThrottleAltOrDeep;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E50 RID: 28240 RVA: 0x003DEE54 File Offset: 0x003DD054
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_316()
        ////		{
        ////			return this.MenuItem_Unit_PlotCourse;
        ////		}

        // Token: 0x06006E51 RID: 28241 RVA: 0x003DEE6C File Offset: 0x003DD06C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_317(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_323);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_PlotCourse;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_PlotCourse = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_PlotCourse;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E52 RID: 28242 RVA: 0x003DEEB8 File Offset: 0x003DD0B8
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_318()
        ////		{
        ////			return this.MenuItem_Unit_GO_GroupEditor;
        ////		}

        // Token: 0x06006E53 RID: 28243 RVA: 0x003DEED0 File Offset: 0x003DD0D0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_319(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_334);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_GO_GroupEditor;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_GO_GroupEditor = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_GO_GroupEditor;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E54 RID: 28244 RVA: 0x003DEF1C File Offset: 0x003DD11C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_320()
        ////		{
        ////			return this.MenuItem_Unit_AirOperations;
        ////		}

        // Token: 0x06006E55 RID: 28245 RVA: 0x003DEF34 File Offset: 0x003DD134
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_321(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_336);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AirOperations;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AirOperations = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AirOperations;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E56 RID: 28246 RVA: 0x003DEF80 File Offset: 0x003DD180
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_322()
        ////		{
        ////			return this.MenuItem_Unit_BoatDockingOperations;
        ////		}

        // Token: 0x06006E57 RID: 28247 RVA: 0x003DEF98 File Offset: 0x003DD198
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_323(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_337);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_BoatDockingOperations;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_BoatDockingOperations = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_BoatDockingOperations;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E58 RID: 28248 RVA: 0x003DEFE4 File Offset: 0x003DD1E4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_324()
        ////		{
        ////			return this.MenuItem_Unit_OA_AutoEngageTarget;
        ////		}

        // Token: 0x06006E59 RID: 28249 RVA: 0x003DEFFC File Offset: 0x003DD1FC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_325(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_328);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_OA_AutoEngageTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_OA_AutoEngageTarget = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_OA_AutoEngageTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E5A RID: 28250 RVA: 0x003DF048 File Offset: 0x003DD248
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_326()
        ////		{
        ////			return this.MenuItem_Unit_OA_ManualEngageTarget;
        ////		}

        // Token: 0x06006E5B RID: 28251 RVA: 0x003DF060 File Offset: 0x003DD260
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_327(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_329);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_OA_ManualEngageTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_OA_ManualEngageTarget = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_OA_ManualEngageTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E5C RID: 28252 RVA: 0x003DF0AC File Offset: 0x003DD2AC
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_328()
        ////		{
        ////			return this.MenuItem_Unit_OA_LaunchOnlyBearing;
        ////		}

        // Token: 0x06006E5D RID: 28253 RVA: 0x003DF0C4 File Offset: 0x003DD2C4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_329(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_330);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_OA_LaunchOnlyBearing;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_OA_LaunchOnlyBearing = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_OA_LaunchOnlyBearing;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E5E RID: 28254 RVA: 0x003DF110 File Offset: 0x003DD310
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_330()
        ////		{
        ////			return this.MenuItem_Unit_Magazines;
        ////		}

        // Token: 0x06006E5F RID: 28255 RVA: 0x003DF128 File Offset: 0x003DD328
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_331(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_335);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_Magazines;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_Magazines = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_Magazines;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E60 RID: 28256 RVA: 0x003DF174 File Offset: 0x003DD374
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_332()
        ////		{
        ////			return this.MenuItem_Unit_WeaponStatus;
        ////		}

        // Token: 0x06006E61 RID: 28257 RVA: 0x003DF18C File Offset: 0x003DD38C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_333(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_322);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_WeaponStatus;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_WeaponStatus = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_WeaponStatus;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E62 RID: 28258 RVA: 0x003DF1D8 File Offset: 0x003DD3D8
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_334()
        ////		{
        ////			return this.MenuItem_Unit_SensorsStatus;
        ////		}

        // Token: 0x06006E63 RID: 28259 RVA: 0x003DF1F0 File Offset: 0x003DD3F0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_335(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_320);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SensorsStatus;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SensorsStatus = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SensorsStatus;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E64 RID: 28260 RVA: 0x003DF23C File Offset: 0x003DD43C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_336()
        ////		{
        ////			return this.MenuItem_Unit_SystemDamageStatus;
        ////		}

        // Token: 0x06006E65 RID: 28261 RVA: 0x003DF254 File Offset: 0x003DD454
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_337(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_338);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SystemDamageStatus;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SystemDamageStatus = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SystemDamageStatus;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E66 RID: 28262 RVA: 0x003DF2A0 File Offset: 0x003DD4A0
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_338()
        ////		{
        ////			return this.MenuItem_Unit_AO_IgnorePlottedCourse_SelectedUnit;
        ////		}

        // Token: 0x06006E67 RID: 28263 RVA: 0x0002EC6A File Offset: 0x0002CE6A
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_339(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_AO_IgnorePlottedCourse_SelectedUnit = toolStripMenuItem_365;
        //		}

        // Token: 0x06006E68 RID: 28264 RVA: 0x003DF2B8 File Offset: 0x003DD4B8
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_340()
        ////		{
        ////			return this.MenuItem_Unit_DirectionRangeMeasure;
        ////		}

        // Token: 0x06006E69 RID: 28265 RVA: 0x003DF2D0 File Offset: 0x003DD4D0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_341(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_324);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_DirectionRangeMeasure;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_DirectionRangeMeasure = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_DirectionRangeMeasure;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E6A RID: 28266 RVA: 0x003DF31C File Offset: 0x003DD51C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDatabaseViewerToolStripMenuItem()
        ////		{
        ////			return this.toolStripMenuItem_135;
        ////		}

        // Token: 0x06006E6B RID: 28267 RVA: 0x003DF334 File Offset: 0x003DD534
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_343(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_339);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_135;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_135 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_135;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E6C RID: 28268 RVA: 0x003DF380 File Offset: 0x003DD580
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetBrowseScenarioPlatformsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_BrowseScenarioPlatforms;
        ////		}

        // Token: 0x06006E6D RID: 28269 RVA: 0x003DF398 File Offset: 0x003DD598
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_345(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_340);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_BrowseScenarioPlatforms;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_BrowseScenarioPlatforms = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_BrowseScenarioPlatforms;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E6E RID: 28270 RVA: 0x003DF3E4 File Offset: 0x003DD5E4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetOrderOfBattleToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_OrderOfBattle;
        ////		}

        // Token: 0x06006E6F RID: 28271 RVA: 0x003DF3FC File Offset: 0x003DD5FC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_347(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_341);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_OrderOfBattle;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_OrderOfBattle = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_OrderOfBattle;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E70 RID: 28272 RVA: 0x003DF448 File Offset: 0x003DD648
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetLockSelectedRefPointsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_LockSelectedRefPoint;
        ////		}

        // Token: 0x06006E71 RID: 28273 RVA: 0x003DF460 File Offset: 0x003DD660
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_349(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_342);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_LockSelectedRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_LockSelectedRefPoint = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_LockSelectedRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E72 RID: 28274 RVA: 0x003DF4AC File Offset: 0x003DD6AC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetUnlockSelectedRefPointsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UnlockSelectedRefPoint;
        ////		}

        // Token: 0x06006E73 RID: 28275 RVA: 0x003DF4C4 File Offset: 0x003DD6C4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_351(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_343);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UnlockSelectedRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UnlockSelectedRefPoint = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UnlockSelectedRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E74 RID: 28276 RVA: 0x003DF510 File Offset: 0x003DD710
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetRealismSettingsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SimulationRealismSettings;
        ////		}

        // Token: 0x06006E75 RID: 28277 RVA: 0x003DF528 File Offset: 0x003DD728
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetRealismSettingsToolStripMenuItem(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.RealismSettingsToolStripMenuItem_Click);
        ////			ToolStripMenuItem MenuItem_SimulationRealismSettings = this.MenuItem_SimulationRealismSettings;
        ////			if (MenuItem_SimulationRealismSettings != null)
        ////			{
        ////				MenuItem_SimulationRealismSettings.Click -= value;
        ////			}
        ////			this.MenuItem_SimulationRealismSettings = toolStripMenuItem_365;
        ////			MenuItem_SimulationRealismSettings = this.MenuItem_SimulationRealismSettings;
        ////			if (MenuItem_SimulationRealismSettings != null)
        ////			{
        ////				MenuItem_SimulationRealismSettings.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E76 RID: 28278 RVA: 0x003DF574 File Offset: 0x003DD774
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetScenarioDescriptionToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ScenarioDescription;
        ////		}

        // Token: 0x06006E77 RID: 28279 RVA: 0x003DF58C File Offset: 0x003DD78C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_355(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_345);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ScenarioDescription;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ScenarioDescription = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ScenarioDescription;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E78 RID: 28280 RVA: 0x003DF5D8 File Offset: 0x003DD7D8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetShowNonfriendlyMenuItem()
        ////		{
        ////			return this.MenuItem_ShowNonfriendlyRange;
        ////		}

        // Token: 0x06006E79 RID: 28281 RVA: 0x003DF5F0 File Offset: 0x003DD7F0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetShowNonfriendlyMenuItem(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.SetShowNonfriendlyMenuItem_Click);
        ////			ToolStripMenuItem MenuItem_ShowNonfriendlyRange = this.MenuItem_ShowNonfriendlyRange;
        ////			if (MenuItem_ShowNonfriendlyRange != null)
        ////			{
        ////				MenuItem_ShowNonfriendlyRange.Click -= value;
        ////			}
        ////			this.MenuItem_ShowNonfriendlyRange = toolStripMenuItem_365;
        ////			MenuItem_ShowNonfriendlyRange = this.MenuItem_ShowNonfriendlyRange;
        ////			if (MenuItem_ShowNonfriendlyRange != null)
        ////			{
        ////				MenuItem_ShowNonfriendlyRange.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E7A RID: 28282 RVA: 0x003DF63C File Offset: 0x003DD83C
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_358()
        ////		{
        ////			return this.toolStripSeparator_11;
        ////		}

        // Token: 0x06006E7B RID: 28283 RVA: 0x0002EC73 File Offset: 0x0002CE73
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_359(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_11 = toolStripSeparator_37;
        //		}

        // Token: 0x06006E7C RID: 28284 RVA: 0x003DF654 File Offset: 0x003DD854
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_360()
        ////		{
        ////			return this.MenuItem_RelativeSelectedRefPoint_RotatingBearing;
        ////		}

        // Token: 0x06006E7D RID: 28285 RVA: 0x003DF66C File Offset: 0x003DD86C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_361(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_348);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_RelativeSelectedRefPoint_RotatingBearing;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_RelativeSelectedRefPoint_RotatingBearing = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_RelativeSelectedRefPoint_RotatingBearing;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E7E RID: 28286 RVA: 0x003DF6B8 File Offset: 0x003DD8B8
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_362()
        ////		{
        ////			return this.toolStripSeparator_12;
        ////		}

        // Token: 0x06006E7F RID: 28287 RVA: 0x0002EC7C File Offset: 0x0002CE7C
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_363(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_12 = toolStripSeparator_37;
        //		}

        // Token: 0x06006E80 RID: 28288 RVA: 0x003DF6D0 File Offset: 0x003DD8D0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetChangeBearingTypeOfSelectedRefPointsToFIXEDToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SelectedRefPointChangeBearingToFixed;
        ////		}

        // Token: 0x06006E81 RID: 28289 RVA: 0x003DF6E8 File Offset: 0x003DD8E8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_365(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_349);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SelectedRefPointChangeBearingToFixed;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SelectedRefPointChangeBearingToFixed = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SelectedRefPointChangeBearingToFixed;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E82 RID: 28290 RVA: 0x003DF734 File Offset: 0x003DD934
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetChangeBearingTypeOfSelectedRefPointsToROTATINGToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SelectedRefPointChangeBearingToRotating;
        ////		}

        // Token: 0x06006E83 RID: 28291 RVA: 0x003DF74C File Offset: 0x003DD94C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_367(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_350);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SelectedRefPointChangeBearingToRotating;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SelectedRefPointChangeBearingToRotating = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SelectedRefPointChangeBearingToRotating;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E84 RID: 28292 RVA: 0x003DF798 File Offset: 0x003DD998
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_368()
        ////		{
        ////			return this.toolStripSeparator_13;
        ////		}

        // Token: 0x06006E85 RID: 28293 RVA: 0x0002EC85 File Offset: 0x0002CE85
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_369(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_13 = toolStripSeparator_37;
        //		}

        // Token: 0x06006E86 RID: 28294 RVA: 0x003DF7B0 File Offset: 0x003DD9B0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSideDoctrineRoEToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SideDoctrineAndEMCONAndWRA;
        ////		}

        // Token: 0x06006E87 RID: 28295 RVA: 0x003DF7C8 File Offset: 0x003DD9C8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_371(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_353);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SideDoctrineAndEMCONAndWRA;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SideDoctrineAndEMCONAndWRA = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SideDoctrineAndEMCONAndWRA;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E88 RID: 28296 RVA: 0x003DF814 File Offset: 0x003DDA14
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetGenerateDeltaToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SA_CreateDeltaTemplate;
        ////		}

        // Token: 0x06006E89 RID: 28297 RVA: 0x003DF82C File Offset: 0x003DDA2C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_373(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_354);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SA_CreateDeltaTemplate;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SA_CreateDeltaTemplate = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SA_CreateDeltaTemplate;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E8A RID: 28298 RVA: 0x003DF878 File Offset: 0x003DDA78
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSaveToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SaveScenario;
        ////		}

        // Token: 0x06006E8B RID: 28299 RVA: 0x003DF890 File Offset: 0x003DDA90
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_375(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_355);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SaveScenario;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SaveScenario = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SaveScenario;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E8C RID: 28300 RVA: 0x003DF8DC File Offset: 0x003DDADC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetContactEmissionsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ContactEmissions;
        ////		}

        // Token: 0x06006E8D RID: 28301 RVA: 0x0002EC8E File Offset: 0x0002CE8E
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_377(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_ContactEmissions = toolStripMenuItem_365;
        //		}

        // Token: 0x06006E8E RID: 28302 RVA: 0x003DF8F4 File Offset: 0x003DDAF4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_378()
        ////		{
        ////			return this.MenuItem_CE_SelectedTarget;
        ////		}

        // Token: 0x06006E8F RID: 28303 RVA: 0x003DF90C File Offset: 0x003DDB0C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_379(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_357);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_CE_SelectedTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_CE_SelectedTarget = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_CE_SelectedTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E90 RID: 28304 RVA: 0x003DF958 File Offset: 0x003DDB58
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_380()
        ////		{
        ////			return this.MenuItem_CE_AllTarget;
        ////		}

        // Token: 0x06006E91 RID: 28305 RVA: 0x003DF970 File Offset: 0x003DDB70
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_381(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_358);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_CE_AllTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_CE_AllTarget = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_CE_AllTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E92 RID: 28306 RVA: 0x003DF9BC File Offset: 0x003DDBBC
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_382()
        ////		{
        ////			return this.MenuItem_CE_NotShow;
        ////		}

        // Token: 0x06006E93 RID: 28307 RVA: 0x003DF9D4 File Offset: 0x003DDBD4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_383(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_359);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_CE_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_CE_NotShow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_CE_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E94 RID: 28308 RVA: 0x003DFA20 File Offset: 0x003DDC20
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_384()
        ////		{
        ////			return this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_SelectUnit;
        ////		}

        // Token: 0x06006E95 RID: 28309 RVA: 0x0002EC97 File Offset: 0x0002CE97
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_385(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_SelectUnit = toolStripMenuItem_365;
        //		}

        // Token: 0x06006E96 RID: 28310 RVA: 0x003DFA38 File Offset: 0x003DDC38
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDeselectAllReferencePointsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_DeselectAllRefPoint;
        ////		}

        // Token: 0x06006E97 RID: 28311 RVA: 0x003DFA50 File Offset: 0x003DDC50
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_387(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_361);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DeselectAllRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DeselectAllRefPoint = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DeselectAllRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E98 RID: 28312 RVA: 0x003DFA9C File Offset: 0x003DDC9C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetUnassignToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_Unit_UnassignMissionUnit;
        ////		}

        // Token: 0x06006E99 RID: 28313 RVA: 0x003DFAB4 File Offset: 0x003DDCB4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_389(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_363);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_UnassignMissionUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_UnassignMissionUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_UnassignMissionUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E9A RID: 28314 RVA: 0x003DFB00 File Offset: 0x003DDD00
        ////		[CompilerGenerated]
        ////		internal  ContextMenuStrip vmethod_390()
        ////		{
        ////			return this.contextMenuStrip_3;
        ////		}

        // Token: 0x06006E9B RID: 28315 RVA: 0x0002ECA0 File Offset: 0x0002CEA0
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_391(ContextMenuStrip contextMenuStrip_5)
        //		{
        //			this.contextMenuStrip_3 = contextMenuStrip_5;
        //		}

        // Token: 0x06006E9C RID: 28316 RVA: 0x003DFB18 File Offset: 0x003DDD18
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_392()
        ////		{
        ////			return this.toolStripMenuItem_156;
        ////		}

        // Token: 0x06006E9D RID: 28317 RVA: 0x003DFB30 File Offset: 0x003DDD30
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_393(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_367);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_156;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_156 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_156;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006E9E RID: 28318 RVA: 0x003DFB7C File Offset: 0x003DDD7C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_394()
        ////		{
        ////			return this.toolStripMenuItem_157;
        ////		}

        // Token: 0x06006E9F RID: 28319 RVA: 0x003DFB94 File Offset: 0x003DDD94
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_395(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_321);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_157;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_157 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_157;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EA0 RID: 28320 RVA: 0x003DFBE0 File Offset: 0x003DDDE0
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_396()
        ////		{
        ////			return this.toolStripMenuItem_158;
        ////		}

        // Token: 0x06006EA1 RID: 28321 RVA: 0x003DFBF8 File Offset: 0x003DDDF8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_397(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_259);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_158;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_158 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_158;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EA2 RID: 28322 RVA: 0x003DFC44 File Offset: 0x003DDE44
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_398()
        ////		{
        ////			return this.MenuItem_Unit_HoldPositon_SelectedUnit;
        ////		}

        // Token: 0x06006EA3 RID: 28323 RVA: 0x003DFC5C File Offset: 0x003DDE5C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_399(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_369);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_HoldPositon_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_HoldPositon_SelectedUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_HoldPositon_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EA4 RID: 28324 RVA: 0x003DFCA8 File Offset: 0x003DDEA8
        ////		[CompilerGenerated]
        ////		internal  ToolStripLabel vmethod_400()
        ////		{
        ////			return this.Label_GameRunMode;
        ////		}

        // Token: 0x06006EA5 RID: 28325 RVA: 0x0002ECA9 File Offset: 0x0002CEA9
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_401(ToolStripLabel toolStripLabel_2)
        //		{
        //			this.Label_GameRunMode = toolStripLabel_2;
        //		}

        // Token: 0x06006EA6 RID: 28326 RVA: 0x003DFCC0 File Offset: 0x003DDEC0
        ////		[CompilerGenerated]
        ////		internal  ToolStripComboBox vmethod_402()
        ////		{
        ////			return this.toolStripComboBox_1;
        ////		}

        // Token: 0x06006EA7 RID: 28327 RVA: 0x0002ECB2 File Offset: 0x0002CEB2
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_403(ToolStripComboBox toolStripComboBox_2)
        //		{
        //			this.toolStripComboBox_1 = toolStripComboBox_2;
        //		}

        // Token: 0x06006EA8 RID: 28328 RVA: 0x003DFCD8 File Offset: 0x003DDED8
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_404()
        ////		{
        ////			return this.toolStripSeparator_14;
        ////		}

        // Token: 0x06006EA9 RID: 28329 RVA: 0x0002ECBB File Offset: 0x0002CEBB
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_405(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_14 = toolStripSeparator_37;
        //		}

        // Token: 0x06006EAA RID: 28330 RVA: 0x003DFCF0 File Offset: 0x003DDEF0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_ScriptingConsole()
        ////		{
        ////			return this.MenuItem_ScriptEditor;
        ////		}

        // Token: 0x06006EAB RID: 28331 RVA: 0x003DFD08 File Offset: 0x003DDF08
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_407(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_374);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ScriptEditor;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ScriptEditor = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ScriptEditor;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EAC RID: 28332 RVA: 0x003DFD54 File Offset: 0x003DDF54
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_408()
        ////		{
        ////			return this.MenuItem_ShowRange;
        ////		}

        // Token: 0x06006EAD RID: 28333 RVA: 0x0002ECC4 File Offset: 0x0002CEC4
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_409(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_ShowRange = toolStripMenuItem_365;
        //		}

        // Token: 0x06006EAE RID: 28334 RVA: 0x003DFD6C File Offset: 0x003DDF6C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetShowRangeSymbolsForSelectedUnitMenuItem()
        ////		{
        ////			return this.MenuItem_SR_SelectedUnit;
        ////		}

        // Token: 0x06006EAF RID: 28335 RVA: 0x003DFD84 File Offset: 0x003DDF84
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_411(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_375);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SR_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SR_SelectedUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SR_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EB0 RID: 28336 RVA: 0x003DFDD0 File Offset: 0x003DDFD0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetShowRangeSymbolsForAllUnitMenuItem()
        ////		{
        ////			return this.MenuItem_SR_AllUnit;
        ////		}

        // Token: 0x06006EB1 RID: 28337 RVA: 0x003DFDE8 File Offset: 0x003DDFE8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_413(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_376);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SR_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SR_AllUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SR_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EB2 RID: 28338 RVA: 0x003DFE34 File Offset: 0x003DE034
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_414()
        ////		{
        ////			return this.MenuItem_SR_NotShow;
        ////		}

        // Token: 0x06006EB3 RID: 28339 RVA: 0x003DFE4C File Offset: 0x003DE04C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_415(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_377);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SR_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SR_NotShow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SR_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EB4 RID: 28340 RVA: 0x003DFE98 File Offset: 0x003DE098
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSwitchToGroupViewToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SwitchToUnitView;
        ////		}

        // Token: 0x06006EB5 RID: 28341 RVA: 0x003DFEB0 File Offset: 0x003DE0B0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_417(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_378);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SwitchToUnitView;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SwitchToUnitView = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SwitchToUnitView;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EB6 RID: 28342 RVA: 0x003DFEFC File Offset: 0x003DE0FC
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_418()
        ////		{
        ////			return this.toolStripSeparator_15;
        ////		}

        // Token: 0x06006EB7 RID: 28343 RVA: 0x0002ECCD File Offset: 0x0002CECD
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_419(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_15 = toolStripSeparator_37;
        //		}

        // Token: 0x06006EB8 RID: 28344 RVA: 0x003DFF14 File Offset: 0x003DE114
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetViewToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_MapSeting;
        ////		}

        // Token: 0x06006EB9 RID: 28345 RVA: 0x003DFF2C File Offset: 0x003DE12C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_421(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_409);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MapSeting;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.DropDownOpening -= value;
        ////			}
        ////			this.MenuItem_MapSeting = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MapSeting;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.DropDownOpening += value;
        ////			}
        ////		}

        // Token: 0x06006EBA RID: 28346 RVA: 0x003DFF78 File Offset: 0x003DE178
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMapLatLonGridMenuItem()
        ////		{
        ////			return this.MenuItem_LonLatGrid;
        ////		}

        // Token: 0x06006EBB RID: 28347 RVA: 0x003DFF90 File Offset: 0x003DE190
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_423(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_228);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_LonLatGrid;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_LonLatGrid = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_LonLatGrid;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EBC RID: 28348 RVA: 0x003DFFDC File Offset: 0x003DE1DC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetBMNGLayerMenuItem()
        ////		{
        ////			return this.MenuItem_BMNG;
        ////		}

        // Token: 0x06006EBD RID: 28349 RVA: 0x003DFFF4 File Offset: 0x003DE1F4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_425(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_229);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_BMNG;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_BMNG = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_BMNG;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EBE RID: 28350 RVA: 0x003E0040 File Offset: 0x003DE240
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetReliefLayerMenuItem()
        ////		{
        ////			return this.MenuItem_ColorTopographic;
        ////		}

        // Token: 0x06006EBF RID: 28351 RVA: 0x003E0058 File Offset: 0x003DE258
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_427(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_230);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ColorTopographic;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ColorTopographic = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ColorTopographic;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EC0 RID: 28352 RVA: 0x003E00A4 File Offset: 0x003DE2A4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetBordersCoastlinesMenuItem()
        ////		{
        ////			return this.MenuItem_ShowBorders;
        ////		}

        // Token: 0x06006EC1 RID: 28353 RVA: 0x003E00BC File Offset: 0x003DE2BC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_429(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_231);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ShowBorders;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ShowBorders = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ShowBorders;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EC2 RID: 28354 RVA: 0x003E0108 File Offset: 0x003DE308
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetVirtualEarthTSMI()
        ////		{
        ////			return this.MenuItem_OnlineGeographyData;
        ////		}

        // Token: 0x06006EC3 RID: 28355 RVA: 0x003E0120 File Offset: 0x003DE320
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_431(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_303);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_OnlineGeographyData;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_OnlineGeographyData = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_OnlineGeographyData;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EC4 RID: 28356 RVA: 0x003E016C File Offset: 0x003DE36C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_CustomLayers()
        ////		{
        ////			return this.MenuItem_CustomLayer;
        ////		}

        // Token: 0x06006EC5 RID: 28357 RVA: 0x003E0184 File Offset: 0x003DE384
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_433(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_360);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_CustomLayer;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_CustomLayer = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_CustomLayer;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EC6 RID: 28358 RVA: 0x003E01D0 File Offset: 0x003DE3D0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetStartResumeGameToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_StartOrRecover;
        ////		}

        // Token: 0x06006EC7 RID: 28359 RVA: 0x003E01E8 File Offset: 0x003DE3E8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_435(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_379);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_StartOrRecover;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_StartOrRecover = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_StartOrRecover;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EC8 RID: 28360 RVA: 0x003E0234 File Offset: 0x003DE434
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetIncreaseCompressionToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SimIncreaseCompression;
        ////		}

        // Token: 0x06006EC9 RID: 28361 RVA: 0x003E024C File Offset: 0x003DE44C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetIncreaseCompressionToolStripMenuItem(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.IncreaseCompressionToolStripMenuItem_Click);
        ////			ToolStripMenuItem MenuItem_SimIncreaseCompression = this.MenuItem_SimIncreaseCompression;
        ////			if (MenuItem_SimIncreaseCompression != null)
        ////			{
        ////				MenuItem_SimIncreaseCompression.Click -= value;
        ////			}
        ////			this.MenuItem_SimIncreaseCompression = toolStripMenuItem_365;
        ////			MenuItem_SimIncreaseCompression = this.MenuItem_SimIncreaseCompression;
        ////			if (MenuItem_SimIncreaseCompression != null)
        ////			{
        ////				MenuItem_SimIncreaseCompression.Click += value;
        ////			}
        ////		}

        // Token: 0x06006ECA RID: 28362 RVA: 0x003E0298 File Offset: 0x003DE498
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDecreaseCompressionToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SimDecreaseCompression;
        ////		}

        // Token: 0x06006ECB RID: 28363 RVA: 0x003E02B0 File Offset: 0x003DE4B0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetDecreaseCompressionToolStripMenuItem(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.DecreaseCompressionToolStripMenuItem_Click);
        ////			ToolStripMenuItem MenuItem_SimDecreaseCompression = this.MenuItem_SimDecreaseCompression;
        ////			if (MenuItem_SimDecreaseCompression != null)
        ////			{
        ////				MenuItem_SimDecreaseCompression.Click -= value;
        ////			}
        ////			this.MenuItem_SimDecreaseCompression = toolStripMenuItem_365;
        ////			MenuItem_SimDecreaseCompression = this.MenuItem_SimDecreaseCompression;
        ////			if (MenuItem_SimDecreaseCompression != null)
        ////			{
        ////				MenuItem_SimDecreaseCompression.Click += value;
        ////			}
        ////		}

        // Token: 0x06006ECC RID: 28364 RVA: 0x003E02FC File Offset: 0x003DE4FC
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_440()
        ////		{
        ////			return this.toolStripSeparator_16;
        ////		}

        // Token: 0x06006ECD RID: 28365 RVA: 0x0002ECD6 File Offset: 0x0002CED6
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_441(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_16 = toolStripSeparator_37;
        //		}

        // Token: 0x06006ECE RID: 28366 RVA: 0x003E0314 File Offset: 0x003DE514
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_442()
        ////		{
        ////			return this.toolStripSeparator_17;
        ////		}

        // Token: 0x06006ECF RID: 28367 RVA: 0x0002ECDF File Offset: 0x0002CEDF
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_443(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_17 = toolStripSeparator_37;
        //		}

        // Token: 0x06006ED0 RID: 28368 RVA: 0x003E032C File Offset: 0x003DE52C
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_444()
        ////		{
        ////			return this.toolStripSeparator_18;
        ////		}

        // Token: 0x06006ED1 RID: 28369 RVA: 0x0002ECE8 File Offset: 0x0002CEE8
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_445(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_18 = toolStripSeparator_37;
        //		}

        // Token: 0x06006ED2 RID: 28370 RVA: 0x003E0344 File Offset: 0x003DE544
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTrackUnitToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_TrackSelectedUnit;
        ////		}

        // Token: 0x06006ED3 RID: 28371 RVA: 0x003E035C File Offset: 0x003DE55C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_447(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_380);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_TrackSelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_TrackSelectedUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_TrackSelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006ED4 RID: 28372 RVA: 0x003E03A8 File Offset: 0x003DE5A8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetRangeBearingToolToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_DirectionRangeMeasure;
        ////		}

        // Token: 0x06006ED5 RID: 28373 RVA: 0x003E03C0 File Offset: 0x003DE5C0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetRangeBearingToolToolStripMenuItem(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.toolStripMenuItem_RangeBearingTool_Click);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DirectionRangeMeasure;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DirectionRangeMeasure = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DirectionRangeMeasure;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006ED6 RID: 28374 RVA: 0x003E040C File Offset: 0x003DE60C
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_450()
        ////		{
        ////			return this.toolStripSeparator_19;
        ////		}

        // Token: 0x06006ED7 RID: 28375 RVA: 0x0002ECF1 File Offset: 0x0002CEF1
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_451(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_19 = toolStripSeparator_37;
        //		}

        // Token: 0x06006ED8 RID: 28376 RVA: 0x003E0424 File Offset: 0x003DE624
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_452()
        ////		{
        ////			return this.toolStripSeparator_20;
        ////		}

        // Token: 0x06006ED9 RID: 28377 RVA: 0x0002ECFA File Offset: 0x0002CEFA
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_453(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_20 = toolStripSeparator_37;
        //		}

        // Token: 0x06006EDA RID: 28378 RVA: 0x003E043C File Offset: 0x003DE63C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetUnassignUnitToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UnassignMissionUnit;
        ////		}

        // Token: 0x06006EDB RID: 28379 RVA: 0x003E0454 File Offset: 0x003DE654
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_455(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_382);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UnassignMissionUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UnassignMissionUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UnassignMissionUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EDC RID: 28380 RVA: 0x003E04A0 File Offset: 0x003DE6A0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetContactsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ContactTarget;
        ////		}

        // Token: 0x06006EDD RID: 28381 RVA: 0x003E04B8 File Offset: 0x003DE6B8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_457(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_410);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ContactTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.DropDownOpening -= value;
        ////			}
        ////			this.MenuItem_ContactTarget = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ContactTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.DropDownOpening += value;
        ////			}
        ////		}

        // Token: 0x06006EDE RID: 28382 RVA: 0x003E0504 File Offset: 0x003DE704
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDropSelectedContactsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_DropTarget;
        ////		}

        // Token: 0x06006EDF RID: 28383 RVA: 0x003E051C File Offset: 0x003DE71C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_459(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_383);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DropTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DropTarget = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DropTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EE0 RID: 28384 RVA: 0x003E0568 File Offset: 0x003DE768
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_DropActiveSonobuoy2()
        ////		{
        ////			return this.MenuItem_DropActiveSonobuoy;
        ////		}

        // Token: 0x06006EE1 RID: 28385 RVA: 0x0002ED03 File Offset: 0x0002CF03
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_461(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_DropActiveSonobuoy = toolStripMenuItem_365;
        //		}

        // Token: 0x06006EE2 RID: 28386 RVA: 0x003E0580 File Offset: 0x003DE780
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_DropPassiveSonobuoy2()
        ////		{
        ////			return this.MenuItem_ASW_DropPassiveSonobuoy;
        ////		}

        // Token: 0x06006EE3 RID: 28387 RVA: 0x0002ED0C File Offset: 0x0002CF0C
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_463(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_ASW_DropPassiveSonobuoy = toolStripMenuItem_365;
        //		}

        // Token: 0x06006EE4 RID: 28388 RVA: 0x003E0598 File Offset: 0x003DE798
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetPassiveShallowToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ASW_DPS_Shallow;
        ////		}

        // Token: 0x06006EE5 RID: 28389 RVA: 0x003E05B0 File Offset: 0x003DE7B0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_465(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_384);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ASW_DPS_Shallow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ASW_DPS_Shallow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ASW_DPS_Shallow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EE6 RID: 28390 RVA: 0x003E05FC File Offset: 0x003DE7FC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetPassiveDeepToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ASW_DPS_Deep;
        ////		}

        // Token: 0x06006EE7 RID: 28391 RVA: 0x003E0614 File Offset: 0x003DE814
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_467(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_385);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ASW_DPS_Deep;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ASW_DPS_Deep = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ASW_DPS_Deep;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EE8 RID: 28392 RVA: 0x003E0660 File Offset: 0x003DE860
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetActiveShallowToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ASW_DAS_Shallow;
        ////		}

        // Token: 0x06006EE9 RID: 28393 RVA: 0x003E0678 File Offset: 0x003DE878
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_469(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_386);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ASW_DAS_Shallow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ASW_DAS_Shallow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ASW_DAS_Shallow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EEA RID: 28394 RVA: 0x003E06C4 File Offset: 0x003DE8C4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetActiveDeepToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ASW_DAS_Deep;
        ////		}

        // Token: 0x06006EEB RID: 28395 RVA: 0x003E06DC File Offset: 0x003DE8DC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_471(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_387);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ASW_DAS_Deep;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ASW_DAS_Deep = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ASW_DAS_Deep;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EEC RID: 28396 RVA: 0x003E0728 File Offset: 0x003DE928
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetZoomInToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_ZoomIn;
        ////		}

        // Token: 0x06006EED RID: 28397 RVA: 0x003E0740 File Offset: 0x003DE940
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_473(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_388);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ZoomIn;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ZoomIn = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ZoomIn;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EEE RID: 28398 RVA: 0x003E078C File Offset: 0x003DE98C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetZoomOutToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_ZoomOut;
        ////		}

        // Token: 0x06006EEF RID: 28399 RVA: 0x003E07A4 File Offset: 0x003DE9A4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_475(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_389);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ZoomOut;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ZoomOut = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ZoomOut;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EF0 RID: 28400 RVA: 0x003E07F0 File Offset: 0x003DE9F0
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_476()
        ////		{
        ////			return this.toolStripSeparator_21;
        ////		}

        // Token: 0x06006EF1 RID: 28401 RVA: 0x0002ED15 File Offset: 0x0002CF15
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_477(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_21 = toolStripSeparator_37;
        //		}

        // Token: 0x06006EF2 RID: 28402 RVA: 0x003E0808 File Offset: 0x003DEA08
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetPanMapToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_Tranlation;
        ////		}

        // Token: 0x06006EF3 RID: 28403 RVA: 0x0002ED1E File Offset: 0x0002CF1E
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_479(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Tranlation = toolStripMenuItem_365;
        //		}

        // Token: 0x06006EF4 RID: 28404 RVA: 0x003E0820 File Offset: 0x003DEA20
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetPanMapUpToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UpMove;
        ////		}

        // Token: 0x06006EF5 RID: 28405 RVA: 0x003E0838 File Offset: 0x003DEA38
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_481(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_390);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UpMove;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UpMove = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UpMove;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EF6 RID: 28406 RVA: 0x003E0884 File Offset: 0x003DEA84
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetPanMapRightToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_RightMove;
        ////		}

        // Token: 0x06006EF7 RID: 28407 RVA: 0x003E089C File Offset: 0x003DEA9C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_483(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_391);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_RightMove;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_RightMove = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_RightMove;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EF8 RID: 28408 RVA: 0x003E08E8 File Offset: 0x003DEAE8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetPanMapLeftToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_LeftMove;
        ////		}

        // Token: 0x06006EF9 RID: 28409 RVA: 0x003E0900 File Offset: 0x003DEB00
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_485(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_392);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_LeftMove;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_LeftMove = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_LeftMove;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EFA RID: 28410 RVA: 0x003E094C File Offset: 0x003DEB4C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetPanMapDownToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_DownMove;
        ////		}

        // Token: 0x06006EFB RID: 28411 RVA: 0x003E0964 File Offset: 0x003DEB64
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_487(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_393);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DownMove;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DownMove = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DownMove;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EFC RID: 28412 RVA: 0x003E09B0 File Offset: 0x003DEBB0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetGroupSelectedUnitsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_GO_GroupBySelectedUnit;
        ////		}

        // Token: 0x06006EFD RID: 28413 RVA: 0x003E09C8 File Offset: 0x003DEBC8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_489(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_394);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_GO_GroupBySelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_GO_GroupBySelectedUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_GO_GroupBySelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006EFE RID: 28414 RVA: 0x003E0A14 File Offset: 0x003DEC14
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDetachSelectedUnitsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_GO_SelectedUnitRemoveGroup;
        ////		}

        // Token: 0x06006EFF RID: 28415 RVA: 0x003E0A2C File Offset: 0x003DEC2C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_491(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_395);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_GO_SelectedUnitRemoveGroup;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_GO_SelectedUnitRemoveGroup = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_GO_SelectedUnitRemoveGroup;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F00 RID: 28416 RVA: 0x003E0A78 File Offset: 0x003DEC78
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_DeployDippingSonar2()
        ////		{
        ////			return this.MenuItem_DeployDippingSonar;
        ////		}

        // Token: 0x06006F01 RID: 28417 RVA: 0x003E0A90 File Offset: 0x003DEC90
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_493(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_396);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DeployDippingSonar;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DeployDippingSonar = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DeployDippingSonar;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F02 RID: 28418 RVA: 0x003E0ADC File Offset: 0x003DECDC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSetToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_RealTimeSim;
        ////		}

        // Token: 0x06006F03 RID: 28419 RVA: 0x003E0AF4 File Offset: 0x003DECF4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_495(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_397);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_RealTimeSim;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_RealTimeSim = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_RealTimeSim;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F04 RID: 28420 RVA: 0x003E0B40 File Offset: 0x003DED40
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_496()
        ////		{
        ////			return this.toolStripSeparator_22;
        ////		}

        // Token: 0x06006F05 RID: 28421 RVA: 0x0002ED27 File Offset: 0x0002CF27
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_497(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_22 = toolStripSeparator_37;
        //		}

        // Token: 0x06006F06 RID: 28422 RVA: 0x003E0B58 File Offset: 0x003DED58
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_SelectNextUnit()
        ////		{
        ////			return this.MenuItem_ChooseNextUnit;
        ////		}

        // Token: 0x06006F07 RID: 28423 RVA: 0x003E0B70 File Offset: 0x003DED70
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_499(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_413);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ChooseNextUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ChooseNextUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ChooseNextUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F08 RID: 28424 RVA: 0x003E0BBC File Offset: 0x003DEDBC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_SelectPreviousUnit()
        ////		{
        ////			return this.MenuItem_ChoosePrevUnit;
        ////		}

        // Token: 0x06006F09 RID: 28425 RVA: 0x003E0BD4 File Offset: 0x003DEDD4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_501(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_414);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ChoosePrevUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ChoosePrevUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ChoosePrevUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F0A RID: 28426 RVA: 0x003E0C20 File Offset: 0x003DEE20
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetRenameToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_Rename;
        ////		}

        // Token: 0x06006F0B RID: 28427 RVA: 0x003E0C38 File Offset: 0x003DEE38
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_503(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_398);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Rename;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Rename = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Rename;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F0C RID: 28428 RVA: 0x003E0C84 File Offset: 0x003DEE84
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetCopyUnitToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UO_CopyUnit;
        ////		}

        // Token: 0x06006F0D RID: 28429 RVA: 0x003E0C9C File Offset: 0x003DEE9C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_505(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_399);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UO_CopyUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UO_CopyUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UO_CopyUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F0E RID: 28430 RVA: 0x003E0CE8 File Offset: 0x003DEEE8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMoveUnitToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UO_MoveUnit;
        ////		}

        // Token: 0x06006F0F RID: 28431 RVA: 0x003E0D00 File Offset: 0x003DEF00
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_507(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_400);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UO_MoveUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UO_MoveUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UO_MoveUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F10 RID: 28432 RVA: 0x003E0D4C File Offset: 0x003DEF4C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMarkContactHostileToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_MarkHostile;
        ////		}

        // Token: 0x06006F11 RID: 28433 RVA: 0x003E0D64 File Offset: 0x003DEF64
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_509(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_401);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MarkHostile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_MarkHostile = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MarkHostile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F12 RID: 28434 RVA: 0x003E0DB0 File Offset: 0x003DEFB0
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_510()
        ////		{
        ////			return this.toolStripSeparator_23;
        ////		}

        // Token: 0x06006F13 RID: 28435 RVA: 0x0002ED30 File Offset: 0x0002CF30
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_511(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_23 = toolStripSeparator_37;
        //		}

        // Token: 0x06006F14 RID: 28436 RVA: 0x003E0DC8 File Offset: 0x003DEFC8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMarkContactNeutralToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_MarkNeutral;
        ////		}

        // Token: 0x06006F15 RID: 28437 RVA: 0x003E0DE0 File Offset: 0x003DEFE0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_513(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_402);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MarkNeutral;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_MarkNeutral = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MarkNeutral;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F16 RID: 28438 RVA: 0x003E0E2C File Offset: 0x003DF02C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMarkContactFriendlyToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_MarkFriendly;
        ////		}

        // Token: 0x06006F17 RID: 28439 RVA: 0x003E0E44 File Offset: 0x003DF044
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_515(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_403);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MarkFriendly;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_MarkFriendly = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MarkFriendly;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F18 RID: 28440 RVA: 0x003E0E90 File Offset: 0x003DF090
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_516()
        ////		{
        ////			return this.toolStripSeparator_24;
        ////		}

        // Token: 0x06006F19 RID: 28441 RVA: 0x0002ED39 File Offset: 0x0002CF39
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_517(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_24 = toolStripSeparator_37;
        //		}

        // Token: 0x06006F1A RID: 28442 RVA: 0x003E0EA8 File Offset: 0x003DF0A8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDeleteUnitToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UO_DeleteUnit;
        ////		}

        // Token: 0x06006F1B RID: 28443 RVA: 0x003E0EC0 File Offset: 0x003DF0C0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetDeleteUnitToolStripMenuItem(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.DeleteUnitToolStripMenuItem_Click);
        ////			ToolStripMenuItem MenuItem_UO_DeleteUnit = this.MenuItem_UO_DeleteUnit;
        ////			if (MenuItem_UO_DeleteUnit != null)
        ////			{
        ////				MenuItem_UO_DeleteUnit.Click -= value;
        ////			}
        ////			this.MenuItem_UO_DeleteUnit = toolStripMenuItem_365;
        ////			MenuItem_UO_DeleteUnit = this.MenuItem_UO_DeleteUnit;
        ////			if (MenuItem_UO_DeleteUnit != null)
        ////			{
        ////				MenuItem_UO_DeleteUnit.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F1C RID: 28444 RVA: 0x003E0F0C File Offset: 0x003DF10C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSonobuoyVisibilityToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SonobuoyVisbility;
        ////		}

        // Token: 0x06006F1D RID: 28445 RVA: 0x0002ED42 File Offset: 0x0002CF42
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_521(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_SonobuoyVisbility = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F1E RID: 28446 RVA: 0x003E0F24 File Offset: 0x003DF124
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetReferencePointVisibilityToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ReferencePointVisibility;
        ////		}

        // Token: 0x06006F1F RID: 28447 RVA: 0x0002ED4B File Offset: 0x0002CF4B
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_523(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_ReferencePointVisibility = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F20 RID: 28448 RVA: 0x003E0F3C File Offset: 0x003DF13C
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_524()
        ////		{
        ////			return this.toolStripSeparator_25;
        ////		}

        // Token: 0x06006F21 RID: 28449 RVA: 0x0002ED54 File Offset: 0x0002CF54
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_525(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_25 = toolStripSeparator_37;
        //		}

        // Token: 0x06006F22 RID: 28450 RVA: 0x003E0F54 File Offset: 0x003DF154
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_526()
        ////		{
        ////			return this.MenuItem_SV_Common;
        ////		}

        // Token: 0x06006F23 RID: 28451 RVA: 0x003E0F6C File Offset: 0x003DF16C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_527(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_415);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SV_Common;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SV_Common = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SV_Common;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F24 RID: 28452 RVA: 0x003E0FB8 File Offset: 0x003DF1B8
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_528()
        ////		{
        ////			return this.MenuItem_SV_Virtual;
        ////		}

        // Token: 0x06006F25 RID: 28453 RVA: 0x003E0FD0 File Offset: 0x003DF1D0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_529(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_416);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SV_Virtual;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SV_Virtual = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SV_Virtual;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F26 RID: 28454 RVA: 0x003E101C File Offset: 0x003DF21C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_530()
        ////		{
        ////			return this.MenuItem_SV_NotShow;
        ////		}

        // Token: 0x06006F27 RID: 28455 RVA: 0x003E1034 File Offset: 0x003DF234
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_531(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_417);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SV_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SV_NotShow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SV_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F28 RID: 28456 RVA: 0x003E1080 File Offset: 0x003DF280
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_532()
        ////		{
        ////			return this.MenuItem_RPV_Common;
        ////		}

        // Token: 0x06006F29 RID: 28457 RVA: 0x003E1098 File Offset: 0x003DF298
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_533(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_418);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_RPV_Common;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_RPV_Common = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_RPV_Common;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F2A RID: 28458 RVA: 0x003E10E4 File Offset: 0x003DF2E4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_534()
        ////		{
        ////			return this.MenuItem_RPV_Small;
        ////		}

        // Token: 0x06006F2B RID: 28459 RVA: 0x003E10FC File Offset: 0x003DF2FC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_535(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_419);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_RPV_Small;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_RPV_Small = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_RPV_Small;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F2C RID: 28460 RVA: 0x003E1148 File Offset: 0x003DF348
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_536()
        ////		{
        ////			return this.MenuItem_RPV_NotShow;
        ////		}

        // Token: 0x06006F2D RID: 28461 RVA: 0x003E1160 File Offset: 0x003DF360
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_537(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_420);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_RPV_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_RPV_NotShow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_RPV_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F2E RID: 28462 RVA: 0x003E11AC File Offset: 0x003DF3AC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetShowGhostedGroupMembersForToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ShowGroupMember;
        ////		}

        // Token: 0x06006F2F RID: 28463 RVA: 0x0002ED5D File Offset: 0x0002CF5D
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_539(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_ShowGroupMember = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F30 RID: 28464 RVA: 0x003E11C4 File Offset: 0x003DF3C4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_540()
        ////		{
        ////			return this.MenuItem_GM_SelectedGroup;
        ////		}

        // Token: 0x06006F31 RID: 28465 RVA: 0x003E11DC File Offset: 0x003DF3DC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_541(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_421);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_GM_SelectedGroup;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_GM_SelectedGroup = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_GM_SelectedGroup;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F32 RID: 28466 RVA: 0x003E1228 File Offset: 0x003DF428
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_542()
        ////		{
        ////			return this.MenuItem_GM_AllGroup;
        ////		}

        // Token: 0x06006F33 RID: 28467 RVA: 0x003E1240 File Offset: 0x003DF440
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_543(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_422);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_GM_AllGroup;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_GM_AllGroup = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_GM_AllGroup;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F34 RID: 28468 RVA: 0x003E128C File Offset: 0x003DF48C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_544()
        ////		{
        ////			return this.MenuItem_GM_NotShow;
        ////		}

        // Token: 0x06006F35 RID: 28469 RVA: 0x003E12A4 File Offset: 0x003DF4A4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_545(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_423);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_GM_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_GM_NotShow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_GM_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F36 RID: 28470 RVA: 0x003E12F0 File Offset: 0x003DF4F0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetRenameReferencePointToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_RenameSelectedRefName;
        ////		}

        // Token: 0x06006F37 RID: 28471 RVA: 0x003E1308 File Offset: 0x003DF508
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_547(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_425);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_RenameSelectedRefName;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_RenameSelectedRefName = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_RenameSelectedRefName;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F38 RID: 28472 RVA: 0x003E1354 File Offset: 0x003DF554
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetRenameUnitToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UO_RenameUnit;
        ////		}

        // Token: 0x06006F39 RID: 28473 RVA: 0x003E136C File Offset: 0x003DF56C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_549(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_424);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UO_RenameUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UO_RenameUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UO_RenameUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F3A RID: 28474 RVA: 0x003E13B8 File Offset: 0x003DF5B8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAttackOptionsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AttackOptions;
        ////		}

        // Token: 0x06006F3B RID: 28475 RVA: 0x0002ED66 File Offset: 0x0002CF66
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_551(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_AttackOptions = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F3C RID: 28476 RVA: 0x003E13D0 File Offset: 0x003DF5D0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetEngageTargetsAutoToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AO_AutoEngageTarget;
        ////		}

        // Token: 0x06006F3D RID: 28477 RVA: 0x003E13E8 File Offset: 0x003DF5E8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_553(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_426);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_AutoEngageTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_AutoEngageTarget = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_AutoEngageTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F3E RID: 28478 RVA: 0x003E1434 File Offset: 0x003DF634
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetEngageTargetsManualToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AO_ManualEngageTarget;
        ////		}

        // Token: 0x06006F3F RID: 28479 RVA: 0x003E144C File Offset: 0x003DF64C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_555(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_427);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_ManualEngageTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_ManualEngageTarget = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_ManualEngageTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F40 RID: 28480 RVA: 0x003E1498 File Offset: 0x003DF698
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetBearingonlyAttackToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AO_LaunchOnlyBearing;
        ////		}

        // Token: 0x06006F41 RID: 28481 RVA: 0x003E14B0 File Offset: 0x003DF6B0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_557(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_428);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_LaunchOnlyBearing;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_LaunchOnlyBearing = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_LaunchOnlyBearing;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F42 RID: 28482 RVA: 0x003E14FC File Offset: 0x003DF6FC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDropTargetToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_AO_DropTarget;
        ////		}

        // Token: 0x06006F43 RID: 28483 RVA: 0x003E1514 File Offset: 0x003DF714
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_559(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_429);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_DropTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_DropTarget = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_DropTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F44 RID: 28484 RVA: 0x003E1560 File Offset: 0x003DF760
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDisengageDropAllTargetsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AO_DropAllTarget;
        ////		}

        // Token: 0x06006F45 RID: 28485 RVA: 0x003E1578 File Offset: 0x003DF778
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_561(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_430);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_DropAllTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_DropAllTarget = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_DropAllTarget;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F46 RID: 28486 RVA: 0x003E15C4 File Offset: 0x003DF7C4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetWeaponsHold_SelectedUnitsToolStripMenuItem_Main()
        ////		{
        ////			return this.MenuItem_AO_WeaponContorlStatusForAllType_SelectUnit;
        ////		}

        // Token: 0x06006F47 RID: 28487 RVA: 0x0002ED6F File Offset: 0x0002CF6F
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_563(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_AO_WeaponContorlStatusForAllType_SelectUnit = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F48 RID: 28488 RVA: 0x003E15DC File Offset: 0x003DF7DC
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_564()
        ////		{
        ////			return this.toolStripSeparator_26;
        ////		}

        // Token: 0x06006F49 RID: 28489 RVA: 0x0002ED78 File Offset: 0x0002CF78
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_565(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_26 = toolStripSeparator_37;
        //		}

        // Token: 0x06006F4A RID: 28490 RVA: 0x003E15F4 File Offset: 0x003DF7F4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetNoNavigationZonesToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_NoNavigationZones;
        ////		}

        // Token: 0x06006F4B RID: 28491 RVA: 0x0002ED81 File Offset: 0x0002CF81
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_567(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_NoNavigationZones = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F4C RID: 28492 RVA: 0x003E160C File Offset: 0x003DF80C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetEditExistingToolStripMenuItem2()
        ////		{
        ////			return this.MenuItem_NNZ_EditExisting;
        ////		}

        // Token: 0x06006F4D RID: 28493 RVA: 0x003E1624 File Offset: 0x003DF824
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_569(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_431);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_NNZ_EditExisting;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_NNZ_EditExisting = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_NNZ_EditExisting;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F4E RID: 28494 RVA: 0x003E1670 File Offset: 0x003DF870
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetCreateNewFromSelectedRefPointsToolStripMenuItem2()
        ////		{
        ////			return this.MenuItem_NNZ_CreateBySelectedRefPoint;
        ////		}

        // Token: 0x06006F4F RID: 28495 RVA: 0x003E1688 File Offset: 0x003DF888
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_571(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_432);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_NNZ_CreateBySelectedRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_NNZ_CreateBySelectedRefPoint = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_NNZ_CreateBySelectedRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F50 RID: 28496 RVA: 0x003E16D4 File Offset: 0x003DF8D4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetExclusionZonesToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ExclusionZones;
        ////		}

        // Token: 0x06006F51 RID: 28497 RVA: 0x0002ED8A File Offset: 0x0002CF8A
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_573(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_ExclusionZones = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F52 RID: 28498 RVA: 0x003E16EC File Offset: 0x003DF8EC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetEditExistingExclusionZoneToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_EZ_EditExisting;
        ////		}

        // Token: 0x06006F53 RID: 28499 RVA: 0x003E1704 File Offset: 0x003DF904
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_575(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_433);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_EZ_EditExisting;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_EZ_EditExisting = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_EZ_EditExisting;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F54 RID: 28500 RVA: 0x003E1750 File Offset: 0x003DF950
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetCreateNewExclusionZoneFromSelectedRefPointsToolStripMenuItem3()
        ////		{
        ////			return this.MenuItem_EZ_CreateBySelectedRefPoint;
        ////		}

        // Token: 0x06006F55 RID: 28501 RVA: 0x003E1768 File Offset: 0x003DF968
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_577(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_434);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_EZ_CreateBySelectedRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_EZ_CreateBySelectedRefPoint = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_EZ_CreateBySelectedRefPoint;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F56 RID: 28502 RVA: 0x003E17B4 File Offset: 0x003DF9B4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_578()
        ////		{
        ////			return this.MenuItem_Unit_GO_GroupBySelectedUnit;
        ////		}

        // Token: 0x06006F57 RID: 28503 RVA: 0x003E17CC File Offset: 0x003DF9CC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_579(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_435);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_GO_GroupBySelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_GO_GroupBySelectedUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_GO_GroupBySelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F58 RID: 28504 RVA: 0x003E1818 File Offset: 0x003DFA18
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_580()
        ////		{
        ////			return this.MenuItem_Unit_GO_SelectedUnitRemoveGroup;
        ////		}

        // Token: 0x06006F59 RID: 28505 RVA: 0x003E1830 File Offset: 0x003DFA30
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_581(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_436);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_GO_SelectedUnitRemoveGroup;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_GO_SelectedUnitRemoveGroup = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_GO_SelectedUnitRemoveGroup;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F5A RID: 28506 RVA: 0x003E187C File Offset: 0x003DFA7C
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_582()
        ////		{
        ////			return this.toolStripSeparator_27;
        ////		}

        // Token: 0x06006F5B RID: 28507 RVA: 0x0002ED93 File Offset: 0x0002CF93
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_583(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_27 = toolStripSeparator_37;
        //		}

        // Token: 0x06006F5C RID: 28508 RVA: 0x003E1894 File Offset: 0x003DFA94
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetReturnToBaseRTBToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_ReturnToBase;
        ////		}

        // Token: 0x06006F5D RID: 28509 RVA: 0x003E18AC File Offset: 0x003DFAAC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_585(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_437);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ReturnToBase;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ReturnToBase = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ReturnToBase;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F5E RID: 28510 RVA: 0x003E18F8 File Offset: 0x003DFAF8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSelectNewHomeBaseToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SelectNewBase;
        ////		}

        // Token: 0x06006F5F RID: 28511 RVA: 0x003E1910 File Offset: 0x003DFB10
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_587(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_438);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SelectNewBase;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SelectNewBase = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SelectNewBase;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F60 RID: 28512 RVA: 0x003E195C File Offset: 0x003DFB5C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetRefuelifPossibleToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_AirRefuel;
        ////		}

        // Token: 0x06006F61 RID: 28513 RVA: 0x0002ED9C File Offset: 0x0002CF9C
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_589(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_AirRefuel = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F62 RID: 28514 RVA: 0x003E1974 File Offset: 0x003DFB74
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAssignToMissionToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AssignMissionToUnit;
        ////		}

        // Token: 0x06006F63 RID: 28515 RVA: 0x0002EDA5 File Offset: 0x0002CFA5
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_591(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_AssignMissionToUnit = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F64 RID: 28516 RVA: 0x003E198C File Offset: 0x003DFB8C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDoctrineROEEMCONToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_Doctrine_RoE_EMCON_WRA;
        ////		}

        // Token: 0x06006F65 RID: 28517 RVA: 0x003E19A4 File Offset: 0x003DFBA4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_593(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_452);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Doctrine_RoE_EMCON_WRA;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Doctrine_RoE_EMCON_WRA = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Doctrine_RoE_EMCON_WRA;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F66 RID: 28518 RVA: 0x003E19F0 File Offset: 0x003DFBF0
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_594()
        ////		{
        ////			return this.MenuItem_Unit_ASW_DropPassiveSonobuoy;
        ////		}

        // Token: 0x06006F67 RID: 28519 RVA: 0x0002EDAE File Offset: 0x0002CFAE
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_595(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_ASW_DropPassiveSonobuoy = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F68 RID: 28520 RVA: 0x003E1A08 File Offset: 0x003DFC08
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_596()
        ////		{
        ////			return this.toolStripSeparator_28;
        ////		}

        // Token: 0x06006F69 RID: 28521 RVA: 0x0002EDB7 File Offset: 0x0002CFB7
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_597(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_28 = toolStripSeparator_37;
        //		}

        // Token: 0x06006F6A RID: 28522 RVA: 0x003E1A20 File Offset: 0x003DFC20
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_598()
        ////		{
        ////			return this.MenuItem_Unit_DeployDippingSonar;
        ////		}

        // Token: 0x06006F6B RID: 28523 RVA: 0x003E1A38 File Offset: 0x003DFC38
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_599(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_443);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_DeployDippingSonar;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_DeployDippingSonar = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_DeployDippingSonar;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F6C RID: 28524 RVA: 0x003E1A84 File Offset: 0x003DFC84
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_600()
        ////		{
        ////			return this.MenuItem_Unit_ASW_DPS_Shallow;
        ////		}

        // Token: 0x06006F6D RID: 28525 RVA: 0x003E1A9C File Offset: 0x003DFC9C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_601(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_439);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_ASW_DPS_Shallow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_ASW_DPS_Shallow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_ASW_DPS_Shallow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F6E RID: 28526 RVA: 0x003E1AE8 File Offset: 0x003DFCE8
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_602()
        ////		{
        ////			return this.MenuItem_Unit_DropActiveSonobuoy;
        ////		}

        // Token: 0x06006F6F RID: 28527 RVA: 0x0002EDC0 File Offset: 0x0002CFC0
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_603(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_DropActiveSonobuoy = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F70 RID: 28528 RVA: 0x003E1B00 File Offset: 0x003DFD00
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_604()
        ////		{
        ////			return this.MenuItem_Unit_ASW_DPS_Deep;
        ////		}

        // Token: 0x06006F71 RID: 28529 RVA: 0x003E1B18 File Offset: 0x003DFD18
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_605(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_440);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_ASW_DPS_Deep;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_ASW_DPS_Deep = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_ASW_DPS_Deep;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F72 RID: 28530 RVA: 0x003E1B64 File Offset: 0x003DFD64
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_606()
        ////		{
        ////			return this.MenuItem_Unit_ASW_DAS_Shallow;
        ////		}

        // Token: 0x06006F73 RID: 28531 RVA: 0x003E1B7C File Offset: 0x003DFD7C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_607(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_441);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_ASW_DAS_Shallow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_ASW_DAS_Shallow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_ASW_DAS_Shallow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F74 RID: 28532 RVA: 0x003E1BC8 File Offset: 0x003DFDC8
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_608()
        ////		{
        ////			return this.MenuItem_Unit_ASW_DAS_Deep;
        ////		}

        // Token: 0x06006F75 RID: 28533 RVA: 0x003E1BE0 File Offset: 0x003DFDE0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_609(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_442);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_ASW_DAS_Deep;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_ASW_DAS_Deep = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_ASW_DAS_Deep;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F76 RID: 28534 RVA: 0x003E1C2C File Offset: 0x003DFE2C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetUnitIsAutodetectableToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_UO_UnitAutoDetected;
        ////		}

        // Token: 0x06006F77 RID: 28535 RVA: 0x003E1C44 File Offset: 0x003DFE44
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_611(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_444);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UO_UnitAutoDetected;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UO_UnitAutoDetected = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UO_UnitAutoDetected;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F78 RID: 28536 RVA: 0x003E1C90 File Offset: 0x003DFE90
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSetOrientationToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_UO_SettingBearing;
        ////		}

        // Token: 0x06006F79 RID: 28537 RVA: 0x003E1CA8 File Offset: 0x003DFEA8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_613(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_447);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UO_SettingBearing;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UO_SettingBearing = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UO_SettingBearing;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F7A RID: 28538 RVA: 0x003E1CF4 File Offset: 0x003DFEF4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetHoldPositionToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UO_HoldPositon;
        ////		}

        // Token: 0x06006F7B RID: 28539 RVA: 0x003E1D0C File Offset: 0x003DFF0C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_615(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_448);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UO_HoldPositon;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UO_HoldPositon = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UO_HoldPositon;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F7C RID: 28540 RVA: 0x003E1D58 File Offset: 0x003DFF58
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetHoldPositionToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_HoldPositon_SelectedUnit;
        ////		}

        // Token: 0x06006F7D RID: 28541 RVA: 0x003E1D70 File Offset: 0x003DFF70
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_617(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_450);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_HoldPositon_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_HoldPositon_SelectedUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_HoldPositon_SelectedUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F7E RID: 28542 RVA: 0x003E1DBC File Offset: 0x003DFFBC
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_618()
        ////		{
        ////			return this.toolStripSeparator_29;
        ////		}

        // Token: 0x06006F7F RID: 28543 RVA: 0x0002EDC9 File Offset: 0x0002CFC9
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_619(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_29 = toolStripSeparator_37;
        //		}

        // Token: 0x06006F80 RID: 28544 RVA: 0x003E1DD4 File Offset: 0x003DFFD4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetHotkeysToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_HotKey;
        ////		}

        // Token: 0x06006F81 RID: 28545 RVA: 0x003E1DEC File Offset: 0x003DFFEC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_621(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_453);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_HotKey;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_HotKey = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_HotKey;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F82 RID: 28546 RVA: 0x003E1E38 File Offset: 0x003E0038
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_622()
        ////		{
        ////			return this.MenuItem_PlottedCourses;
        ////		}

        // Token: 0x06006F83 RID: 28547 RVA: 0x0002EDD2 File Offset: 0x0002CFD2
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_623(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_PlottedCourses = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F84 RID: 28548 RVA: 0x003E1E50 File Offset: 0x003E0050
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_624()
        ////		{
        ////			return this.MenuItem_AU_AddUnit54;
        ////		}

        // Token: 0x06006F85 RID: 28549 RVA: 0x003E1E68 File Offset: 0x003E0068
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_625(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_454);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AU_AddUnit54;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AU_AddUnit54 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AU_AddUnit54;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F86 RID: 28550 RVA: 0x003E1EB4 File Offset: 0x003E00B4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_626()
        ////		{
        ////			return this.MenuItem_PC_AllUnit;
        ////		}

        // Token: 0x06006F87 RID: 28551 RVA: 0x003E1ECC File Offset: 0x003E00CC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_627(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_455);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_PC_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_PC_AllUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_PC_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F88 RID: 28552 RVA: 0x003E1F18 File Offset: 0x003E0118
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_628()
        ////		{
        ////			return this.MenuItem_PC_NotShow;
        ////		}

        // Token: 0x06006F89 RID: 28553 RVA: 0x003E1F30 File Offset: 0x003E0130
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_629(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_456);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_PC_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_PC_NotShow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_PC_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F8A RID: 28554 RVA: 0x003E1F7C File Offset: 0x003E017C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetRemoveRelativityFromSelectedRefPointsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SelectedRefPointRemoveRelativity;
        ////		}

        // Token: 0x06006F8B RID: 28555 RVA: 0x003E1F94 File Offset: 0x003E0194
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_631(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_351);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SelectedRefPointRemoveRelativity;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SelectedRefPointRemoveRelativity = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SelectedRefPointRemoveRelativity;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F8C RID: 28556 RVA: 0x003E1FE0 File Offset: 0x003E01E0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetWeaponsHold_AllUnitsToolStripMenuItem_Main()
        ////		{
        ////			return this.MenuItem_AO_WeaponContorlStatusForAllType_AllUnit;
        ////		}

        // Token: 0x06006F8D RID: 28557 RVA: 0x0002EDDB File Offset: 0x0002CFDB
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_633(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_AO_WeaponContorlStatusForAllType_AllUnit = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F8E RID: 28558 RVA: 0x003E1FF8 File Offset: 0x003E01F8
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_634()
        ////		{
        ////			return this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_AllUnit;
        ////		}

        // Token: 0x06006F8F RID: 28559 RVA: 0x0002EDE4 File Offset: 0x0002CFE4
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_635(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_AllUnit = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F90 RID: 28560 RVA: 0x003E2010 File Offset: 0x003E0210
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetIgnorePlottedCourse_AllUnitsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AO_IgnorePlottedCourse_AllUnit;
        ////		}

        // Token: 0x06006F91 RID: 28561 RVA: 0x0002EDED File Offset: 0x0002CFED
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_637(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_AO_IgnorePlottedCourse_AllUnit = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F92 RID: 28562 RVA: 0x003E2028 File Offset: 0x003E0228
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_638()
        ////		{
        ////			return this.MenuItem_Unit_AO_IgnorePlottedCourse_AllUnit;
        ////		}

        // Token: 0x06006F93 RID: 28563 RVA: 0x0002EDF6 File Offset: 0x0002CFF6
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_639(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_AO_IgnorePlottedCourse_AllUnit = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F94 RID: 28564 RVA: 0x003E2040 File Offset: 0x003E0240
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDefineAreaToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_DefineArea;
        ////		}

        // Token: 0x06006F95 RID: 28565 RVA: 0x003E2058 File Offset: 0x003E0258
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_641(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_462);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DefineArea;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DefineArea = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DefineArea;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F96 RID: 28566 RVA: 0x003E20A4 File Offset: 0x003E02A4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetQuickJumpTSMI()
        ////		{
        ////			return this.MenuItem_QuickJump;
        ////		}

        // Token: 0x06006F97 RID: 28567 RVA: 0x0002EDFF File Offset: 0x0002CFFF
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_643(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_QuickJump = toolStripMenuItem_365;
        //		}

        // Token: 0x06006F98 RID: 28568 RVA: 0x003E20BC File Offset: 0x003E02BC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMessageLogInSeparateWindowToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_MessageOutputWindow;
        ////		}

        // Token: 0x06006F99 RID: 28569 RVA: 0x003E20D4 File Offset: 0x003E02D4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_645(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_464);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MessageOutputWindow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_MessageOutputWindow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MessageOutputWindow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F9A RID: 28570 RVA: 0x003E2120 File Offset: 0x003E0320
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_646()
        ////		{
        ////			return this.toolStripSeparator_30;
        ////		}

        // Token: 0x06006F9B RID: 28571 RVA: 0x0002EE08 File Offset: 0x0002D008
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_647(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_30 = toolStripSeparator_37;
        //		}

        // Token: 0x06006F9C RID: 28572 RVA: 0x003E2138 File Offset: 0x003E0338
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetHoldPositionAllUnitsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_HoldPositon_AllUnit;
        ////		}

        // Token: 0x06006F9D RID: 28573 RVA: 0x003E2150 File Offset: 0x003E0350
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_649(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_451);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_HoldPositon_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_HoldPositon_AllUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_HoldPositon_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006F9E RID: 28574 RVA: 0x003E219C File Offset: 0x003E039C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_650()
        ////		{
        ////			return this.MenuItem_Unit_HoldPositon_AllUnit;
        ////		}

        // Token: 0x06006F9F RID: 28575 RVA: 0x003E21B4 File Offset: 0x003E03B4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_651(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_370);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_HoldPositon_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_HoldPositon_AllUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_HoldPositon_AllUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FA0 RID: 28576 RVA: 0x003E2200 File Offset: 0x003E0400
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSatellitePassPredictionsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_SatellitePassPredictions;
        ////		}

        // Token: 0x06006FA1 RID: 28577 RVA: 0x003E2218 File Offset: 0x003E0418
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_653(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_465);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_SatellitePassPredictions;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_SatellitePassPredictions = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_SatellitePassPredictions;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FA2 RID: 28578 RVA: 0x003E2264 File Offset: 0x003E0464
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_654()
        ////		{
        ////			return this.MenuItem_Unit_SE_SetUnitTrainingLevel;
        ////		}

        // Token: 0x06006FA3 RID: 28579 RVA: 0x0002EE11 File Offset: 0x0002D011
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_655(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_SE_SetUnitTrainingLevel = toolStripMenuItem_365;
        //		}

        // Token: 0x06006FA4 RID: 28580 RVA: 0x003E227C File Offset: 0x003E047C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_656()
        ////		{
        ////			return this.MenuItem_Unit_SE_SUTL_NewPlayer;
        ////		}

        // Token: 0x06006FA5 RID: 28581 RVA: 0x003E2294 File Offset: 0x003E0494
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_657(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_466);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SE_SUTL_NewPlayer;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SE_SUTL_NewPlayer = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SE_SUTL_NewPlayer;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FA6 RID: 28582 RVA: 0x003E22E0 File Offset: 0x003E04E0
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_658()
        ////		{
        ////			return this.MenuItem_Unit_SE_SUTL_Trainee;
        ////		}

        // Token: 0x06006FA7 RID: 28583 RVA: 0x003E22F8 File Offset: 0x003E04F8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_659(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_467);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SE_SUTL_Trainee;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SE_SUTL_Trainee = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SE_SUTL_Trainee;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FA8 RID: 28584 RVA: 0x003E2344 File Offset: 0x003E0544
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_660()
        ////		{
        ////			return this.MenuItem_Unit_SE_SUTL_Common;
        ////		}

        // Token: 0x06006FA9 RID: 28585 RVA: 0x003E235C File Offset: 0x003E055C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_661(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_468);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SE_SUTL_Common;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SE_SUTL_Common = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SE_SUTL_Common;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FAA RID: 28586 RVA: 0x003E23A8 File Offset: 0x003E05A8
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_662()
        ////		{
        ////			return this.MenuItem_Unit_SE_SUTL_OldStager;
        ////		}

        // Token: 0x06006FAB RID: 28587 RVA: 0x003E23C0 File Offset: 0x003E05C0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_663(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_469);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SE_SUTL_OldStager;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SE_SUTL_OldStager = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SE_SUTL_OldStager;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FAC RID: 28588 RVA: 0x003E240C File Offset: 0x003E060C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_664()
        ////		{
        ////			return this.MenuItem_Unit_SE_SUTL_TopLevel;
        ////		}

        // Token: 0x06006FAD RID: 28589 RVA: 0x003E2424 File Offset: 0x003E0624
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_665(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_470);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SE_SUTL_TopLevel;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SE_SUTL_TopLevel = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SE_SUTL_TopLevel;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FAE RID: 28590 RVA: 0x003E2470 File Offset: 0x003E0670
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_666()
        ////		{
        ////			return this.MenuItem_Unit_SE_SUTL_SameAsCamp;
        ////		}

        // Token: 0x06006FAF RID: 28591 RVA: 0x003E2488 File Offset: 0x003E0688
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_667(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_471);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SE_SUTL_SameAsCamp;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SE_SUTL_SameAsCamp = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SE_SUTL_SameAsCamp;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FB0 RID: 28592 RVA: 0x003E24D4 File Offset: 0x003E06D4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_CloneUnit()
        ////		{
        ////			return this.MenuItem_UO_CloneUnit;
        ////		}

        // Token: 0x06006FB1 RID: 28593 RVA: 0x003E24EC File Offset: 0x003E06EC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_669(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_475);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UO_CloneUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UO_CloneUnit = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UO_CloneUnit;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FB2 RID: 28594 RVA: 0x003E2538 File Offset: 0x003E0738
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetLandWeaponsMenuItem()
        ////		{
        ////			return this.MenuItem_ToLandAttackRange;
        ////		}

        // Token: 0x06006FB3 RID: 28595 RVA: 0x003E2550 File Offset: 0x003E0750
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_671(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_214);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ToLandAttackRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ToLandAttackRange = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ToLandAttackRange;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FB4 RID: 28596 RVA: 0x003E259C File Offset: 0x003E079C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetQuickTurnaroundToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_QuickTumaround;
        ////		}

        // Token: 0x06006FB5 RID: 28597 RVA: 0x003E25B4 File Offset: 0x003E07B4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_673(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_472);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_QuickTumaround;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_QuickTumaround = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_QuickTumaround;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FB6 RID: 28598 RVA: 0x003E2600 File Offset: 0x003E0800
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_674()
        ////		{
        ////			return this.MenuItem_Unit_QuickTumaround;
        ////		}

        // Token: 0x06006FB7 RID: 28599 RVA: 0x003E2618 File Offset: 0x003E0818
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_675(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_473);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_QuickTumaround;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_QuickTumaround = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_QuickTumaround;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FB8 RID: 28600 RVA: 0x003E2664 File Offset: 0x003E0864
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSetFuelAndAirborneTimeToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UO_SetOilAndHangTime;
        ////		}

        // Token: 0x06006FB9 RID: 28601 RVA: 0x003E267C File Offset: 0x003E087C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_677(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_474);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_UO_SetOilAndHangTime;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_UO_SetOilAndHangTime = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_UO_SetOilAndHangTime;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FBA RID: 28602 RVA: 0x003E26C8 File Offset: 0x003E08C8
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_678()
        ////		{
        ////			return this.MenuItem_ScenarioAttachment;
        ////		}

        // Token: 0x06006FBB RID: 28603 RVA: 0x003E26E0 File Offset: 0x003E08E0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_679(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_476);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ScenarioAttachment;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ScenarioAttachment = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ScenarioAttachment;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FBC RID: 28604 RVA: 0x003E272C File Offset: 0x003E092C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_PackageScen()
        ////		{
        ////			return this.MenuItem_ScenarioPackingPublish;
        ////		}

        // Token: 0x06006FBD RID: 28605 RVA: 0x003E2744 File Offset: 0x003E0944
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_681(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_477);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_ScenarioPackingPublish;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_ScenarioPackingPublish = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_ScenarioPackingPublish;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FBE RID: 28606 RVA: 0x003E2790 File Offset: 0x003E0990
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetIgnorePlottedCourse_Selected_Yes()
        ////		{
        ////			return this.MenuItem_AO_IPCSU_Yes;
        ////		}

        // Token: 0x06006FBF RID: 28607 RVA: 0x003E27A8 File Offset: 0x003E09A8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_683(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_478);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_IPCSU_Yes;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_IPCSU_Yes = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_IPCSU_Yes;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FC0 RID: 28608 RVA: 0x003E27F4 File Offset: 0x003E09F4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetIgnorePlottedCourse_Selected_No()
        ////		{
        ////			return this.MenuItem_AO_IPCSU_No;
        ////		}

        // Token: 0x06006FC1 RID: 28609 RVA: 0x003E280C File Offset: 0x003E0A0C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_685(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_479);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_IPCSU_No;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_IPCSU_No = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_IPCSU_No;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FC2 RID: 28610 RVA: 0x003E2858 File Offset: 0x003E0A58
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetIgnorePlottedCourse_Selected_Inherit()
        ////		{
        ////			return this.MenuItem_AO_IPCSU_SameAsSuperior;
        ////		}

        // Token: 0x06006FC3 RID: 28611 RVA: 0x003E2870 File Offset: 0x003E0A70
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_687(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_480);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_IPCSU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_IPCSU_SameAsSuperior = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_IPCSU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FC4 RID: 28612 RVA: 0x003E28BC File Offset: 0x003E0ABC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetIgnorePlottedCourse_All_Yes()
        ////		{
        ////			return this.MenuItem_AO_IPCAU_Yes;
        ////		}

        // Token: 0x06006FC5 RID: 28613 RVA: 0x003E28D4 File Offset: 0x003E0AD4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_689(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_481);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_IPCAU_Yes;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_IPCAU_Yes = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_IPCAU_Yes;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FC6 RID: 28614 RVA: 0x003E2920 File Offset: 0x003E0B20
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetIgnorePlottedCourse_All_No()
        ////		{
        ////			return this.MenuItem_AO_IPCAU_No;
        ////		}

        // Token: 0x06006FC7 RID: 28615 RVA: 0x003E2938 File Offset: 0x003E0B38
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_691(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_482);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_IPCAU_No;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_IPCAU_No = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_IPCAU_No;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FC8 RID: 28616 RVA: 0x003E2984 File Offset: 0x003E0B84
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetIgnorePlottedCourse_All_Inherit()
        ////		{
        ////			return this.MenuItem_AO_IPCAU_SameAsSuperior;
        ////		}

        // Token: 0x06006FC9 RID: 28617 RVA: 0x003E299C File Offset: 0x003E0B9C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_693(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_483);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_IPCAU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_IPCAU_SameAsSuperior = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_IPCAU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FCA RID: 28618 RVA: 0x003E29E8 File Offset: 0x003E0BE8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetWCS_Selected_Hold_Main()
        ////		{
        ////			return this.MenuItem_AO_WCSFATSU_ForbidFire;
        ////		}

        // Token: 0x06006FCB RID: 28619 RVA: 0x003E2A00 File Offset: 0x003E0C00
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_695(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_484);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_WCSFATSU_ForbidFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_WCSFATSU_ForbidFire = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_WCSFATSU_ForbidFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FCC RID: 28620 RVA: 0x003E2A4C File Offset: 0x003E0C4C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetWCS_Selected_Tight_Main()
        ////		{
        ////			return this.MenuItem_AO_WCSFATSU_LimitFire;
        ////		}

        // Token: 0x06006FCD RID: 28621 RVA: 0x003E2A64 File Offset: 0x003E0C64
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_697(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_485);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_WCSFATSU_LimitFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_WCSFATSU_LimitFire = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_WCSFATSU_LimitFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FCE RID: 28622 RVA: 0x003E2AB0 File Offset: 0x003E0CB0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetWCS_Selected_Free_Main()
        ////		{
        ////			return this.MenuItem_AO_WCSFATSU_FreeFire;
        ////		}

        // Token: 0x06006FCF RID: 28623 RVA: 0x003E2AC8 File Offset: 0x003E0CC8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_699(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_486);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_WCSFATSU_FreeFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_WCSFATSU_FreeFire = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_WCSFATSU_FreeFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FD0 RID: 28624 RVA: 0x003E2B14 File Offset: 0x003E0D14
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetWCS_Selected_Inherit_Main()
        ////		{
        ////			return this.MenuItem_AO_WCSFATSU_SameAsSuperior;
        ////		}

        // Token: 0x06006FD1 RID: 28625 RVA: 0x003E2B2C File Offset: 0x003E0D2C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_701(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_487);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_WCSFATSU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_WCSFATSU_SameAsSuperior = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_WCSFATSU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FD2 RID: 28626 RVA: 0x003E2B78 File Offset: 0x003E0D78
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetWCS_All_Hold_Main()
        ////		{
        ////			return this.MenuItem_AO_WCSFATAU_ForbidFire;
        ////		}

        // Token: 0x06006FD3 RID: 28627 RVA: 0x003E2B90 File Offset: 0x003E0D90
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_703(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_488);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_WCSFATAU_ForbidFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_WCSFATAU_ForbidFire = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_WCSFATAU_ForbidFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FD4 RID: 28628 RVA: 0x003E2BDC File Offset: 0x003E0DDC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetWCS_All_Tight_Main()
        ////		{
        ////			return this.MenuItem_AO_WCSFATAU_LimitFire;
        ////		}

        // Token: 0x06006FD5 RID: 28629 RVA: 0x003E2BF4 File Offset: 0x003E0DF4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_705(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_489);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_WCSFATAU_LimitFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_WCSFATAU_LimitFire = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_WCSFATAU_LimitFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FD6 RID: 28630 RVA: 0x003E2C40 File Offset: 0x003E0E40
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetWCS_All_Free_Main()
        ////		{
        ////			return this.MenuItem_AO_WCSFATAU_FreeFire;
        ////		}

        // Token: 0x06006FD7 RID: 28631 RVA: 0x003E2C58 File Offset: 0x003E0E58
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_707(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_490);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_WCSFATAU_FreeFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_WCSFATAU_FreeFire = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_WCSFATAU_FreeFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FD8 RID: 28632 RVA: 0x003E2CA4 File Offset: 0x003E0EA4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetWCS_All_Inherit_Main()
        ////		{
        ////			return this.MenuItem_AO_WCSFATAU_SameAsSuperior;
        ////		}

        // Token: 0x06006FD9 RID: 28633 RVA: 0x003E2CBC File Offset: 0x003E0EBC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_709(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_491);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AO_WCSFATAU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AO_WCSFATAU_SameAsSuperior = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AO_WCSFATAU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FDA RID: 28634 RVA: 0x003E2D08 File Offset: 0x003E0F08
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_710()
        ////		{
        ////			return this.MenuItem_Unit_AO_IPCSU_Yes;
        ////		}

        // Token: 0x06006FDB RID: 28635 RVA: 0x003E2D20 File Offset: 0x003E0F20
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_711(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_492);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_IPCSU_Yes;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_IPCSU_Yes = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_IPCSU_Yes;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FDC RID: 28636 RVA: 0x003E2D6C File Offset: 0x003E0F6C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_712()
        ////		{
        ////			return this.MenuItem_Unit_AO_IPCSU_No;
        ////		}

        // Token: 0x06006FDD RID: 28637 RVA: 0x003E2D84 File Offset: 0x003E0F84
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_713(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_493);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_IPCSU_No;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_IPCSU_No = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_IPCSU_No;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FDE RID: 28638 RVA: 0x003E2DD0 File Offset: 0x003E0FD0
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_714()
        ////		{
        ////			return this.MenuItem_Unit_AO_IPCSU_SameAsSuperior;
        ////		}

        // Token: 0x06006FDF RID: 28639 RVA: 0x003E2DE8 File Offset: 0x003E0FE8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_715(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_494);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_IPCSU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_IPCSU_SameAsSuperior = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_IPCSU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FE0 RID: 28640 RVA: 0x003E2E34 File Offset: 0x003E1034
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_716()
        ////		{
        ////			return this.MenuItem_Unit_AO_IPCAU_Yes;
        ////		}

        // Token: 0x06006FE1 RID: 28641 RVA: 0x003E2E4C File Offset: 0x003E104C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_717(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_495);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_IPCAU_Yes;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_IPCAU_Yes = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_IPCAU_Yes;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FE2 RID: 28642 RVA: 0x003E2E98 File Offset: 0x003E1098
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_718()
        ////		{
        ////			return this.MenuItem_Unit_AO_IPCAU_No;
        ////		}

        // Token: 0x06006FE3 RID: 28643 RVA: 0x003E2EB0 File Offset: 0x003E10B0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_719(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_496);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_IPCAU_No;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_IPCAU_No = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_IPCAU_No;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FE4 RID: 28644 RVA: 0x003E2EFC File Offset: 0x003E10FC
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_720()
        ////		{
        ////			return this.MenuItem_Unit_AO_IPCAU_SameAsSuperior;
        ////		}

        // Token: 0x06006FE5 RID: 28645 RVA: 0x003E2F14 File Offset: 0x003E1114
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_721(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_497);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_IPCAU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_IPCAU_SameAsSuperior = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_IPCAU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FE6 RID: 28646 RVA: 0x003E2F60 File Offset: 0x003E1160
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_722()
        ////		{
        ////			return this.MenuItem_Unit_AO_WCSFATSU_ForbidFire;
        ////		}

        // Token: 0x06006FE7 RID: 28647 RVA: 0x003E2F78 File Offset: 0x003E1178
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_723(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_498);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATSU_ForbidFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_WCSFATSU_ForbidFire = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATSU_ForbidFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FE8 RID: 28648 RVA: 0x003E2FC4 File Offset: 0x003E11C4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_724()
        ////		{
        ////			return this.MenuItem_Unit_AO_WCSFATSU_LimitFire;
        ////		}

        // Token: 0x06006FE9 RID: 28649 RVA: 0x003E2FDC File Offset: 0x003E11DC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_725(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_499);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATSU_LimitFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_WCSFATSU_LimitFire = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATSU_LimitFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FEA RID: 28650 RVA: 0x003E3028 File Offset: 0x003E1228
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_726()
        ////		{
        ////			return this.MenuItem_Unit_AO_WCSFATSU_FreeFire;
        ////		}

        // Token: 0x06006FEB RID: 28651 RVA: 0x003E3040 File Offset: 0x003E1240
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_727(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_500);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATSU_FreeFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_WCSFATSU_FreeFire = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATSU_FreeFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FEC RID: 28652 RVA: 0x003E308C File Offset: 0x003E128C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_728()
        ////		{
        ////			return this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior;
        ////		}

        // Token: 0x06006FED RID: 28653 RVA: 0x003E30A4 File Offset: 0x003E12A4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_729(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_501);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FEE RID: 28654 RVA: 0x003E30F0 File Offset: 0x003E12F0
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_730()
        ////		{
        ////			return this.MenuItem_Unit_AO_WCSFATAU_ForbidFire;
        ////		}

        // Token: 0x06006FEF RID: 28655 RVA: 0x003E3108 File Offset: 0x003E1308
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_731(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_502);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATAU_ForbidFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_WCSFATAU_ForbidFire = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATAU_ForbidFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FF0 RID: 28656 RVA: 0x003E3154 File Offset: 0x003E1354
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_732()
        ////		{
        ////			return this.MenuItem_Unit_AO_WCSFATAU_LimitFire;
        ////		}

        // Token: 0x06006FF1 RID: 28657 RVA: 0x003E316C File Offset: 0x003E136C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_733(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_503);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATAU_LimitFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_WCSFATAU_LimitFire = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATAU_LimitFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FF2 RID: 28658 RVA: 0x003E31B8 File Offset: 0x003E13B8
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_734()
        ////		{
        ////			return this.MenuItem_Unit_AO_WCSFATAU_FreeFire;
        ////		}

        // Token: 0x06006FF3 RID: 28659 RVA: 0x003E31D0 File Offset: 0x003E13D0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_735(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_504);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATAU_FreeFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_WCSFATAU_FreeFire = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATAU_FreeFire;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FF4 RID: 28660 RVA: 0x003E321C File Offset: 0x003E141C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_736()
        ////		{
        ////			return this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior;
        ////		}

        // Token: 0x06006FF5 RID: 28661 RVA: 0x003E3234 File Offset: 0x003E1434
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_737(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_505);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FF6 RID: 28662 RVA: 0x003E3280 File Offset: 0x003E1480
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetIgnorePlottedCourse_SelectedUnitsToolStripMenuItem1()
        ////		{
        ////			return this.MenuItem_AO_IgnorePlottedCourse_SelectedUnit;
        ////		}

        // Token: 0x06006FF7 RID: 28663 RVA: 0x0002EE1A File Offset: 0x0002D01A
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_739(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_AO_IgnorePlottedCourse_SelectedUnit = toolStripMenuItem_365;
        //		}

        // Token: 0x06006FF8 RID: 28664 RVA: 0x003E3298 File Offset: 0x003E1498
        ////		[CompilerGenerated]
        ////		internal  ContextMenuStrip vmethod_740()
        ////		{
        ////			return this.contextMenuStrip_4;
        ////		}

        // Token: 0x06006FF9 RID: 28665 RVA: 0x0002EE23 File Offset: 0x0002D023
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_741(ContextMenuStrip contextMenuStrip_5)
        //		{
        //			this.contextMenuStrip_4 = contextMenuStrip_5;
        //		}

        // Token: 0x06006FFA RID: 28666 RVA: 0x003E32B0 File Offset: 0x003E14B0
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_742()
        ////		{
        ////			return this.toolStripMenuItem_311;
        ////		}

        // Token: 0x06006FFB RID: 28667 RVA: 0x003E32C8 File Offset: 0x003E14C8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_743(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_512);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_311;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_311 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_311;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06006FFC RID: 28668 RVA: 0x003E3314 File Offset: 0x003E1514
        ////		[CompilerGenerated]
        ////		internal  Timer vmethod_744()
        ////		{
        ////			return this.timer_4;
        ////		}

        // Token: 0x06006FFD RID: 28669 RVA: 0x003E332C File Offset: 0x003E152C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_745(Timer timer_9)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_513);
        ////			Timer timer = this.timer_4;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick -= value;
        ////			}
        ////			this.timer_4 = timer_9;
        ////			timer = this.timer_4;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick += value;
        ////			}
        ////		}

        // Token: 0x06006FFE RID: 28670 RVA: 0x003E3378 File Offset: 0x003E1578
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetFilteroutAllContactsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_FilteroutAllTarget;
        ////		}

        // Token: 0x06006FFF RID: 28671 RVA: 0x003E3390 File Offset: 0x003E1590
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetFilteroutAllContactsToolStripMenuItem(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.FilteroutAllContactsToolStripMenuItem_Click);
        ////			ToolStripMenuItem MenuItem_FilteroutAllTarget = this.MenuItem_FilteroutAllTarget;
        ////			if (MenuItem_FilteroutAllTarget != null)
        ////			{
        ////				MenuItem_FilteroutAllTarget.Click -= value;
        ////			}
        ////			this.MenuItem_FilteroutAllTarget = toolStripMenuItem_365;
        ////			MenuItem_FilteroutAllTarget = this.MenuItem_FilteroutAllTarget;
        ////			if (MenuItem_FilteroutAllTarget != null)
        ////			{
        ////				MenuItem_FilteroutAllTarget.Click += value;
        ////			}
        ////		}

        // Token: 0x06007000 RID: 28672 RVA: 0x003E33DC File Offset: 0x003E15DC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMenuItem_CancelFilteroutAllContacts()
        ////		{
        ////			return this.MenuItem_CancelFilteroutAllContacts;
        ////		}

        // Token: 0x06007001 RID: 28673 RVA: 0x003E33F4 File Offset: 0x003E15F4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetMenuItem_CancelFilteroutAllContacts(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.MenuItem_CancelFilteroutAllContacts_Click);
        ////			ToolStripMenuItem MenuItem_CancelFilteroutAllContacts = this.MenuItem_CancelFilteroutAllContacts;
        ////			if (MenuItem_CancelFilteroutAllContacts != null)
        ////			{
        ////				MenuItem_CancelFilteroutAllContacts.Click -= value;
        ////			}
        ////			this.MenuItem_CancelFilteroutAllContacts = toolStripMenuItem_365;
        ////			MenuItem_CancelFilteroutAllContacts = this.MenuItem_CancelFilteroutAllContacts;
        ////			if (MenuItem_CancelFilteroutAllContacts != null)
        ////			{
        ////				MenuItem_CancelFilteroutAllContacts.Click += value;
        ////			}
        ////		}

        // Token: 0x06007002 RID: 28674 RVA: 0x003E3440 File Offset: 0x003E1640
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_750()
        ////		{
        ////			return this.MenuItem_DataBase;
        ////		}

        // Token: 0x06007003 RID: 28675 RVA: 0x0002EE2C File Offset: 0x0002D02C
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_751(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_DataBase = toolStripMenuItem_365;
        //		}

        // Token: 0x06007004 RID: 28676 RVA: 0x003E3458 File Offset: 0x003E1658
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_752()
        ////		{
        ////			return this.MenuItem_DB_SecnarioDataBandingToCustomDB;
        ////		}

        // Token: 0x06007005 RID: 28677 RVA: 0x003E3470 File Offset: 0x003E1670
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_753(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_517);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DB_SecnarioDataBandingToCustomDB;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DB_SecnarioDataBandingToCustomDB = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DB_SecnarioDataBandingToCustomDB;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007006 RID: 28678 RVA: 0x003E34BC File Offset: 0x003E16BC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMenuItem_DB_ChangeDB()
        ////		{
        ////			return this.MenuItem_DB_ChangeDB;
        ////		}

        // Token: 0x06007007 RID: 28679 RVA: 0x0002EE35 File Offset: 0x0002D035
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetMenuItem_DB_ChangeDB(ToolStripMenuItem value)
        ////		{
        ////			this.MenuItem_DB_ChangeDB = value;
        ////		}

        // Token: 0x06007008 RID: 28680 RVA: 0x003E34D4 File Offset: 0x003E16D4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_756()
        ////		{
        ////			return this.MenuItem_DB_SecnarioDataUpdateToLatestVersion;
        ////		}

        // Token: 0x06007009 RID: 28681 RVA: 0x003E34EC File Offset: 0x003E16EC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_757(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_516);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DB_SecnarioDataUpdateToLatestVersion;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DB_SecnarioDataUpdateToLatestVersion = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DB_SecnarioDataUpdateToLatestVersion;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600700A RID: 28682 RVA: 0x003E3538 File Offset: 0x003E1738
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_Campaign()
        ////		{
        ////			return this.MenuItem_Battle;
        ////		}

        // Token: 0x0600700B RID: 28683 RVA: 0x0002EE3E File Offset: 0x0002D03E
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_759(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Battle = toolStripMenuItem_365;
        //		}

        // Token: 0x0600700C RID: 28684 RVA: 0x003E3550 File Offset: 0x003E1750
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_760()
        ////		{
        ////			return this.toolStripSeparator_31;
        ////		}

        // Token: 0x0600700D RID: 28685 RVA: 0x0002EE47 File Offset: 0x0002D047
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_761(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_31 = toolStripSeparator_37;
        //		}

        // Token: 0x0600700E RID: 28686 RVA: 0x003E3568 File Offset: 0x003E1768
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetCreateNewToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_Battle_New;
        ////		}

        // Token: 0x0600700F RID: 28687 RVA: 0x003E3580 File Offset: 0x003E1780
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_763(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_518);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Battle_New;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Battle_New = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Battle_New;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007010 RID: 28688 RVA: 0x003E35CC File Offset: 0x003E17CC
        ////		[CompilerGenerated]
        ////		internal  OpenFileDialog vmethod_764()
        ////		{
        ////			return this.openFileDialog_3;
        ////		}

        // Token: 0x06007011 RID: 28689 RVA: 0x0002EE50 File Offset: 0x0002D050
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_765(OpenFileDialog openFileDialog_4)
        //		{
        //			this.openFileDialog_3 = openFileDialog_4;
        //		}

        // Token: 0x06007012 RID: 28690 RVA: 0x003E35E4 File Offset: 0x003E17E4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetLoadFromFileToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_Battle_LoadForFile;
        ////		}

        // Token: 0x06007013 RID: 28691 RVA: 0x003E35FC File Offset: 0x003E17FC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_767(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_519);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Battle_LoadForFile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Battle_LoadForFile = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Battle_LoadForFile;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007014 RID: 28692 RVA: 0x003E3648 File Offset: 0x003E1848
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_768()
        ////		{
        ////			return this.MenuItem_DB_CDB_Waiting;
        ////		}

        // Token: 0x06007015 RID: 28693 RVA: 0x0002EE59 File Offset: 0x0002D059
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_769(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_DB_CDB_Waiting = toolStripMenuItem_365;
        //		}

        // Token: 0x06007016 RID: 28694 RVA: 0x003E3660 File Offset: 0x003E1860
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_770()
        ////		{
        ////			return this.MenuItem_Tutorials;
        ////		}

        // Token: 0x06007017 RID: 28695 RVA: 0x003E3678 File Offset: 0x003E1878
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_771(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_531);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Tutorials;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Tutorials = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Tutorials;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007018 RID: 28696 RVA: 0x003E36C4 File Offset: 0x003E18C4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_PublishToSteam()
        ////		{
        ////			return this.MenuItem_PublishScenarioToSimulationServer;
        ////		}

        // Token: 0x06007019 RID: 28697 RVA: 0x003E36DC File Offset: 0x003E18DC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_773(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_532);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_PublishScenarioToSimulationServer;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_PublishScenarioToSimulationServer = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_PublishScenarioToSimulationServer;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600701A RID: 28698 RVA: 0x003E3728 File Offset: 0x003E1928
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_774()
        ////		{
        ////			return this.toolStripSeparator_32;
        ////		}

        // Token: 0x0600701B RID: 28699 RVA: 0x0002EE62 File Offset: 0x0002D062
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_775(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_32 = toolStripSeparator_37;
        //		}

        // Token: 0x0600701C RID: 28700 RVA: 0x003E3740 File Offset: 0x003E1940
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAllEmissionsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_CE_AllEmissions;
        ////		}

        // Token: 0x0600701D RID: 28701 RVA: 0x003E3758 File Offset: 0x003E1958
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_777(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_533);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_CE_AllEmissions;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_CE_AllEmissions = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_CE_AllEmissions;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600701E RID: 28702 RVA: 0x003E37A4 File Offset: 0x003E19A4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetFireControlOnlyToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_CE_OnlyFCR;
        ////		}

        // Token: 0x0600701F RID: 28703 RVA: 0x003E37BC File Offset: 0x003E19BC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_779(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_534);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_CE_OnlyFCR;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_CE_OnlyFCR = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_CE_OnlyFCR;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007020 RID: 28704 RVA: 0x003E3808 File Offset: 0x003E1A08
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetPlacenamesMenuItem()
        ////		{
        ////			return this.MenuItem_PlacenameLayer;
        ////		}

        // Token: 0x06007021 RID: 28705 RVA: 0x003E3820 File Offset: 0x003E1A20
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_781(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_232);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_PlacenameLayer;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_PlacenameLayer = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_PlacenameLayer;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007022 RID: 28706 RVA: 0x003E386C File Offset: 0x003E1A6C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetDayNightLightingMenuItem()
        ////		{
        ////			return this.MenuItem_DayNightLight;
        ////		}

        // Token: 0x06007023 RID: 28707 RVA: 0x003E3884 File Offset: 0x003E1A84
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_783(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_521);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_DayNightLight;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_DayNightLight = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_DayNightLight;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007024 RID: 28708 RVA: 0x003E38D0 File Offset: 0x003E1AD0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetAllEmissionsForSelectedContactFireControlOnlyForRestToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_CE_SelectedShowAllRestOnlyFCR;
        ////		}

        // Token: 0x06007025 RID: 28709 RVA: 0x003E38E8 File Offset: 0x003E1AE8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_785(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_535);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_CE_SelectedShowAllRestOnlyFCR;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_CE_SelectedShowAllRestOnlyFCR = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_CE_SelectedShowAllRestOnlyFCR;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007026 RID: 28710 RVA: 0x003E3934 File Offset: 0x003E1B34
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSpecialActionsToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_EE_SpecialEvent;
        ////		}

        // Token: 0x06007027 RID: 28711 RVA: 0x003E394C File Offset: 0x003E1B4C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_787(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_523);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_EE_SpecialEvent;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_EE_SpecialEvent = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_EE_SpecialEvent;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007028 RID: 28712 RVA: 0x003E3998 File Offset: 0x003E1B98
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_SideSpecialActions()
        ////		{
        ////			return this.MenuItem_MenuItem_SpecialAction;
        ////		}

        // Token: 0x06007029 RID: 28713 RVA: 0x003E39B0 File Offset: 0x003E1BB0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_789(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_524);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MenuItem_SpecialAction;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_MenuItem_SpecialAction = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MenuItem_SpecialAction;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600702A RID: 28714 RVA: 0x003E39FC File Offset: 0x003E1BFC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSelectTankerAutomaticallyToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AR_AutoSelectAerialTanker;
        ////		}

        // Token: 0x0600702B RID: 28715 RVA: 0x003E3A14 File Offset: 0x003E1C14
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_791(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_536);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AR_AutoSelectAerialTanker;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AR_AutoSelectAerialTanker = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AR_AutoSelectAerialTanker;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600702C RID: 28716 RVA: 0x003E3A60 File Offset: 0x003E1C60
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSelectTankerManuallyToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AR_ManualSelectAerialTanker;
        ////		}

        // Token: 0x0600702D RID: 28717 RVA: 0x003E3A78 File Offset: 0x003E1C78
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_793(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_540);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_AR_ManualSelectAerialTanker;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_AR_ManualSelectAerialTanker = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_AR_ManualSelectAerialTanker;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600702E RID: 28718 RVA: 0x003E3AC4 File Offset: 0x003E1CC4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetSelectTankerFromMissionToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_AR_SelectForMission;
        ////		}

        // Token: 0x0600702F RID: 28719 RVA: 0x0002EE6B File Offset: 0x0002D06B
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_795(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_AR_SelectForMission = toolStripMenuItem_365;
        //		}

        // Token: 0x06007030 RID: 28720 RVA: 0x003E3ADC File Offset: 0x003E1CDC
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_796()
        ////		{
        ////			return this.MenuItem_Unit_AR_AutoSelectAerialTanker;
        ////		}

        // Token: 0x06007031 RID: 28721 RVA: 0x003E3AF4 File Offset: 0x003E1CF4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_797(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_547);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AR_AutoSelectAerialTanker;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AR_AutoSelectAerialTanker = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AR_AutoSelectAerialTanker;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007032 RID: 28722 RVA: 0x003E3B40 File Offset: 0x003E1D40
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_798()
        ////		{
        ////			return this.MenuItem_Unit_AR_ManualSelectAerialTanker;
        ////		}

        // Token: 0x06007033 RID: 28723 RVA: 0x003E3B58 File Offset: 0x003E1D58
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_799(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_548);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_AR_ManualSelectAerialTanker;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_AR_ManualSelectAerialTanker = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_AR_ManualSelectAerialTanker;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007034 RID: 28724 RVA: 0x003E3BA4 File Offset: 0x003E1DA4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_800()
        ////		{
        ////			return this.MenuItem_Unit_AR_SelectForMission;
        ////		}

        // Token: 0x06007035 RID: 28725 RVA: 0x0002EE74 File Offset: 0x0002D074
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_801(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_AR_SelectForMission = toolStripMenuItem_365;
        //		}

        // Token: 0x06007036 RID: 28726 RVA: 0x003E3BBC File Offset: 0x003E1DBC
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMissionAreacourseToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_MissionAreaOrCourse;
        ////		}

        // Token: 0x06007037 RID: 28727 RVA: 0x0002EE7D File Offset: 0x0002D07D
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_803(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_MissionAreaOrCourse = toolStripMenuItem_365;
        //		}

        // Token: 0x06007038 RID: 28728 RVA: 0x003E3BD4 File Offset: 0x003E1DD4
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_804()
        ////		{
        ////			return this.MenuItem_MAOC_SelectedMission;
        ////		}

        // Token: 0x06007039 RID: 28729 RVA: 0x003E3BEC File Offset: 0x003E1DEC
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_805(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_525);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MAOC_SelectedMission;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_MAOC_SelectedMission = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MAOC_SelectedMission;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600703A RID: 28730 RVA: 0x003E3C38 File Offset: 0x003E1E38
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_806()
        ////		{
        ////			return this.MenuItem_MAOC_AllMission;
        ////		}

        // Token: 0x0600703B RID: 28731 RVA: 0x003E3C50 File Offset: 0x003E1E50
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_807(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_526);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MAOC_AllMission;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_MAOC_AllMission = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MAOC_AllMission;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600703C RID: 28732 RVA: 0x003E3C9C File Offset: 0x003E1E9C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_808()
        ////		{
        ////			return this.MenuItem_MAOC_NotShow;
        ////		}

        // Token: 0x0600703D RID: 28733 RVA: 0x003E3CB4 File Offset: 0x003E1EB4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_809(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_527);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MAOC_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_MAOC_NotShow = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MAOC_NotShow;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600703E RID: 28734 RVA: 0x003E3D00 File Offset: 0x003E1F00
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_810()
        ////		{
        ////			return this.MenuItem_Unit_ScenarioEdit;
        ////		}

        // Token: 0x0600703F RID: 28735 RVA: 0x0002EE86 File Offset: 0x0002D086
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_811(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_ScenarioEdit = toolStripMenuItem_365;
        //		}

        // Token: 0x06007040 RID: 28736 RVA: 0x003E3D18 File Offset: 0x003E1F18
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_812()
        ////		{
        ////			return this.MenuItem_Unit_GroupOperations;
        ////		}

        // Token: 0x06007041 RID: 28737 RVA: 0x0002EE8F File Offset: 0x0002D08F
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_813(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_GroupOperations = toolStripMenuItem_365;
        //		}

        // Token: 0x06007042 RID: 28738 RVA: 0x003E3D30 File Offset: 0x003E1F30
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_814()
        ////		{
        ////			return this.MenuItem_Unit_AntiSubmarineWar;
        ////		}

        // Token: 0x06007043 RID: 28739 RVA: 0x0002EE98 File Offset: 0x0002D098
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_815(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_Unit_AntiSubmarineWar = toolStripMenuItem_365;
        //		}

        // Token: 0x06007044 RID: 28740 RVA: 0x003E3D48 File Offset: 0x003E1F48
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_ASWSpecificActions2()
        ////		{
        ////			return this.MenuItem_AntiSubmarineWar;
        ////		}

        // Token: 0x06007045 RID: 28741 RVA: 0x0002EEA1 File Offset: 0x0002D0A1
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_817(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_AntiSubmarineWar = toolStripMenuItem_365;
        //		}

        // Token: 0x06007046 RID: 28742 RVA: 0x003E3D60 File Offset: 0x003E1F60
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_818()
        ////		{
        ////			return this.MenuItem_GroupOperations;
        ////		}

        // Token: 0x06007047 RID: 28743 RVA: 0x0002EEAA File Offset: 0x0002D0AA
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_819(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_GroupOperations = toolStripMenuItem_365;
        //		}

        // Token: 0x06007048 RID: 28744 RVA: 0x003E3D78 File Offset: 0x003E1F78
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_820()
        ////		{
        ////			return this.toolStripSeparator_33;
        ////		}

        // Token: 0x06007049 RID: 28745 RVA: 0x0002EEB3 File Offset: 0x0002D0B3
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_821(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_33 = toolStripSeparator_37;
        //		}

        // Token: 0x0600704A RID: 28746 RVA: 0x003E3D90 File Offset: 0x003E1F90
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_CopyUnitID()
        ////		{
        ////			return this.MenuItem_Unit_SE_CopyUnitID;
        ////		}

        // Token: 0x0600704B RID: 28747 RVA: 0x003E3DA8 File Offset: 0x003E1FA8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_823(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_528);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SE_CopyUnitID;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SE_CopyUnitID = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SE_CopyUnitID;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600704C RID: 28748 RVA: 0x003E3DF4 File Offset: 0x003E1FF4
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetMarkContactUnfriendlyToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_MarkUnfriendly;
        ////		}

        // Token: 0x0600704D RID: 28749 RVA: 0x003E3E0C File Offset: 0x003E200C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_825(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_537);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MarkUnfriendly;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_MarkUnfriendly = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MarkUnfriendly;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600704E RID: 28750 RVA: 0x003E3E58 File Offset: 0x003E2058
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_826()
        ////		{
        ////			return this.toolStripMenuItem_348;
        ////		}

        // Token: 0x0600704F RID: 28751 RVA: 0x003E3E70 File Offset: 0x003E2070
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_827(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_511);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_348;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_348 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_348;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007050 RID: 28752 RVA: 0x003E3EBC File Offset: 0x003E20BC
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_828()
        ////		{
        ////			return this.toolStripMenuItem_349;
        ////		}

        // Token: 0x06007051 RID: 28753 RVA: 0x003E3ED4 File Offset: 0x003E20D4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_829(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_510);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_349;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_349 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_349;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007052 RID: 28754 RVA: 0x003E3F20 File Offset: 0x003E2120
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_830()
        ////		{
        ////			return this.toolStripMenuItem_350;
        ////		}

        // Token: 0x06007053 RID: 28755 RVA: 0x003E3F38 File Offset: 0x003E2138
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_831(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_509);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_350;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_350 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_350;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007054 RID: 28756 RVA: 0x003E3F84 File Offset: 0x003E2184
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_832()
        ////		{
        ////			return this.toolStripMenuItem_351;
        ////		}

        // Token: 0x06007055 RID: 28757 RVA: 0x003E3F9C File Offset: 0x003E219C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_833(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_508);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_351;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_351 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_351;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007056 RID: 28758 RVA: 0x003E3FE8 File Offset: 0x003E21E8
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_834()
        ////		{
        ////			return this.toolStripMenuItem_352;
        ////		}

        // Token: 0x06007057 RID: 28759 RVA: 0x003E4000 File Offset: 0x003E2200
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_835(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_539);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_352;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_352 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_352;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007058 RID: 28760 RVA: 0x003E404C File Offset: 0x003E224C
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_836()
        ////		{
        ////			return this.toolStripSeparator_34;
        ////		}

        // Token: 0x06007059 RID: 28761 RVA: 0x0002EEBC File Offset: 0x0002D0BC
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_837(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_34 = toolStripSeparator_37;
        //		}

        // Token: 0x0600705A RID: 28762 RVA: 0x003E4064 File Offset: 0x003E2264
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_838()
        ////		{
        ////			return this.toolStripSeparator_35;
        ////		}

        // Token: 0x0600705B RID: 28763 RVA: 0x0002EEC5 File Offset: 0x0002D0C5
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_839(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_35 = toolStripSeparator_37;
        //		}

        // Token: 0x0600705C RID: 28764 RVA: 0x003E407C File Offset: 0x003E227C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_840()
        ////		{
        ////			return this.toolStripMenuItem_353;
        ////		}

        // Token: 0x0600705D RID: 28765 RVA: 0x003E4094 File Offset: 0x003E2294
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_841(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_538);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_353;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_353 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_353;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600705E RID: 28766 RVA: 0x003E40E0 File Offset: 0x003E22E0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_UnitOps()
        ////		{
        ////			return this.MenuItem_UnitOperation;
        ////		}

        // Token: 0x0600705F RID: 28767 RVA: 0x0002EECE File Offset: 0x0002D0CE
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_843(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.MenuItem_UnitOperation = toolStripMenuItem_365;
        //		}

        // Token: 0x06007060 RID: 28768 RVA: 0x003E40F8 File Offset: 0x003E22F8
        ////		[CompilerGenerated]
        ////		internal  ToolStripSeparator vmethod_844()
        ////		{
        ////			return this.toolStripSeparator_36;
        ////		}

        // Token: 0x06007061 RID: 28769 RVA: 0x0002EED7 File Offset: 0x0002D0D7
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_845(ToolStripSeparator toolStripSeparator_37)
        //		{
        //			this.toolStripSeparator_36 = toolStripSeparator_37;
        //		}

        // Token: 0x06007062 RID: 28770 RVA: 0x003E4110 File Offset: 0x003E2310
        ////		[CompilerGenerated]
        ////		internal  ToolStripButton GetButtonGameSpeed()
        ////		{
        ////			return this.Button_GameSpeed;
        ////		}

        // Token: 0x06007063 RID: 28771 RVA: 0x003E4128 File Offset: 0x003E2328
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_847(ToolStripButton toolStripButton_4)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_549);
        ////			ToolStripButton toolStripButton = this.Button_GameSpeed;
        ////			if (toolStripButton != null)
        ////			{
        ////				toolStripButton.Click -= value;
        ////			}
        ////			this.Button_GameSpeed = toolStripButton_4;
        ////			toolStripButton = this.Button_GameSpeed;
        ////			if (toolStripButton != null)
        ////			{
        ////				toolStripButton.Click += value;
        ////			}
        ////		}

        // Token: 0x06007064 RID: 28772 RVA: 0x003E4174 File Offset: 0x003E2374
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetEditCargoToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_UO_EditCargo;
        ////		}

        // Token: 0x06007065 RID: 28773 RVA: 0x003E418C File Offset: 0x003E238C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetEditCargoToolStripMenuItem(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.EditCargoToolStripMenuItem_Click);
        ////			ToolStripMenuItem MenuItem_UO_EditCargo = this.MenuItem_UO_EditCargo;
        ////			if (MenuItem_UO_EditCargo != null)
        ////			{
        ////				MenuItem_UO_EditCargo.Click -= value;
        ////			}
        ////			this.MenuItem_UO_EditCargo = toolStripMenuItem_365;
        ////			MenuItem_UO_EditCargo = this.MenuItem_UO_EditCargo;
        ////			if (MenuItem_UO_EditCargo != null)
        ////			{
        ////				MenuItem_UO_EditCargo.Click += value;
        ////			}
        ////		}

        // Token: 0x06007066 RID: 28774 RVA: 0x003E41D8 File Offset: 0x003E23D8
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetUnloadCargoToolStripMenuItem()
        ////		{
        ////			return this.MenuItem_Unit_DischargeCargo;
        ////		}

        // Token: 0x06007067 RID: 28775 RVA: 0x003E41F0 File Offset: 0x003E23F0
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_851(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_1);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_DischargeCargo;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_DischargeCargo = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_DischargeCargo;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007068 RID: 28776 RVA: 0x003E423C File Offset: 0x003E243C
        ////		[CompilerGenerated]
        ////		internal  Timer vmethod_852()
        ////		{
        ////			return this.timer_5;
        ////		}

        // Token: 0x06007069 RID: 28777 RVA: 0x003E4254 File Offset: 0x003E2454
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_853(Timer timer_9)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_542);
        ////			Timer timer = this.timer_5;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick -= value;
        ////			}
        ////			this.timer_5 = timer_9;
        ////			timer = this.timer_5;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick += value;
        ////			}
        ////		}

        // Token: 0x0600706A RID: 28778 RVA: 0x003E42A0 File Offset: 0x003E24A0
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_IsolatedUnitPOV()
        ////		{
        ////			return this.MenuItem_IsolatedUnitView;
        ////		}

        // Token: 0x0600706B RID: 28779 RVA: 0x003E42B8 File Offset: 0x003E24B8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetTSMI_IsolatedUnitPOV(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.TSMI_IsolatedUnitPOV_Click);
        ////			ToolStripMenuItem MenuItem_IsolatedUnitView = this.MenuItem_IsolatedUnitView;
        ////			if (MenuItem_IsolatedUnitView != null)
        ////			{
        ////				MenuItem_IsolatedUnitView.Click -= value;
        ////			}
        ////			this.MenuItem_IsolatedUnitView = toolStripMenuItem_365;
        ////			MenuItem_IsolatedUnitView = this.MenuItem_IsolatedUnitView;
        ////			if (MenuItem_IsolatedUnitView != null)
        ////			{
        ////				MenuItem_IsolatedUnitView.Click += value;
        ////			}
        ////		}

        // Token: 0x0600706C RID: 28780 RVA: 0x003E4304 File Offset: 0x003E2504
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_UnitIsOutOfComms()
        ////		{
        ////			return this.MenuItem_Unit_SE_UnitLoseCommunication;
        ////		}

        // Token: 0x0600706D RID: 28781 RVA: 0x003E431C File Offset: 0x003E251C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_857(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_550);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_SE_UnitLoseCommunication;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_SE_UnitLoseCommunication = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_SE_UnitLoseCommunication;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x0600706E RID: 28782 RVA: 0x003E4368 File Offset: 0x003E2568
        ////		[CompilerGenerated]
        ////		internal  ElementHost vmethod_858()
        ////		{
        ////			return this.elementHost_0;
        ////		}

        // Token: 0x0600706F RID: 28783 RVA: 0x0002EEE0 File Offset: 0x0002D0E0
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_859(ElementHost elementHost_1)
        //		{
        //			this.elementHost_0 = elementHost_1;
        //		}

        // Token: 0x06007070 RID: 28784 RVA: 0x003E4380 File Offset: 0x003E2580
        ////		[CompilerGenerated]
        ////		internal  Timer vmethod_860()
        ////		{
        ////			return this.timer_6;
        ////		}

        // Token: 0x06007071 RID: 28785 RVA: 0x003E4398 File Offset: 0x003E2598
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_861(Timer timer_9)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_543);
        ////			Timer timer = this.timer_6;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick -= value;
        ////			}
        ////			this.timer_6 = timer_9;
        ////			timer = this.timer_6;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick += value;
        ////			}
        ////		}

        // Token: 0x06007072 RID: 28786 RVA: 0x0002EEE9 File Offset: 0x0002D0E9
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_862(Timer timer_9)
        //		{
        //			this.timer_7 = timer_9;
        //		}

        // Token: 0x06007073 RID: 28787 RVA: 0x003E43E4 File Offset: 0x003E25E4
        ////		[CompilerGenerated]
        ////		internal  Label vmethod_863()
        ////		{
        ////			return this.label_0;
        ////		}

        // Token: 0x06007074 RID: 28788 RVA: 0x0002EEF2 File Offset: 0x0002D0F2
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_864(Label label_2)
        //		{
        //			this.label_0 = label_2;
        //		}

        // Token: 0x06007075 RID: 28789 RVA: 0x003E43FC File Offset: 0x003E25FC
        ////		[CompilerGenerated]
        ////		internal  Label vmethod_865()
        ////		{
        ////			return this.label_1;
        ////		}

        // Token: 0x06007076 RID: 28790 RVA: 0x0002EEFB File Offset: 0x0002D0FB
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_866(Label label_2)
        //		{
        //			this.label_1 = label_2;
        //		}

        // Token: 0x06007077 RID: 28791 RVA: 0x003E4414 File Offset: 0x003E2614
        [CompilerGenerated]
        internal PictureBox GetMapBox()
        {
            return this.WorldMapBox;
        }

        // Token: 0x06007078 RID: 28792 RVA: 0x003E442C File Offset: 0x003E262C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetMapBox(PictureBox pictureBox_1)
        ////		{
        ////			EventHandler value = new EventHandler(this.WorldMapBox_MouseEnter);
        ////			PaintEventHandler value2 = new PaintEventHandler(this.WorldMapBox_Paint);
        ////			PreviewKeyDownEventHandler value3 = new PreviewKeyDownEventHandler(this.WorldMapBox_PreviewKeyDown);
        ////			EventHandler value4 = new EventHandler(this.WorldMapBox_MouseLeave);
        ////			MouseEventHandler value5 = new MouseEventHandler(this.WorldMapBox_MouseUp);
        ////			MouseEventHandler value6 = new MouseEventHandler(this.WorldMapBox_MouseDown);
        ////			MouseEventHandler value7 = new MouseEventHandler(this.WorldMapBox_MouseMove);
        ////			MouseEventHandler value8 = new MouseEventHandler(this.WorldMapBox_MouseWheel);
        ////			EventHandler value9 = new EventHandler(this.WorldMapBox_Resize);
        ////			PictureBox worldMapBox = this.WorldMapBox;
        ////			if (worldMapBox != null)
        ////			{
        ////				worldMapBox.MouseEnter -= value;
        ////				worldMapBox.Paint -= value2;
        ////				worldMapBox.PreviewKeyDown -= value3;
        ////				worldMapBox.MouseLeave -= value4;
        ////				worldMapBox.MouseUp -= value5;
        ////				worldMapBox.MouseDown -= value6;
        ////				worldMapBox.MouseMove -= value7;
        ////				worldMapBox.MouseWheel -= value8;
        ////				worldMapBox.Resize -= value9;
        ////			}
        ////			this.WorldMapBox = pictureBox_1;
        ////			worldMapBox = this.WorldMapBox;
        ////			if (worldMapBox != null)
        ////			{
        ////				worldMapBox.MouseEnter += value;
        ////				worldMapBox.Paint += value2;
        ////				worldMapBox.PreviewKeyDown += value3;
        ////				worldMapBox.MouseLeave += value4;
        ////				worldMapBox.MouseUp += value5;
        ////				worldMapBox.MouseDown += value6;
        ////				worldMapBox.MouseMove += value7;
        //				worldMapBox.MouseWheel += value8;
        //				worldMapBox.Resize += value9;
        //			}
        //		}

        // Token: 0x06007079 RID: 28793 RVA: 0x003E4574 File Offset: 0x003E2774
        ////		[CompilerGenerated]
        ////		internal  Panel vmethod_869()
        ////		{
        ////			return this.panel_0;
        ////		}

        // Token: 0x0600707A RID: 28794 RVA: 0x0002EF04 File Offset: 0x0002D104
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_870(Panel panel_1)
        //		{
        //			this.panel_0 = panel_1;
        //		}

        // Token: 0x0600707B RID: 28795 RVA: 0x003E458C File Offset: 0x003E278C
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_IsolatedPOV()
        ////		{
        ////			return this.MenuItem_Unit_IsolationView;
        ////		}

        // Token: 0x0600707C RID: 28796 RVA: 0x003E45A4 File Offset: 0x003E27A4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_872(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_545);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_Unit_IsolationView;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.MenuItem_Unit_IsolationView = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_Unit_IsolationView;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // 蒙特卡洛菜单
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetTSMI_MonteCarloAnalysis()
        ////		{
        ////			return this.MenuItem_MonteCarloSimulation;
        ////		}

        // Token: 0x0600707E RID: 28798 RVA: 0x003E4608 File Offset: 0x003E2808
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_874(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_541);
        ////			EventHandler value2 = new EventHandler(this.method_546);
        ////			ToolStripMenuItem toolStripMenuItem = this.MenuItem_MonteCarloSimulation;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////				toolStripMenuItem.Click -= value2;
        ////			}
        ////			this.MenuItem_MonteCarloSimulation = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.MenuItem_MonteCarloSimulation;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////				toolStripMenuItem.Click += value2;
        ////			}
        ////		}

        // Token: 0x0600707F RID: 28799 RVA: 0x003E466C File Offset: 0x003E286C
        [CompilerGenerated]
        public  ToolStrip vmethod_875()
        {
        	return this.toolStrip_0;
        }

        // Token: 0x06007080 RID: 28800 RVA: 0x0002EF0D File Offset: 0x0002D10D
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		public  void vmethod_876(ToolStrip toolStrip_1)
        //		{
        //			this.toolStrip_0 = toolStrip_1;
        //		}

        // Token: 0x06007081 RID: 28801 RVA: 0x003E4684 File Offset: 0x003E2884
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem GetFlightplansToolStripMenuItem()
        ////		{
        ////			return this.toolStripMenuItem_361;
        ////		}

        // Token: 0x06007082 RID: 28802 RVA: 0x0002EF16 File Offset: 0x0002D116
        //		[CompilerGenerated]
        //		[MethodImpl(MethodImplOptions.Synchronized)]
        //		internal void vmethod_878(ToolStripMenuItem toolStripMenuItem_365)
        //		{
        //			this.toolStripMenuItem_361 = toolStripMenuItem_365;
        //		}

        // Token: 0x06007083 RID: 28803 RVA: 0x003E469C File Offset: 0x003E289C
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_879()
        ////		{
        ////			return this.toolStripMenuItem_362;
        ////		}

        // Token: 0x06007084 RID: 28804 RVA: 0x003E46B4 File Offset: 0x003E28B4
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_880(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_551);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_362;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_362 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_362;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007085 RID: 28805 RVA: 0x003E4700 File Offset: 0x003E2900
        ////		[CompilerGenerated]
        ////		internal ToolStripMenuItem vmethod_881()
        ////		{
        ////			return this.toolStripMenuItem_363;
        ////		}

        // Token: 0x06007086 RID: 28806 RVA: 0x003E4718 File Offset: 0x003E2918
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_882(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_552);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_363;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_363 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_363;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007087 RID: 28807 RVA: 0x003E4764 File Offset: 0x003E2964
        ////		[CompilerGenerated]
        ////		internal  ToolStripMenuItem vmethod_883()
        ////		{
        ////			return this.toolStripMenuItem_364;
        ////		}

        // Token: 0x06007088 RID: 28808 RVA: 0x003E477C File Offset: 0x003E297C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_884(ToolStripMenuItem toolStripMenuItem_365)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_553);
        ////			ToolStripMenuItem toolStripMenuItem = this.toolStripMenuItem_364;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click -= value;
        ////			}
        ////			this.toolStripMenuItem_364 = toolStripMenuItem_365;
        ////			toolStripMenuItem = this.toolStripMenuItem_364;
        ////			if (toolStripMenuItem != null)
        ////			{
        ////				toolStripMenuItem.Click += value;
        ////			}
        ////		}

        // Token: 0x06007089 RID: 28809 RVA: 0x003E47C8 File Offset: 0x003E29C8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_885(ComboBox comboBox_3)
        ////		{
        ////			MouseEventHandler value = new MouseEventHandler(this.method_356);
        ////			ComboBox comboBox = this.comboBox_0;
        ////			if (comboBox != null)
        ////			{
        ////				comboBox.MouseWheel -= value;
        ////			}
        ////			this.comboBox_0 = comboBox_3;
        ////			comboBox = this.comboBox_0;
        ////			if (comboBox != null)
        ////			{
        ////				comboBox.MouseWheel += value;
        ////			}
        ////		}

        // Token: 0x0600708A RID: 28810 RVA: 0x003E4814 File Offset: 0x003E2A14
        ////		[CompilerGenerated]
        ////		internal  ComboBox GetTimeCompressionCB()
        ////		{
        ////			return this.CB_TimeCompression;
        ////		}

        // Token: 0x0600708B RID: 28811 RVA: 0x003E482C File Offset: 0x003E2A2C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal  void SetTimeCompressionCB(ComboBox comboBox_3)
        ////		{
        ////			MouseEventHandler value = new MouseEventHandler(this.CB_TimeCompression_MouseWheel);
        ////			EventHandler value2 = new EventHandler(this.CB_TimeCompression_SelectionChangeCommitted);
        ////			ComboBox cB_TimeCompression = this.CB_TimeCompression;
        ////			if (cB_TimeCompression != null)
        ////			{
        ////				cB_TimeCompression.MouseWheel -= value;
        ////				cB_TimeCompression.SelectionChangeCommitted -= value2;
        ////			}
        ////			this.CB_TimeCompression = comboBox_3;
        ////			cB_TimeCompression = this.CB_TimeCompression;
        ////			if (cB_TimeCompression != null)
        ////			{
        ////				cB_TimeCompression.MouseWheel += value;
        ////				cB_TimeCompression.SelectionChangeCommitted += value2;
        ////			}
        ////		}

        // Token: 0x0600708C RID: 28812 RVA: 0x003E4890 File Offset: 0x003E2A90
        ////		[CompilerGenerated]
        ////		internal  ComboBox vmethod_888()
        ////		{
        ////			return this.comboBox_2;
        ////		}

        // Token: 0x0600708D RID: 28813 RVA: 0x003E48A8 File Offset: 0x003E2AA8
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_889(ComboBox comboBox_3)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_373);
        ////			ComboBox comboBox = this.comboBox_2;
        ////			if (comboBox != null)
        ////			{
        ////				comboBox.SelectionChangeCommitted -= value;
        ////			}
        ////			this.comboBox_2 = comboBox_3;
        ////			comboBox = this.comboBox_2;
        ////			if (comboBox != null)
        ////			{
        ////				comboBox.SelectionChangeCommitted += value;
        ////			}
        ////		}

        // Token: 0x0600708E RID: 28814 RVA: 0x003E48F4 File Offset: 0x003E2AF4
        ////		[CompilerGenerated]
        ////		internal  Timer vmethod_890()
        ////		{
        ////			return this.timer_8;
        ////		}

        // Token: 0x0600708F RID: 28815 RVA: 0x003E490C File Offset: 0x003E2B0C
        ////		[CompilerGenerated]
        ////		[MethodImpl(MethodImplOptions.Synchronized)]
        ////		internal void vmethod_891(Timer timer_9)
        ////		{
        ////			EventHandler value = new EventHandler(this.method_191);
        ////			Timer timer = this.timer_8;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick -= value;
        ////			}
        ////			this.timer_8 = timer_9;
        ////			timer = this.timer_8;
        ////			if (timer != null)
        ////			{
        ////				timer.Tick += value;
        ////			}
        ////		}

        // Token: 0x06007090 RID: 28816 RVA: 0x003E4958 File Offset: 0x003E2B58
        [CompilerGenerated]
		public Class2476 method_3()
		{
			return this.class2476_0;
		}

		// Token: 0x06007091 RID: 28817 RVA: 0x0002EF1F File Offset: 0x0002D11F
		[CompilerGenerated]
		public void method_4(Class2476 class2476_1)
		{
			this.class2476_0 = class2476_1;
		}

		// Token: 0x06007092 RID: 28818 RVA: 0x003E4970 File Offset: 0x003E2B70
		public int method_5()
		{
			int result;
			if (Information.IsNothing(DrawArgs.class1987_1))
			{
				result = 0;
			}
			else
			{
				result = (int)Math.Round(DrawArgs.class1987_1.GetAltitude());
			}
			return result;
		}

		// Token: 0x06007093 RID: 28819 RVA: 0x003E49A8 File Offset: 0x003E2BA8
		public void method_6(int int_14)
		{
			if (!Information.IsNothing(DrawArgs.class1987_1) && (double)int_14 != DrawArgs.class1987_1.GetAltitude())
			{
				try
				{
					this.bool_2 = true;
					if (int_14 == 0)
					{
						int_14 = 1700000;
					}
					DrawArgs.class1987_1.vmethod_9((double)int_14);
					if (!Information.IsNothing(Client.GetClientSide()))
					{
						Client.GetClientSide().CameraAlt = (double)int_14;
					}
					this.MapBoxResize();
					this.method_16();
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200123", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
				finally
				{
					this.bool_2 = false;
				}
			}
		}

		// Token: 0x06007094 RID: 28820 RVA: 0x0002EF28 File Offset: 0x0002D128
		public void method_7()
		{
			GameGeneral.ForceGarbageCollection();
			this.int_1 = 3600;
		}

		// Token: 0x06007095 RID: 28821 RVA: 0x003E4A84 File Offset: 0x003E2C84
		public void method_8()
		{
			Configuration._GameMode gameMode = Client.GetConfiguration().GetGameMode();
			if (gameMode == Configuration._GameMode.Edit)
			{
				this.MenuItem_ScenarioEditor.Visible = true;
				this.MenuItem_Battle.Visible = true;
				this.MenuItem_LockSelectedRefPoint.Visible = true;
				this.MenuItem_UnlockSelectedRefPoint.Visible = true;
			}
			else
			{
				this.MenuItem_ScenarioEditor.Visible = false;
				this.MenuItem_Battle.Visible = false;
				this.MenuItem_LockSelectedRefPoint.Visible = false;
				this.MenuItem_UnlockSelectedRefPoint.Visible = false;
			}
		}

		// Token: 0x06007096 RID: 28822 RVA: 0x0002EF3A File Offset: 0x0002D13A
		private bool method_9()
		{
			return this.bool_0;
		}

		// Token: 0x06007097 RID: 28823 RVA: 0x0002EF42 File Offset: 0x0002D142
		private void method_10(bool bool_13)
		{
			this.bool_0 = bool_13;
		}

		// Token: 0x06007098 RID: 28824 RVA: 0x0002EF4B File Offset: 0x0002D14B
		private bool method_11()
		{
			return this.bool_1;
		}

		// Token: 0x06007099 RID: 28825 RVA: 0x0002EF53 File Offset: 0x0002D153
		private void method_12(bool bool_13)
		{
			this.bool_1 = bool_13;
		}

		// Token: 0x0600709A RID: 28826 RVA: 0x003E4B08 File Offset: 0x003E2D08
		public GeoPoint method_13(bool MustRender = true)
		{
			if (Information.IsNothing(this.geoPoint_2))
			{
				if (!Information.IsNothing(Client.GetClientSide()))
				{
					this.geoPoint_2 = Client.GetClientSide().GetMapCenter();
				}
				else
				{
					this.geoPoint_2 = new GeoPoint(0.0, 0.0);
				}
			}
			return this.geoPoint_2;
		}

		// Token: 0x0600709B RID: 28827 RVA: 0x003E4B68 File Offset: 0x003E2D68
		public void method_14(bool MustRender, GeoPoint value)
		{
			if (Information.IsNothing(this.geoPoint_2) || value.GetLongitude() != this.geoPoint_2.GetLongitude() || value.GetLatitude() != this.geoPoint_2.GetLatitude())
			{
				try
				{
					this.bool_2 = true;
					this.geoPoint_2 = value;
					if (!Information.IsNothing(Client.GetClientSide()))
					{
						Client.GetClientSide().SetMapCenter(value);
					}
					if (!Information.IsNothing(this.geoPoint_2))
					{
						Client.m_WorldWindow.method_10(this.geoPoint_2.GetLatitude(), this.geoPoint_2.GetLongitude());
						if (this.geoPoint_2.GetLatitude() == 0.0 && this.method_13(true).GetLongitude() == 0.0)
						{
							this.method_6(10000000);
						}
						if (MustRender)
						{
							this.MapBoxResize();
							this.method_16();
						}
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200124", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
				finally
				{
					this.bool_2 = false;
				}
			}
		}

		// Token: 0x0600709C RID: 28828 RVA: 0x0002EF5C File Offset: 0x0002D15C
		public bool method_15()
		{
			return !Client.GetMap().IsLayerReliefShown() && !Client.GetMap().IsLayerBMNGShown();
		}

		// Token: 0x0600709D RID: 28829 RVA: 0x0002EF7A File Offset: 0x0002D17A
		private void method_16()
		{
			this.float_0 = 0f;
			this.timer_3.Start();
		}

		// Token: 0x0600709E RID: 28830 RVA: 0x003E4CC0 File Offset: 0x003E2EC0
		public void ProcessCommandOrder()
		{
			switch (Client.GetCommandOrder())
			{
			case Client._CommandOrder.None:
				this.method_32();
				this.WorldMapBox.Cursor = Cursors.Default;
				Client.b_Completed = true;
				this.RefreshMap();
				break;
			case Client._CommandOrder.ViewRangeBearing:
				this.geoPoint_1 = null;
				this.WorldMapBox.Cursor = Cursors.Hand;
				this.toolStripStatusLabel_0.Text = "点击地图执行从所选点的测距操作。按下Ctrl + D或者双击结束测距操作.";
				break;
			case Client._CommandOrder.AddUnit:
				if (Client.GetClientScenario().GetSides().Count<Side>() == 0)
				{
					Interaction.MsgBox("在添加作战单元之前请至少创建一个推演方.", MsgBoxStyle.OkOnly, "没有推演方!");
					Client.IssueOrdersToUnit(Client._CommandOrder.None);
				}
				else
				{
					this.WorldMapBox.Cursor = Cursors.Hand;
					this.toolStripStatusLabel_0.Text = "请点击地图任意点添加作战单元";
				}
				break;
			case Client._CommandOrder.EditScenario:
				CommandFactory.GetCommandMain().GetScenarioTitle().Text = "编辑想定标题与描述";
				CommandFactory.GetCommandMain().GetScenarioTitle().Show();
				break;
			case Client._CommandOrder.SaveScenario:
			case Client._CommandOrder.EditBriefing:
				CommandFactory.GetCommandMain().GetScenarioTitle().Show();
				break;
			case Client._CommandOrder.AddNewWayPoint:
			{
				this.toolStripStatusLabel_0.Text = "请点击地图任意点添加新的航路点；点击“绘制航线”或者按F3结束, 或者双击设置最后航路点。";
				this.WorldMapBox.Cursor = Cursors.Hand;
				Scenario clientScenario = Client.GetClientScenario();
				Client.SetUserIsPlottingCourse(ref clientScenario, true);
				break;
			}
			case Client._CommandOrder.SetBaseForUnit:
				this.toolStripStatusLabel_0.Text = "点击选择一个作战单元将其设置为本单元的基地";
				this.WorldMapBox.Cursor = Cursors.Hand;
				break;
			case Client._CommandOrder.AddReferencePoint:
				if (Information.IsNothing(Client.GetClientSide()))
				{
					Interaction.MsgBox("在添加参考点之前请至少创建一个推演方.", MsgBoxStyle.OkOnly, null);
					Client.IssueOrdersToUnit(Client._CommandOrder.None);
				}
				else
				{
					this.WorldMapBox.Cursor = Cursors.Hand;
					this.toolStripStatusLabel_0.Text = "请点击地图添加新的参考点";
				}
				break;
			case Client._CommandOrder.MoveReferencePoint:
				this.WorldMapBox.Cursor = Cursors.Hand;
				this.toolStripStatusLabel_0.Text = "请点击地图移动所选参考点";
				break;
			case Client._CommandOrder.MoveUnit:
				this.WorldMapBox.Cursor = Cursors.Hand;
				this.toolStripStatusLabel_0.Text = "点击地图移动所选的作战单元.";
				break;
			case Client._CommandOrder.CopyUnit:
				this.toolStripStatusLabel_0.Text = "点击地图任意点放置本作战单元的副本 - ESC进行取消";
				this.WorldMapBox.Cursor = Cursors.Hand;
				break;
			case Client._CommandOrder.SetFormationStation:
				this.WorldMapBox.Cursor = Cursors.Hand;
				this.toolStripStatusLabel_0.Text = "点击地图设置编队阵形:";
				break;
			case Client._CommandOrder.SelectRelativeObject:
				this.WorldMapBox.Cursor = Cursors.Hand;
				this.toolStripStatusLabel_0.Text = "点击作战单元/作战编队作为所选参考点相对方位的基准:";
				break;
			case Client._CommandOrder.SelectTargetToIntercept:
				this.WorldMapBox.Cursor = Cursors.Cross;
				this.toolStripStatusLabel_0.Text = "选择拦截目标 - 按住SHIFT添加多个目标";
				break;
			case Client._CommandOrder.SelectTargetToAttack:
				this.WorldMapBox.Cursor = Cursors.Cross;
				this.toolStripStatusLabel_0.Text = "选择打击目标 - 按住SHIFT添加多个目标";
				break;
			case Client._CommandOrder.SelectAimPointforBearingOnlyAttack:
				this.WorldMapBox.Cursor = Cursors.Cross;
				this.toolStripStatusLabel_0.Text = "选择纯方位攻击的命中点";
				break;
			case Client._CommandOrder.DefineArea:
				this.toolStripStatusLabel_0.Text = "拖动鼠标然后松开定义期望的区域- ESC取消";
				this.WorldMapBox.Cursor = Cursors.Hand;
				break;
			case Client._CommandOrder.SatellitePassPredication:
				this.toolStripStatusLabel_0.Text = "点击地图上任意点进行该位置近期内的卫星过顶次数预报.";
				this.WorldMapBox.Cursor = Cursors.Hand;
				break;
			case Client._CommandOrder.CloneUnit:
				this.toolStripStatusLabel_0.Text = "点击地图上任意点放置该作战单元的克隆(保留所有的用户定制信息) - ESC取消";
				this.WorldMapBox.Cursor = Cursors.Hand;
				break;
			case Client._CommandOrder.AddNewWeaponWaypoint:
				this.toolStripStatusLabel_0.Text = "点击地图上任意点创建一个新的武器航路点；按下F3结束.";
				this.WorldMapBox.Cursor = Cursors.Cross;
				break;
			case Client._CommandOrder.SelectTankerToRefuelFrom:
				this.WorldMapBox.Cursor = Cursors.Cross;
				this.toolStripStatusLabel_0.Text = "选择加油机";
				break;
			}
		}

		// Token: 0x0600709F RID: 28831 RVA: 0x003E50A0 File Offset: 0x003E32A0
		public void method_18(Unit unit_0, bool bool_13)
		{
			try
			{
				if (!Information.IsNothing(Client.GetClientSide()))
				{
					if (bool_13)
					{
						Client.GetClientSide().ClearUnits();
					}
					Client.GetClientSide().AddUnits(unit_0);
					if (bool_13)
					{
						Client.SetHookedUnit(bool_13, unit_0);
					}
					if (!unit_0.IsGroup && !Information.IsNothing(unit_0.GetSide(false)))
					{
						if (unit_0.GetSide(false) == Client.GetClientSide())
						{
							if (Client.unitSensors.Visible)
							{
								Client.unitSensors.method_3();
							}
							if (Client.smethod_26().Visible)
							{
								Client.smethod_26().method_10();
							}
						}
						else
						{
							if (Client.unitSensors.Visible)
							{
								Client.unitSensors.Visible = false;
							}
							if (Client.smethod_26().Visible)
							{
								Client.smethod_26().Visible = false;
							}
						}
					}
					if (CommandFactory.GetCommandMain().GetSpeedAlt().Visible && Client.GetHookedUnit().GetSide(false) == Client.GetClientSide() && Client.GetHookedUnit().IsActiveUnit())
					{
						CommandFactory.GetCommandMain().GetSpeedAlt().waypoint_0 = null;
						CommandFactory.GetCommandMain().GetSpeedAlt().HookedUnit = (ActiveUnit)Client.GetHookedUnit();
						CommandFactory.GetCommandMain().GetSpeedAlt().m_Flight = null;
						CommandFactory.GetCommandMain().GetSpeedAlt().m_Mission = null;
						CommandFactory.GetCommandMain().GetSpeedAlt().method_1();
					}
					Client.b_Completed = true;
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200587", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070A0 RID: 28832 RVA: 0x0002EF92 File Offset: 0x0002D192
		public void method_19()
		{
			this.WorldMapBox.Invalidate();
		}

		// Token: 0x060070A1 RID: 28833 RVA: 0x003E5268 File Offset: 0x003E3468
		private void method_20()
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && (!Client.GetHookedUnit().IsWeapon || !Information.IsNothing(((Weapon)Client.GetHookedUnit()).GetDataLinkParent())) && (Information.IsNothing(Client.unitSensors) || !Client.unitSensors.Visible))
			{
				Client.unitSensors = new UnitSensors();
				Client.unitSensors.Show();
			}
		}

		// Token: 0x060070A2 RID: 28834 RVA: 0x003E52D8 File Offset: 0x003E34D8
		private void method_21()
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit())
			{
				if (!Information.IsNothing(Client.GetWayPointSelected()))
				{
					CommandFactory.GetCommandMain().GetMultipleUnitSensors().Show();
				}
				else if ((!Client.GetHookedUnit().IsWeapon || !Information.IsNothing(((Weapon)Client.GetHookedUnit()).GetDataLinkParent())) && Client.GetHookedUnit().GetSide(false) == Client.GetClientSide())
				{
					if (Client.GetClientSide().GetUnitReadOnlyCollection().Count > 1)
					{
						CommandFactory.GetCommandMain().GetMultipleUnitSensors().list_0 = Client.GetClientSide().GetUnitReadOnlyCollection().ToList<Unit>();
						CommandFactory.GetCommandMain().GetMultipleUnitSensors().Show();
					}
					else if (Client.GetHookedUnit().IsGroup)
					{
						CommandFactory.GetCommandMain().GetMultipleUnitSensors().list_0 = ((Group)Client.GetHookedUnit()).GetUnitListInGroup();
						CommandFactory.GetCommandMain().GetMultipleUnitSensors().Show();
					}
					else
					{
						this.method_20();
					}
				}
			}
		}

		// Token: 0x060070A3 RID: 28835 RVA: 0x003E53F0 File Offset: 0x003E35F0
		private void method_22()
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				if (Client.GetClientSide().GetMapProfile().IsGodsEyeView())
				{
					Interaction.MsgBox("在导演模式下您不能下达攻击命令!", MsgBoxStyle.OkOnly, null);
				}
				else
				{
					try
					{
						if (Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0)
						{
							foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
							{
								string str = null;
								if (GameGeneral.CanIssueOrdersToUnit(Client.GetClientSide(), current, false, ref str))
								{
									Client.IssueOrdersToUnit(Client._CommandOrder.SelectTargetToIntercept);
									break;
								}
								if (current.IsActiveUnit())
								{
									((ActiveUnit)current).LogMessage(current.Name + "不能参与攻击任务(" + str + ")", LoggedMessage.MessageType.UnitAI, 0, false, new GeoPoint(current.GetLongitude(null), current.GetLatitude(null)));
								}
							}
						}
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 101140", "");
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		// Token: 0x060070A4 RID: 28836 RVA: 0x003E554C File Offset: 0x003E374C
		private void method_23()
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				if (Client.GetClientSide().GetMapProfile().IsGodsEyeView())
				{
					Interaction.MsgBox("在导演模式下您不能下达攻击命令!", MsgBoxStyle.OkOnly, null);
				}
				else
				{
					try
					{
						if (Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0)
						{
							foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
							{
								string text = null;
								if (GameGeneral.CanIssueOrdersToUnit(Client.GetClientSide(), current, false, ref text))
								{
									if (!current.IsWeapon)
									{
										Client.IssueOrdersToUnit(Client._CommandOrder.SelectTargetToAttack);
										break;
									}
								}
								else if (current.IsActiveUnit() && !string.IsNullOrEmpty(text))
								{
									((ActiveUnit)current).LogMessage(current.Name + "不能参与攻击任务(" + text + ")", LoggedMessage.MessageType.UnitAI, 0, false, new GeoPoint(current.GetLongitude(null), current.GetLatitude(null)));
								}
							}
						}
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 101141", "");
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		// Token: 0x060070A5 RID: 28837 RVA: 0x003E56C0 File Offset: 0x003E38C0
		private void method_24()
		{
			if (!Information.IsNothing(Client.GetHookedUnit()))
			{
				Side clientSide = Client.GetClientSide();
				Unit hookedUnit = Client.GetHookedUnit();
				string text = null;
				if (GameGeneral.CanIssueOrdersToUnit(clientSide, hookedUnit, false, ref text) && Client.GetHookedUnit().IsGroup)
				{
					this.method_6(20000);
					this.method_14(true, new GeoPoint(Client.GetHookedUnit().GetLongitude(null), Client.GetHookedUnit().GetLatitude(null)));
					Client.GetMap().ViewMode = MapProfile._ViewMode.UnitMode;
					CommandFactory.GetCommandMain().GetFormationEditor().group = (Group)Client.GetHookedUnit();
					CommandFactory.GetCommandMain().GetFormationEditor().Show();
				}
			}
		}

		// Token: 0x060070A6 RID: 28838 RVA: 0x003E5778 File Offset: 0x003E3978
		private void method_25()
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				if (Client.GetClientSide().GetMapProfile().IsGodsEyeView())
				{
					Interaction.MsgBox("在导演模式下您不能下达攻击命令!", MsgBoxStyle.OkOnly, null);
				}
				else
				{
					try
					{
						if (Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0)
						{
							foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
							{
								Side clientSide = Client.GetClientSide();
								Unit unit_ = current;
								string text = null;
								if (GameGeneral.CanIssueOrdersToUnit(clientSide, unit_, false, ref text) && !current.IsWeapon)
								{
									Client.IssueOrdersToUnit(Client._CommandOrder.SelectAimPointforBearingOnlyAttack);
									break;
								}
							}
						}
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 101142", "");
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		// Token: 0x060070A7 RID: 28839 RVA: 0x003E5888 File Offset: 0x003E3A88
		private void method_26()
		{
			checked
			{
				if (!Information.IsNothing(Client.GetWayPointSelected()) && Client.GetWayPointSelected().Category == Waypoint._Category.const_1)
				{
					Side[] sides = Client.GetClientScenario().GetSides();
					for (int i = 0; i < sides.Length; i++)
					{
						Side side = sides[i];
						foreach (Mission current in side.GetMissionCollection())
						{
							foreach (Mission.Flight current2 in current.FlightList)
							{
								if (current2.GetFlightCourse().Contains(Client.GetWayPointSelected()))
								{
									CommandFactory.GetCommandMain().GetSpeedAlt().HookedUnit = null;
									CommandFactory.GetCommandMain().GetSpeedAlt().waypoint_0 = Client.GetWayPointSelected();
									CommandFactory.GetCommandMain().GetSpeedAlt().m_Flight = current2;
									CommandFactory.GetCommandMain().GetSpeedAlt().m_Mission = current;
									CommandFactory.GetCommandMain().GetSpeedAlt().Show();
									return;
								}
							}
						}
					}
				}
                bool bool_1 = !Information.IsNothing(Client.GetHookedUnit());
                bool bool_2 = Client.GetHookedUnit().IsActiveUnit();
                bool bool_3 = !Client.GetHookedUnit().IsSatellite();
                bool bool_4 = (!Client.GetHookedUnit().IsWeapon || !Information.IsNothing(((Weapon)Client.GetHookedUnit()).GetDataLinkParent()));
                bool bool_5 = Information.IsNothing(CommandFactory.GetCommandMain().GetSpeedAlt().waypoint_0);
                bool bool_6 = !Information.IsNothing(Client.GetHookedUnit());

                //ZSP ERR RUN
                //if (!Information.IsNothing(Client.GetHookedUnit()) &&
                //    Client.GetHookedUnit().IsActiveUnit() && 
                //    !Client.GetHookedUnit().IsSatellite() && 
                //    (!Client.GetHookedUnit().IsWeapon || !Information.IsNothing(((Weapon)Client.GetHookedUnit()).GetDataLinkParent()))  && 
                //    Information.IsNothing(CommandFactory.GetCommandMain().GetSpeedAlt().waypoint_0) && 
                //    !Information.IsNothing(Client.GetHookedUnit()))

                 if(bool_1 && bool_2 && bool_3 && bool_4 && bool_5 && bool_6)
                {
					Side clientSide = Client.GetClientSide();
					Unit hookedUnit = Client.GetHookedUnit();
					string text = null;
					if (GameGeneral.CanIssueOrdersToUnit(clientSide, hookedUnit, false, ref text) && Client.GetHookedUnit().GetSide(false) == Client.GetClientSide())
					{
						if (Client.GetHookedUnit().IsGroup)
						{
							CommandFactory.GetCommandMain().GetSpeedAlt().HookedUnit = (ActiveUnit)Client.GetHookedUnit();
							CommandFactory.GetCommandMain().GetSpeedAlt().waypoint_0 = null;
							CommandFactory.GetCommandMain().GetSpeedAlt().m_Flight = null;
							CommandFactory.GetCommandMain().GetSpeedAlt().m_Mission = null;
							CommandFactory.GetCommandMain().GetSpeedAlt().Show();
						}
						else if (!((ActiveUnit)Client.GetHookedUnit()).IsFixedFacility())
						{
							CommandFactory.GetCommandMain().GetSpeedAlt().HookedUnit = (ActiveUnit)Client.GetHookedUnit();
							CommandFactory.GetCommandMain().GetSpeedAlt().waypoint_0 = null;
							CommandFactory.GetCommandMain().GetSpeedAlt().m_Flight = null;
							CommandFactory.GetCommandMain().GetSpeedAlt().m_Mission = null;
							if (!Client.GetHookedUnit().IsWeapon || ((Weapon)Client.GetHookedUnit()).GetWeaponType() != Weapon._WeaponType.Sonobuoy)
							{
								CommandFactory.GetCommandMain().GetSpeedAlt().Show();
							}
						}
					}
				}
			}
		}

		// Token: 0x060070A8 RID: 28840 RVA: 0x003E5B78 File Offset: 0x003E3D78
		private void method_27()
		{
			if (!Information.IsNothing(Client.GetHookedUnit()))
			{
				try
				{
					bool flag = false;
					if (!Information.IsNothing(Client.GetHookedUnit()))
					{
						Side clientSide = Client.GetClientSide();
						Unit hookedUnit = Client.GetHookedUnit();
						string text = null;
						if (GameGeneral.CanIssueOrdersToUnit(clientSide, hookedUnit, false, ref text))
						{
							flag = true;
						}
					}
					if (!flag)
					{
						foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
						{
							string text2 = null;
							if (current.IsActiveUnit() && current.GetSide(false) == Client.GetClientSide())
							{
								if (GameGeneral.CanIssueOrdersToUnit(Client.GetClientSide(), current, false, ref text2))
								{
									flag = true;
								}
								else if (!string.IsNullOrEmpty(text2))
								{
									((ActiveUnit)current).LogMessage(current.Name + "不能下令改变航向(" + text2 + ")", LoggedMessage.MessageType.UnitAI, 0, false, new GeoPoint(current.GetLongitude(null), current.GetLatitude(null)));
								}
							}
						}
					}
					if (flag && !Client.GetHookedUnit().IsSatellite())
					{
						if (!Information.IsNothing(Client.GetHookedUnit()) && !Information.IsNothing(Client.GetWayPointSelected()))
						{
							if (Client.GetHookedUnit().GetSide(false) == Client.GetClientSide())
							{
								int num = Array.IndexOf<Waypoint>(((ActiveUnit)Client.GetHookedUnit()).GetNavigator().GetPlottedCourse(), Client.GetWayPointSelected());
								int num2 = ((ActiveUnit)Client.GetHookedUnit()).GetNavigator().GetPlottedCourse().Count<Waypoint>();
								int num3 = num2 - 1;
								int num4 = num + 1;
								this.int_3 = num3;
								while (this.int_3 >= num4)
								{
									((ActiveUnit)Client.GetHookedUnit()).GetNavigator().RemoveWaypoint(((ActiveUnit)Client.GetHookedUnit()).GetNavigator().GetPlottedCourse()[this.int_3], true);
									this.int_3 += -1;
								}
								Client.IssueOrdersToUnit(Client._CommandOrder.AddNewWayPoint);
								Scenario clientScenario = Client.GetClientScenario();
								Client.SetUserIsPlottingCourse(ref clientScenario, true);
								this.RefreshMap();
							}
						}
						else if (Client.GetCommandOrder() != Client._CommandOrder.AddNewWayPoint && Client.GetCommandOrder() != Client._CommandOrder.AddNewWeaponWaypoint)
						{
							List<ActiveUnit> list = new List<ActiveUnit>();
							foreach (Unit current2 in Client.GetClientSide().GetUnitReadOnlyCollection())
							{
								Side clientSide2 = Client.GetClientSide();
								Unit unit_ = current2;
								string text = null;
								if (GameGeneral.CanIssueOrdersToUnit(clientSide2, unit_, false, ref text) && !current2.IsSatellite() && !current2.IsFixedFacility())
								{
									if (current2.IsGroup)
									{
										switch (((Group)current2).GetGroupType())
										{
										case Group.GroupType.Installation:
										case Group.GroupType.AirBase:
										case Group.GroupType.NavalBase:
											continue;
										}
									}
									((ActiveUnit)current2).GetNavigator().ClearPlottedCourse();
									list.Add((ActiveUnit)current2);
								}
							}
							if (list.Count != 0)
							{
								Client.IssueOrdersToUnit(Client._CommandOrder.AddNewWayPoint);
							}
						}
						else
						{
							if (Client.GetCommandOrder() == Client._CommandOrder.AddNewWayPoint)
							{
								Scenario clientScenario = Client.GetClientScenario();
								Client.SetUserIsPlottingCourse(ref clientScenario, false);
							}
							Client.IssueOrdersToUnit(Client._CommandOrder.None);
							Client.b_Completed = true;
						}
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 101143", "");
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060070A9 RID: 28841 RVA: 0x003E5F58 File Offset: 0x003E4158
		public void OnAirOps()
		{
			CommandFactory.GetCommandMain().GetAirOps().HostUnitSet.Clear();
			if (Client.GetClientSide() != null)
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (!Information.IsNothing(current) && current.IsActiveUnit())
					{
						if (current.IsGroup && ((Group)current).GetGroupType() == Group.GroupType.SurfaceGroup)
						{
							using (IEnumerator<ActiveUnit> enumerator2 = ((Group)current).GetUnitsInGroup().Values.GetEnumerator())
							{
								while (enumerator2.MoveNext())
								{
									ActiveUnit current2 = enumerator2.Current;
									if (current2.GetAirFacilities().Length > 0)
									{
										CommandFactory.GetCommandMain().GetAirOps().HostUnitSet.Add(current2);
									}
								}
								continue;
							}
						}
						if (((ActiveUnit)current).GetAirFacilities().Length > 0)
						{
							CommandFactory.GetCommandMain().GetAirOps().HostUnitSet.Add((ActiveUnit)current);
						}
					}
				}
				if (CommandFactory.GetCommandMain().GetAirOps().HostUnitSet.Count <= 0 && !Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit())
				{
					if (Client.GetHookedUnit().IsGroup && ((Group)Client.GetHookedUnit()).GetGroupType() == Group.GroupType.SurfaceGroup)
					{
						using (IEnumerator<ActiveUnit> enumerator3 = ((Group)Client.GetHookedUnit()).GetUnitsInGroup().Values.GetEnumerator())
						{
							while (enumerator3.MoveNext())
							{
								ActiveUnit current3 = enumerator3.Current;
								if (current3.GetAirFacilities().Length > 0)
								{
									CommandFactory.GetCommandMain().GetAirOps().HostUnitSet.Add(current3);
								}
							}
							goto IL_21B;
						}
					}
					if (((ActiveUnit)Client.GetHookedUnit()).GetAirFacilities().Length > 0)
					{
						CommandFactory.GetCommandMain().GetAirOps().HostUnitSet.Add((ActiveUnit)Client.GetHookedUnit());
					}
				}
				IL_21B:
				if (CommandFactory.GetCommandMain().GetAirOps().HostUnitSet.Count > 0)
				{
					CommandFactory.GetCommandMain().GetAirOps().Show();
				}
			}
		}

		// Token: 0x060070AA RID: 28842 RVA: 0x003E61D4 File Offset: 0x003E43D4
		public void OnDockOps()
		{
			CommandFactory.GetCommandMain().GetDockingOps().HostUnits.Clear();
			if (Client.GetClientSide() != null)
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (!Information.IsNothing(current) && current.IsActiveUnit())
					{
						if (current.IsGroup && (((Group)current).GetGroupType() == Group.GroupType.SurfaceGroup || ((Group)current).GetGroupType() == Group.GroupType.SubGroup))
						{
							using (IEnumerator<ActiveUnit> enumerator2 = ((Group)current).GetUnitsInGroup().Values.GetEnumerator())
							{
								while (enumerator2.MoveNext())
								{
									ActiveUnit current2 = enumerator2.Current;
									if (current2.GetDockFacilities().Length > 0)
									{
										CommandFactory.GetCommandMain().GetDockingOps().HostUnits.Add(current2);
									}
								}
								continue;
							}
						}
						if (((ActiveUnit)current).GetDockFacilities().Length > 0)
						{
							CommandFactory.GetCommandMain().GetDockingOps().HostUnits.Add((ActiveUnit)current);
						}
					}
				}
				if (CommandFactory.GetCommandMain().GetDockingOps().HostUnits.Count <= 0 && !Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit())
				{
					if (Client.GetHookedUnit().IsGroup && (((Group)Client.GetHookedUnit()).GetGroupType() == Group.GroupType.SurfaceGroup || ((Group)Client.GetHookedUnit()).GetGroupType() == Group.GroupType.SubGroup))
					{
						using (IEnumerator<ActiveUnit> enumerator3 = ((Group)Client.GetHookedUnit()).GetUnitsInGroup().Values.GetEnumerator())
						{
							while (enumerator3.MoveNext())
							{
								ActiveUnit current3 = enumerator3.Current;
								if (current3.GetDockFacilities().Length > 0)
								{
									CommandFactory.GetCommandMain().GetDockingOps().HostUnits.Add(current3);
								}
							}
							goto IL_23D;
						}
					}
					if (((ActiveUnit)Client.GetHookedUnit()).GetDockFacilities().Length > 0)
					{
						CommandFactory.GetCommandMain().GetDockingOps().HostUnits.Add((ActiveUnit)Client.GetHookedUnit());
					}
				}
				IL_23D:
				if (CommandFactory.GetCommandMain().GetDockingOps().HostUnits.Count > 0)
				{
					CommandFactory.GetCommandMain().GetDockingOps().Show();
				}
			}
		}

		// Token: 0x060070AB RID: 28843 RVA: 0x003E6474 File Offset: 0x003E4674
		private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
		{
			checked
			{
				if (!Client.bool_6)
				{
					if (Interaction.MsgBox("您确定要退出推演系统吗?", MsgBoxStyle.OkCancel, "退出CommandX推演平台") == MsgBoxResult.Ok)
					{
						Client.bool_6 = true;
						List<Form> list = new List<Form>();
						Form[] ownedForms = base.OwnedForms;
						for (int i = 0; i < ownedForms.Length; i++)
						{
							Form item = ownedForms[i];
							list.Add(item);
						}
						foreach (Form current in list)
						{
							current.Owner = null;
							current.Close();
						}
						Client.m_WorldWindow.Dispose();
						Client.m_WorldWindow = null;
						SteamSession.Shutdown();
						base.Close();
					}
					else
					{
						e.Cancel = true;
					}
				}
			}
		}

		// Token: 0x060070AC RID: 28844 RVA: 0x0002EF9F File Offset: 0x0002D19F
		private void MainForm_GotFocus(object sender, EventArgs e)
		{
			this.WorldMapBox.Focus();
		}

		// Token: 0x060070AD RID: 28845 RVA: 0x003E6544 File Offset: 0x003E4744
		public void MainForm_KeyDown(object sender, KeyEventArgs e)
		{
			try
			{
				int keyValue = e.KeyValue;
				switch (keyValue)
				{
				case 8:
					this.method_45();
					break;
				case 9:
				case 10:
				case 11:
				case 12:
				case 14:
				case 15:
				case 16:
				case 17:
				case 18:
				case 19:
				case 20:
				case 21:
				case 22:
				case 23:
				case 24:
				case 25:
				case 26:
				case 28:
				case 29:
				case 30:
				case 31:
				case 41:
				case 42:
				case 43:
				case 44:
				case 47:
				case 48:
				case 59:
				case 60:
				case 61:
				case 62:
				case 63:
				case 64:
				case 74:
				case 75:
				case 87:
				case 89:
				case 91:
				case 92:
				case 94:
				case 95:
				case 99:
				case 101:
				case 108:
					break;
				case 13:
					if (e.Modifiers == Keys.Control)
					{
						Configuration.EnumRunStop @enum = Client.GetConfiguration().GetSimStatus();
						if (@enum != Configuration.EnumRunStop.const_Stop)
						{
							if (@enum == Configuration.EnumRunStop.const_Run)
							{
								Client.GetConfiguration().SetSimStopMode();
							}
						}
						else
						{
							Client.GetConfiguration().SetSimRunMode();
						}
					}
					else
					{
						Client.GetClientScenario().SetTimeCompression(0);
						this.toolStripComboBox_0.SelectedIndex = 0;
					}
					break;
				case 27:
					if (Client.GetCommandOrder() != Client._CommandOrder.None)
					{
						Client.IssueOrdersToUnit(Client._CommandOrder.None);
						Scenario clientScenario = Client.GetClientScenario();
						Client.SetUserIsPlottingCourse(ref clientScenario, false);
					}
					break;
				case 32:
				{
					Configuration.EnumRunStop enum2 = Client.GetConfiguration().GetSimStatus();
					if (enum2 != Configuration.EnumRunStop.const_Stop)
					{
						if (enum2 == Configuration.EnumRunStop.const_Run)
						{
							Client.GetConfiguration().SetSimStopMode();
						}
					}
					else
					{
						Client.GetConfiguration().SetSimRunMode();
					}
					e.Handled = true;
					break;
				}
				case 33:
				case 86:
				case 105:
					if (e.Modifiers == Keys.Control)
					{
						if (Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit)
						{
							this.SwitchGodsEyeView();
						}
					}
					else
					{
						this.method_31();
					}
					break;
				case 34:
				case 80:
					this.method_36();
					break;
				case 35:
				case 97:
					if (e.Modifiers == Keys.Control)
					{
						Client.GetClientSide().GetReferencePoints();
						using (List<ReferencePoint>.Enumerator enumerator = Client.GetRefPointSelList().GetEnumerator())
						{
							while (enumerator.MoveNext())
							{
								enumerator.Current.SetIsSelected(false);
							}
						}
						this.RefreshMap();
					}
					else
					{
						Client.GetMap().SetShowIlluminationVectors(Client.GetMap().GetShowIlluminationVectors() + 1);
					}
					break;
				case 36:
				case 103:
					Client.GetMap().SetShowTargetingVectors(Client.GetMap().GetShowTargetingVectors() + 1);
					break;
				case 37:
				case 100:
					this.method_38();
					break;
				case 38:
				case 104:
					this.method_39();
					break;
				case 39:
				case 102:
					this.method_40();
					break;
				case 40:
				case 98:
					this.method_41();
					break;
				case 45:
				case 96:
					if (e.Modifiers == Keys.Control)
					{
						Client.IssueOrdersToUnit(Client._CommandOrder.AddReferencePoint);
						this.referencePoint_0 = null;
					}
					else if (Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit)
					{
						Client.IssueOrdersToUnit(Client._CommandOrder.AddUnit);
					}
					break;
				case 46:
				case 110:
					checked
					{
						if (!Information.IsNothing(Client.GetClientSide()))
						{
							if (e.Modifiers == Keys.Control)
							{
								this.method_52();
							}
							else if (!Information.IsNothing(Client.GetWayPointSelected()))
							{
								bool flag = false;
								ActiveUnit[] activeUnitArray = Client.GetClientSide().ActiveUnitArray;
								int i = 0;
								while (i < activeUnitArray.Length)
								{
									ActiveUnit activeUnit = activeUnitArray[i];
									if (activeUnit.GetNavigator().GetPlottedCourse().Contains(Client.GetWayPointSelected()))
									{
										activeUnit.GetNavigator().RemoveWaypoint(Client.GetWayPointSelected(), true);
									}
									if ((!activeUnit.IsAircraft && (!activeUnit.IsGroup || ((Group)activeUnit).GetGroupType() != Group.GroupType.AirGroup)) || !activeUnit.GetNavigator().HasFlightCourse() || !activeUnit.GetNavigator().GetFlight().GetFlightCourse().Contains(Client.GetWayPointSelected()))
									{
										if (!flag)
										{
											i++;
											continue;
										}
									}
									else
									{
										Scenario clientScenario2 = Client.GetClientScenario();
										Mission assignedMission = activeUnit.GetAssignedMission(false);
										Mission.Flight flight = activeUnit.GetNavigator().GetFlight();
										Mission.Flight flight2;
										Waypoint[] flightCourse = (flight2 = activeUnit.GetNavigator().GetFlight()).GetFlightCourse();
										ActiveUnit_Navigator.smethod_2(clientScenario2, assignedMission, flight, ref flightCourse, Client.GetWayPointSelected());
										flight2.SetFlightCourse(flightCourse);
										flag = true;
									}
									if (!flag)
									{
										foreach (Mission current in Client.GetClientSide().GetMissionCollection())
										{
											if (current.HasFlightCourse())
											{
												foreach (Mission.Flight current2 in current.FlightList)
												{
													Waypoint[] flightCourse = current2.GetFlightCourse();
													for (int j = 0; j < flightCourse.Length; j++)
													{
														if (flightCourse[j] == Client.GetWayPointSelected())
														{
															Scenario clientScenario3 = Client.GetClientScenario();
															Mission mission_ = current;
															Mission.Flight class168_ = current2;
															Mission.Flight flight2;
															Waypoint[] flightCourse2 = (flight2 = current2).GetFlightCourse();
															ActiveUnit_Navigator.smethod_2(clientScenario3, mission_, class168_, ref flightCourse2, Client.GetWayPointSelected());
															flight2.SetFlightCourse(flightCourse2);
															flag = true;
															goto IL_1454;
														}
													}
													if (!flag)
													{
														continue;
													}
													IL_1454:
													break;
												}
											}
											if (flag)
											{
												break;
											}
										}
									}
									Client.SetWayPointSelected(null);
									return;
								}
								if (!flag)
								{
									foreach (Mission current in Client.GetClientSide().GetMissionCollection())
									{
										if (current.HasFlightCourse())
										{
											foreach (Mission.Flight current2 in current.FlightList)
											{
												Waypoint[] flightCourse = current2.GetFlightCourse();
												for (int j = 0; j < flightCourse.Length; j++)
												{
													if (flightCourse[j] == Client.GetWayPointSelected())
													{
														Scenario clientScenario4 = Client.GetClientScenario();
														Mission mission_ = current;
														Mission.Flight class168_ = current2;
														Mission.Flight flight2;
														Waypoint[] flightCourse2 = (flight2 = current2).GetFlightCourse();
														ActiveUnit_Navigator.smethod_2(clientScenario4, mission_, class168_, ref flightCourse2, Client.GetWayPointSelected());
														flight2.SetFlightCourse(flightCourse2);
														flag = true;
														goto IL_12FC;
													}
												}
												if (!flag)
												{
													continue;
												}
												IL_12FC:
												break;
											}
										}
										if (flag)
										{
											break;
										}
									}
								}
								Client.SetWayPointSelected(null);
							}
							else
							{
								this.DeleteUnit();
							}
						}
						break;
					}
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
				case 58:
					if (!Information.IsNothing(Client.GetClientSide()))
					{
						byte b = (byte)(e.KeyValue - 48);
						if (e.Modifiers == Keys.Control)
						{
							if (!Information.IsNothing(Client.GetHookedUnit()))
							{
								QuickJumpSlot quickJumpSlot = new QuickJumpSlot();
								quickJumpSlot.I = b;
								if (Client.GetHookedUnit().IsActiveUnit())
								{
									quickJumpSlot.LS = "AU_" + Client.GetHookedUnit().GetGuid();
								}
								else
								{
									quickJumpSlot.LS = "Con_" + ((Contact)Client.GetHookedUnit()).ActualUnit.GetGuid();
								}
								quickJumpSlot.CA = this.method_5();
								quickJumpSlot.TR = this.bool_5;
								if (Client.GetClientSide().QuickJumpSlots.ContainsKey(quickJumpSlot.I))
								{
									Client.GetClientSide().QuickJumpSlots[quickJumpSlot.I] = quickJumpSlot;
								}
								else
								{
									Client.GetClientSide().QuickJumpSlots.Add(quickJumpSlot.I, quickJumpSlot);
								}
								this.toolStripStatusLabel_0.Text = "保存为快速跳转位置#" + Conversions.ToString(b);
								this.method_262();
							}
						}
						else
						{
							this.method_463(b);
						}
					}
					break;
				case 65:
					checked
					{
						if (!Information.IsNothing(Client.GetClientSide()))
						{
							if (e.Modifiers == Keys.Control)
							{
								bool flag2 = true;
								Doctrine._WeaponControlStatus? weaponControlStatus = null;
								ActiveUnit[] activeUnitArray2 = Client.GetClientSide().ActiveUnitArray;
								for (int k = 0; k < activeUnitArray2.Length; k++)
								{
									Unit unit = activeUnitArray2[k];
									if (unit.IsActiveUnit() && unit.GetSide(false) == Client.GetClientSide() && !unit.IsWeapon)
									{
										weaponControlStatus = ((ActiveUnit)unit).m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, null, false, false);
										byte? b2 = weaponControlStatus.HasValue ? new byte?((byte)weaponControlStatus.GetValueOrDefault()) : null;
										bool? flag3 = b2.HasValue ? new bool?(b2.GetValueOrDefault() == 2) : null;
										if ((flag3.HasValue ? new bool?(!flag3.GetValueOrDefault()) : flag3).GetValueOrDefault())
										{
											weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Hold);
											this.method_458(ref weaponControlStatus);
											goto IL_16FD;
										}
									}
								}
								if (flag2)
								{
									weaponControlStatus = null;
									this.method_458(ref weaponControlStatus);
								}
								else
								{
									weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Hold);
									this.method_458(ref weaponControlStatus);
								}
							}
							else
							{
								bool flag4 = true;
								foreach (Unit current3 in Client.GetClientSide().GetUnitReadOnlyCollection())
								{
									if (current3.IsActiveUnit() && current3.GetSide(false) == Client.GetClientSide() && !current3.IsWeapon)
									{
										Doctrine._WeaponControlStatus? weaponControlStatus = ((ActiveUnit)current3).m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, null, false, false);
										byte? b2 = weaponControlStatus.HasValue ? new byte?((byte)weaponControlStatus.GetValueOrDefault()) : null;
										bool? flag3 = b2.HasValue ? new bool?(b2.GetValueOrDefault() == 2) : null;
										if ((flag3.HasValue ? new bool?(!flag3.GetValueOrDefault()) : flag3).GetValueOrDefault())
										{
											flag4 = false;
											break;
										}
									}
								}
								if (flag4)
								{
									Doctrine._WeaponControlStatus? weaponControlStatus = null;
									this.method_459(ref weaponControlStatus);
								}
								else
								{
									Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Hold);
									this.method_459(ref weaponControlStatus);
								}
							}
						}
						break;
					}
				case 66:
					if (!Information.IsNothing(Client.GetClientSide()))
					{
						this.method_163();
					}
					break;
				case 67:
					if (e.Modifiers == Keys.Shift)
					{
						this.method_48();
					}
					else
					{
						this.method_49();
					}
					break;
				case 68:
					if (e.Modifiers == Keys.Control)
					{
						this.MeasureRangeBearing();
					}
					else if (e.Modifiers == Keys.Shift)
					{
						this.method_37();
					}
					else
					{
						this.method_43();
					}
					break;
				case 69:
					if (e.Modifiers == Keys.Control)
					{
						this.method_327();
					}
					else
					{
						this.method_326();
					}
					break;
				case 70:
					this.method_56();
					break;
				case 71:
					this.method_42();
					break;
				case 72:
					if (e.Modifiers == Keys.Control)
					{
						this.method_54();
					}
					else
					{
						this.method_53();
					}
					break;
				case 73:
				{
					Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = null;
					checked
					{
						if (!Information.IsNothing(Client.GetClientSide()))
						{
							if (e.Control && e.Shift)
							{
								this.SetIsolatedPOVObject();
							}
							else if (e.Modifiers == Keys.Control)
							{
								bool flag5 = true;
								ActiveUnit[] activeUnitArray3 = Client.GetClientSide().ActiveUnitArray;
								for (int l = 0; l < activeUnitArray3.Length; l++)
								{
									Unit unit2 = activeUnitArray3[l];
									if (unit2.IsActiveUnit() && unit2.GetSide(false) == Client.GetClientSide() && !unit2.IsWeapon)
									{
										ignorePlottedCourseWhenAttacking = ((ActiveUnit)unit2).m_Doctrine.GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, null, false, false);
										byte? b2 = ignorePlottedCourseWhenAttacking.HasValue ? new byte?((byte)ignorePlottedCourseWhenAttacking.GetValueOrDefault()) : null;
										bool? flag3 = b2.HasValue ? new bool?(b2.GetValueOrDefault() == 1) : null;
										if ((flag3.HasValue ? new bool?(!flag3.GetValueOrDefault()) : flag3).GetValueOrDefault())
										{
											ignorePlottedCourseWhenAttacking = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_1);
											this.method_461(ref ignorePlottedCourseWhenAttacking);
											goto IL_16FD;
										}
									}
								}
								if (flag5)
								{
									ignorePlottedCourseWhenAttacking = null;
									this.method_461(ref ignorePlottedCourseWhenAttacking);
								}
								else
								{
									ignorePlottedCourseWhenAttacking = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_1);
									this.method_461(ref ignorePlottedCourseWhenAttacking);
								}
							}
							else
							{
								bool flag6 = true;
								foreach (Unit current4 in Client.GetClientSide().GetUnitReadOnlyCollection())
								{
									if (current4.IsActiveUnit() && current4.GetSide(false) == Client.GetClientSide() && !current4.IsWeapon)
									{
										ignorePlottedCourseWhenAttacking = ((ActiveUnit)current4).m_Doctrine.GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, null, false, false);
										byte? b2 = ignorePlottedCourseWhenAttacking.HasValue ? new byte?((byte)ignorePlottedCourseWhenAttacking.GetValueOrDefault()) : null;
										bool? flag3 = b2.HasValue ? new bool?(b2.GetValueOrDefault() == 1) : null;
										if ((flag3.HasValue ? new bool?(!flag3.GetValueOrDefault()) : flag3).GetValueOrDefault())
										{
											flag6 = false;
											break;
										}
									}
								}
								if (flag6)
								{
									ignorePlottedCourseWhenAttacking = null;
									this.method_460(ref ignorePlottedCourseWhenAttacking);
								}
								else
								{
									ignorePlottedCourseWhenAttacking = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_1);
									this.method_460(ref ignorePlottedCourseWhenAttacking);
								}
							}
						}
						break;
					}
				}
				case 76:
					checked
					{
						if (!Information.IsNothing(Client.GetClientSide()))
						{
							if (e.Modifiers == Keys.Control)
							{
								bool flag7 = true;
								ActiveUnit[] activeUnitArray4 = Client.GetClientSide().ActiveUnitArray;
								for (int m = 0; m < activeUnitArray4.Length; m++)
								{
									Unit unit3 = activeUnitArray4[m];
									if (unit3.IsActiveUnit() && unit3.GetSide(false) == Client.GetClientSide() && unit3.IsFacility && !unit3.IsFixedFacility() && !((Facility)unit3).GetFacilityAI().HoldPosition)
									{
										flag7 = false;
										this.method_372(ref flag7);
										goto IL_16FD;
									}
								}
								this.method_372(ref flag7);
							}
							else
							{
								bool flag8 = true;
								foreach (Unit current5 in Client.GetClientSide().GetUnitReadOnlyCollection())
								{
									if (current5.IsActiveUnit() && current5.GetSide(false) == Client.GetClientSide() && current5.IsFacility && !current5.IsFixedFacility() && !((Facility)current5).GetFacilityAI().HoldPosition)
									{
										flag8 = false;
										break;
									}
								}
								this.method_371(ref flag8);
							}
						}
						break;
					}
				case 77:
					if (e.Control && e.Shift)
					{
						Configuration.GameOptions gameOptions = SimConfiguration.gameOptions;
						gameOptions.SetMessageLogInWindow(!gameOptions.IsMessageLogInWindow());
						if (gameOptions.IsMessageLogInWindow())
						{
							CommandFactory.GetCommandMain().GetMessageLogWindow().Show();
						}
						else
						{
							CommandFactory.GetCommandMain().GetMessageLogWindow().Close();
						}
						Client.b_Completed = true;
						base.BringToFront();
					}
					else if (e.Modifiers == Keys.Control)
					{
						this.method_245();
					}
					else
					{
						this.method_50();
					}
					break;
				case 78:
					this.method_55();
					break;
				case 79:
					if (!Information.IsNothing(Client.GetClientSide()))
					{
						CommandFactory.GetCommandMain().GetORBAT().Show();
					}
					break;
				case 81:
					if (Control.ModifierKeys == Keys.Control)
					{
						if (SimConfiguration.gameOptions.NoPulseMapUpdate())
						{
							SimConfiguration.gameOptions.SetNoPulseMapUpdate(false);
							this.comboBox_2.SelectedIndex = 0;
						}
						else
						{
							SimConfiguration.gameOptions.SetNoPulseMapUpdate(true);
							this.comboBox_2.SelectedIndex = 1;
						}
						SimConfiguration.SaveConfig();
					}
					break;
				case 82:
					if (e.Modifiers == Keys.Control)
					{
						this.RenameMultipleObjects();
					}
					else
					{
						this.RenameObject();
					}
					break;
				case 83:
					if (Control.ModifierKeys == Keys.Alt && Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit && Client.GetClientScenario().GetSides().Count<Side>() > 1)
					{
						this.method_457();
						int num = Array.IndexOf<Side>(Client.GetClientScenario().GetSides(), Client.GetClientSide());
						int num2;
						if (num == Client.GetClientScenario().GetSides().Count<Side>() - 1)
						{
							num2 = 0;
						}
						else
						{
							num2 = num + 1;
						}
						Client.GetClientScenario().ChangeSide(Client.GetClientScenario().GetSides()[num2]);
					}
					break;
				case 84:
					this.method_35();
					break;
				case 85:
					this.method_364();
					this.method_3().method_2(Client.GetClientScenario(), Client.GetClientSide(), Client.GetHookedUnit(), false);
					break;
				case 88:
					if (e.Modifiers == Keys.Control)
					{
						if (Information.IsNothing(Client.m_WorldWindow))
						{
							string text = "WorldWindow1 object not found! Error 200594";
							GameGeneral.Log(ref text);
						}
						else
						{
							int l = this.point_1.X;
							int k = this.point_1.Y;
							double value = 0.0;
							double value2 = 0.0;
							WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, ref l, ref k, ref value, ref value2);
							this.point_1.Y = k;
							this.point_1.X = l;
							Clipboard.SetText(string.Concat(new string[]
							{
								"latitude='",
								Conversions.ToString(value2),
								"', longitude='",
								Conversions.ToString(value),
								"'"
							}));
						}
					}
					else
					{
						this.method_34();
					}
					break;
				case 90:
					this.method_33();
					break;
				case 93:
					if (!Information.IsNothing(Client.GetHookedUnit()))
					{
						Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, Client.GetHookedUnit().GetLatitude(null), Client.GetHookedUnit().GetLongitude(null));
						if (Client.GetHookedUnit().IsActiveUnit())
						{
							this.method_58(Client.GetHookedUnit(), point.X, point.Y);
						}
						if (Client.GetHookedUnit().IsContact())
						{
							this.method_506((Contact)Client.GetHookedUnit(), point.X, point.Y);
						}
					}
					break;
				case 106:
					Client.GetMap().SetShowDatablocks(Client.GetMap().GetShowDatablocks() + 1);
					Client.b_Completed = true;
					break;
				case 107:
					Client.GetClientScenario().IncreaseTimeCompression();
					break;
				case 109:
					Client.GetClientScenario().DecreaseTimeCompression();
					break;
				case 111:
					Client.GetMap().SetShowDatalinks(Client.GetMap().GetShowDatalinks() + 1);
					Client.b_Completed = true;
					break;
				case 112:
					if (e.Modifiers == Keys.Shift)
					{
						this.method_23();
					}
					else if (e.Modifiers == Keys.Control)
					{
						this.method_25();
					}
					else
					{
						this.method_22();
					}
					break;
				case 113:
					this.method_26();
					break;
				case 114:
					this.method_27();
					break;
				case 115:
					this.method_24();
					break;
				case 116:
					this.method_166();
					break;
				case 117:
					if (e.Modifiers == Keys.Control)
					{
						if (Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit)
						{
							this.method_184();
						}
					}
					else
					{
						this.OnAirOps();
					}
					break;
				case 118:
					if (e.Modifiers == Keys.Control)
					{
						if (Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit)
						{
							this.method_309();
						}
					}
					else
					{
						this.OnDockOps();
					}
					break;
				case 119:
					this.method_146();
					break;
				case 120:
					if (!Information.IsNothing(Client.GetClientSide()))
					{
						if (e.Control && e.Shift)
						{
							Subject clientSide = Client.GetClientSide();
							ReadOnlyCollection<Unit> readOnlyCollection = null;
							Collection<ActiveUnit> collection = null;
							this.method_254(clientSide, ref readOnlyCollection, ref collection, true);
						}
						else if (e.Modifiers == Keys.Control)
						{
							if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0)
							{
								Subject hookedUnit = Client.GetHookedUnit();
								ReadOnlyCollection<Unit> readOnlyCollection = Client.GetClientSide().GetUnitReadOnlyCollection();
								Collection<ActiveUnit> collection = null;
								this.method_254(hookedUnit, ref readOnlyCollection, ref collection, true);
							}
							else if (!Information.IsNothing(Client.GetWayPointSelected()))
							{
								Subject wayPointSelected = Client.GetWayPointSelected();
								ReadOnlyCollection<Unit> readOnlyCollection = null;
								Collection<ActiveUnit> collection = null;
								this.method_254(wayPointSelected, ref readOnlyCollection, ref collection, true);
							}
						}
						else
						{
							this.method_21();
						}
					}
					break;
				case 121:
					this.method_162();
					break;
				case 122:
					if (e.Modifiers == Keys.Control)
					{
						if (Information.IsNothing(Client.GetClientSide()))
						{
							Interaction.MsgBox("请先选择一个推演方.", MsgBoxStyle.OkOnly, "没选推演方!");
						}
						else
						{
							Client.newMission.Show();
						}
					}
					else if (Information.IsNothing(Client.GetClientSide()))
					{
						Interaction.MsgBox("请先选择一个推演方.", MsgBoxStyle.OkOnly, "没选推演方!");
					}
					else
					{
						Client.GetMissionEditor().Show();
					}
					break;
				default:
					switch (keyValue)
					{
					case 219:
						if (e.Modifiers == Keys.Shift)
						{
							ActiveUnit_Weaponry.smethod_1(Client.GetHookedUnit(), true);
						}
						else
						{
							ActiveUnit_Weaponry.smethod_1(Client.GetHookedUnit(), false);
						}
						break;
					case 220:
						this.method_44();
						break;
					case 221:
						if (e.Modifiers == Keys.Shift)
						{
							ActiveUnit_Weaponry.smethod_2(Client.GetHookedUnit(), true);
						}
						else
						{
							ActiveUnit_Weaponry.smethod_2(Client.GetHookedUnit(), false);
						}
						break;
					}
					break;
				}
				IL_16FD:;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200570", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070AE RID: 28846 RVA: 0x003E7D70 File Offset: 0x003E5F70
		private void method_30()
		{
			if (Client.GetConfiguration().GetSimStatus() == Configuration.EnumRunStop.const_Run)
			{
				List<NewMessageForm> list = new List<NewMessageForm>();
				list.AddRange(Client.MessageTypeFormDictionary.Values);
				using (List<NewMessageForm>.Enumerator enumerator = list.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						enumerator.Current.Close();
					}
				}
			}
			Client.b_Completed = true;
		}

		// Token: 0x060070AF RID: 28847 RVA: 0x003E7DE8 File Offset: 0x003E5FE8
		private void method_31()
		{
			if (Client.GetMap().ViewMode == MapProfile._ViewMode.GroupMode)
			{
				Client.GetMap().ViewMode = MapProfile._ViewMode.UnitMode;
				this.toolStripStatusLabel_0.Text = "切换到作战单元视图";
				this.RefreshMap();
			}
			else
			{
				Client.GetMap().ViewMode = MapProfile._ViewMode.GroupMode;
				this.toolStripStatusLabel_0.Text = "切换到作战编队视图";
				this.RefreshMap();
			}
			Client.b_Completed = true;
		}

		// Token: 0x060070B0 RID: 28848 RVA: 0x0002EFAD File Offset: 0x0002D1AD
		private void method_32()
		{
			if (Client.GetMap().ViewMode == MapProfile._ViewMode.GroupMode)
			{
				this.toolStripStatusLabel_0.Text = "作战编组视图";
			}
			else
			{
				this.toolStripStatusLabel_0.Text = "作战单元视图";
			}
		}

		// Token: 0x060070B1 RID: 28849 RVA: 0x003E7E54 File Offset: 0x003E6054
		private void method_33()
		{
			try
			{
				if (SimConfiguration.gameOptions.IsZoomOnCursor())
				{
					if (!Information.IsNothing(Client.m_WorldWindow))
					{
						int x = this.point_1.X;
						int y = this.point_1.Y;
						double double_ = 0.0;
						double double_2 = 0.0;
						WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, ref x, ref y, ref double_, ref double_2);
						this.point_1.Y = y;
						this.point_1.X = x;
						this.method_14(false, new GeoPoint(double_, double_2));
					}
					else
					{
						string text = "WorldWindow1 object not found! Error 200595";
						GameGeneral.Log(ref text);
					}
				}
				this.method_6((int)Math.Round((double)this.method_5() * 0.66666666666666663));
				if (SimConfiguration.gameOptions.IsZoomOnCursor())
				{
					this.Cursor = new Cursor(Cursor.Current.Handle);
					Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, this.method_13(false).GetLatitude(), this.method_13(false).GetLongitude());
					Cursor.Position = new Point(point.X, point.Y + this.toolStrip_0.Height + this.menuStrip_0.Height);
				}
				this.point_2.X = 0;
				this.point_2.Y = 0;
				this.RefreshMap();
				Client.b_Completed = false;
			}
			catch (Exception projectError)
			{
				ProjectData.SetProjectError(projectError);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
			finally
			{
				Client.b_Completed = true;
			}
		}

		// Token: 0x060070B2 RID: 28850 RVA: 0x003E800C File Offset: 0x003E620C
		private void method_34()
		{
			this.method_6((int)Math.Round((double)this.method_5() * 1.3333333333333333));
			this.point_2.X = 0;
			this.point_2.Y = 0;
			this.RefreshMap();
			Client.b_Completed = false;
		}

		// Token: 0x060070B3 RID: 28851 RVA: 0x003E805C File Offset: 0x003E625C
		private void method_35()
		{
			if (!Information.IsNothing(Client.GetHookedUnit()))
			{
				this.bool_5 = !this.bool_5;
				if (this.bool_5)
				{
					this.method_14(true, new GeoPoint(Client.GetHookedUnit().GetLongitude(null), Client.GetHookedUnit().GetLatitude(null)));
				}
				else
				{
					this.RefreshMap();
				}
			}
		}

		// Token: 0x060070B4 RID: 28852 RVA: 0x003E80CC File Offset: 0x003E62CC
		private void method_36()
		{
			checked
			{
				if (!Information.IsNothing(Client.GetClientSide()))
				{
					foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
					{
						if (current.IsContact())
						{
							Contact contact = (Contact)current;
							Side clientSide = Client.GetClientSide();
							Contact theTarget = contact;
							Scenario clientScenario = Client.GetClientScenario();
							clientSide.Lazy3DictionaryTryAdd(theTarget, ref clientScenario, true);
							Side[] sides = Client.GetClientScenario().GetSides();
							for (int i = 0; i < sides.Length; i++)
							{
								Side side = sides[i];
								if (side.GetPostureStance(Client.GetClientSide()) == Misc.PostureStance.Friendly && side != Client.GetClientSide() && side.GetContactList().Contains(contact))
								{
									Side side2 = side;
									Contact theTarget2 = contact;
									clientScenario = Client.GetClientScenario();
									side2.Lazy3DictionaryTryAdd(theTarget2, ref clientScenario, false);
								}
							}
							Side clientSide2 = Client.GetClientSide();
							Contact theC = contact;
							clientScenario = Client.GetClientScenario();
							clientSide2.Lazy4DictionaryTryAdd(theC, ref clientScenario, true);
						}
					}
					Client.GetClientSide().LazyContactListOnGridClear(Client.GetClientScenario());
					Client.GetClientSide().LazyNewContactDictionaryClear(Client.GetClientScenario());
					this.RefreshMap();
				}
			}
		}

		// Token: 0x060070B5 RID: 28853 RVA: 0x003E8210 File Offset: 0x003E6410
		private void method_37()
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit())
			{
				ActiveUnit activeUnit = (ActiveUnit)Client.GetHookedUnit();
				if (activeUnit.IsAircraft && ((Aircraft)activeUnit).IsRotaryWingAircraft() && activeUnit.GetSensory().HasOperationalDippingSonar() && ((Aircraft_AirOps)activeUnit.GetAirOps()).GetAirOpsCondition() != Aircraft_AirOps._AirOpsCondition.DeployingDippingSonar)
				{
					((Aircraft_AirOps)activeUnit.GetAirOps()).method_75();
				}
			}
		}

		// Token: 0x060070B6 RID: 28854 RVA: 0x003E8294 File Offset: 0x003E6494
		private void method_38()
		{
			Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, this.method_13(true).GetLatitude(), this.method_13(true).GetLongitude());
			Point point2 = default(Point);
			point2.X = point.X - 50;
			point2.Y = point.Y;
			this.method_14(true, WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, point2.X, point2.Y));
		}

		// Token: 0x060070B7 RID: 28855 RVA: 0x003E830C File Offset: 0x003E650C
		private void method_39()
		{
			Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, this.method_13(true).GetLatitude(), this.method_13(true).GetLongitude());
			Point point2 = default(Point);
			point2.X = point.X;
			point2.Y = point.Y - 50;
			this.method_14(true, WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, point2.X, point2.Y));
		}

		// Token: 0x060070B8 RID: 28856 RVA: 0x003E8384 File Offset: 0x003E6584
		private void method_40()
		{
			Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, this.method_13(true).GetLatitude(), this.method_13(true).GetLongitude());
			Point point2 = default(Point);
			point2.X = point.X + 50;
			point2.Y = point.Y;
			this.method_14(true, WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, point2.X, point2.Y));
		}

		// Token: 0x060070B9 RID: 28857 RVA: 0x003E83FC File Offset: 0x003E65FC
		private void method_41()
		{
			Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, this.method_13(true).GetLatitude(), this.method_13(true).GetLongitude());
			Point point2 = default(Point);
			point2.X = point.X;
			point2.Y = point.Y + 50;
			this.method_14(true, WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, point2.X, point2.Y));
		}

		// Token: 0x060070BA RID: 28858 RVA: 0x003E8474 File Offset: 0x003E6674
		private void method_42()
		{
			if (!Information.IsNothing(Client.GetClientSide()) && Client.GetClientSide().GetUnitReadOnlyCollection().Count > 1)
			{
				Collection<ActiveUnit> collection = new Collection<ActiveUnit>();
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (!Information.IsNothing(current.GetSide(false)) && current.GetSide(false) == Client.GetClientSide())
					{
						try
						{
							ActiveUnit activeUnit = (ActiveUnit)current;
							if (!activeUnit.HasParentGroup() && (current.IsPlatform() || current.IsGroup))
							{
								collection.Add(activeUnit);
								activeUnit.m_Doctrine.Init();
								activeUnit.GetSensory().ScheduleEMCONEvent(activeUnit.GetAllNoneMCMSensors());
							}
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception ex2 = ex;
							ex2.Data.Add("Error at 200125", ex2.Message);
							GameGeneral.LogException(ref ex2);
							if (Debugger.IsAttached)
							{
								Debugger.Break();
							}
							ProjectData.ClearProjectError();
						}
					}
				}
				if (collection.Count > 1)
				{
					IEnumerable<ActiveUnit> source = collection.Where(MainForm.ActiveUnitFunc0);
					int num = source.Count<ActiveUnit>();
					if (num != 0)
					{
						if (num != 1)
						{
							Interaction.MsgBox("目前不支持多个编组合并。\r\n建议临时解决方案：除一个编组外把其他编组全部解散，并把解散的作战单元添加到这个唯一编组中。", MsgBoxStyle.Critical, "抱歉!");
						}
						else
						{
							IEnumerable<ActiveUnit> enumerable = collection.Where(MainForm.ActiveUnitFunc1);
							Group group = (Group)source.ElementAtOrDefault(0);
							int num2 = 0;
							foreach (ActiveUnit current2 in enumerable)
							{
								if (group.GetGroupType() == Group.GroupType.AirGroup)
								{
									if (!current2.IsAircraft)
									{
										continue;
									}
									if (!Information.IsNothing(group.GetGroupLead()) && Operators.CompareString(group.GetGroupLead().UnitClass, current2.UnitClass, false) != 0)
									{
										continue;
									}
								}
								else if (group.GetGroupType() == Group.GroupType.SurfaceGroup)
								{
									if (!current2.IsShip)
									{
										continue;
									}
								}
								else
								{
									if (group.GetGroupType() != Group.GroupType.SubGroup)
									{
										if (group.GetGroupType() == Group.GroupType.AirBase || group.GetGroupType() == Group.GroupType.Installation || group.GetGroupType() == Group.GroupType.MobileGroup)
										{
											goto IL_250;
										}
										if (group.GetGroupType() == Group.GroupType.NavalBase)
										{
											goto IL_250;
										}
										bool arg_257_0 = true;
										IL_257:
										if (arg_257_0)
										{
											goto IL_259;
										}
										continue;
										IL_250:
										arg_257_0 = current2.IsFacility;
										goto IL_257;
									}
									if (!current2.IsSubmarine)
									{
										continue;
									}
								}
								IL_259:
								current2.SetParentGroup(false, group);
								num2 = 1;
							}
							if (num2 > 0)
							{
								this.method_18(source.ElementAtOrDefault(0), true);
								Client.GetMap().ViewMode = MapProfile._ViewMode.GroupMode;
								this.toolStripStatusLabel_0.Text = "所选作战单元添加到当前作战编组中";
							}
						}
					}
					else
					{
						Misc.smethod_60(collection, Client.GetClientScenario(), Client.GetClientSide(), null);
						Client.GetMap().ViewMode = MapProfile._ViewMode.GroupMode;
						this.toolStripStatusLabel_0.Text = "所选作战单元形成编组 - 切换到作战编组视图";
					}
					collection = null;
					this.RefreshMap();
				}
			}
		}

		// Token: 0x060070BB RID: 28859 RVA: 0x003E8798 File Offset: 0x003E6998
		private void method_43()
		{
			if (Client.GetClientScenario().GetSides().Count<Side>() > 0 && Client.GetClientSide().GetUnitReadOnlyCollection().Count > 0)
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.GetSide(false) == Client.GetClientSide() && !current.IsWeapon)
					{
						((ActiveUnit)current).method_121(true, true);
					}
				}
				this.RefreshMap();
				this.toolStripStatusLabel_0.Text = "所选作战单元已脱离作战编组.";
			}
		}

		// Token: 0x060070BC RID: 28860 RVA: 0x003E8850 File Offset: 0x003E6A50
		private void method_44()
		{
			if (!Information.IsNothing(Client.GetClientSide()) && Client.GetCommandOrder() == Client._CommandOrder.None)
			{
				List<Unit> list = this.UnitList.ToList<Unit>();
				if (list.Count > 0)
				{
					Unit unit_;
					if (!Information.IsNothing(Client.GetHookedUnit()) && list.Contains(Client.GetHookedUnit()))
					{
						if (list.IndexOf(Client.GetHookedUnit()) == list.Count - 1)
						{
							unit_ = list[0];
						}
						else
						{
							unit_ = list[list.IndexOf(Client.GetHookedUnit()) + 1];
						}
					}
					else
					{
						unit_ = list[0];
					}
					Client.GetClientSide().ClearUnits();
					list.Clear();
					this.method_18(unit_, true);
				}
			}
		}

		// Token: 0x060070BD RID: 28861 RVA: 0x003E8910 File Offset: 0x003E6B10
		private void method_45()
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				List<Unit> list = this.UnitList.ToList<Unit>();
				if (list.Count > 0)
				{
					Unit unit_;
					if (!Information.IsNothing(Client.GetHookedUnit()) && list.Contains(Client.GetHookedUnit()))
					{
						if (list.IndexOf(Client.GetHookedUnit()) == 0)
						{
							unit_ = list[list.Count - 1];
						}
						else
						{
							unit_ = list[list.IndexOf(Client.GetHookedUnit()) - 1];
						}
					}
					else
					{
						unit_ = list[list.Count - 1];
					}
					Client.GetClientSide().ClearUnits();
					list.Clear();
					this.method_18(unit_, true);
				}
			}
		}

		// Token: 0x060070BE RID: 28862 RVA: 0x003E89CC File Offset: 0x003E6BCC
		private void RenameObject()
		{
			if (!Information.IsNothing(Client.GetClientSide()) && Client.GetCommandOrder() == Client._CommandOrder.None)
			{
				if (Client.GetClientSide().GetUnitReadOnlyCollection().Count == 1)
				{
					if (!Information.IsNothing(Client.GetHookedUnit()))
					{
						CommandFactory.GetCommandMain().GetRenameObject().string_0 = Client.GetHookedUnit().Name;
						if (CommandFactory.GetCommandMain().GetRenameObject().ShowDialog() == DialogResult.OK)
						{
							Client.GetHookedUnit().Name = CommandFactory.GetCommandMain().GetRenameObject().string_0;
							Client.b_Completed = true;
						}
					}
				}
				else if (Client.GetClientSide().GetUnitReadOnlyCollection().Count > 1)
				{
					Client.GetClientScenario().LogMessage("一次只能重命名一个单元/编组/目标.", LoggedMessage.MessageType.SpecialMessage, 1, null, Client.GetClientSide(), null);
				}
				else
				{
					Client.GetClientScenario().LogMessage("选择一个作战单元、编组或者目标，进行重命名。", LoggedMessage.MessageType.SpecialMessage, 1, null, Client.GetClientSide(), null);
				}
			}
		}

		// Token: 0x060070BF RID: 28863 RVA: 0x003E8ABC File Offset: 0x003E6CBC
		private void RenameMultipleObjects()
		{
			if (!Information.IsNothing(Client.GetClientSide()) && Client.GetCommandOrder() == Client._CommandOrder.None)
			{
				if (Client.GetRefPointSelList().Count == 1)
				{
					CommandFactory.GetCommandMain().GetRenameObject().string_0 = Client.GetRefPointSelList()[0].Name;
					if (CommandFactory.GetCommandMain().GetRenameObject().ShowDialog() == DialogResult.OK)
					{
						Client.GetRefPointSelList()[0].Name = CommandFactory.GetCommandMain().GetRenameObject().string_0;
					}
				}
				else if (Client.GetRefPointSelList().Count > 1)
				{
					Client.GetClientScenario().LogMessage("一次只能对一个参考点进行命名。请只保留对一个参考点的选择。", LoggedMessage.MessageType.SpecialMessage, 1, null, Client.GetClientSide(), null);
				}
				else
				{
					Client.GetClientScenario().LogMessage("请选择一个参考点进行命名.", LoggedMessage.MessageType.SpecialMessage, 1, null, Client.GetClientSide(), null);
				}
			}
		}

		// Token: 0x060070C0 RID: 28864 RVA: 0x003E8B98 File Offset: 0x003E6D98
		private void method_48()
		{
			if (!Information.IsNothing(Client.GetClientSide()) && Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit)
			{
				this.referencePoint_0 = null;
				if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit() && ((ActiveUnit)Client.GetHookedUnit()).GetSide(false) == Client.GetClientSide())
				{
					Client.IssueOrdersToUnit(Client._CommandOrder.CloneUnit);
				}
			}
		}

		// Token: 0x060070C1 RID: 28865 RVA: 0x003E8C0C File Offset: 0x003E6E0C
		private void method_49()
		{
			if (!Information.IsNothing(Client.GetClientSide()) && Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit)
			{
				this.referencePoint_0 = null;
				if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit() && ((ActiveUnit)Client.GetHookedUnit()).GetSide(false) == Client.GetClientSide())
				{
					Client.IssueOrdersToUnit(Client._CommandOrder.CopyUnit);
				}
			}
		}

		// Token: 0x060070C2 RID: 28866 RVA: 0x0002EFE3 File Offset: 0x0002D1E3
		private void method_50()
		{
			if (Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit)
			{
				this.referencePoint_0 = null;
				if (Client.GetCommandOrder() == Client._CommandOrder.None && !Information.IsNothing(Client.GetHookedUnit()))
				{
					Client.IssueOrdersToUnit(Client._CommandOrder.MoveUnit);
				}
			}
		}

		// Token: 0x060070C3 RID: 28867 RVA: 0x003E8C80 File Offset: 0x003E6E80
		private void DeleteUnit()
		{
			try
			{
				if (Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit)
				{
					if (Client.GetClientSide().GetUnitReadOnlyCollection().Count > 1)
					{
						if (Interaction.MsgBox("删除" + Conversions.ToString(Client.GetClientSide().GetUnitReadOnlyCollection().Count) + "作战单元?", MsgBoxStyle.OkCancel, "Multiple unit delete") == MsgBoxResult.Ok)
						{
							Collection<ActiveUnit> collection = new Collection<ActiveUnit>();
							foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
							{
								if (current.IsActiveUnit())
								{
									collection.Add((ActiveUnit)current);
								}
								else if (current.IsContact())
								{
									Client.GetClientSide().GetContactObservableDictionary().Remove(current.GetGuid());
									Client.GetClientSide().GetContactsObDictionary().Remove(current.GetGuid());
								}
							}
							foreach (ActiveUnit current2 in collection)
							{
								Scenario clientScenario = Client.GetClientScenario();
								GameGeneral.RemoveUnit(ref clientScenario, current2.GetGuid());
							}
							Collection<ActiveUnit> collection2 = new Collection<ActiveUnit>();
							foreach (ActiveUnit current3 in Client.GetClientScenario().GetUnitRemovals())
							{
								if (current3.IsGroup)
								{
									collection2.Add(current3);
								}
							}
							foreach (ActiveUnit current4 in collection2)
							{
								Scenario clientScenario = Client.GetClientScenario();
								GameGeneral.RemoveUnit(ref clientScenario, current4.GetGuid());
							}
							Client.SetHookedUnit(true, null);
							Client.b_Completed = true;
							this.RefreshMap();
						}
					}
					else if (!Information.IsNothing(Client.GetHookedUnit()))
					{
						if (Client.GetHookedUnit().IsContact())
						{
							Client.GetClientSide().GetContactObservableDictionary().Remove(Client.GetHookedUnit().GetGuid());
							Client.GetClientSide().GetContactsObDictionary().Remove(Client.GetHookedUnit().GetGuid());
						}
						else
						{
							Scenario clientScenario = Client.GetClientScenario();
							GameGeneral.RemoveUnit(ref clientScenario, Client.GetHookedUnit().GetGuid());
						}
						Client.SetHookedUnit(true, null);
						Client.b_Completed = true;
						this.RefreshMap();
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 101144", "");
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070C4 RID: 28868 RVA: 0x003E8FA0 File Offset: 0x003E71A0
		private void method_52()
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				ObservableCollection<ReferencePoint> referencePoints = Client.GetClientSide().GetReferencePoints();
				foreach (ReferencePoint current in Client.GetRefPointSelList())
				{
					referencePoints.Remove(current);
				}
				this.referencePoint_0 = null;
				this.RefreshMap();
			}
		}

		// Token: 0x060070C5 RID: 28869 RVA: 0x003E9018 File Offset: 0x003E7218
		private void method_53()
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsContact())
					{
						Contact contact = (Contact)current;
						if (contact.GetPostureStance(Client.GetClientSide()) != Misc.PostureStance.Hostile)
						{
							contact.MarkAs(Client.GetClientSide(), true, Misc.PostureStance.Hostile);
							Client.GetClientScenario().LogMessage("目标: " + contact.Name + "由参演人员手动标为敌方!", LoggedMessage.MessageType.ContactChange, 1, null, Client.GetClientSide(), new GeoPoint(contact.GetLongitude(null), contact.GetLatitude(null)));
						}
					}
				}
				this.RefreshMap();
			}
		}

		// Token: 0x060070C6 RID: 28870 RVA: 0x003E90FC File Offset: 0x003E72FC
		private void method_54()
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsContact())
					{
						Contact contact = (Contact)current;
						if (contact.GetPostureStance(Client.GetClientSide()) != Misc.PostureStance.Unfriendly)
						{
							contact.MarkAs(Client.GetClientSide(), true, Misc.PostureStance.Unfriendly);
							Client.GetClientScenario().LogMessage("目标: " + contact.Name + "由参演人员手动标为非友方.", LoggedMessage.MessageType.ContactChange, 1, null, Client.GetClientSide(), new GeoPoint(contact.GetLongitude(null), contact.GetLatitude(null)));
						}
					}
				}
				this.RefreshMap();
			}
		}

		// Token: 0x060070C7 RID: 28871 RVA: 0x003E91E0 File Offset: 0x003E73E0
		private void method_55()
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsContact())
					{
						Contact contact = (Contact)current;
						if (contact.GetPostureStance(Client.GetClientSide()) != Misc.PostureStance.Neutral)
						{
							contact.MarkAs(Client.GetClientSide(), true, Misc.PostureStance.Neutral);
							Client.GetClientScenario().LogMessage("目标: " + contact.Name + "由参演人员手动标为中立方.", LoggedMessage.MessageType.ContactChange, 1, null, Client.GetClientSide(), new GeoPoint(contact.GetLongitude(null), contact.GetLatitude(null)));
						}
					}
				}
				this.RefreshMap();
			}
		}

		// Token: 0x060070C8 RID: 28872 RVA: 0x003E92C4 File Offset: 0x003E74C4
		private void method_56()
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsContact())
					{
						Contact contact = (Contact)current;
						if (contact.GetPostureStance(Client.GetClientSide()) != Misc.PostureStance.Friendly)
						{
							contact.MarkAs(Client.GetClientSide(), true, Misc.PostureStance.Friendly);
							Client.GetClientScenario().LogMessage("目标: " + contact.Name + "由参演人员手动标为友方.", LoggedMessage.MessageType.ContactChange, 1, null, Client.GetClientSide(), new GeoPoint(contact.GetLongitude(null), contact.GetLatitude(null)));
						}
					}
				}
				this.RefreshMap();
			}
		}

		// 主窗体载入响应函数
		private void MainForm_Load(object sender, EventArgs e)
		{
			try
			{
				if (Information.IsNothing(SimConfiguration.gameOptions))
				{
					SimConfiguration.LoadSimConfiguration();
					if (SimConfiguration.gameOptions.LogDebugInfoToFile())
					{
						string text = "仿真配置加载成功.";
						GameGeneral.Log(ref text);
					}
				}
				if (SimConfiguration.gameOptions.GetDPIScalingMethod() == Configuration.GameOptions._DPIScalingMethod.const_1)
				{
					if (SimConfiguration.gameOptions.LogDebugInfoToFile())
					{
						string text = "Desired DPI scaling method: Font";
						GameGeneral.Log(ref text);
					}
				}
				else if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Desired DPI scaling method: Application";
					GameGeneral.Log(ref text);
				}
				if (Client.float_0 == 1f)
				{
					if (SimConfiguration.gameOptions.LogDebugInfoToFile())
					{
						string text = "DPI scaling is 100%. Setting scaling mode on Mainform to None for performance reasons and disabling AutoSize so that the Mainform window can be resized.";
						GameGeneral.Log(ref text);
					}
					base.AutoScaleMode = AutoScaleMode.None;
					this.AutoSize = false;
				}
				else if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "DPI scaling is greater than 100%. Setting scaling mode on Mainform to font and enabling AutoSize so that RightColumn resizes correctly. This will, however, disable the ability to resize the Mainform window.";
					GameGeneral.Log(ref text);
				}
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Starting loading MainForm.";
					GameGeneral.Log(ref text);
				}
				this.comboBox_0 = this.toolStripComboBox_0.ComboBox;this.comboBox_0.MouseWheel += new MouseEventHandler(this.method_356);
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Configured MainForm working area";
					GameGeneral.Log(ref text);
				}
				this.Button_VideoRecord.Enabled = (GameGeneral.bProfessionEdition || LicenseChecker.HoldLicense(LicenseChecker.License.CMANOBase));
				this.MenuItem_MonteCarloSimulation.Enabled = LicenseFile.ProFeatures.Contains(LicenseFile.ProFeature.MonteCarlo);
				if (this.Button_VideoRecord.Enabled && SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "许可证: CommandX专业版";
					GameGeneral.Log(ref text);
				}
				this.color_0 = Color.FromArgb(this.int_13, Client.GetMap().struct14_0.color_0);
				this.color_1 = Color.FromArgb(this.int_13, Client.GetMap().struct14_0.color_2);
				this.color_2 = Color.FromArgb(this.int_13, Client.GetMap().struct14_0.color_5);
				this.color_3 = Color.FromArgb(this.int_13, Client.GetMap().struct14_0.color_1);
				this.color_4 = Color.FromArgb(this.int_13, Client.GetMap().struct14_0.color_3);
				this.color_5 = Color.FromArgb(this.int_13, Client.GetMap().struct14_0.color_4);
				this.color_6 = Color.FromArgb(this.int_13, Client.GetMap().struct14_0.color_6);
				this.MenuItem_ToAirDetectRange.BackColor = this.color_0;
				this.MenuItem_ToSurfaceDetectRange.BackColor = this.color_1;
				this.MenuItem_ToUnderWaterDetectRange.BackColor = this.color_2;
				this.MenuItem_ToAirAttackRange.BackColor = this.color_3;
				this.MenuItem_ToSurfaceAttackRange.BackColor = this.color_4;
				this.MenuItem_ToLandAttackRange.BackColor = this.color_5;
				this.MenuItem_ToUnderwaterAttackRange.BackColor = this.color_6;
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Configured range ring colors";
					GameGeneral.Log(ref text);
				}
				this.timer_4.Interval = 1000;
				this.timer_4.Start();
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Done loading MainForm.";
					GameGeneral.Log(ref text);
				}
				Client.elementHost = this.elementHost_0;
				this.toolStripMenuItem_361.Visible = false;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200579", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070CA RID: 28874 RVA: 0x003E974C File Offset: 0x003E794C
		private void method_57()
		{
			this.button_0.Text = Conversions.ToString(Client.float_0);
			try
			{
				if (!Information.IsNothing(Client.GetClientSide()))
				{
					List<Unit> list = new List<Unit>();
					list.AddRange(Client.GetClientSide().GetUnitReadOnlyCollection());
					if (list.Count > 0)
					{
						using (List<Unit>.Enumerator enumerator = list.GetEnumerator())
						{
							while (enumerator.MoveNext())
							{
								Unit current = enumerator.Current;
								if (current.IsActiveUnit())
								{
									if (((ActiveUnit)current).IsNotActive())
									{
										Client.GetClientSide().RemoveUnits(current);
										if (Client.GetHookedUnit() == current)
										{
											Client.SetHookedUnit(true, null);
										}
									}
								}
								else if (current.IsContact() && !Client.GetClientSide().GetContactObservableDictionary().Values.Contains((Contact)current) && !Client.GetClientSide().GetContactsObDictionary().Values.Contains((Contact)current) && string.IsNullOrEmpty(Client.GetMap().GetIsolatedPOVObjectID()))
								{
									Client.GetClientSide().RemoveUnits(current);
									if (Client.GetHookedUnit() == current)
									{
										Client.SetHookedUnit(true, null);
									}
								}
							}
							goto IL_162;
						}
					}
					if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit() && !((ActiveUnit)Client.GetHookedUnit()).IsOperating())
					{
						Client.SetHookedUnit(true, null);
					}
					IL_162:
					if (SimConfiguration.gameOptions.IsMessageLogInWindow() && !Client.GetClientScenario().MessageLog.IsEmpty)
					{
						CommandFactory.GetCommandMain().GetMessageLogWindow().method_2(true);
					}
					this.MenuItem_DirectorView.Checked = Client.GetClientSide().GetMapProfile().IsGodsEyeView();
					if (!Information.IsNothing(Client.GetMap().GetIsolatedPOVObjectID()) && Information.IsNothing(Client.GetHookedUnit()))
					{
						this.SetIsolatedPOVObject();
					}
					if (SimConfiguration.gameOptions.IsShowGameSpeedButton())
					{
						this.Button_GameSpeed.Visible = true;
						bool flag = true;
						bool flag2 = true;
						bool flag3 = true;
						Configuration.GameOptions gameOptions = SimConfiguration.gameOptions;
						if (gameOptions.IsUseAutosave())
						{
							flag3 = false;
						}
						if (Client.GetMap().GetShowRangeSymbols() == MapProfile._UnitCoverage.const_0)
						{
							flag2 = false;
						}
						else if (Client.GetMap().GetShowIlluminationVectors() == MapProfile._UnitCoverage.const_0)
						{
							flag2 = false;
						}
						else if (Client.GetMap().GetShowContactEmissions() == MapProfile._UnitCoverage.const_0)
						{
							flag2 = false;
						}
						if (gameOptions.IsHighFidelityMode())
						{
							flag = false;
						}
						else if (gameOptions.NoPulseMapUpdate())
						{
							flag = false;
						}
						else if (gameOptions.UseMemoryProtection())
						{
							flag = false;
						}
						else if (Client.GetMap().IsShowNonFriendly())
						{
							flag = false;
						}
						else if (gameOptions.GetNavigationMaxDistanceNMSetting() == 8f && (double)gameOptions.GetNavigationThresholdDistanceDegSetting() == 0.5)
						{
							if (gameOptions.GetPlacenameVisibility())
							{
								flag = false;
							}
							else if (SimConfiguration.gameOptions.ShowMissionArea() == Configuration.GameOptions._ShowMissionArea.const_0)
							{
								flag = false;
							}
							else if (Client.GetMap().GetShowTargetingVectors() == MapProfile._UnitCoverage.const_0)
							{
								flag = false;
							}
							else if (Client.GetMap().GetShowDatalinks() == MapProfile._UnitCoverage.const_0)
							{
								flag = false;
							}
							else if (gameOptions.IsMessageLogCanvas())
							{
								flag = false;
							}
							else if (gameOptions.ShowGhostedGroupMembers() != Configuration.GameOptions._ShowGhostedGroupMembers.ALL && gameOptions.ShowGhostedGroupMembers() != Configuration.GameOptions._ShowGhostedGroupMembers.SEL)
							{
								if (!gameOptions.IsAllowPowerPlanSwitch() && PowerSchemeManager.Win32NTVersion6Above())
								{
									flag = false;
								}
							}
							else
							{
								flag = false;
							}
						}
						else
						{
							flag = false;
						}
						if (!flag)
						{
							this.Button_GameSpeed.BackColor = Color.Red;
						}
						else if (!flag2)
						{
							this.Button_GameSpeed.BackColor = Color.Orange;
						}
						else if (!flag3)
						{
							this.Button_GameSpeed.BackColor = Color.Yellow;
						}
						else
						{
							this.Button_GameSpeed.BackColor = Color.LightGreen;
						}
					}
					else
					{
						this.Button_GameSpeed.Visible = false;
					}
				}
				else if (SimConfiguration.gameOptions.IsShowGameSpeedButton())
				{
					this.Button_GameSpeed.Visible = true;
					this.Button_GameSpeed.BackColor = Control.DefaultBackColor;
				}
				else
				{
					this.Button_GameSpeed.Visible = false;
				}
				while (Client.GetClientScenario().UnhandledPopUpMessages.Count > 0)
				{
					LoggedMessage loggedMessage = Client.GetClientScenario().UnhandledPopUpMessages.Dequeue();
					if (!Information.IsNothing(Client.GetClientSide()) && loggedMessage.side == Client.GetClientSide())
					{
						NewMessageForm newMessageForm = null;
						Client.MessageTypeFormDictionary.TryGetValue(loggedMessage.messageType, out newMessageForm);
						if (Information.IsNothing(newMessageForm))
						{
							newMessageForm = new NewMessageForm();
							Client.MessageTypeFormDictionary.Add(loggedMessage.messageType, newMessageForm);
						}
						newMessageForm.vmethod_14().Add(loggedMessage);
					}
				}
				using (Dictionary<LoggedMessage.MessageType, NewMessageForm>.ValueCollection.Enumerator enumerator2 = Client.MessageTypeFormDictionary.Values.GetEnumerator())
				{
					while (enumerator2.MoveNext())
					{
						enumerator2.Current.Show();
					}
				}
				if (Information.IsNothing(Client.GetHookedUnit()))
				{
					this.MenuItem_UnitOrder.Enabled = false;
					this.MenuItem_ContactTarget.Enabled = false;
				}
				else if (Client.GetClientSide().GetUnitReadOnlyCollection().Count == 1 && Client.GetHookedUnit().IsActiveUnit() && Client.GetHookedUnit().GetSide(false) == Client.GetClientSide())
				{
					this.MenuItem_UnitOrder.Enabled = Client.GetHookedUnit().IsActiveUnit();
					this.MenuItem_ContactTarget.Enabled = Client.GetHookedUnit().IsContact();
				}
				else if (Client.GetClientSide().GetUnitReadOnlyCollection().Count > 0)
				{
					this.MenuItem_UnitOrder.Enabled = false;
					this.MenuItem_ContactTarget.Enabled = false;
					foreach (Unit current2 in Client.GetClientSide().GetUnitReadOnlyCollection())
					{
						if (current2.IsActiveUnit() && current2.GetSide(false) == Client.GetClientSide())
						{
							this.MenuItem_UnitOrder.Enabled = true;
						}
						else
						{
							this.MenuItem_ContactTarget.Enabled = true;
						}
					}
				}
				Configuration.EnumRunStop @enum = Client.GetConfiguration().GetSimStatus();
				if (@enum != Configuration.EnumRunStop.const_Stop)
				{
					if (@enum == Configuration.EnumRunStop.const_Run)
					{
						this.Button_StartOrRecover.Checked = true;
						this.Button_StartOrRecover.Text = "停止/暂停";
						this.Button_StartOrRecover.Image = Image.FromFile(Application.StartupPath + "\\Symbols\\Menu\\Stop.gif");
					}
				}
				else
				{
					this.Button_StartOrRecover.Checked = false;
					this.Button_StartOrRecover.Text = "启动/恢复";
					this.Button_StartOrRecover.Image = Image.FromFile(Application.StartupPath + "\\Symbols\\Menu\\Play.gif");
				}
				if (World.Settings.IsEnableSunShading() && (Client.GetClientScenario().GetCurrentTime(false) - this.dateTime_0).TotalMinutes > 15.0)
				{
					this.MapBoxResize();
				}
				else
				{
					this.method_157();
					if (!Information.IsNothing(Client.GetClientSide()))
					{
						Client.GetHookedUnit();
						this.method_156();
						this.MenuItem_SwitchToRole.Enabled = (Client.GetClientScenario().GetSides().Count<Side>() > 0);
						if (Information.IsNothing(Client.GetHookedUnit()) && Client.unitSensors.Visible)
						{
							Client.unitSensors.Hide();
						}
						if (this.bool_5)
						{
							if (Information.IsNothing(Client.GetHookedUnit()))
							{
								this.bool_5 = false;
							}
							else
							{
								this.method_14(true, new GeoPoint(Client.GetHookedUnit().GetLongitude(null), Client.GetHookedUnit().GetLatitude(null)));
							}
							if (this.method_11())
							{
								this.RefreshMap();
							}
						}
						else if (Client.queue_0.Count > 0)
						{
							Client.AddImageLayer(Client.queue_0.Dequeue());
						}
						else
						{
							this.RefreshMap();
						}
						if (!Information.IsNothing(Client.exception_0))
						{
							this.method_194();
						}
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200126", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070CB RID: 28875 RVA: 0x0002F01B File Offset: 0x0002D21B
		private void method_58(Unit unit_0, int int_14, int int_15)
		{
			this.method_18(unit_0, false);
			this.method_59(unit_0);
			this.contextMenuStrip_1.Show(Client.m_WorldWindow, int_14, int_15);
		}

		// Token: 0x060070CC RID: 28876 RVA: 0x003EA00C File Offset: 0x003E820C
		private void method_59(Unit unit_0)
        {

            if (!Information.IsNothing(unit_0) && !Information.IsNothing(unit_0.GetSide(false)))
            {
                try
                {
                    bool? nullable;
                    byte? nullable3;
                    byte? nullable4;
                    bool flag2;
                    bool flag3;
                    Doctrine._IgnorePlottedCourseWhenAttacking? nullable6;
                    Doctrine._WeaponControlStatus? nullable7;
                    byte? nullable8;
                    bool? nullable10;
                    bool flag5;
                    Doctrine._WeaponControlStatus? nullable19;
                    if (Client.GetCommandOrder() == Client._CommandOrder.AddNewWayPoint)
                    {
                        this.MenuItem_Unit_PlotCourse.Text = "结束绘制航线";
                    }
                    else
                    {
                        this.MenuItem_Unit_PlotCourse.Text = "航线规划";
                    }
                    this.MenuItem_Unit_SE_SetUnitTrainingLevel.Visible = Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit;
                    if (!unit_0.IsActiveUnit())
                    {
                        goto Label_2B3A;
                    }
                    this.MenuItem_Unit_WeaponStatus.Enabled = !unit_0.IsGroup && !unit_0.IsWeapon;
                    this.MenuItem_Unit_GO_GroupBySelectedUnit.Enabled = false;
                    this.MenuItem_Unit_HoldPositon_AllUnit.Enabled = true;
                    this.MenuItem_Unit_HoldPositon_AllUnit.Checked = true;
                    ActiveUnit[] activeUnitArray = Client.GetClientSide().ActiveUnitArray;
                    int index = 0;
                    bool flag = false;
                    while (index < activeUnitArray.Length)
                    {
                        Unit unit = activeUnitArray[index];
                        if (!(((!unit.IsActiveUnit() || (unit.GetSide(false) != Client.GetClientSide())) || !unit.IsFacility) || unit.IsFixedFacility()))
                        {
                            flag = true;
                            if (!((Facility)unit).GetFacilityAI().HoldPosition)
                            {
                                goto Label_0115;
                            }
                        }
                        index++;
                    }
                    goto Label_0121;
                Label_0115:
                    this.MenuItem_Unit_HoldPositon_AllUnit.Checked = false;
                Label_0121:
                    if (!flag)
                    {
                        this.MenuItem_Unit_HoldPositon_AllUnit.Checked = false;
                        this.MenuItem_Unit_HoldPositon_AllUnit.Enabled = false;
                    }
                    if (unit_0.GetSide(false) != Client.GetClientSide())
                    {
                        goto Label_268C;
                    }
                    if (!unit_0.IsWeapon)
                    {
                        this.MenuItem_Unit_UnassignMissionUnit.Enabled = true;
                    }
                    else
                    {
                        this.MenuItem_Unit_UnassignMissionUnit.Enabled = false;
                    }
                    Side clientSide = Client.GetClientSide();
                    string str = null;
                    if (GameGeneral.CanIssueOrdersToUnit(clientSide, unit_0, true, ref str))
                    {
                        this.MenuItem_Unit_SensorsStatus.Enabled = true;
                    }
                    else
                    {
                        this.MenuItem_Unit_SensorsStatus.Enabled = false;
                    }
                    Side side2 = Client.GetClientSide();
                    str = null;
                    if (GameGeneral.CanIssueOrdersToUnit(side2, unit_0, false, ref str))
                    {
                        this.MenuItem_Unit_PlotCourse.Enabled = true;
                        this.MenuItem_Unit_ThrottleAltOrDeep.Enabled = true;
                    }
                    else
                    {
                        this.MenuItem_Unit_PlotCourse.Enabled = false;
                        this.MenuItem_Unit_ThrottleAltOrDeep.Enabled = false;
                    }
                    Doctrine expression = null;
                    if ((Client.GetHookedUnit().IsActiveUnit() && !Client.GetHookedUnit().IsWeapon) && (Client.GetHookedUnit().GetSide(false) == Client.GetClientSide()))
                    {
                        expression = ((ActiveUnit)Client.GetHookedUnit()).m_Doctrine;
                    }
                    if (!Information.IsNothing(expression) && expression.IsIgnorePlottedCourseWhenAttackingPlayerEditable(Client.GetClientScenario()))
                    {
                        if (!Client.GetHookedUnit().IsWeapon)
                        {
                            this.MenuItem_Unit_AO_IgnorePlottedCourse_SelectedUnit.Enabled = true;
                            nullable = null;
                            Doctrine._IgnorePlottedCourseWhenAttacking? nullable2 = expression.GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            if (expression.IgnorePlottedCourseWhenAttackingHasNoValue())
                            {
                                this.MenuItem_Unit_AO_IPCSU_Yes.Checked = false;
                                this.MenuItem_Unit_AO_IPCSU_No.Checked = false;
                                this.MenuItem_Unit_AO_IPCSU_SameAsSuperior.Checked = true;
                            }
                            else
                            {
                                nullable = (nullable2.HasValue ? new byte?((byte)nullable2.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_Unit_AO_IPCSU_Yes.Checked = true;
                                    this.MenuItem_Unit_AO_IPCSU_No.Checked = false;
                                    this.MenuItem_Unit_AO_IPCSU_SameAsSuperior.Checked = false;
                                }
                                else
                                {
                                    this.MenuItem_Unit_AO_IPCSU_Yes.Checked = false;
                                    this.MenuItem_Unit_AO_IPCSU_No.Checked = true;
                                    this.MenuItem_Unit_AO_IPCSU_SameAsSuperior.Checked = false;
                                }
                            }
                            Doctrine doctrine2 = expression;
                            Scenario clientScenario = Client.GetClientScenario();
                            flag2 = true;
                            nullable = null;
                            Doctrine._IgnorePlottedCourseWhenAttacking? nullable5 = doctrine2.GetDoctrine(clientScenario, ref flag2).GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable = (nullable5.HasValue ? new byte?((byte)nullable5.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                            if (nullable.GetValueOrDefault())
                            {
                                this.MenuItem_Unit_AO_IPCSU_SameAsSuperior.Text = "与上级保持一致，是";
                            }
                            else
                            {
                                this.MenuItem_Unit_AO_IPCSU_SameAsSuperior.Text = "与上级保持一致，否";
                            }
                        }
                        else
                        {
                            this.MenuItem_Unit_AO_IgnorePlottedCourse_SelectedUnit.Enabled = false;
                        }
                        if (Client.GetHookedUnit().IsWeapon)
                        {
                            goto Label_099A;
                        }
                        int num2 = 1;
                        flag3 = true;
                        ActiveUnit[] unitArray2 = Client.GetClientSide().ActiveUnitArray;
                        int num3 = 0;
                        nullable6 = null;
                        nullable7 = null;
                        nullable8 = null;
                        while (num3 < unitArray2.Length)
                        {
                            Unit unit2 = unitArray2[num3];
                            if (unit2.IsActiveUnit() && (unit2.GetSide(false) == Client.GetClientSide()))
                            {
                                if (unit2.IsWeapon)
                                {
                                    goto Label_0612;
                                }
                                if (num2 == 1)
                                {
                                    if (((ActiveUnit)unit2).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                    {
                                        nullable6 = null;
                                    }
                                    else
                                    {
                                        nullable = null;
                                        nullable6 = ((ActiveUnit)unit2).m_Doctrine.GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                    }
                                }
                                else
                                {
                                    nullable6 = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_0);
                                    nullable8 = 0;
                                    if (Information.IsNothing(nullable6))
                                    {
                                        if (!((ActiveUnit)unit2).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                        {
                                            goto Label_07DC;
                                        }
                                    }
                                    else
                                    {
                                        if (((ActiveUnit)unit2).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                        {
                                            goto Label_07E6;
                                        }
                                        nullable4 = nullable6.HasValue ? new byte?((byte)nullable6.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                        nullable = null;
                                        Doctrine._IgnorePlottedCourseWhenAttacking? nullable9 = ((ActiveUnit)unit2).m_Doctrine.GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                        nullable8 = nullable9.HasValue ? new byte?((byte)nullable9.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                        nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : null;
                                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                                        if (nullable.GetValueOrDefault())
                                        {
                                            goto Label_07E1;
                                        }
                                    }
                                }
                            }
                            num2++;
                            num3++;
                            continue;
                        Label_0612:
                            num3++;
                        }
                        this.MenuItem_Unit_AO_IgnorePlottedCourse_AllUnit.Enabled = true;
                        if (flag3)
                        {
                            if (Information.IsNothing(nullable6))
                            {
                                this.MenuItem_Unit_AO_IPCAU_Yes.Checked = false;
                                this.MenuItem_Unit_AO_IPCAU_No.Checked = false;
                                this.MenuItem_Unit_AO_IPCAU_SameAsSuperior.Checked = true;
                            }
                            else
                            {
                                nullable = (nullable6.HasValue ? new byte?((byte)nullable6.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_Unit_AO_IPCAU_Yes.Checked = true;
                                    this.MenuItem_Unit_AO_IPCAU_No.Checked = false;
                                    this.MenuItem_Unit_AO_IPCAU_SameAsSuperior.Checked = false;
                                }
                                else
                                {
                                    this.MenuItem_Unit_AO_IPCAU_Yes.Checked = false;
                                    this.MenuItem_Unit_AO_IPCAU_No.Checked = true;
                                    this.MenuItem_Unit_AO_IPCAU_SameAsSuperior.Checked = false;
                                }
                            }
                        }
                        else
                        {
                            this.MenuItem_Unit_AO_IPCAU_Yes.Checked = false;
                            this.MenuItem_Unit_AO_IPCAU_No.Checked = false;
                            this.MenuItem_Unit_AO_IPCAU_SameAsSuperior.Checked = false;
                        }
                        nullable = null;
                        nullable7 = Client.GetClientSide().m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable = (nullable7.HasValue ? new byte?((byte)nullable7.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                        if (nullable.GetValueOrDefault())
                        {
                            this.MenuItem_Unit_AO_IPCAU_SameAsSuperior.Text = "与上级保持一致，是";
                        }
                        else
                        {
                            this.MenuItem_Unit_AO_IPCAU_SameAsSuperior.Text = "与上级保持一致，否";
                        }
                    }
                    goto Label_09A6;
                Label_07DC:
                    flag3 = false;
                    goto Label_07E9;
                Label_07E1:
                    flag3 = false;
                    goto Label_07E9;
                Label_07E6:
                    flag3 = false;
                Label_07E9:
                    this.MenuItem_Unit_AO_IgnorePlottedCourse_AllUnit.Enabled = true;
                    if (flag3)
                    {
                        if (Information.IsNothing(nullable6))
                        {
                            this.MenuItem_Unit_AO_IPCAU_Yes.Checked = false;
                            this.MenuItem_Unit_AO_IPCAU_No.Checked = false;
                            this.MenuItem_Unit_AO_IPCAU_SameAsSuperior.Checked = true;
                        }
                        else
                        {
                            nullable = (nullable6.HasValue ? new byte?((byte)nullable6.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                            if (nullable.GetValueOrDefault())
                            {
                                this.MenuItem_Unit_AO_IPCAU_Yes.Checked = true;
                                this.MenuItem_Unit_AO_IPCAU_No.Checked = false;
                                this.MenuItem_Unit_AO_IPCAU_SameAsSuperior.Checked = false;
                            }
                            else
                            {
                                this.MenuItem_Unit_AO_IPCAU_Yes.Checked = false;
                                this.MenuItem_Unit_AO_IPCAU_No.Checked = true;
                                this.MenuItem_Unit_AO_IPCAU_SameAsSuperior.Checked = false;
                            }
                        }
                    }
                    else
                    {
                        this.MenuItem_Unit_AO_IPCAU_Yes.Checked = false;
                        this.MenuItem_Unit_AO_IPCAU_No.Checked = false;
                        this.MenuItem_Unit_AO_IPCAU_SameAsSuperior.Checked = false;
                    }
                    nullable = null;
                    nullable7 = Client.GetClientSide().m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    nullable = (nullable7.HasValue ? new byte?((byte)nullable7.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                    if (nullable.GetValueOrDefault())
                    {
                        this.MenuItem_Unit_AO_IPCAU_SameAsSuperior.Text = "与上级保持一致，是";
                    }
                    else
                    {
                        this.MenuItem_Unit_AO_IPCAU_SameAsSuperior.Text = "与上级保持一致，否";
                    }
                    goto Label_09A6;
                Label_099A:
                    this.MenuItem_Unit_AO_IgnorePlottedCourse_AllUnit.Enabled = false;
                Label_09A6:
                    if (!(((Client.GetClientSide().m_Doctrine.IsWCS_Air_PlayerEditable(Client.GetClientScenario()) || Client.GetClientSide().m_Doctrine.IsWCS_Surface_PlayerEditable(Client.GetClientScenario())) || Client.GetClientSide().m_Doctrine.IsWCS_Submarine_PlayerEditable(Client.GetClientScenario())) || Client.GetClientSide().m_Doctrine.IsWCSLand_PlayerEditable(Client.GetClientScenario())))
                    {
                        this.MenuItem_Unit_AO_IgnorePlottedCourse_AllUnit.Enabled = false;
                        this.MenuItem_Unit_AO_IgnorePlottedCourse_SelectedUnit.Enabled = false;
                        this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_AllUnit.Enabled = false;
                        this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = false;
                        goto Label_2384;
                    }
                    if (!Client.GetHookedUnit().IsWeapon)
                    {
                        this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = true;
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable11 = expression.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable12 = expression.GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable13 = expression.GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable14 = expression.GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        if (((expression.WCS_AirHasNoValue() && expression.WCS_SurfaceHasNoValue()) && expression.WCS_SubmarineHasNoValue()) && expression.WCS_LandHasNoValue())
                        {
                            this.MenuItem_Unit_AO_WCSFATSU_ForbidFire.Checked = false;
                            this.MenuItem_Unit_AO_WCSFATSU_LimitFire.Checked = false;
                            this.MenuItem_Unit_AO_WCSFATSU_FreeFire.Checked = false;
                            this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior.Checked = true;
                        }
                        else
                        {
                            bool flag4 = false;
                            nullable = (nullable11.HasValue ? new byte?((byte)nullable11.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == (nullable12.HasValue ? new byte?((byte)nullable12.GetValueOrDefault()) : ((byte?)(nullable3 = null)));
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable11.HasValue ? new byte?((byte)nullable11.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == (nullable13.HasValue ? new byte?((byte)nullable13.GetValueOrDefault()) : ((byte?)(nullable3 = null)));
                                if (nullable.GetValueOrDefault())
                                {
                                    nullable = (nullable11.HasValue ? new byte?((byte)nullable11.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == (nullable14.HasValue ? new byte?((byte)nullable14.GetValueOrDefault()) : ((byte?)(nullable3 = null)));
                                    if (nullable.GetValueOrDefault())
                                    {
                                        flag4 = true;
                                    }
                                }
                            }
                            if (!flag4)
                            {
                                this.MenuItem_Unit_AO_WCSFATSU_ForbidFire.Checked = false;
                                this.MenuItem_Unit_AO_WCSFATSU_LimitFire.Checked = false;
                                this.MenuItem_Unit_AO_WCSFATSU_FreeFire.Checked = false;
                                this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior.Checked = false;
                            }
                            else
                            {
                                nullable = (nullable11.HasValue ? new byte?((byte)nullable11.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_Unit_AO_WCSFATSU_ForbidFire.Checked = false;
                                    this.MenuItem_Unit_AO_WCSFATSU_LimitFire.Checked = false;
                                    this.MenuItem_Unit_AO_WCSFATSU_FreeFire.Checked = true;
                                    this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior.Checked = false;
                                }
                                else
                                {
                                    nullable = (nullable11.HasValue ? new byte?((byte)nullable11.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                                    if (nullable.GetValueOrDefault())
                                    {
                                        this.MenuItem_Unit_AO_WCSFATSU_ForbidFire.Checked = true;
                                        this.MenuItem_Unit_AO_WCSFATSU_LimitFire.Checked = false;
                                        this.MenuItem_Unit_AO_WCSFATSU_FreeFire.Checked = false;
                                        this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior.Checked = false;
                                    }
                                    else
                                    {
                                        nullable = (nullable11.HasValue ? new byte?((byte)nullable11.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                        if (nullable.GetValueOrDefault())
                                        {
                                            this.MenuItem_Unit_AO_WCSFATSU_ForbidFire.Checked = false;
                                            this.MenuItem_Unit_AO_WCSFATSU_LimitFire.Checked = true;
                                            this.MenuItem_Unit_AO_WCSFATSU_FreeFire.Checked = false;
                                            this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior.Checked = false;
                                        }
                                    }
                                }
                            }
                        }
                        Doctrine doctrine3 = expression;
                        Scenario scenario2 = Client.GetClientScenario();
                        flag2 = true;
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable15 = doctrine3.GetDoctrine(scenario2, ref flag2).GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        Doctrine doctrine4 = expression;
                        Scenario scenario3 = Client.GetClientScenario();
                        flag2 = true;
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable16 = doctrine4.GetDoctrine(scenario3, ref flag2).GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        Doctrine doctrine5 = expression;
                        Scenario scenario4 = Client.GetClientScenario();
                        flag2 = true;
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable17 = doctrine5.GetDoctrine(scenario4, ref flag2).GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        Doctrine doctrine6 = expression;
                        Scenario scenario5 = Client.GetClientScenario();
                        flag2 = true;
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable18 = doctrine6.GetDoctrine(scenario5, ref flag2).GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable = (nullable15.HasValue ? new byte?((byte)nullable15.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable16.HasValue ? new byte?((byte)nullable16.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable17.HasValue ? new byte?((byte)nullable17.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                                if (nullable.GetValueOrDefault())
                                {
                                    nullable = (nullable18.HasValue ? new byte?((byte)nullable18.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                                    if (nullable.GetValueOrDefault())
                                    {
                                        this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior.Text = "与上级保持一致，自由开火";
                                        goto Label_13BC;
                                    }
                                }
                            }
                        }
                        nullable = (nullable15.HasValue ? new byte?((byte)nullable15.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable16.HasValue ? new byte?((byte)nullable16.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable17.HasValue ? new byte?((byte)nullable17.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                if (nullable.GetValueOrDefault())
                                {
                                    nullable = (nullable18.HasValue ? new byte?((byte)nullable18.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                    if (nullable.GetValueOrDefault())
                                    {
                                        this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior.Text = "与上级保持一致，限制开火";
                                        goto Label_13BC;
                                    }
                                }
                            }
                        }
                        nullable = (nullable15.HasValue ? new byte?((byte)nullable15.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable16.HasValue ? new byte?((byte)nullable16.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable17.HasValue ? new byte?((byte)nullable17.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                                if (nullable.GetValueOrDefault())
                                {
                                    nullable = (nullable18.HasValue ? new byte?((byte)nullable18.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                                    if (nullable.GetValueOrDefault())
                                    {
                                        this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior.Text = "与上级保持一致，禁止开火";
                                        goto Label_13BC;
                                    }
                                }
                            }
                        }
                        this.MenuItem_Unit_AO_WCSFATSU_SameAsSuperior.Text = "与上级保持一致，多种方式";
                    }
                    else
                    {
                        this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = false;
                    }
                Label_13BC:
                    if (!Client.GetHookedUnit().IsWeapon)
                    {
                        int num4 = 1;
                        flag5 = true;
                        nullable8 = null;
                        nullable19 = null;
                        ActiveUnit[] unitArray3 = Client.GetClientSide().ActiveUnitArray;
                        int num5 = 0;
                        while (num5 < unitArray3.Length)
                        {
                            ActiveUnit unit5;
                            Unit unit3 = unitArray3[num5];
                            if (!(unit3.IsActiveUnit() && (unit3.GetSide(false) == Client.GetClientSide())))
                            {
                                num4++;
                                num5++;
                                continue;
                            }
                            if (unit3.IsWeapon)
                            {
                                goto Label_1C0F;
                            }
                            if (num4 != 1)
                            {
                                goto Label_17C7;
                            }
                            ActiveUnit unit4 = (ActiveUnit)unit3;
                            if (unit4.m_Doctrine.WCS_AirHasNoValue())
                            {
                                nullable19 = null;
                            }
                            else
                            {
                                nullable = null;
                                nullable19 = unit4.m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            }
                            if (Information.IsNothing(nullable19))
                            {
                                if (unit4.m_Doctrine.WCS_SurfaceHasNoValue())
                                {
                                    goto Label_1589;
                                }
                                goto Label_1C2D;
                            }
                            if (unit4.m_Doctrine.WCS_SurfaceHasNoValue())
                            {
                                goto Label_1C35;
                            }
                            nullable4 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable = null;
                            Doctrine._WeaponControlStatus? nullable20 = unit4.m_Doctrine.GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : null;
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_1C3D;
                            }
                        Label_1589:
                            if (Information.IsNothing(nullable19))
                            {
                                if (unit4.m_Doctrine.WCS_SubmarineHasNoValue())
                                {
                                    goto Label_168B;
                                }
                                goto Label_1C45;
                            }
                            if (unit4.m_Doctrine.WCS_SubmarineHasNoValue())
                            {
                                goto Label_1C4D;
                            }
                            nullable8 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable = null;
                            nullable20 = unit4.m_Doctrine.GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : null;
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_1C55;
                            }
                        Label_168B:
                            if (Information.IsNothing(nullable19))
                            {
                                if (!unit4.m_Doctrine.WCS_LandHasNoValue())
                                {
                                    goto Label_1C5D;
                                }
                                num4++;
                                num5++;
                                if (num5 != unitArray3.Length)
                                {
                                    continue;
                                }
                            }
                            else
                            {
                                if (unit4.m_Doctrine.WCS_LandHasNoValue())
                                {
                                    goto Label_1C67;
                                }
                                nullable4 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                nullable = null;
                                nullable20 = unit4.m_Doctrine.GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : null;
                                nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                                if (nullable.GetValueOrDefault())
                                {
                                    goto Label_1C62;
                                }
                                num4++;
                                num5++;
                                if (num5 != unitArray3.Length)
                                {
                                    continue;
                                }
                            }
                            goto Label_1CC1;
                        Label_17C7:
                            unit5 = (ActiveUnit)unit3;
                            if (Information.IsNothing(nullable19))
                            {
                                if (unit5.m_Doctrine.WCS_AirHasNoValue())
                                {
                                    goto Label_18D2;
                                }
                                goto Label_1C6C;
                            }
                            if (unit5.m_Doctrine.WCS_AirHasNoValue())
                            {
                                goto Label_1C74;
                            }
                            nullable8 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable = null;
                            nullable20 = unit5.m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : null;
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_1C7C;
                            }
                        Label_18D2:
                            if (Information.IsNothing(nullable19))
                            {
                                if (unit5.m_Doctrine.WCS_SurfaceHasNoValue())
                                {
                                    goto Label_19D4;
                                }
                                goto Label_1C84;
                            }
                            if (unit5.m_Doctrine.WCS_SurfaceHasNoValue())
                            {
                                goto Label_1C8C;
                            }
                            nullable4 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable = null;
                            nullable20 = unit5.m_Doctrine.GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : null;
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_1C94;
                            }
                        Label_19D4:
                            if (Information.IsNothing(nullable19))
                            {
                                if (unit5.m_Doctrine.WCS_SubmarineHasNoValue())
                                {
                                    goto Label_1AD6;
                                }
                                goto Label_1C9C;
                            }
                            if (unit5.m_Doctrine.WCS_SurfaceHasNoValue())
                            {
                                goto Label_1CA4;
                            }
                            nullable8 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable = null;
                            nullable20 = unit5.m_Doctrine.GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : null;
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_1CAC;
                            }
                        Label_1AD6:
                            if (Information.IsNothing(nullable19))
                            {
                                if (!unit5.m_Doctrine.WCS_LandHasNoValue())
                                {
                                    goto Label_1CB4;
                                }
                                num4++;
                                num5++;
                                if (num5 != unitArray3.Length)
                                {
                                    continue;
                                }
                            }
                            else
                            {
                                if (unit5.m_Doctrine.WCS_LandHasNoValue())
                                {
                                    goto Label_1CBE;
                                }
                                nullable4 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                nullable = null;
                                nullable20 = unit5.m_Doctrine.GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : null;
                                nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                                if (nullable.GetValueOrDefault())
                                {
                                    goto Label_1CB9;
                                }
                                num4++;
                                num5++;
                                if (num5 != unitArray3.Length)
                                {
                                    continue;
                                }
                            }
                            goto Label_1CC1;
                        Label_1C0F:
                            num4++;
                            num5++;
                        }
                    }
                    goto Label_2378;
                Label_1C2D:
                    flag5 = false;
                    goto Label_2378;
                Label_1C35:
                    flag5 = false;
                    goto Label_2378;
                Label_1C3D:
                    flag5 = false;
                    goto Label_2378;
                Label_1C45:
                    flag5 = false;
                    goto Label_2378;
                Label_1C4D:
                    flag5 = false;
                    goto Label_2378;
                Label_1C55:
                    flag5 = false;
                    goto Label_2378;
                Label_1C5D:
                    flag5 = false;
                    goto Label_1CC1;
                Label_1C62:
                    flag5 = false;
                    goto Label_1CC1;
                Label_1C67:
                    flag5 = false;
                    goto Label_1CC1;
                Label_1C6C:
                    flag5 = false;
                    goto Label_2378;
                Label_1C74:
                    flag5 = false;
                    goto Label_2378;
                Label_1C7C:
                    flag5 = false;
                    goto Label_2378;
                Label_1C84:
                    flag5 = false;
                    goto Label_2378;
                Label_1C8C:
                    flag5 = false;
                    goto Label_2378;
                Label_1C94:
                    flag5 = false;
                    goto Label_2378;
                Label_1C9C:
                    flag5 = false;
                    goto Label_2378;
                Label_1CA4:
                    flag5 = false;
                    goto Label_2378;
                Label_1CAC:
                    flag5 = false;
                    goto Label_2378;
                Label_1CB4:
                    flag5 = false;
                    goto Label_1CC1;
                Label_1CB9:
                    flag5 = false;
                    goto Label_1CC1;
                Label_1CBE:
                    flag5 = false;
                Label_1CC1:
                    this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_AllUnit.Enabled = true;
                    if (flag5)
                    {
                        if (Information.IsNothing(nullable19))
                        {
                            this.MenuItem_Unit_AO_WCSFATAU_ForbidFire.Checked = false;
                            this.MenuItem_Unit_AO_WCSFATAU_LimitFire.Checked = false;
                            this.MenuItem_Unit_AO_WCSFATAU_FreeFire.Checked = false;
                            this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior.Checked = true;
                        }
                        else
                        {
                            nullable = (nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                            if (nullable.GetValueOrDefault())
                            {
                                this.MenuItem_Unit_AO_WCSFATAU_ForbidFire.Checked = false;
                                this.MenuItem_Unit_AO_WCSFATAU_LimitFire.Checked = false;
                                this.MenuItem_Unit_AO_WCSFATAU_FreeFire.Checked = true;
                                this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior.Checked = false;
                            }
                            else
                            {
                                nullable = (nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_Unit_AO_WCSFATAU_ForbidFire.Checked = true;
                                    this.MenuItem_Unit_AO_WCSFATAU_LimitFire.Checked = false;
                                    this.MenuItem_Unit_AO_WCSFATAU_FreeFire.Checked = false;
                                    this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior.Checked = false;
                                }
                                else
                                {
                                    this.MenuItem_Unit_AO_WCSFATAU_ForbidFire.Checked = false;
                                    this.MenuItem_Unit_AO_WCSFATAU_LimitFire.Checked = true;
                                    this.MenuItem_Unit_AO_WCSFATAU_FreeFire.Checked = false;
                                    this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior.Checked = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        this.MenuItem_Unit_AO_WCSFATAU_ForbidFire.Checked = false;
                        this.MenuItem_Unit_AO_WCSFATAU_LimitFire.Checked = false;
                        this.MenuItem_Unit_AO_WCSFATAU_FreeFire.Checked = false;
                        this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior.Checked = false;
                    }
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable21 = Client.GetClientSide().m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable22 = Client.GetClientSide().m_Doctrine.GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable23 = Client.GetClientSide().m_Doctrine.GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable24 = Client.GetClientSide().m_Doctrine.GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    nullable = (nullable21.HasValue ? new byte?((byte)nullable21.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                    if (nullable.GetValueOrDefault())
                    {
                        nullable = (nullable22.HasValue ? new byte?((byte)nullable22.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable23.HasValue ? new byte?((byte)nullable23.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable24.HasValue ? new byte?((byte)nullable24.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior.Text = "与上级保持一致，自由开火";
                                    goto Label_2384;
                                }
                            }
                        }
                    }
                    nullable = (nullable21.HasValue ? new byte?((byte)nullable21.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                    if (nullable.GetValueOrDefault())
                    {
                        nullable = (nullable22.HasValue ? new byte?((byte)nullable22.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable23.HasValue ? new byte?((byte)nullable23.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable24.HasValue ? new byte?((byte)nullable24.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior.Text = "与上级保持一致，限制开火";
                                    goto Label_2384;
                                }
                            }
                        }
                    }
                    nullable = (nullable21.HasValue ? new byte?((byte)nullable21.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                    if (nullable.GetValueOrDefault())
                    {
                        nullable = (nullable22.HasValue ? new byte?((byte)nullable22.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable23.HasValue ? new byte?((byte)nullable23.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable24.HasValue ? new byte?((byte)nullable24.GetValueOrDefault()) : 0) == 2;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior.Text = "与上级保持一致，禁止开火";
                                    goto Label_2384;
                                }
                            }
                        }
                    }
                    this.MenuItem_Unit_AO_WCSFATAU_SameAsSuperior.Text = "与上级保持一致，多种方式";
                    goto Label_2384;
                Label_2378:
                    this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_AllUnit.Enabled = false;
                Label_2384:
                    this.MenuItem_Unit_Doctrine_RoE_EMCON.Enabled = unit_0.IsPlatform() || unit_0.IsGroup;
                    this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = true;
                    Side side3 = Client.GetClientSide();
                    str = null;
                    if (GameGeneral.CanIssueOrdersToUnit(side3, unit_0, false, ref str))
                    {
                        this.MenuItem_Unit_OA_AutoEngageTarget.Enabled = true;
                    }
                    else
                    {
                        this.MenuItem_Unit_OA_AutoEngageTarget.Enabled = false;
                    }
                    if (!unit_0.IsWeapon)
                    {
                        this.MenuItem_Unit_OA_ManualEngageTarget.Enabled = true;
                        this.MenuItem_Unit_OA_LaunchOnlyBearing.Enabled = true;
                    }
                    else
                    {
                        this.MenuItem_Unit_OA_ManualEngageTarget.Enabled = false;
                        this.MenuItem_Unit_OA_LaunchOnlyBearing.Enabled = false;
                    }
                    if (!unit_0.IsWeapon)
                    {
                        this.MenuItem_Unit_ASW_DropPassiveSonobuoy.Enabled = true;
                        this.MenuItem_Unit_ASW_DPS_Shallow.Enabled = true;
                        this.MenuItem_Unit_ASW_DPS_Deep.Enabled = true;
                        this.MenuItem_Unit_DropActiveSonobuoy.Enabled = true;
                        this.MenuItem_Unit_ASW_DAS_Shallow.Enabled = true;
                        this.MenuItem_Unit_ASW_DAS_Deep.Enabled = true;
                        this.MenuItem_Unit_DeployDippingSonar.Enabled = true;
                    }
                    else
                    {
                        this.MenuItem_Unit_ASW_DropPassiveSonobuoy.Enabled = false;
                        this.MenuItem_Unit_ASW_DPS_Shallow.Enabled = false;
                        this.MenuItem_Unit_ASW_DPS_Deep.Enabled = false;
                        this.MenuItem_Unit_DropActiveSonobuoy.Enabled = false;
                        this.MenuItem_Unit_ASW_DAS_Shallow.Enabled = false;
                        this.MenuItem_Unit_ASW_DAS_Deep.Enabled = false;
                        this.MenuItem_Unit_DeployDippingSonar.Enabled = false;
                    }
                    if (Client.GetHookedUnit().IsAircraft)
                    {
                        Aircraft hookedUnit = (Aircraft)Client.GetHookedUnit();
                        if (!(hookedUnit.BoomRefuelling || hookedUnit.ProbeRefuelling))
                        {
                            this.MenuItem_Unit_AirRefuel.Enabled = false;
                            this.MenuItem_Unit_AirRefuel.Text = "加油 (不能进行空中加油)";
                        }
                        else
                        {
                            this.MenuItem_Unit_AirRefuel.Enabled = true;
                            this.MenuItem_Unit_AirRefuel.Text = "加油 (如果可能)";
                        }
                    }
                    else if (Client.GetHookedUnit().IsGroup && (((Group)Client.GetHookedUnit()).GetGroupType() == Group.GroupType.AirGroup))
                    {
                        Aircraft groupLead = (Aircraft)((Group)Client.GetHookedUnit()).GetGroupLead();
                        if (!(groupLead.BoomRefuelling || groupLead.ProbeRefuelling))
                        {
                            this.MenuItem_Unit_AirRefuel.Enabled = false;
                            this.MenuItem_Unit_AirRefuel.Text = "加油 (不能进行空中加油)";
                        }
                        else
                        {
                            this.MenuItem_Unit_AirRefuel.Enabled = true;
                            this.MenuItem_Unit_AirRefuel.Text = "加油 (如果可能)";
                        }
                    }
                    else if (!Client.GetHookedUnit().IsShip && !(Client.GetHookedUnit().IsGroup && (((Group)Client.GetHookedUnit()).GetGroupType() == Group.GroupType.SurfaceGroup)))
                    {
                        this.MenuItem_Unit_AirRefuel.Enabled = false;
                    }
                    else
                    {
                        this.MenuItem_Unit_AirRefuel.Enabled = true;
                        this.MenuItem_Unit_AirRefuel.Text = "补给(如果可能)";
                    }
                    if (unit_0.IsAircraft)
                    {
                        Aircraft aircraft3 = (Aircraft)unit_0;
                        if (!(Information.IsNothing(aircraft3.GetLoadout()) || !aircraft3.GetLoadout().QuickTurnaround))
                        {
                            this.MenuItem_Unit_QuickTumaround.Enabled = true;
                        }
                        else
                        {
                            this.MenuItem_Unit_QuickTumaround.Enabled = false;
                        }
                    }
                    else
                    {
                        this.MenuItem_Unit_QuickTumaround.Enabled = false;
                    }
                    goto Label_27C4;
                Label_268C:
                    this.MenuItem_Unit_PlotCourse.Enabled = false;
                    this.MenuItem_Unit_ThrottleAltOrDeep.Enabled = false;
                    this.MenuItem_Unit_SensorsStatus.Enabled = false;
                    this.MenuItem_Unit_UnassignMissionUnit.Enabled = false;
                    this.MenuItem_Unit_AO_IgnorePlottedCourse_SelectedUnit.Checked = false;
                    this.MenuItem_Unit_AO_IgnorePlottedCourse_SelectedUnit.Enabled = false;
                    this.MenuItem_Unit_AO_IgnorePlottedCourse_AllUnit.Enabled = false;
                    this.MenuItem_Unit_AO_IgnorePlottedCourse_AllUnit.Checked = false;
                    this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_SelectUnit.Checked = false;
                    this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = false;
                    this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_AllUnit.Enabled = false;
                    this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_AllUnit.Checked = false;
                    this.MenuItem_Unit_Doctrine_RoE_EMCON.Enabled = false;
                    this.MenuItem_Unit_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = false;
                    this.MenuItem_Unit_OA_AutoEngageTarget.Enabled = false;
                    this.MenuItem_Unit_OA_ManualEngageTarget.Enabled = false;
                    this.MenuItem_Unit_OA_LaunchOnlyBearing.Enabled = false;
                    this.MenuItem_Unit_ASW_DropPassiveSonobuoy.Enabled = false;
                    this.MenuItem_Unit_ASW_DPS_Shallow.Enabled = false;
                    this.MenuItem_Unit_ASW_DPS_Deep.Enabled = false;
                    this.MenuItem_Unit_DropActiveSonobuoy.Enabled = false;
                    this.MenuItem_Unit_ASW_DAS_Shallow.Enabled = false;
                    this.MenuItem_Unit_ASW_DAS_Deep.Enabled = false;
                    this.MenuItem_Unit_DeployDippingSonar.Enabled = false;
                    this.MenuItem_Unit_QuickTumaround.Enabled = false;
                    this.MenuItem_Unit_AirRefuel.Enabled = false;
                Label_27C4:
                    if (unit_0.IsGroup)
                    {
                        this.MenuItem_Unit_SystemDamageStatus.Enabled = false;
                        Group.GroupType groupType = ((Group)Client.GetHookedUnit()).GetGroupType();
                        this.MenuItem_Unit_AirOperations.Enabled = (groupType == Group.GroupType.AirBase) || (groupType == Group.GroupType.SurfaceGroup);
                        this.MenuItem_Unit_BoatDockingOperations.Enabled = ((groupType == Group.GroupType.NavalBase) || (groupType == Group.GroupType.SurfaceGroup)) || (groupType == Group.GroupType.SubGroup);
                        this.MenuItem_Unit_GO_SelectedUnitRemoveGroup.Enabled = false;
                        this.MenuItem_Unit_HoldPositon_SelectedUnit.Enabled = false;
                        this.MenuItem_Unit_HoldPositon_SelectedUnit.Checked = false;
                        this.MenuItem_Unit_Magazines.Enabled = ((Group)unit_0).HasFixedFacility();
                        if (unit_0.GetSide(false) != Client.GetClientSide())
                        {
                            this.MenuItem_Unit_GO_GroupEditor.Enabled = false;
                            this.MenuItem_Unit_AO_DropTarget.Enabled = false;
                            this.MenuItem_Unit_AO_DropAllTarget.Enabled = false;
                            this.MenuItem_Unit_ReturnToBase.Enabled = false;
                            this.MenuItem_Unit_SelectNewBase.Enabled = false;
                        }
                        else
                        {
                            this.MenuItem_Unit_GO_GroupEditor.Enabled = true;
                            this.MenuItem_Unit_AO_DropTarget.Enabled = true;
                            this.MenuItem_Unit_AO_DropAllTarget.Enabled = true;
                            if (((Group)unit_0).GetGroupType() == Group.GroupType.AirGroup)
                            {
                                this.MenuItem_Unit_ReturnToBase.Enabled = true;
                                this.MenuItem_Unit_SelectNewBase.Enabled = true;
                            }
                            else
                            {
                                this.MenuItem_Unit_ReturnToBase.Enabled = false;
                                this.MenuItem_Unit_SelectNewBase.Enabled = false;
                            }
                        }
                    }
                    else
                    {
                        if (unit_0.IsWeapon)
                        {
                            this.MenuItem_Unit_Magazines.Enabled = false;
                        }
                        else
                        {
                            this.MenuItem_Unit_Magazines.Enabled = ((Platform)unit_0).m_Magazines.Count<Magazine>() > 0;
                        }
                        this.MenuItem_Unit_SystemDamageStatus.Enabled = (unit_0.IsFacility || unit_0.IsShip) || unit_0.IsSubmarine;
                        this.MenuItem_Unit_AirOperations.Enabled = unit_0.IsFacility || unit_0.IsShip;
                        this.MenuItem_Unit_BoatDockingOperations.Enabled = (unit_0.IsFacility || unit_0.IsShip) || unit_0.IsSubmarine;
                        this.MenuItem_Unit_GO_GroupEditor.Enabled = false;
                        if (unit_0.GetSide(false) != Client.GetClientSide())
                        {
                            this.MenuItem_Unit_GO_SelectedUnitRemoveGroup.Enabled = false;
                            this.MenuItem_Unit_AO_DropTarget.Enabled = false;
                            this.MenuItem_Unit_AO_DropAllTarget.Enabled = false;
                            this.MenuItem_Unit_ReturnToBase.Enabled = false;
                            this.MenuItem_Unit_SelectNewBase.Enabled = false;
                            this.MenuItem_Unit_HoldPositon_SelectedUnit.Enabled = false;
                            this.MenuItem_Unit_HoldPositon_SelectedUnit.Checked = false;
                        }
                        else
                        {
                            this.MenuItem_Unit_GO_SelectedUnitRemoveGroup.Enabled = ((ActiveUnit)unit_0).HasParentGroup();
                            if (!unit_0.IsWeapon)
                            {
                                this.MenuItem_Unit_AO_DropTarget.Enabled = ((ActiveUnit)unit_0).GetAI().GetTargets().Length > 0;
                                this.MenuItem_Unit_AO_DropAllTarget.Enabled = this.MenuItem_Unit_AO_DropTarget.Enabled;
                            }
                            else
                            {
                                this.MenuItem_Unit_AO_DropTarget.Enabled = false;
                                this.MenuItem_Unit_AO_DropAllTarget.Enabled = false;
                            }
                            this.MenuItem_Unit_ReturnToBase.Enabled = (unit_0.IsAircraft || unit_0.IsShip) || unit_0.IsSubmarine;
                            this.MenuItem_Unit_SelectNewBase.Enabled = (unit_0.IsAircraft || unit_0.IsShip) || unit_0.IsSubmarine;
                            if (!(!unit_0.IsFacility || unit_0.IsFixedFacility()))
                            {
                                this.MenuItem_Unit_HoldPositon_SelectedUnit.Enabled = true;
                                this.MenuItem_Unit_HoldPositon_SelectedUnit.Checked = ((Facility)unit_0).GetFacilityAI().HoldPosition;
                            }
                            else
                            {
                                this.MenuItem_Unit_HoldPositon_SelectedUnit.Enabled = false;
                                this.MenuItem_Unit_HoldPositon_SelectedUnit.Checked = false;
                            }
                        }
                    }
                Label_2B3A:
                    if (unit_0.IsActiveUnit() && (((ActiveUnit)unit_0).GetSide(false) == Client.GetClientSide()))
                    {
                        this.MenuItem_Unit_AssignMissionToUnit.DropDownItems.Clear();
                        this.MenuItem_Unit_AR_SelectForMission.DropDownItems.Clear();
                        if (!unit_0.IsWeapon)
                        {
                            foreach (Mission mission in Client.GetClientSide().GetMissionCollection())
                            {
                                if (mission.category == Mission.MissionCategory.TaskPool)
                                {
                                    continue;
                                }
                                ToolStripMenuItem item = new ToolStripMenuItem();
                                ToolStripMenuItem item2 = new ToolStripMenuItem();
                                item = (ToolStripMenuItem)this.MenuItem_Unit_AssignMissionToUnit.DropDownItems.Add(mission.Name, null, new EventHandler(this.MenuItem_Unit_AssignMissionToUnit_Click));
                                item.Tag = mission;
                                if ((mission.MissionClass != Mission._MissionClass.Support) && (mission.MissionClass != Mission._MissionClass.Ferry))
                                {
                                    goto Label_2CD2;
                                }
                                bool flag6 = false;
                                using (List<ActiveUnit>.Enumerator enumerator2 = mission.GetUnitsAssignedToMe(Client.GetClientScenario()).GetEnumerator())
                                {
                                    while (enumerator2.MoveNext())
                                    {
                                        ActiveUnit current = enumerator2.Current;
                                        if (current.IsAircraft)
                                        {
                                            if (((Aircraft)current).IsAirRefuelingCapable())
                                            {
                                                goto Label_2C7E;
                                            }
                                        }
                                        else if (current.IsShip && ((Ship)current).IsRefuel_Out())
                                        {
                                            goto Label_2C83;
                                        }
                                    }
                                    goto Label_2C95;
                                Label_2C7E:
                                    flag6 = true;
                                    goto Label_2C95;
                                Label_2C83:
                                    flag6 = true;
                                }
                            Label_2C95:
                                if (flag6)
                                {
                                    new ToolStripMenuItem();
                                    ((ToolStripMenuItem)this.MenuItem_Unit_AR_SelectForMission.DropDownItems.Add(mission.Name, null, new EventHandler(this.method_544))).Tag = mission;
                                }
                            Label_2CD2:
                                if (mission.MissionClass == Mission._MissionClass.Strike)
                                {
                                    item2 = (ToolStripMenuItem)this.MenuItem_Unit_AssignMissionToUnit.DropDownItems.Add(mission.Name + " - Escort", null, new EventHandler(this.MenuItem_Unit_AssignMissionToUnit_Click));
                                    item2.Tag = mission;
                                }
                                ActiveUnit unit7 = (ActiveUnit)unit_0;
                                if (mission == unit7.GetAssignedMission(false))
                                {
                                    if ((mission.MissionClass == Mission._MissionClass.Strike) && unit7.GetAI().IsEscort)
                                    {
                                        item2.Checked = true;
                                    }
                                    else
                                    {
                                        item.Checked = true;
                                    }
                                }
                            }
                            foreach (Side side4 in Client.GetClientScenario().GetSides())
                            {
                                if ((side4 != Client.GetClientSide()) && side4.IsFriendlyToSide(Client.GetClientSide()))
                                {
                                    foreach (Mission mission2 in side4.GetMissionCollection().OrderBy<Mission, string>(MissionFunc2))
                                    {
                                        if ((mission2.MissionClass != Mission._MissionClass.Support) && (mission2.MissionClass != Mission._MissionClass.Ferry))
                                        {
                                            continue;
                                        }
                                        bool flag7 = false;
                                        using (List<ActiveUnit>.Enumerator enumerator4 = mission2.GetUnitsAssignedToMe(Client.GetClientScenario()).GetEnumerator())
                                        {
                                            while (enumerator4.MoveNext())
                                            {
                                                ActiveUnit unit8 = enumerator4.Current;
                                                if (unit8.IsAircraft)
                                                {
                                                    if (((Aircraft)unit8).IsAirRefuelingCapable())
                                                    {
                                                        goto Label_2E69;
                                                    }
                                                }
                                                else if (unit8.IsShip && ((Ship)unit8).IsRefuel_Out())
                                                {
                                                    goto Label_2E6E;
                                                }
                                            }
                                            goto Label_2E80;
                                        Label_2E69:
                                            flag7 = true;
                                            goto Label_2E80;
                                        Label_2E6E:
                                            flag7 = true;
                                        }
                                    Label_2E80:
                                        if (flag7)
                                        {
                                            new ToolStripMenuItem();
                                            ((ToolStripMenuItem)this.MenuItem_Unit_AR_SelectForMission.DropDownItems.Add(mission2.Name + " (" + side4.GetSideName() + ")", null, new EventHandler(this.method_544))).Tag = mission2;
                                        }
                                    }
                                }
                            }
                            this.MenuItem_Unit_AssignMissionToUnit.Enabled = Client.GetClientSide().GetMissionCollection().Count > 0;
                            this.MenuItem_Unit_AR_SelectForMission.Enabled = this.MenuItem_Unit_AR_SelectForMission.DropDownItems.Count > 0;
                        }
                        else
                        {
                            this.MenuItem_Unit_AssignMissionToUnit.Enabled = false;
                            this.MenuItem_Unit_AR_SelectForMission.Enabled = false;
                        }
                    }
                    else
                    {
                        this.MenuItem_Unit_AssignMissionToUnit.DropDownItems.Clear();
                        this.MenuItem_Unit_AssignMissionToUnit.Enabled = false;
                        this.MenuItem_Unit_AR_SelectForMission.DropDownItems.Clear();
                        this.MenuItem_Unit_AR_SelectForMission.Enabled = false;
                    }
                    if (Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit)
                    {
                        if (!unit_0.IsWeapon)
                        {
                            this.MenuItem_Unit_SE_EUP_Magazine.Enabled = true;
                            this.MenuItem_Unit_SE_EditUnitProp.Enabled = true;
                        }
                        else
                        {
                            this.MenuItem_Unit_SE_EUP_Magazine.Enabled = false;
                            this.MenuItem_Unit_SE_EditUnitProp.Enabled = false;
                        }
                        if (!unit_0.IsGroup)
                        {
                            this.MenuItem_Unit_SE_AutoDetectedUnit.Enabled = true;
                            this.MenuItem_Unit_SE_AutoDetectedUnit.Checked = ((ActiveUnit)unit_0).IsAutoDetectable(null);
                            this.MenuItem_Unit_SE_UnitLoseCommunication.Enabled = true;
                            this.MenuItem_Unit_SE_UnitLoseCommunication.Checked = !((ActiveUnit)unit_0).GetCommStuff().IsNotOutOfComms();
                        }
                        else
                        {
                            this.MenuItem_Unit_SE_AutoDetectedUnit.Enabled = false;
                            this.MenuItem_Unit_SE_AutoDetectedUnit.Checked = false;
                            this.MenuItem_Unit_SE_UnitLoseCommunication.Enabled = false;
                            this.MenuItem_Unit_SE_UnitLoseCommunication.Checked = false;
                        }
                    }
                    else
                    {
                        this.MenuItem_Unit_SE_EditUnitProp.Visible = false;
                        this.MenuItem_Unit_SE_AutoDetectedUnit.Visible = false;
                    }
                    if (Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit)
                    {
                        if (!Information.IsNothing(unit_0))
                        {
                            if (unit_0.IsFacility)
                            {
                                this.MenuItem_Unit_SE_SetBearing.Enabled = true;
                            }
                            else
                            {
                                this.MenuItem_Unit_SE_SetBearing.Enabled = false;
                            }
                        }
                        else
                        {
                            this.MenuItem_Unit_SE_SetBearing.Enabled = false;
                        }
                    }
                    else
                    {
                        this.MenuItem_Unit_SE_SetBearing.Visible = false;
                    }
                    this.MenuItem_Unit_IsolationView.Enabled = (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit()) && ((Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit) || ((ActiveUnit)Client.GetHookedUnit()).GetCommStuff().IsNotOutOfComms());
                    this.MenuItem_Unit_IsolationView.Checked = !string.IsNullOrEmpty(Client.GetMap().GetIsolatedPOVObjectID());
                    this.MenuItem_Unit_ScenarioEdit.Visible = Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit;
                    this.toolStripSeparator_27.Visible = this.MenuItem_Unit_ScenarioEdit.Visible;
                }
                catch (Exception exception)
                {
                    ProjectData.SetProjectError(exception);
                    Exception exception2 = exception;
                    exception2.Data.Add("Error at 200281", exception2.Message);
                    GameGeneral.LogException(ref exception2);
                    if (Debugger.IsAttached)
                    {
                        Debugger.Break();
                    }
                    ProjectData.ClearProjectError();
                }
            }

        }

        // Token: 0x060070CD RID: 28877 RVA: 0x003ED24C File Offset: 0x003EB44C
        private void method_60()
        {
         if (!Information.IsNothing(Client.GetHookedUnit()) && !Information.IsNothing(Client.GetHookedUnit().GetSide(false)))
            {
                try
                {
                    bool? nullable;
                    byte? nullable3;
                    byte? nullable4;
                    bool flag2;
                    ActiveUnit[] unitArray2;
                    int num3;
                    byte? nullable8;
                    Doctrine._IgnorePlottedCourseWhenAttacking? nullable9;
                    bool? nullable10;
                    Doctrine doctrine3;
                    Scenario clientScenario;
                    Doctrine._WeaponControlStatus? nullable20;
                    if (Client.GetCommandOrder() == Client._CommandOrder.AddNewWayPoint)
                    {
                        this.MenuItem_PlotCourse.Text = "航线规划结束";
                    }
                    else
                    {
                        this.MenuItem_PlotCourse.Text = "航线规划";
                    }
                    this.MenuItem_HoldPositon_AllUnit.Enabled = true;
                    this.MenuItem_HoldPositon_AllUnit.Checked = true;
                    ActiveUnit[] activeUnitArray = Client.GetClientSide().ActiveUnitArray;
                    int index = 0;
                    bool flag = false;
                    while (index < activeUnitArray.Length)
                    {
                        Unit unit = activeUnitArray[index];
                        if (!(((!unit.IsActiveUnit() || (unit.GetSide(false) != Client.GetClientSide())) || !unit.IsFacility) || unit.IsFixedFacility()))
                        {
                            flag = true;
                            if (!((Facility)unit).GetFacilityAI().HoldPosition)
                            {
                                goto Label_00CC;
                            }
                        }
                        index++;
                    }
                    goto Label_00D8;
                Label_00CC:
                    this.MenuItem_HoldPositon_AllUnit.Checked = false;
                Label_00D8:
                    if (!flag)
                    {
                        this.MenuItem_HoldPositon_AllUnit.Checked = false;
                        this.MenuItem_HoldPositon_AllUnit.Enabled = false;
                    }
                    if (((Client.GetClientSide().GetUnitReadOnlyCollection().Count != 1) || Information.IsNothing(Client.GetHookedUnit())) ? (((Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0) || Information.IsNothing(Client.GetHookedUnit())) || !Information.IsNothing(Client.GetWayPointSelected())) : false)
                    {
                        goto Label_2DB2;
                    }
                    this.MenuItem_GO_GroupBySelectedUnit.Enabled = false;
                    this.MenuItem_WeaponStatus.Enabled = !Client.GetHookedUnit().IsGroup && !Client.GetHookedUnit().IsWeapon;
                    if (Client.GetHookedUnit().GetSide(false) != Client.GetClientSide())
                    {
                        goto Label_24CC;
                    }
                    if (!Client.GetHookedUnit().IsWeapon)
                    {
                        this.MenuItem_UnassignMissionUnit.Enabled = true;
                    }
                    else
                    {
                        this.MenuItem_UnassignMissionUnit.Enabled = false;
                    }
                    Side clientSide = Client.GetClientSide();
                    Unit hookedUnit = Client.GetHookedUnit();
                    string str = null;
                    if (GameGeneral.CanIssueOrdersToUnit(clientSide, hookedUnit, true, ref str))
                    {
                        this.MenuItem_SensorsStatus.Enabled = true;
                    }
                    else
                    {
                        this.MenuItem_SensorsStatus.Enabled = false;
                    }
                    Side side2 = Client.GetClientSide();
                    Unit unit3 = Client.GetHookedUnit();
                    str = null;
                    if (GameGeneral.CanIssueOrdersToUnit(side2, unit3, false, ref str))
                    {
                        this.MenuItem_PlotCourse.Enabled = true;
                        this.MenuItem_ThrottleAltOrDeep.Enabled = true;
                    }
                    else
                    {
                        this.MenuItem_PlotCourse.Enabled = false;
                        this.MenuItem_ThrottleAltOrDeep.Enabled = false;
                    }
                    Doctrine expression = null;
                    if ((Client.GetHookedUnit().IsActiveUnit() && !Client.GetHookedUnit().IsWeapon) && (Client.GetHookedUnit().GetSide(false) == Client.GetClientSide()))
                    {
                        expression = ((ActiveUnit)Client.GetHookedUnit()).m_Doctrine;
                    }
                    if (!Information.IsNothing(expression) && expression.IsIgnorePlottedCourseWhenAttackingPlayerEditable(Client.GetClientScenario()))
                    {
                        if (!Client.GetHookedUnit().IsWeapon)
                        {
                            this.MenuItem_AO_IgnorePlottedCourse_SelectedUnit.Enabled = true;
                            nullable = null;
                            Doctrine._IgnorePlottedCourseWhenAttacking? nullable2 = expression.GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            if (expression.IgnorePlottedCourseWhenAttackingHasNoValue())
                            {
                                this.MenuItem_AO_IPCSU_Yes.Checked = false;
                                this.MenuItem_AO_IPCSU_No.Checked = false;
                                this.MenuItem_AO_IPCSU_SameAsSuperior.Checked = true;
                            }
                            else
                            {
                                nullable = (nullable2.HasValue ? new byte?((byte)nullable2.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_AO_IPCSU_Yes.Checked = true;
                                    this.MenuItem_AO_IPCSU_No.Checked = false;
                                    this.MenuItem_AO_IPCSU_SameAsSuperior.Checked = false;
                                }
                                else
                                {
                                    this.MenuItem_AO_IPCSU_Yes.Checked = false;
                                    this.MenuItem_AO_IPCSU_No.Checked = true;
                                    this.MenuItem_AO_IPCSU_SameAsSuperior.Checked = false;
                                }
                            }
                            Doctrine doctrine2 = expression;
                            Scenario scenario = Client.GetClientScenario();
                            flag2 = true;
                            nullable = null;
                            Doctrine._IgnorePlottedCourseWhenAttacking? nullable5 = doctrine2.GetDoctrine(scenario, ref flag2).GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable = (nullable5.HasValue ? new byte?((byte)nullable5.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                            if (nullable.GetValueOrDefault())
                            {
                                this.MenuItem_AO_IPCSU_SameAsSuperior.Text = "与上级保持一致，是";
                            }
                            else
                            {
                                this.MenuItem_AO_IPCSU_SameAsSuperior.Text = "与上级保持一致，否";
                            }
                        }
                        else
                        {
                            this.MenuItem_AO_IgnorePlottedCourse_SelectedUnit.Enabled = false;
                        }
                        if (!Client.GetHookedUnit().IsWeapon)
                        {
                            int num2 = 1;
                            bool flag3 = true;
                            unitArray2 = Client.GetClientSide().ActiveUnitArray;
                            num3 = 0;
                            Doctrine._IgnorePlottedCourseWhenAttacking? nullable6 = null;
                            Doctrine._WeaponControlStatus? nullable7 = null;
                            nullable8 = null;
                            while (num3 < unitArray2.Length)
                            {
                                Unit unit4 = unitArray2[num3];
                                if ((unit4.IsActiveUnit() && (unit4.GetSide(false) == Client.GetClientSide())) && !unit4.IsWeapon)
                                {
                                    if (num2 == 1)
                                    {
                                        if (((ActiveUnit)unit4).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                        {
                                            nullable6 = null;
                                        }
                                        else
                                        {
                                            nullable = null;
                                            nullable6 = ((ActiveUnit)unit4).m_Doctrine.GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                        }
                                    }
                                    else
                                    {
                                        nullable6 = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_0);
                                        nullable8 = 0;
                                        if (Information.IsNothing(nullable6))
                                        {
                                            if (!((ActiveUnit)unit4).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                            {
                                                flag3 = false;
                                            }
                                        }
                                        else if (!((ActiveUnit)unit4).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                        {
                                            nullable4 = nullable6.HasValue ? new byte?((byte)nullable6.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                            nullable = null;
                                            nullable9 = ((ActiveUnit)unit4).m_Doctrine.GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                            nullable8 = nullable9.HasValue ? new byte?((byte)nullable9.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                            nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : null;
                                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                                            if (nullable.GetValueOrDefault())
                                            {
                                                flag3 = false;
                                            }
                                        }
                                        else
                                        {
                                            flag3 = false;
                                        }
                                    }
                                }
                                num2++;
                                num3++;
                            }
                            this.MenuItem_AO_IgnorePlottedCourse_AllUnit.Enabled = true;
                            if (flag3)
                            {
                                if (Information.IsNothing(nullable6))
                                {
                                    this.MenuItem_AO_IPCAU_Yes.Checked = false;
                                    this.MenuItem_AO_IPCAU_No.Checked = false;
                                    this.MenuItem_AO_IPCAU_SameAsSuperior.Checked = true;
                                }
                                else
                                {
                                    nullable = (nullable6.HasValue ? new byte?((byte)nullable6.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                    if (nullable.GetValueOrDefault())
                                    {
                                        this.MenuItem_AO_IPCAU_Yes.Checked = true;
                                        this.MenuItem_AO_IPCAU_No.Checked = false;
                                        this.MenuItem_AO_IPCAU_SameAsSuperior.Checked = false;
                                    }
                                    else
                                    {
                                        this.MenuItem_AO_IPCAU_Yes.Checked = false;
                                        this.MenuItem_AO_IPCAU_No.Checked = true;
                                        this.MenuItem_AO_IPCAU_SameAsSuperior.Checked = false;
                                    }
                                }
                            }
                            else
                            {
                                this.MenuItem_AO_IPCAU_Yes.Checked = false;
                                this.MenuItem_AO_IPCAU_No.Checked = false;
                                this.MenuItem_AO_IPCAU_SameAsSuperior.Checked = false;
                            }
                            nullable = null;
                            nullable7 = Client.GetClientSide().m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable = (nullable7.HasValue ? new byte?((byte)nullable7.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                            if (nullable.GetValueOrDefault())
                            {
                                this.MenuItem_AO_IPCAU_SameAsSuperior.Text = "与上级保持一致，是";
                            }
                            else
                            {
                                this.MenuItem_AO_IPCAU_SameAsSuperior.Text = "与上级保持一致，否";
                            }
                        }
                        else
                        {
                            this.MenuItem_AO_IgnorePlottedCourse_AllUnit.Enabled = false;
                        }
                    }
                    if (!(((Client.GetClientSide().m_Doctrine.IsWCS_Air_PlayerEditable(Client.GetClientScenario()) || Client.GetClientSide().m_Doctrine.IsWCS_Surface_PlayerEditable(Client.GetClientScenario())) || Client.GetClientSide().m_Doctrine.IsWCS_Submarine_PlayerEditable(Client.GetClientScenario())) || Client.GetClientSide().m_Doctrine.IsWCSLand_PlayerEditable(Client.GetClientScenario())))
                    {
                        this.MenuItem_AO_IgnorePlottedCourse_AllUnit.Enabled = false;
                        this.MenuItem_AO_IgnorePlottedCourse_SelectedUnit.Enabled = false;
                        this.MenuItem_AO_WeaponContorlStatusForAllType_AllUnit.Enabled = false;
                        this.MenuItem_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = false;
                        goto Label_21A4;
                    }
                    if (!Client.GetHookedUnit().IsWeapon)
                    {
                        this.MenuItem_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = true;
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable11 = expression.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable12 = expression.GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable13 = expression.GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable14 = expression.GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        if (((expression.WCS_AirHasNoValue() && expression.WCS_SurfaceHasNoValue()) && expression.WCS_SubmarineHasNoValue()) && expression.WCS_LandHasNoValue())
                        {
                            this.MenuItem_AO_WCSFATSU_ForbidFire.Checked = false;
                            this.MenuItem_AO_WCSFATSU_LimitFire.Checked = false;
                            this.MenuItem_AO_WCSFATSU_FreeFire.Checked = false;
                            this.MenuItem_AO_WCSFATSU_SameAsSuperior.Checked = true;
                        }
                        else
                        {
                            bool flag4 = false;
                            nullable = (nullable11.HasValue ? new byte?((byte)nullable11.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == (nullable12.HasValue ? new byte?((byte)nullable12.GetValueOrDefault()) : ((byte?)(nullable3 = null)));
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable11.HasValue ? new byte?((byte)nullable11.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == (nullable13.HasValue ? new byte?((byte)nullable13.GetValueOrDefault()) : ((byte?)(nullable3 = null)));
                                if (nullable.GetValueOrDefault())
                                {
                                    nullable = (nullable11.HasValue ? new byte?((byte)nullable11.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == (nullable14.HasValue ? new byte?((byte)nullable14.GetValueOrDefault()) : ((byte?)(nullable3 = null)));
                                    if (nullable.GetValueOrDefault())
                                    {
                                        flag4 = true;
                                    }
                                }
                            }
                            if (!flag4)
                            {
                                this.MenuItem_AO_WCSFATSU_ForbidFire.Checked = false;
                                this.MenuItem_AO_WCSFATSU_LimitFire.Checked = false;
                                this.MenuItem_AO_WCSFATSU_FreeFire.Checked = false;
                                this.MenuItem_AO_WCSFATSU_SameAsSuperior.Checked = false;
                            }
                            else
                            {
                                nullable = (nullable11.HasValue ? new byte?((byte)nullable11.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_AO_WCSFATSU_ForbidFire.Checked = false;
                                    this.MenuItem_AO_WCSFATSU_LimitFire.Checked = false;
                                    this.MenuItem_AO_WCSFATSU_FreeFire.Checked = true;
                                    this.MenuItem_AO_WCSFATSU_SameAsSuperior.Checked = false;
                                }
                                else
                                {
                                    nullable = (nullable11.HasValue ? new byte?((byte)nullable11.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                                    if (nullable.GetValueOrDefault())
                                    {
                                        this.MenuItem_AO_WCSFATSU_ForbidFire.Checked = true;
                                        this.MenuItem_AO_WCSFATSU_LimitFire.Checked = false;
                                        this.MenuItem_AO_WCSFATSU_FreeFire.Checked = false;
                                        this.MenuItem_AO_WCSFATSU_SameAsSuperior.Checked = false;
                                    }
                                    else
                                    {
                                        nullable = (nullable11.HasValue ? new byte?((byte)nullable11.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                        if (nullable.GetValueOrDefault())
                                        {
                                            this.MenuItem_AO_WCSFATSU_ForbidFire.Checked = false;
                                            this.MenuItem_AO_WCSFATSU_LimitFire.Checked = true;
                                            this.MenuItem_AO_WCSFATSU_FreeFire.Checked = false;
                                            this.MenuItem_AO_WCSFATSU_SameAsSuperior.Checked = false;
                                        }
                                    }
                                }
                            }
                        }
                        doctrine3 = expression;
                        clientScenario = Client.GetClientScenario();
                        flag2 = true;
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable15 = doctrine3.GetDoctrine(clientScenario, ref flag2).GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        Doctrine doctrine4 = expression;
                        Scenario scenario3 = Client.GetClientScenario();
                        flag2 = true;
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable16 = doctrine4.GetDoctrine(scenario3, ref flag2).GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        Doctrine doctrine5 = expression;
                        Scenario scenario4 = Client.GetClientScenario();
                        flag2 = true;
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable17 = doctrine5.GetDoctrine(scenario4, ref flag2).GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        Doctrine doctrine6 = expression;
                        Scenario scenario5 = Client.GetClientScenario();
                        flag2 = true;
                        nullable = null;
                        Doctrine._WeaponControlStatus? nullable18 = doctrine6.GetDoctrine(scenario5, ref flag2).GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable = (nullable15.HasValue ? new byte?((byte)nullable15.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable16.HasValue ? new byte?((byte)nullable16.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable17.HasValue ? new byte?((byte)nullable17.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                                if (nullable.GetValueOrDefault())
                                {
                                    nullable = (nullable18.HasValue ? new byte?((byte)nullable18.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                                    if (nullable.GetValueOrDefault())
                                    {
                                        this.MenuItem_AO_WCSFATSU_SameAsSuperior.Text = "与上级保持一致，自由开火";
                                        goto Label_124D;
                                    }
                                }
                            }
                        }
                        nullable = (nullable15.HasValue ? new byte?((byte)nullable15.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable16.HasValue ? new byte?((byte)nullable16.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable17.HasValue ? new byte?((byte)nullable17.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                if (nullable.GetValueOrDefault())
                                {
                                    nullable = (nullable18.HasValue ? new byte?((byte)nullable18.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                    if (nullable.GetValueOrDefault())
                                    {
                                        this.MenuItem_AO_WCSFATSU_SameAsSuperior.Text = "与上级保持一致，限制开火";
                                        goto Label_124D;
                                    }
                                }
                            }
                        }
                        nullable = (nullable15.HasValue ? new byte?((byte)nullable15.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable16.HasValue ? new byte?((byte)nullable16.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable17.HasValue ? new byte?((byte)nullable17.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                                if (nullable.GetValueOrDefault())
                                {
                                    nullable = (nullable18.HasValue ? new byte?((byte)nullable18.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                                    if (nullable.GetValueOrDefault())
                                    {
                                        this.MenuItem_AO_WCSFATSU_SameAsSuperior.Text = "与上级保持一致，禁止开火";
                                        goto Label_124D;
                                    }
                                }
                            }
                        }
                        this.MenuItem_AO_WCSFATSU_SameAsSuperior.Text = "与上级保持一致，多种方式";
                    }
                    else
                    {
                        this.MenuItem_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = false;
                    }
                Label_124D:
                    if (Client.GetHookedUnit().IsWeapon)
                    {
                        goto Label_2198;
                    }
                    int num4 = 1;
                    bool flag5 = true;
                    unitArray2 = Client.GetClientSide().ActiveUnitArray;
                    num3 = 0;
                    Doctrine._WeaponControlStatus? nullable19 = null;
                    while (num3 < unitArray2.Length)
                    {
                        ActiveUnit unit7;
                        Unit unit5 = unitArray2[num3];
                        if (!unit5.IsActiveUnit() || (unit5.GetSide(false) != Client.GetClientSide()))
                        {
                            goto Label_1A23;
                        }
                        if (unit5.IsWeapon)
                        {
                            goto Label_1A1D;
                        }
                        if (num4 != 1)
                        {
                            goto Label_160D;
                        }
                        ActiveUnit unit6 = (ActiveUnit)unit5;
                        if (unit6.m_Doctrine.WCS_AirHasNoValue())
                        {
                            nullable19 = null;
                        }
                        else
                        {
                            nullable = null;
                            nullable19 = unit6.m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        }
                        if (Information.IsNothing(nullable19))
                        {
                            if (unit6.m_Doctrine.WCS_SurfaceHasNoValue())
                            {
                                goto Label_1407;
                            }
                            goto Label_1A3E;
                        }
                        if (unit6.m_Doctrine.WCS_SurfaceHasNoValue())
                        {
                            goto Label_1A43;
                        }
                        nullable4 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit6.m_Doctrine.GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (nullable.GetValueOrDefault())
                        {
                            goto Label_1A48;
                        }
                    Label_1407:
                        if (Information.IsNothing(nullable19))
                        {
                            if (unit6.m_Doctrine.WCS_SubmarineHasNoValue())
                            {
                                goto Label_1509;
                            }
                            goto Label_1A4D;
                        }
                        if (unit6.m_Doctrine.WCS_SubmarineHasNoValue())
                        {
                            goto Label_1A52;
                        }
                        nullable8 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit6.m_Doctrine.GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (nullable.GetValueOrDefault())
                        {
                            goto Label_1A57;
                        }
                    Label_1509:
                        if (Information.IsNothing(nullable19))
                        {
                            if (unit6.m_Doctrine.WCS_LandHasNoValue())
                            {
                                goto Label_1A23;
                            }
                            goto Label_1A5C;
                        }
                        if (unit6.m_Doctrine.WCS_LandHasNoValue())
                        {
                            goto Label_1A66;
                        }
                        nullable4 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit6.m_Doctrine.GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (!nullable.GetValueOrDefault())
                        {
                            goto Label_1A23;
                        }
                        goto Label_1A61;
                    Label_160D:
                        unit7 = (ActiveUnit)unit5;
                        if (Information.IsNothing(nullable19))
                        {
                            if (unit7.m_Doctrine.WCS_AirHasNoValue())
                            {
                                goto Label_1718;
                            }
                            goto Label_1A6B;
                        }
                        if (unit7.m_Doctrine.WCS_AirHasNoValue())
                        {
                            goto Label_1A70;
                        }
                        nullable8 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit7.m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (nullable.GetValueOrDefault())
                        {
                            goto Label_1A75;
                        }
                    Label_1718:
                        if (Information.IsNothing(nullable19))
                        {
                            if (unit7.m_Doctrine.WCS_SurfaceHasNoValue())
                            {
                                goto Label_181A;
                            }
                            goto Label_1A7A;
                        }
                        if (unit7.m_Doctrine.WCS_SurfaceHasNoValue())
                        {
                            goto Label_1A7F;
                        }
                        nullable4 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit7.m_Doctrine.GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (nullable.GetValueOrDefault())
                        {
                            goto Label_1A84;
                        }
                    Label_181A:
                        if (Information.IsNothing(nullable19))
                        {
                            if (unit7.m_Doctrine.WCS_SubmarineHasNoValue())
                            {
                                goto Label_191C;
                            }
                            goto Label_1A89;
                        }
                        if (unit7.m_Doctrine.WCS_SurfaceHasNoValue())
                        {
                            goto Label_1A8E;
                        }
                        nullable8 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit7.m_Doctrine.GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (nullable.GetValueOrDefault())
                        {
                            goto Label_1A93;
                        }
                    Label_191C:
                        if (Information.IsNothing(nullable19))
                        {
                            if (unit7.m_Doctrine.WCS_LandHasNoValue())
                            {
                                goto Label_1A23;
                            }
                            goto Label_1A98;
                        }
                        if (unit7.m_Doctrine.WCS_LandHasNoValue())
                        {
                            goto Label_1AA2;
                        }
                        nullable4 = nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit7.m_Doctrine.GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (!nullable.GetValueOrDefault())
                        {
                            goto Label_1A23;
                        }
                        goto Label_1A9D;
                    Label_1A1D:
                        num3++;
                    Label_1A23:
                        num4++;
                        num3++;
                    }
                    goto Label_1AA5;
                Label_1A3E:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A43:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A48:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A4D:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A52:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A57:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A5C:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A61:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A66:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A6B:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A70:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A75:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A7A:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A7F:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A84:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A89:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A8E:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A93:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A98:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1A9D:
                    flag5 = false;
                    goto Label_1AA5;
                Label_1AA2:
                    flag5 = false;
                Label_1AA5:
                    this.MenuItem_AO_WeaponContorlStatusForAllType_AllUnit.Enabled = true;
                    if (flag5)
                    {
                        if (Information.IsNothing(nullable19))
                        {
                            this.MenuItem_AO_WCSFATAU_ForbidFire.Checked = false;
                            this.MenuItem_AO_WCSFATAU_LimitFire.Checked = false;
                            this.MenuItem_AO_WCSFATAU_FreeFire.Checked = false;
                            this.MenuItem_AO_WCSFATAU_SameAsSuperior.Checked = true;
                        }
                        else
                        {
                            nullable = (nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                            if (nullable.GetValueOrDefault())
                            {
                                this.MenuItem_AO_WCSFATAU_ForbidFire.Checked = false;
                                this.MenuItem_AO_WCSFATAU_LimitFire.Checked = false;
                                this.MenuItem_AO_WCSFATAU_FreeFire.Checked = true;
                                this.MenuItem_AO_WCSFATAU_SameAsSuperior.Checked = false;
                            }
                            else
                            {
                                nullable = (nullable19.HasValue ? new byte?((byte)nullable19.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_AO_WCSFATAU_ForbidFire.Checked = true;
                                    this.MenuItem_AO_WCSFATAU_LimitFire.Checked = false;
                                    this.MenuItem_AO_WCSFATAU_FreeFire.Checked = false;
                                    this.MenuItem_AO_WCSFATAU_SameAsSuperior.Checked = false;
                                }
                                else
                                {
                                    this.MenuItem_AO_WCSFATAU_ForbidFire.Checked = false;
                                    this.MenuItem_AO_WCSFATAU_LimitFire.Checked = true;
                                    this.MenuItem_AO_WCSFATAU_FreeFire.Checked = false;
                                    this.MenuItem_AO_WCSFATAU_SameAsSuperior.Checked = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        this.MenuItem_AO_WCSFATAU_ForbidFire.Checked = false;
                        this.MenuItem_AO_WCSFATAU_LimitFire.Checked = false;
                        this.MenuItem_AO_WCSFATAU_FreeFire.Checked = false;
                        this.MenuItem_AO_WCSFATAU_SameAsSuperior.Checked = false;
                    }
                    doctrine3 = expression;
                    clientScenario = Client.GetClientScenario();
                    flag2 = true;
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable21 = doctrine3.GetDoctrine(clientScenario, ref flag2).GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    Doctrine doctrine7 = expression;
                    Scenario scenario6 = Client.GetClientScenario();
                    flag2 = true;
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable22 = doctrine7.GetDoctrine(scenario6, ref flag2).GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    Doctrine doctrine8 = expression;
                    Scenario scenario7 = Client.GetClientScenario();
                    flag2 = true;
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable23 = doctrine8.GetDoctrine(scenario7, ref flag2).GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    Doctrine doctrine9 = expression;
                    Scenario scenario8 = Client.GetClientScenario();
                    flag2 = true;
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable24 = doctrine9.GetDoctrine(scenario8, ref flag2).GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    nullable = (nullable21.HasValue ? new byte?((byte)nullable21.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                    if (nullable.GetValueOrDefault())
                    {
                        nullable = (nullable22.HasValue ? new byte?((byte)nullable22.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable23.HasValue ? new byte?((byte)nullable23.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable24.HasValue ? new byte?((byte)nullable24.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_AO_WCSFATAU_SameAsSuperior.Text = "与上级保持一致，自由开火";
                                    goto Label_21A4;
                                }
                            }
                        }
                    }
                    nullable = (nullable21.HasValue ? new byte?((byte)nullable21.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                    if (nullable.GetValueOrDefault())
                    {
                        nullable = (nullable22.HasValue ? new byte?((byte)nullable22.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable23.HasValue ? new byte?((byte)nullable23.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable24.HasValue ? new byte?((byte)nullable24.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_AO_WCSFATAU_SameAsSuperior.Text = "与上级保持一致，限制开火";
                                    goto Label_21A4;
                                }
                            }
                        }
                    }
                    nullable = (nullable21.HasValue ? new byte?((byte)nullable21.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                    if (nullable.GetValueOrDefault())
                    {
                        nullable = (nullable22.HasValue ? new byte?((byte)nullable22.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable23.HasValue ? new byte?((byte)nullable23.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable24.HasValue ? new byte?((byte)nullable24.GetValueOrDefault()) : 0) == 2;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_AO_WCSFATAU_SameAsSuperior.Text = "与上级保持一致，禁止开火";
                                    goto Label_21A4;
                                }
                            }
                        }
                    }
                    this.MenuItem_AO_WCSFATAU_SameAsSuperior.Text = "与上级保持一致，多种方式";
                    goto Label_21A4;
                Label_2198:
                    this.MenuItem_AO_WeaponContorlStatusForAllType_AllUnit.Enabled = false;
                Label_21A4:
                    this.MenuItem_Doctrine_RoE_EMCON_WRA.Enabled = Client.GetHookedUnit().IsPlatform() || Client.GetHookedUnit().IsGroup;
                    this.MenuItem_AttackOptions.Enabled = true;
                    Side side3 = Client.GetClientSide();
                    Unit unit8 = Client.GetHookedUnit();
                    str = null;
                    if (GameGeneral.CanIssueOrdersToUnit(side3, unit8, false, ref str))
                    {
                        this.MenuItem_AO_AutoEngageTarget.Enabled = true;
                    }
                    else
                    {
                        this.MenuItem_AO_AutoEngageTarget.Enabled = false;
                    }
                    if (!Client.GetHookedUnit().IsWeapon)
                    {
                        this.MenuItem_AO_ManualEngageTarget.Enabled = true;
                        this.MenuItem_AO_LaunchOnlyBearing.Enabled = true;
                    }
                    else
                    {
                        this.MenuItem_AO_ManualEngageTarget.Enabled = false;
                        this.MenuItem_AO_LaunchOnlyBearing.Enabled = false;
                    }
                    if (!Client.GetHookedUnit().IsWeapon)
                    {
                        this.MenuItem_ASW_DropPassiveSonobuoy.Enabled = true;
                        this.MenuItem_ASW_DPS_Shallow.Enabled = true;
                        this.MenuItem_ASW_DPS_Deep.Enabled = true;
                        this.MenuItem_DropActiveSonobuoy.Enabled = true;
                        this.MenuItem_ASW_DAS_Shallow.Enabled = true;
                        this.MenuItem_ASW_DAS_Deep.Enabled = true;
                        this.MenuItem_DeployDippingSonar.Enabled = true;
                    }
                    else
                    {
                        this.MenuItem_ASW_DropPassiveSonobuoy.Enabled = false;
                        this.MenuItem_ASW_DPS_Shallow.Enabled = false;
                        this.MenuItem_ASW_DPS_Deep.Enabled = false;
                        this.MenuItem_DropActiveSonobuoy.Enabled = false;
                        this.MenuItem_ASW_DAS_Shallow.Enabled = false;
                        this.MenuItem_ASW_DAS_Deep.Enabled = false;
                        this.MenuItem_DeployDippingSonar.Enabled = false;
                    }
                    if (Client.GetHookedUnit().IsAircraft)
                    {
                        Aircraft aircraft = (Aircraft)Client.GetHookedUnit();
                        if (!(aircraft.BoomRefuelling || aircraft.ProbeRefuelling))
                        {
                            this.MenuItem_AirRefuel.Enabled = false;
                            this.MenuItem_AirRefuel.Text = "加油 (不能空中加油)";
                        }
                        else
                        {
                            this.MenuItem_AirRefuel.Enabled = true;
                            this.MenuItem_AirRefuel.Text = "加油 (如果可能)";
                        }
                    }
                    else if (Client.GetHookedUnit().IsGroup && (((Group)Client.GetHookedUnit()).GetGroupType() == Group.GroupType.AirGroup))
                    {
                        Aircraft groupLead = (Aircraft)((Group)Client.GetHookedUnit()).GetGroupLead();
                        if (!(groupLead.BoomRefuelling || groupLead.ProbeRefuelling))
                        {
                            this.MenuItem_AirRefuel.Enabled = false;
                            this.MenuItem_AirRefuel.Text = "加油 (不能空中加油)";
                        }
                        else
                        {
                            this.MenuItem_AirRefuel.Enabled = true;
                            this.MenuItem_AirRefuel.Text = "加油 (如果可能)";
                        }
                    }
                    else if (!Client.GetHookedUnit().IsShip && !(Client.GetHookedUnit().IsGroup && (((Group)Client.GetHookedUnit()).GetGroupType() == Group.GroupType.SurfaceGroup)))
                    {
                        this.MenuItem_AirRefuel.Enabled = false;
                    }
                    else
                    {
                        this.MenuItem_AirRefuel.Enabled = true;
                        this.MenuItem_AirRefuel.Text = "补给(如果可能)";
                    }
                    if (Client.GetHookedUnit().IsAircraft)
                    {
                        Aircraft aircraft3 = (Aircraft)Client.GetHookedUnit();
                        if (!(Information.IsNothing(aircraft3.GetLoadout()) || !aircraft3.GetLoadout().QuickTurnaround))
                        {
                            this.MenuItem_QuickTumaround.Enabled = true;
                        }
                        else
                        {
                            this.MenuItem_QuickTumaround.Enabled = false;
                        }
                    }
                    else
                    {
                        this.MenuItem_QuickTumaround.Enabled = false;
                    }
                    goto Label_260C;
                Label_24CC:
                    this.MenuItem_PlotCourse.Enabled = false;
                    this.MenuItem_ThrottleAltOrDeep.Enabled = false;
                    this.MenuItem_SensorsStatus.Enabled = false;
                    this.MenuItem_UnassignMissionUnit.Enabled = false;
                    this.MenuItem_AO_IgnorePlottedCourse_SelectedUnit.Enabled = false;
                    this.MenuItem_AO_IgnorePlottedCourse_AllUnit.Enabled = false;
                    this.MenuItem_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = false;
                    this.MenuItem_AO_WeaponContorlStatusForAllType_AllUnit.Enabled = false;
                    this.MenuItem_Doctrine_RoE_EMCON_WRA.Enabled = false;
                    this.MenuItem_AssignMissionToUnit.DropDownItems.Clear();
                    this.MenuItem_AssignMissionToUnit.Enabled = false;
                    this.MenuItem_AR_SelectForMission.DropDownItems.Clear();
                    this.MenuItem_AR_SelectForMission.Enabled = false;
                    this.MenuItem_AttackOptions.Enabled = false;
                    this.MenuItem_AO_AutoEngageTarget.Enabled = false;
                    this.MenuItem_AO_ManualEngageTarget.Enabled = false;
                    this.MenuItem_AO_LaunchOnlyBearing.Enabled = false;
                    this.MenuItem_ASW_DropPassiveSonobuoy.Enabled = false;
                    this.MenuItem_ASW_DPS_Shallow.Enabled = false;
                    this.MenuItem_ASW_DPS_Deep.Enabled = false;
                    this.MenuItem_DropActiveSonobuoy.Enabled = false;
                    this.MenuItem_ASW_DAS_Shallow.Enabled = false;
                    this.MenuItem_ASW_DAS_Deep.Enabled = false;
                    this.MenuItem_DeployDippingSonar.Enabled = false;
                    this.MenuItem_QuickTumaround.Enabled = false;
                    this.MenuItem_Unit_AirRefuel.Enabled = false;
                Label_260C:
                    if (Client.GetHookedUnit().IsGroup)
                    {
                        this.MenuItem_SystemDamageStatus.Enabled = false;
                        Group.GroupType groupType = ((Group)Client.GetHookedUnit()).GetGroupType();
                        this.MenuItem_AirOperations.Enabled = (groupType == Group.GroupType.AirBase) || (groupType == Group.GroupType.SurfaceGroup);
                        this.MenuItem_BoatDockingOperations.Enabled = ((groupType == Group.GroupType.NavalBase) || (groupType == Group.GroupType.SurfaceGroup)) || (groupType == Group.GroupType.SubGroup);
                        this.MenuItem_GO_SelectedUnitRemoveGroup.Enabled = false;
                        this.MenuItem_HoldPositon_SelectedUnit.Enabled = false;
                        this.MenuItem_HoldPositon_SelectedUnit.Checked = false;
                        this.MenuItem_Magazines.Enabled = ((Group)Client.GetHookedUnit()).HasFixedFacility();
                        if (Client.GetHookedUnit().GetSide(false) == Client.GetClientSide())
                        {
                            this.MenuItem_GO_GroupEditor.Enabled = true;
                            this.MenuItem_AO_DropTarget.Enabled = true;
                            this.MenuItem_AO_DropAllTarget.Enabled = true;
                            if (((Group)Client.GetHookedUnit()).GetGroupType() == Group.GroupType.AirGroup)
                            {
                                this.MenuItem_ReturnToBase.Enabled = true;
                                this.MenuItem_SelectNewBase.Enabled = true;
                            }
                            else
                            {
                                this.MenuItem_ReturnToBase.Enabled = false;
                                this.MenuItem_SelectNewBase.Enabled = false;
                            }
                        }
                        else
                        {
                            this.MenuItem_GO_GroupEditor.Enabled = false;
                            this.MenuItem_AO_DropTarget.Enabled = false;
                            this.MenuItem_AO_DropAllTarget.Enabled = false;
                            this.MenuItem_ReturnToBase.Enabled = false;
                            this.MenuItem_SelectNewBase.Enabled = false;
                        }
                    }
                    else
                    {
                        this.MenuItem_SystemDamageStatus.Enabled = (Client.GetHookedUnit().IsFacility || Client.GetHookedUnit().IsShip) || Client.GetHookedUnit().IsSubmarine;
                        if (Client.GetHookedUnit().IsWeapon)
                        {
                            this.MenuItem_Unit_Magazines.Enabled = false;
                        }
                        else
                        {
                            this.MenuItem_Unit_Magazines.Enabled = ((Platform)Client.GetHookedUnit()).m_Magazines.Count<Magazine>() > 0;
                        }
                        this.MenuItem_AirOperations.Enabled = Client.GetHookedUnit().IsFacility || Client.GetHookedUnit().IsShip;
                        this.MenuItem_BoatDockingOperations.Enabled = (Client.GetHookedUnit().IsFacility || Client.GetHookedUnit().IsShip) || Client.GetHookedUnit().IsSubmarine;
                        this.MenuItem_GO_GroupEditor.Enabled = false;
                        if (Client.GetHookedUnit().GetSide(false) == Client.GetClientSide())
                        {
                            this.MenuItem_ReturnToBase.Enabled = (Client.GetHookedUnit().IsAircraft || Client.GetHookedUnit().IsShip) || Client.GetHookedUnit().IsSubmarine;
                            this.MenuItem_SelectNewBase.Enabled = (Client.GetHookedUnit().IsAircraft || Client.GetHookedUnit().IsShip) || Client.GetHookedUnit().IsSubmarine;
                            this.MenuItem_GO_SelectedUnitRemoveGroup.Enabled = ((ActiveUnit)Client.GetHookedUnit()).HasParentGroup();
                            if (!Client.GetHookedUnit().IsWeapon)
                            {
                                this.MenuItem_AO_DropTarget.Enabled = ((ActiveUnit)Client.GetHookedUnit()).GetAI().GetTargets().Length > 0;
                                this.MenuItem_AO_DropAllTarget.Enabled = this.MenuItem_AO_DropTarget.Enabled;
                            }
                            else
                            {
                                this.MenuItem_AO_DropTarget.Enabled = false;
                                this.MenuItem_AO_DropAllTarget.Enabled = false;
                            }
                            if (!(!Client.GetHookedUnit().IsFacility || Client.GetHookedUnit().IsFixedFacility()))
                            {
                                this.MenuItem_HoldPositon_SelectedUnit.Enabled = true;
                                this.MenuItem_HoldPositon_SelectedUnit.Checked = ((Facility)Client.GetHookedUnit()).GetFacilityAI().HoldPosition;
                            }
                            else
                            {
                                this.MenuItem_HoldPositon_SelectedUnit.Enabled = false;
                                this.MenuItem_HoldPositon_SelectedUnit.Checked = false;
                            }
                        }
                    }
                    this.MenuItem_AssignMissionToUnit.DropDownItems.Clear();
                    this.MenuItem_AR_SelectForMission.DropDownItems.Clear();
                    if (!Client.GetHookedUnit().IsWeapon)
                    {
                        foreach (Mission mission in Client.GetClientSide().GetMissionCollection())
                        {
                            if (mission.category == Mission.MissionCategory.TaskPool)
                            {
                                continue;
                            }
                            ToolStripMenuItem item = new ToolStripMenuItem();
                            ToolStripMenuItem item2 = new ToolStripMenuItem();
                            item = (ToolStripMenuItem)this.MenuItem_AssignMissionToUnit.DropDownItems.Add(mission.Name, null, new EventHandler(this.method_67));
                            item.Tag = mission;
                            if ((mission.MissionClass != Mission._MissionClass.Support) && (mission.MissionClass != Mission._MissionClass.Ferry))
                            {
                                goto Label_2B1A;
                            }
                            bool flag6 = false;
                            using (List<ActiveUnit>.Enumerator enumerator2 = mission.GetUnitsAssignedToMe(Client.GetClientScenario()).GetEnumerator())
                            {
                                while (enumerator2.MoveNext())
                                {
                                    ActiveUnit current = enumerator2.Current;
                                    if (current.IsAircraft)
                                    {
                                        if (!((Aircraft)current).IsAirRefuelingCapable())
                                        {
                                            continue;
                                        }
                                        goto Label_2AC6;
                                    }
                                    if (current.IsShip && ((Ship)current).IsRefuel_Out())
                                    {
                                        goto Label_2ACB;
                                    }
                                }
                                goto Label_2ADD;
                            Label_2AC6:
                                flag6 = true;
                                goto Label_2ADD;
                            Label_2ACB:
                                flag6 = true;
                            }
                        Label_2ADD:
                            if (flag6)
                            {
                                new ToolStripMenuItem();
                                ((ToolStripMenuItem)this.MenuItem_AR_SelectForMission.DropDownItems.Add(mission.Name, null, new EventHandler(this.method_544))).Tag = mission;
                            }
                        Label_2B1A:
                            if (mission.MissionClass == Mission._MissionClass.Strike)
                            {
                                item2 = (ToolStripMenuItem)this.MenuItem_AssignMissionToUnit.DropDownItems.Add(mission.Name + " - Escort", null, new EventHandler(this.method_67));
                                item2.Tag = mission;
                            }
                            ActiveUnit unit10 = (ActiveUnit)Client.GetHookedUnit();
                            if (mission == unit10.GetAssignedMission(false))
                            {
                                if ((mission.MissionClass == Mission._MissionClass.Strike) && unit10.GetAI().IsEscort)
                                {
                                    item2.Checked = true;
                                }
                                else
                                {
                                    item.Checked = true;
                                }
                            }
                        }
                        Side[] sides = Client.GetClientScenario().GetSides();
                        for (num3 = 0; num3 < sides.Length; num3++)
                        {
                            Side side4 = sides[num3];
                            if ((side4 != Client.GetClientSide()) && side4.IsFriendlyToSide(Client.GetClientSide()))
                            {
                                foreach (Mission mission2 in side4.GetMissionCollection().OrderBy<Mission, string>(MissionFunc3))
                                {
                                    if ((mission2.MissionClass != Mission._MissionClass.Support) && (mission2.MissionClass != Mission._MissionClass.Ferry))
                                    {
                                        continue;
                                    }
                                    bool flag7 = false;
                                    using (List<ActiveUnit>.Enumerator enumerator4 = mission2.GetUnitsAssignedToMe(Client.GetClientScenario()).GetEnumerator())
                                    {
                                        while (enumerator4.MoveNext())
                                        {
                                            ActiveUnit unit11 = enumerator4.Current;
                                            if (unit11.IsAircraft)
                                            {
                                                if (!((Aircraft)unit11).IsAirRefuelingCapable())
                                                {
                                                    continue;
                                                }
                                                goto Label_2CBB;
                                            }
                                            if (unit11.IsShip && ((Ship)unit11).IsRefuel_Out())
                                            {
                                                goto Label_2CC0;
                                            }
                                        }
                                        goto Label_2CD2;
                                    Label_2CBB:
                                        flag7 = true;
                                        goto Label_2CD2;
                                    Label_2CC0:
                                        flag7 = true;
                                    }
                                Label_2CD2:
                                    if (flag7)
                                    {
                                        new ToolStripMenuItem();
                                        ((ToolStripMenuItem)this.MenuItem_AR_SelectForMission.DropDownItems.Add(mission2.Name + " (" + side4.GetSideName() + ")", null, new EventHandler(this.method_544))).Tag = mission2;
                                    }
                                }
                            }
                        }
                        this.MenuItem_AssignMissionToUnit.Enabled = Client.GetClientSide().GetMissionCollection().Count > 0;
                        this.MenuItem_AR_SelectForMission.Enabled = this.MenuItem_AR_SelectForMission.DropDownItems.Count > 0;
                    }
                    else
                    {
                        this.MenuItem_AssignMissionToUnit.Enabled = false;
                        this.MenuItem_AR_SelectForMission.Enabled = false;
                    }
                    return;
                Label_2DB2:
                    if (!((Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0) || Information.IsNothing(Client.GetHookedUnit())))
                    {
                        this.MenuItem_ThrottleAltOrDeep.Enabled = true;
                        this.MenuItem_BoatDockingOperations.Enabled = false;
                        this.MenuItem_UnassignMissionUnit.Enabled = false;
                        this.MenuItem_AirOperations.Enabled = false;
                        this.MenuItem_GO_GroupEditor.Enabled = false;
                        this.MenuItem_SystemDamageStatus.Enabled = false;
                        this.MenuItem_Magazines.Enabled = false;
                        this.MenuItem_WeaponStatus.Enabled = false;
                        this.MenuItem_Doctrine_RoE_EMCON_WRA.Enabled = false;
                        this.MenuItem_GO_GroupBySelectedUnit.Enabled = false;
                        this.MenuItem_AirRefuel.Enabled = false;
                        this.MenuItem_AirRefuel.Text = "加油(如果可能)";
                        this.MenuItem_AO_IgnorePlottedCourse_SelectedUnit.Enabled = false;
                        this.MenuItem_AO_IgnorePlottedCourse_AllUnit.Enabled = false;
                        this.MenuItem_ReturnToBase.Enabled = false;
                        this.MenuItem_SelectNewBase.Enabled = false;
                        this.MenuItem_AO_DropTarget.Enabled = false;
                        this.MenuItem_AO_DropAllTarget.Enabled = false;
                        this.MenuItem_HoldPositon_SelectedUnit.Enabled = false;
                        this.MenuItem_HoldPositon_SelectedUnit.Checked = false;
                        this.MenuItem_GO_SelectedUnitRemoveGroup.Enabled = false;
                        this.MenuItem_AssignMissionToUnit.Enabled = false;
                        this.MenuItem_AR_SelectForMission.Enabled = false;
                        this.MenuItem_AttackOptions.Enabled = false;
                        this.MenuItem_AO_AutoEngageTarget.Enabled = false;
                        this.MenuItem_AO_ManualEngageTarget.Enabled = false;
                        this.MenuItem_AO_LaunchOnlyBearing.Enabled = false;
                        this.MenuItem_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = false;
                        this.MenuItem_AO_WeaponContorlStatusForAllType_AllUnit.Enabled = false;
                        this.MenuItem_ASW_DropPassiveSonobuoy.Enabled = false;
                        this.MenuItem_ASW_DPS_Shallow.Enabled = false;
                        this.MenuItem_ASW_DPS_Deep.Enabled = false;
                        this.MenuItem_DropActiveSonobuoy.Enabled = false;
                        this.MenuItem_ASW_DAS_Shallow.Enabled = false;
                        this.MenuItem_ASW_DAS_Deep.Enabled = false;
                        this.MenuItem_DeployDippingSonar.Enabled = false;
                        this.MenuItem_QuickTumaround.Enabled = false;
                        return;
                    }
                    if (!((Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0) || Information.IsNothing(Client.GetHookedUnit())))
                    {
                        this.MenuItem_ThrottleAltOrDeep.Enabled = true;
                        this.MenuItem_BoatDockingOperations.Enabled = false;
                        this.MenuItem_UnassignMissionUnit.Enabled = false;
                        this.MenuItem_AirOperations.Enabled = false;
                        this.MenuItem_GO_GroupEditor.Enabled = false;
                        this.MenuItem_SystemDamageStatus.Enabled = false;
                        this.MenuItem_Magazines.Enabled = false;
                        this.MenuItem_WeaponStatus.Enabled = false;
                        this.MenuItem_Doctrine_RoE_EMCON_WRA.Enabled = false;
                        this.MenuItem_GO_GroupBySelectedUnit.Enabled = false;
                        this.MenuItem_AirRefuel.Enabled = false;
                        this.MenuItem_AirRefuel.Text = "加油(如果可能)";
                        this.MenuItem_AO_IgnorePlottedCourse_SelectedUnit.Enabled = false;
                        this.MenuItem_AO_IgnorePlottedCourse_AllUnit.Enabled = false;
                        this.MenuItem_ReturnToBase.Enabled = false;
                        this.MenuItem_SelectNewBase.Enabled = false;
                        this.MenuItem_AO_DropTarget.Enabled = false;
                        this.MenuItem_AO_DropAllTarget.Enabled = false;
                        this.MenuItem_HoldPositon_SelectedUnit.Enabled = false;
                        this.MenuItem_HoldPositon_SelectedUnit.Checked = false;
                        this.MenuItem_GO_SelectedUnitRemoveGroup.Enabled = false;
                        this.MenuItem_AssignMissionToUnit.Enabled = false;
                        this.MenuItem_AR_SelectForMission.Enabled = false;
                        this.MenuItem_AttackOptions.Enabled = false;
                        this.MenuItem_AO_AutoEngageTarget.Enabled = false;
                        this.MenuItem_AO_ManualEngageTarget.Enabled = false;
                        this.MenuItem_AO_LaunchOnlyBearing.Enabled = false;
                        this.MenuItem_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = false;
                        this.MenuItem_AO_WeaponContorlStatusForAllType_AllUnit.Enabled = false;
                        this.MenuItem_ASW_DropPassiveSonobuoy.Enabled = false;
                        this.MenuItem_ASW_DPS_Shallow.Enabled = false;
                        this.MenuItem_ASW_DPS_Deep.Enabled = false;
                        this.MenuItem_DropActiveSonobuoy.Enabled = false;
                        this.MenuItem_ASW_DAS_Shallow.Enabled = false;
                        this.MenuItem_ASW_DAS_Deep.Enabled = false;
                        this.MenuItem_DeployDippingSonar.Enabled = false;
                        this.MenuItem_QuickTumaround.Enabled = false;
                        return;
                    }
                    if (Client.GetClientSide().GetUnitReadOnlyCollection().Count <= 1)
                    {
                        return;
                    }
                    this.MenuItem_ThrottleAltOrDeep.Enabled = false;
                    this.MenuItem_BoatDockingOperations.Enabled = false;
                    this.MenuItem_AirOperations.Enabled = false;
                    this.MenuItem_GO_GroupEditor.Enabled = false;
                    this.MenuItem_SystemDamageStatus.Enabled = false;
                    this.MenuItem_Magazines.Enabled = false;
                    this.MenuItem_WeaponStatus.Enabled = false;
                    this.MenuItem_Doctrine_RoE_EMCON_WRA.Enabled = false;
                    this.MenuItem_AO_WeaponContorlStatusForAllType_AllUnit.Enabled = false;
                    this.MenuItem_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = false;
                    this.MenuItem_AO_IgnorePlottedCourse_AllUnit.Enabled = false;
                    this.MenuItem_Unit_AO_IgnorePlottedCourse_SelectedUnit.Enabled = false;
                    if (!Client.GetClientSide().m_Doctrine.IsIgnorePlottedCourseWhenAttackingPlayerEditable(Client.GetClientScenario()))
                    {
                        goto Label_3B49;
                    }
                    int num5 = 1;
                    bool flag8 = true;
                    bool flag9 = true;
                    Doctrine._IgnorePlottedCourseWhenAttacking? nullable25 = null;
                    Doctrine._IgnorePlottedCourseWhenAttacking? nullable26 = null;
                    foreach (Unit unit12 in Client.GetClientSide().GetUnitReadOnlyCollection())
                    {
                        if (unit12.IsActiveUnit() && (unit12.GetSide(false) == Client.GetClientSide()))
                        {
                            if (unit12.IsWeapon)
                            {
                                continue;
                            }
                            if (num5 == 1)
                            {
                                if (((ActiveUnit)unit12).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                {
                                    nullable25 = null;
                                }
                                else
                                {
                                    nullable = null;
                                    nullable25 = ((ActiveUnit)unit12).m_Doctrine.GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                }
                                Doctrine doctrine = ((ActiveUnit)unit12).m_Doctrine;
                                Scenario scenario9 = Client.GetClientScenario();
                                flag2 = true;
                                if (doctrine.GetDoctrine(scenario9, ref flag2).IgnorePlottedCourseWhenAttackingHasNoValue())
                                {
                                    nullable26 = null;
                                }
                                else
                                {
                                    Doctrine doctrine11 = ((ActiveUnit)unit12).m_Doctrine;
                                    Scenario scenario10 = Client.GetClientScenario();
                                    flag2 = true;
                                    nullable = null;
                                    nullable26 = doctrine11.GetDoctrine(scenario10, ref flag2).GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                }
                            }
                            else
                            {
                                if (Information.IsNothing(nullable25))
                                {
                                    if (!((ActiveUnit)unit12).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                    {
                                        flag8 = false;
                                    }
                                }
                                else if (((ActiveUnit)unit12).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                {
                                    flag8 = false;
                                }
                                else
                                {
                                    nullable8 = nullable25.HasValue ? new byte?((byte)nullable25.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                    nullable = null;
                                    nullable9 = ((ActiveUnit)unit12).m_Doctrine.GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                    nullable4 = nullable9.HasValue ? new byte?((byte)nullable9.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                    nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : ((bool?)(nullable = null));
                                    nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                                    if (nullable.GetValueOrDefault())
                                    {
                                        flag8 = false;
                                    }
                                }
                                if (Information.IsNothing(nullable26))
                                {
                                    if (!((ActiveUnit)unit12).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                    {
                                        flag9 = false;
                                    }
                                }
                                else
                                {
                                    Doctrine doctrine12 = ((ActiveUnit)unit12).m_Doctrine;
                                    Scenario scenario11 = Client.GetClientScenario();
                                    flag2 = true;
                                    nullable = null;
                                    if (Information.IsNothing(doctrine12.GetDoctrine(scenario11, ref flag2).GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false)))
                                    {
                                        flag9 = false;
                                    }
                                    else
                                    {
                                        nullable4 = nullable26.HasValue ? new byte?((byte)nullable26.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                        Doctrine doctrine13 = ((ActiveUnit)unit12).m_Doctrine;
                                        Scenario scenario12 = Client.GetClientScenario();
                                        flag2 = true;
                                        nullable = null;
                                        nullable9 = doctrine13.GetDoctrine(scenario12, ref flag2).GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                        nullable8 = nullable9.HasValue ? new byte?((byte)nullable9.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                        nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : ((bool?)(nullable = null));
                                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                                        if (nullable.GetValueOrDefault())
                                        {
                                            flag9 = false;
                                        }
                                    }
                                }
                            }
                        }
                        num5++;
                        if (!(flag8 || flag9))
                        {
                            break;
                        }
                    }
                    this.MenuItem_AO_IgnorePlottedCourse_SelectedUnit.Enabled = true;
                    if (flag8)
                    {
                        if (Information.IsNothing(nullable25))
                        {
                            this.MenuItem_AO_IPCSU_Yes.Checked = false;
                            this.MenuItem_AO_IPCSU_No.Checked = false;
                            this.MenuItem_AO_IPCSU_SameAsSuperior.Checked = true;
                        }
                        else
                        {
                            nullable = (nullable25.HasValue ? new byte?((byte)nullable25.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                            if (nullable.GetValueOrDefault())
                            {
                                this.MenuItem_AO_IPCSU_Yes.Checked = true;
                                this.MenuItem_AO_IPCSU_No.Checked = false;
                                this.MenuItem_AO_IPCSU_SameAsSuperior.Checked = false;
                            }
                            else
                            {
                                this.MenuItem_AO_IPCSU_Yes.Checked = false;
                                this.MenuItem_AO_IPCSU_No.Checked = true;
                                this.MenuItem_AO_IPCSU_SameAsSuperior.Checked = false;
                            }
                        }
                    }
                    else
                    {
                        this.MenuItem_AO_IPCSU_Yes.Checked = false;
                        this.MenuItem_AO_IPCSU_No.Checked = false;
                        this.MenuItem_AO_IPCSU_SameAsSuperior.Checked = false;
                    }
                    if (flag9)
                    {
                        nullable = (nullable26.HasValue ? new byte?((byte)nullable26.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                        if (nullable.GetValueOrDefault())
                        {
                            this.MenuItem_AO_IPCSU_SameAsSuperior.Text = "与上级保持一致，是";
                        }
                        else
                        {
                            this.MenuItem_AO_IPCSU_SameAsSuperior.Text = "与上级保持一致，否";
                        }
                    }
                    else
                    {
                        this.MenuItem_AO_IPCSU_SameAsSuperior.Text = "与上级保持一致，多种方式";
                    }
                    num5 = 1;
                    flag8 = true;
                    unitArray2 = Client.GetClientSide().ActiveUnitArray;
                    for (num3 = 0; num3 < unitArray2.Length; num3++)
                    {
                        unit8 = unitArray2[num3];
                        if ((unit8.IsActiveUnit() && (unit8.GetSide(false) == Client.GetClientSide())) && !unit8.IsWeapon)
                        {
                            if (num5 == 1)
                            {
                                if (!((ActiveUnit)unit8).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                {
                                    nullable = null;
                                    nullable25 = ((ActiveUnit)unit8).m_Doctrine.GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                }
                            }
                            else
                            {
                                if (Information.IsNothing(nullable25))
                                {
                                    if (((ActiveUnit)unit8).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                    {
                                        goto Label_3974;
                                    }
                                    goto Label_398F;
                                }
                                if (((ActiveUnit)unit8).m_Doctrine.IgnorePlottedCourseWhenAttackingHasNoValue())
                                {
                                    goto Label_3999;
                                }
                                nullable8 = nullable25.HasValue ? new byte?((byte)nullable25.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                nullable = null;
                                nullable9 = ((ActiveUnit)unit8).m_Doctrine.GetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                byte? nullable27 = nullable9.HasValue ? new byte?((byte)nullable9.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                nullable10 = (nullable8.HasValue & nullable27.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable27.GetValueOrDefault()) : null;
                                nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                                if (nullable.GetValueOrDefault())
                                {
                                    goto Label_3994;
                                }
                            }
                        }
                    Label_3974:
                        num5++;
                    }
                    goto Label_399C;
                Label_398F:
                    flag8 = false;
                    goto Label_399C;
                Label_3994:
                    flag8 = false;
                    goto Label_399C;
                Label_3999:
                    flag8 = false;
                Label_399C:
                    this.MenuItem_AO_IgnorePlottedCourse_AllUnit.Enabled = true;
                    if (flag8)
                    {
                        if (Information.IsNothing(nullable25))
                        {
                            this.MenuItem_AO_IPCAU_Yes.Checked = false;
                            this.MenuItem_AO_IPCAU_No.Checked = false;
                            this.MenuItem_AO_IPCAU_SameAsSuperior.Checked = true;
                        }
                        else
                        {
                            nullable = (nullable25.HasValue ? new byte?((byte)nullable25.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                            if (nullable.GetValueOrDefault())
                            {
                                this.MenuItem_AO_IPCAU_Yes.Checked = true;
                                this.MenuItem_AO_IPCAU_No.Checked = false;
                                this.MenuItem_AO_IPCAU_SameAsSuperior.Checked = false;
                            }
                            else
                            {
                                this.MenuItem_AO_IPCAU_Yes.Checked = false;
                                this.MenuItem_AO_IPCAU_No.Checked = true;
                                this.MenuItem_AO_IPCAU_SameAsSuperior.Checked = false;
                            }
                        }
                    }
                    else
                    {
                        this.MenuItem_AO_IPCAU_Yes.Checked = false;
                        this.MenuItem_AO_IPCAU_No.Checked = false;
                        this.MenuItem_AO_IPCAU_SameAsSuperior.Checked = false;
                    }
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable28 = Client.GetClientSide().m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    nullable = (nullable28.HasValue ? new byte?((byte)nullable28.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                    if (nullable.GetValueOrDefault())
                    {
                        this.MenuItem_AO_IPCAU_SameAsSuperior.Text = "与上级保持一致，是";
                    }
                    this.MenuItem_AO_IPCAU_SameAsSuperior.Text = "与上级保持一致，否";
                Label_3B49:
                    if (((!Client.GetClientSide().m_Doctrine.IsWCS_Air_PlayerEditable(Client.GetClientScenario()) && !Client.GetClientSide().m_Doctrine.IsWCS_Surface_PlayerEditable(Client.GetClientScenario())) && !Client.GetClientSide().m_Doctrine.IsWCS_Submarine_PlayerEditable(Client.GetClientScenario())) && !Client.GetClientSide().m_Doctrine.IsWCSLand_PlayerEditable(Client.GetClientScenario()))
                    {
                        goto Label_5FC0;
                    }
                    int num6 = 1;
                    bool flag10 = true;
                    bool flag11 = true;
                    Doctrine._WeaponControlStatus? nullable29 = null;
                    Doctrine._WeaponControlStatus? nullable30 = null;
                    using (IEnumerator<Unit> enumerator6 = Client.GetClientSide().GetUnitReadOnlyCollection().GetEnumerator())
                    {
                        while (enumerator6.MoveNext())
                        {
                            Doctrine doctrine14;
                            ActiveUnit unit15;
                            Unit unit13 = enumerator6.Current;
                            if (!unit13.IsActiveUnit() || (unit13.GetSide(false) != Client.GetClientSide()))
                            {
                                goto Label_4D00;
                            }
                            if (unit13.IsWeapon)
                            {
                                continue;
                            }
                            if (num6 != 1)
                            {
                                goto Label_43AF;
                            }
                            ActiveUnit unit14 = (ActiveUnit)unit13;
                            if (unit14.m_Doctrine.WCS_AirHasNoValue())
                            {
                                nullable29 = null;
                            }
                            else
                            {
                                nullable = null;
                                nullable29 = unit14.m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            }
                            if (Information.IsNothing(nullable29))
                            {
                                if (unit14.m_Doctrine.WCS_SurfaceHasNoValue())
                                {
                                    goto Label_3D68;
                                }
                                goto Label_4D28;
                            }
                            if (unit14.m_Doctrine.WCS_SurfaceHasNoValue())
                            {
                                goto Label_4D30;
                            }
                            nullable4 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable = null;
                            nullable20 = unit14.m_Doctrine.GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : ((bool?)(nullable = null));
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_4D38;
                            }
                        Label_3D68:
                            if (Information.IsNothing(nullable29))
                            {
                                if (unit14.m_Doctrine.WCS_SubmarineHasNoValue())
                                {
                                    goto Label_3E6A;
                                }
                                goto Label_4D40;
                            }
                            if (unit14.m_Doctrine.WCS_SubmarineHasNoValue())
                            {
                                goto Label_4D48;
                            }
                            nullable8 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable = null;
                            nullable20 = unit14.m_Doctrine.GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : ((bool?)(nullable = null));
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_4D50;
                            }
                        Label_3E6A:
                            if (Information.IsNothing(nullable29))
                            {
                                if (unit14.m_Doctrine.WCS_LandHasNoValue())
                                {
                                    goto Label_3F6C;
                                }
                                goto Label_4D58;
                            }
                            if (unit14.m_Doctrine.WCS_LandHasNoValue())
                            {
                                goto Label_4D60;
                            }
                            nullable4 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable = null;
                            nullable20 = unit14.m_Doctrine.GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : ((bool?)(nullable = null));
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_4D68;
                            }
                        Label_3F6C:
                            doctrine14 = unit14.m_Doctrine;
                            Scenario scenario13 = Client.GetClientScenario();
                            flag2 = true;
                            if (doctrine14.GetDoctrine(scenario13, ref flag2).WCS_AirHasNoValue())
                            {
                                nullable30 = null;
                            }
                            else
                            {
                                Doctrine doctrine15 = unit14.m_Doctrine;
                                Scenario scenario14 = Client.GetClientScenario();
                                flag2 = true;
                                nullable = null;
                                nullable30 = doctrine15.GetDoctrine(scenario14, ref flag2).GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            }
                            if (Information.IsNothing(nullable30))
                            {
                                Doctrine doctrine16 = unit14.m_Doctrine;
                                Scenario scenario15 = Client.GetClientScenario();
                                flag2 = true;
                                if (doctrine16.GetDoctrine(scenario15, ref flag2).WCS_SurfaceHasNoValue())
                                {
                                    goto Label_411C;
                                }
                                goto Label_4D70;
                            }
                            Doctrine doctrine17 = unit14.m_Doctrine;
                            Scenario scenario16 = Client.GetClientScenario();
                            flag2 = true;
                            if (doctrine17.GetDoctrine(scenario16, ref flag2).WCS_SurfaceHasNoValue())
                            {
                                goto Label_4D78;
                            }
                            nullable8 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            Doctrine doctrine18 = unit14.m_Doctrine;
                            Scenario scenario17 = Client.GetClientScenario();
                            flag2 = true;
                            nullable = null;
                            nullable20 = doctrine18.GetDoctrine(scenario17, ref flag2).GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : ((bool?)(nullable = null));
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_4D7D;
                            }
                        Label_411C:
                            if (Information.IsNothing(nullable30))
                            {
                                Doctrine doctrine19 = unit14.m_Doctrine;
                                Scenario scenario18 = Client.GetClientScenario();
                                flag2 = true;
                                if (doctrine19.GetDoctrine(scenario18, ref flag2).WCS_SubmarineHasNoValue())
                                {
                                    goto Label_4263;
                                }
                                goto Label_4D82;
                            }
                            Doctrine doctrine20 = unit14.m_Doctrine;
                            Scenario scenario19 = Client.GetClientScenario();
                            flag2 = true;
                            if (doctrine20.GetDoctrine(scenario19, ref flag2).WCS_SubmarineHasNoValue())
                            {
                                goto Label_4D87;
                            }
                            nullable4 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            Doctrine doctrine21 = unit14.m_Doctrine;
                            Scenario scenario20 = Client.GetClientScenario();
                            flag2 = true;
                            nullable = null;
                            nullable20 = doctrine21.GetDoctrine(scenario20, ref flag2).GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : ((bool?)(nullable = null));
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_4D8C;
                            }
                        Label_4263:
                            if (Information.IsNothing(nullable30))
                            {
                                Doctrine doctrine22 = unit14.m_Doctrine;
                                Scenario scenario21 = Client.GetClientScenario();
                                flag2 = true;
                                if (doctrine22.GetDoctrine(scenario21, ref flag2).WCS_LandHasNoValue())
                                {
                                    goto Label_4D00;
                                }
                                goto Label_4D91;
                            }
                            Doctrine doctrine23 = unit14.m_Doctrine;
                            Scenario scenario22 = Client.GetClientScenario();
                            flag2 = true;
                            if (doctrine23.GetDoctrine(scenario22, ref flag2).WCS_LandHasNoValue())
                            {
                                goto Label_4D96;
                            }
                            nullable8 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            Doctrine doctrine24 = unit14.m_Doctrine;
                            Scenario scenario23 = Client.GetClientScenario();
                            flag2 = true;
                            nullable = null;
                            nullable20 = doctrine24.GetDoctrine(scenario23, ref flag2).GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : ((bool?)(nullable = null));
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (!nullable.GetValueOrDefault())
                            {
                                goto Label_4D00;
                            }
                            goto Label_4D9B;
                        Label_43AF:
                            unit15 = (ActiveUnit)unit13;
                            if (Information.IsNothing(nullable29))
                            {
                                if (!unit15.m_Doctrine.WCS_AirHasNoValue())
                                {
                                    flag10 = false;
                                }
                            }
                            else if (unit15.m_Doctrine.WCS_AirHasNoValue())
                            {
                                flag10 = false;
                            }
                            else
                            {
                                nullable4 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                nullable = null;
                                nullable20 = unit15.m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : ((bool?)(nullable = null));
                                nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                                if (nullable.GetValueOrDefault())
                                {
                                    flag10 = false;
                                }
                            }
                            if (Information.IsNothing(nullable29))
                            {
                                if (unit15.m_Doctrine.WCS_SurfaceHasNoValue())
                                {
                                    goto Label_45C4;
                                }
                                goto Label_4DA0;
                            }
                            if (unit15.m_Doctrine.WCS_SurfaceHasNoValue())
                            {
                                goto Label_4DA5;
                            }
                            nullable8 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable = null;
                            nullable20 = unit15.m_Doctrine.GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : ((bool?)(nullable = null));
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_4DAA;
                            }
                        Label_45C4:
                            if (Information.IsNothing(nullable29))
                            {
                                if (unit15.m_Doctrine.WCS_SubmarineHasNoValue())
                                {
                                    goto Label_46C6;
                                }
                                goto Label_4DAF;
                            }
                            if (unit15.m_Doctrine.WCS_SurfaceHasNoValue())
                            {
                                goto Label_4DB4;
                            }
                            nullable4 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable = null;
                            nullable20 = unit15.m_Doctrine.GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : ((bool?)(nullable = null));
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_4DB9;
                            }
                        Label_46C6:
                            if (Information.IsNothing(nullable29))
                            {
                                if (unit15.m_Doctrine.WCS_LandHasNoValue())
                                {
                                    goto Label_47C8;
                                }
                                goto Label_4DBE;
                            }
                            if (unit15.m_Doctrine.WCS_LandHasNoValue())
                            {
                                goto Label_4DC3;
                            }
                            nullable8 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable = null;
                            nullable20 = unit15.m_Doctrine.GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : ((bool?)(nullable = null));
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_4DC8;
                            }
                        Label_47C8:
                            if (Information.IsNothing(nullable30))
                            {
                                if (!((ActiveUnit)unit13).m_Doctrine.WCS_AirHasNoValue())
                                {
                                    flag11 = false;
                                }
                            }
                            else
                            {
                                Doctrine doctrine25 = ((ActiveUnit)unit13).m_Doctrine;
                                Scenario scenario24 = Client.GetClientScenario();
                                flag2 = true;
                                nullable = null;
                                if (Information.IsNothing(doctrine25.GetDoctrine(scenario24, ref flag2).GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false)))
                                {
                                    flag11 = false;
                                }
                                else
                                {
                                    nullable4 = nullable30.HasValue ? new byte?((byte)nullable30.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                    Doctrine doctrine26 = ((ActiveUnit)unit13).m_Doctrine;
                                    Scenario scenario25 = Client.GetClientScenario();
                                    flag2 = true;
                                    nullable = null;
                                    nullable20 = doctrine26.GetDoctrine(scenario25, ref flag2).GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                                    nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                                    nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : ((bool?)(nullable = null));
                                    nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                                    if (nullable.GetValueOrDefault())
                                    {
                                        flag11 = false;
                                    }
                                }
                            }
                            if (Information.IsNothing(nullable30))
                            {
                                Doctrine doctrine27 = unit15.m_Doctrine;
                                Scenario scenario26 = Client.GetClientScenario();
                                flag2 = true;
                                if (doctrine27.GetDoctrine(scenario26, ref flag2).WCS_SurfaceHasNoValue())
                                {
                                    goto Label_4A72;
                                }
                                goto Label_4DCD;
                            }
                            Doctrine doctrine28 = unit15.m_Doctrine;
                            Scenario scenario27 = Client.GetClientScenario();
                            flag2 = true;
                            if (doctrine28.GetDoctrine(scenario27, ref flag2).WCS_SurfaceHasNoValue())
                            {
                                goto Label_4DD2;
                            }
                            nullable8 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            Doctrine doctrine29 = unit15.m_Doctrine;
                            Scenario scenario28 = Client.GetClientScenario();
                            flag2 = true;
                            nullable = null;
                            nullable20 = doctrine29.GetDoctrine(scenario28, ref flag2).GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : ((bool?)(nullable = null));
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_4DD7;
                            }
                        Label_4A72:
                            if (Information.IsNothing(nullable30))
                            {
                                Doctrine doctrine30 = unit15.m_Doctrine;
                                Scenario scenario29 = Client.GetClientScenario();
                                flag2 = true;
                                if (doctrine30.GetDoctrine(scenario29, ref flag2).WCS_SubmarineHasNoValue())
                                {
                                    goto Label_4BB9;
                                }
                                goto Label_4DDC;
                            }
                            Doctrine doctrine31 = unit15.m_Doctrine;
                            Scenario scenario30 = Client.GetClientScenario();
                            flag2 = true;
                            if (doctrine31.GetDoctrine(scenario30, ref flag2).WCS_SubmarineHasNoValue())
                            {
                                goto Label_4DE1;
                            }
                            nullable4 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            Doctrine doctrine32 = unit15.m_Doctrine;
                            Scenario scenario31 = Client.GetClientScenario();
                            flag2 = true;
                            nullable = null;
                            nullable20 = doctrine32.GetDoctrine(scenario31, ref flag2).GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable8 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable4.HasValue & nullable8.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable8.GetValueOrDefault()) : ((bool?)(nullable = null));
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_4DE6;
                            }
                        Label_4BB9:
                            if (Information.IsNothing(nullable30))
                            {
                                Doctrine doctrine33 = unit15.m_Doctrine;
                                Scenario scenario32 = Client.GetClientScenario();
                                flag2 = true;
                                if (doctrine33.GetDoctrine(scenario32, ref flag2).WCS_LandHasNoValue())
                                {
                                    goto Label_4D00;
                                }
                                goto Label_4DEB;
                            }
                            Doctrine doctrine34 = unit15.m_Doctrine;
                            Scenario scenario33 = Client.GetClientScenario();
                            flag2 = true;
                            if (doctrine34.GetDoctrine(scenario33, ref flag2).WCS_LandHasNoValue())
                            {
                                goto Label_4DF0;
                            }
                            nullable8 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            Doctrine doctrine35 = unit15.m_Doctrine;
                            Scenario scenario34 = Client.GetClientScenario();
                            flag2 = true;
                            nullable = null;
                            nullable20 = doctrine35.GetDoctrine(scenario34, ref flag2).GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                            nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                            nullable10 = (nullable8.HasValue & nullable4.HasValue) ? new bool?(nullable8.GetValueOrDefault() == nullable4.GetValueOrDefault()) : ((bool?)(nullable = null));
                            nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                            if (nullable.GetValueOrDefault())
                            {
                                goto Label_4DF5;
                            }
                        Label_4D00:
                            num6++;
                            if (!flag10 && !flag11)
                            {
                                break;
                            }
                        }
                        goto Label_4E09;
                    Label_4D28:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4D30:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4D38:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4D40:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4D48:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4D50:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4D58:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4D60:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4D68:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4D70:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4D78:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4D7D:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4D82:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4D87:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4D8C:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4D91:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4D96:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4D9B:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4DA0:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4DA5:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4DAA:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4DAF:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4DB4:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4DB9:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4DBE:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4DC3:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4DC8:
                        flag10 = false;
                        goto Label_4E09;
                    Label_4DCD:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4DD2:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4DD7:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4DDC:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4DE1:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4DE6:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4DEB:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4DF0:
                        flag11 = false;
                        goto Label_4E09;
                    Label_4DF5:
                        flag11 = false;
                    }
                Label_4E09:
                    this.MenuItem_AO_WeaponContorlStatusForAllType_SelectUnit.Enabled = true;
                    if (flag10)
                    {
                        if (Information.IsNothing(nullable29))
                        {
                            this.MenuItem_AO_WCSFATSU_ForbidFire.Checked = false;
                            this.MenuItem_AO_WCSFATSU_LimitFire.Checked = false;
                            this.MenuItem_AO_WCSFATSU_FreeFire.Checked = false;
                            this.MenuItem_AO_WCSFATSU_SameAsSuperior.Checked = true;
                        }
                        else
                        {
                            nullable = (nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                            if (nullable.GetValueOrDefault())
                            {
                                this.MenuItem_AO_WCSFATSU_ForbidFire.Checked = false;
                                this.MenuItem_AO_WCSFATSU_LimitFire.Checked = false;
                                this.MenuItem_AO_WCSFATSU_FreeFire.Checked = true;
                                this.MenuItem_AO_WCSFATSU_SameAsSuperior.Checked = false;
                            }
                            else
                            {
                                nullable = (nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_AO_WCSFATSU_ForbidFire.Checked = true;
                                    this.MenuItem_AO_WCSFATSU_LimitFire.Checked = false;
                                    this.MenuItem_AO_WCSFATSU_FreeFire.Checked = false;
                                    this.MenuItem_AO_WCSFATSU_SameAsSuperior.Checked = false;
                                }
                                else
                                {
                                    this.MenuItem_AO_WCSFATSU_ForbidFire.Checked = false;
                                    this.MenuItem_AO_WCSFATSU_LimitFire.Checked = true;
                                    this.MenuItem_AO_WCSFATSU_FreeFire.Checked = false;
                                    this.MenuItem_AO_WCSFATSU_SameAsSuperior.Checked = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        this.MenuItem_AO_WCSFATSU_ForbidFire.Checked = false;
                        this.MenuItem_AO_WCSFATSU_LimitFire.Checked = false;
                        this.MenuItem_AO_WCSFATSU_FreeFire.Checked = false;
                        this.MenuItem_AO_WCSFATSU_SameAsSuperior.Checked = false;
                    }
                    if (flag11)
                    {
                        nullable = (nullable30.HasValue ? new byte?((byte)nullable30.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                        if (nullable.GetValueOrDefault())
                        {
                            this.MenuItem_AO_WCSFATSU_SameAsSuperior.Text = "与上级保持一致，自由开火";
                        }
                        else
                        {
                            nullable = (nullable30.HasValue ? new byte?((byte)nullable30.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                            if (nullable.GetValueOrDefault())
                            {
                                this.MenuItem_AO_WCSFATSU_SameAsSuperior.Text = "与上级保持一致，限制开火";
                            }
                            else
                            {
                                this.MenuItem_AO_WCSFATSU_SameAsSuperior.Text = "与上级保持一致，禁止开火";
                            }
                        }
                    }
                    else
                    {
                        this.MenuItem_AO_WCSFATSU_SameAsSuperior.Text = "与上级保持一致，多种方式";
                    }
                    num6 = 1;
                    flag10 = true;
                    unitArray2 = Client.GetClientSide().ActiveUnitArray;
                    for (num3 = 0; num3 < unitArray2.Length; num3++)
                    {
                        ActiveUnit unit18;
                        Unit unit16 = unitArray2[num3];
                        if (!unit16.IsActiveUnit() || (unit16.GetSide(false) != Client.GetClientSide()))
                        {
                            goto Label_5889;
                        }
                        if (unit16.IsWeapon)
                        {
                            continue;
                        }
                        if (num6 != 1)
                        {
                            goto Label_547E;
                        }
                        ActiveUnit unit17 = (ActiveUnit)unit16;
                        if (unit17.m_Doctrine.WCS_AirHasNoValue())
                        {
                            nullable29 = null;
                        }
                        else
                        {
                            nullable = null;
                            nullable29 = unit17.m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        }
                        if (Information.IsNothing(nullable29))
                        {
                            if (unit17.m_Doctrine.WCS_SurfaceHasNoValue())
                            {
                                goto Label_5278;
                            }
                            goto Label_58A4;
                        }
                        if (unit17.m_Doctrine.WCS_SurfaceHasNoValue())
                        {
                            goto Label_58A9;
                        }
                        nullable4 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit17.m_Doctrine.GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        byte? nullable31 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable4.HasValue & nullable31.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable31.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (nullable.GetValueOrDefault())
                        {
                            goto Label_58AE;
                        }
                    Label_5278:
                        if (Information.IsNothing(nullable29))
                        {
                            if (unit17.m_Doctrine.WCS_SubmarineHasNoValue())
                            {
                                goto Label_537A;
                            }
                            goto Label_58B3;
                        }
                        if (unit17.m_Doctrine.WCS_SubmarineHasNoValue())
                        {
                            goto Label_58B8;
                        }
                        nullable31 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit17.m_Doctrine.GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable31.HasValue & nullable4.HasValue) ? new bool?(nullable31.GetValueOrDefault() == nullable4.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (nullable.GetValueOrDefault())
                        {
                            goto Label_58BD;
                        }
                    Label_537A:
                        if (Information.IsNothing(nullable29))
                        {
                            if (unit17.m_Doctrine.WCS_LandHasNoValue())
                            {
                                goto Label_5889;
                            }
                            goto Label_58C2;
                        }
                        if (unit17.m_Doctrine.WCS_LandHasNoValue())
                        {
                            goto Label_58CC;
                        }
                        nullable4 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit17.m_Doctrine.GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable31 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable4.HasValue & nullable31.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable31.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (!nullable.GetValueOrDefault())
                        {
                            goto Label_5889;
                        }
                        goto Label_58C7;
                    Label_547E:
                        unit18 = (ActiveUnit)unit16;
                        if (Information.IsNothing(nullable29))
                        {
                            if (unit18.m_Doctrine.WCS_AirHasNoValue())
                            {
                                goto Label_5589;
                            }
                            goto Label_58D1;
                        }
                        if (unit18.m_Doctrine.WCS_AirHasNoValue())
                        {
                            goto Label_58D6;
                        }
                        nullable31 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit18.m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable31.HasValue & nullable4.HasValue) ? new bool?(nullable31.GetValueOrDefault() == nullable4.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (nullable.GetValueOrDefault())
                        {
                            goto Label_58DB;
                        }
                    Label_5589:
                        if (Information.IsNothing(nullable29))
                        {
                            if (unit18.m_Doctrine.WCS_SurfaceHasNoValue())
                            {
                                goto Label_568B;
                            }
                            goto Label_58E0;
                        }
                        if (unit18.m_Doctrine.WCS_SurfaceHasNoValue())
                        {
                            goto Label_58E5;
                        }
                        nullable4 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit18.m_Doctrine.GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable31 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable4.HasValue & nullable31.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable31.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (nullable.GetValueOrDefault())
                        {
                            goto Label_58EA;
                        }
                    Label_568B:
                        if (Information.IsNothing(nullable29))
                        {
                            if (unit18.m_Doctrine.WCS_SubmarineHasNoValue())
                            {
                                goto Label_578D;
                            }
                            goto Label_58EF;
                        }
                        if (unit18.m_Doctrine.WCS_SurfaceHasNoValue())
                        {
                            goto Label_58F4;
                        }
                        nullable31 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit18.m_Doctrine.GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable4 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable31.HasValue & nullable4.HasValue) ? new bool?(nullable31.GetValueOrDefault() == nullable4.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (nullable.GetValueOrDefault())
                        {
                            goto Label_58F9;
                        }
                    Label_578D:
                        if (Information.IsNothing(nullable29))
                        {
                            if (unit18.m_Doctrine.WCS_LandHasNoValue())
                            {
                                goto Label_5889;
                            }
                            goto Label_58FE;
                        }
                        if (unit18.m_Doctrine.WCS_LandHasNoValue())
                        {
                            goto Label_5908;
                        }
                        nullable4 = nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable = null;
                        nullable20 = unit18.m_Doctrine.GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                        nullable31 = nullable20.HasValue ? new byte?((byte)nullable20.GetValueOrDefault()) : ((byte?)(nullable3 = null));
                        nullable10 = (nullable4.HasValue & nullable31.HasValue) ? new bool?(nullable4.GetValueOrDefault() == nullable31.GetValueOrDefault()) : null;
                        nullable = nullable10.HasValue ? new bool?(!nullable10.GetValueOrDefault()) : nullable10;
                        if (nullable.GetValueOrDefault())
                        {
                            goto Label_5903;
                        }
                    Label_5889:
                        num6++;
                    }
                    goto Label_590B;
                Label_58A4:
                    flag10 = false;
                    goto Label_590B;
                Label_58A9:
                    flag10 = false;
                    goto Label_590B;
                Label_58AE:
                    flag10 = false;
                    goto Label_590B;
                Label_58B3:
                    flag10 = false;
                    goto Label_590B;
                Label_58B8:
                    flag10 = false;
                    goto Label_590B;
                Label_58BD:
                    flag10 = false;
                    goto Label_590B;
                Label_58C2:
                    flag10 = false;
                    goto Label_590B;
                Label_58C7:
                    flag10 = false;
                    goto Label_590B;
                Label_58CC:
                    flag10 = false;
                    goto Label_590B;
                Label_58D1:
                    flag10 = false;
                    goto Label_590B;
                Label_58D6:
                    flag10 = false;
                    goto Label_590B;
                Label_58DB:
                    flag10 = false;
                    goto Label_590B;
                Label_58E0:
                    flag10 = false;
                    goto Label_590B;
                Label_58E5:
                    flag10 = false;
                    goto Label_590B;
                Label_58EA:
                    flag10 = false;
                    goto Label_590B;
                Label_58EF:
                    flag10 = false;
                    goto Label_590B;
                Label_58F4:
                    flag10 = false;
                    goto Label_590B;
                Label_58F9:
                    flag10 = false;
                    goto Label_590B;
                Label_58FE:
                    flag10 = false;
                    goto Label_590B;
                Label_5903:
                    flag10 = false;
                    goto Label_590B;
                Label_5908:
                    flag10 = false;
                Label_590B:
                    this.MenuItem_AO_WeaponContorlStatusForAllType_AllUnit.Enabled = true;
                    if (flag10)
                    {
                        if (Information.IsNothing(nullable29))
                        {
                            this.MenuItem_AO_WCSFATAU_ForbidFire.Checked = false;
                            this.MenuItem_AO_WCSFATAU_LimitFire.Checked = false;
                            this.MenuItem_AO_WCSFATAU_FreeFire.Checked = false;
                            this.MenuItem_AO_WCSFATAU_SameAsSuperior.Checked = true;
                        }
                        else
                        {
                            nullable = (nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                            if (nullable.GetValueOrDefault())
                            {
                                this.MenuItem_AO_WCSFATAU_ForbidFire.Checked = false;
                                this.MenuItem_AO_WCSFATAU_LimitFire.Checked = false;
                                this.MenuItem_AO_WCSFATAU_FreeFire.Checked = true;
                                this.MenuItem_AO_WCSFATAU_SameAsSuperior.Checked = false;
                            }
                            else
                            {
                                nullable = (nullable29.HasValue ? new byte?((byte)nullable29.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_AO_WCSFATAU_ForbidFire.Checked = true;
                                    this.MenuItem_AO_WCSFATAU_LimitFire.Checked = false;
                                    this.MenuItem_AO_WCSFATAU_FreeFire.Checked = false;
                                    this.MenuItem_AO_WCSFATAU_SameAsSuperior.Checked = false;
                                }
                                else
                                {
                                    this.MenuItem_AO_WCSFATAU_ForbidFire.Checked = false;
                                    this.MenuItem_AO_WCSFATAU_LimitFire.Checked = true;
                                    this.MenuItem_AO_WCSFATAU_FreeFire.Checked = false;
                                    this.MenuItem_AO_WCSFATAU_SameAsSuperior.Checked = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        this.MenuItem_AO_WCSFATAU_ForbidFire.Checked = false;
                        this.MenuItem_AO_WCSFATAU_LimitFire.Checked = false;
                        this.MenuItem_AO_WCSFATAU_FreeFire.Checked = false;
                        this.MenuItem_AO_WCSFATAU_SameAsSuperior.Checked = false;
                    }
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable32 = Client.GetClientSide().m_Doctrine.GetWCS_AirDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable33 = Client.GetClientSide().m_Doctrine.GetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable34 = Client.GetClientSide().m_Doctrine.GetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    nullable = null;
                    Doctrine._WeaponControlStatus? nullable35 = Client.GetClientSide().m_Doctrine.GetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable, false, false);
                    nullable = (nullable32.HasValue ? new byte?((byte)nullable32.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                    if (nullable.GetValueOrDefault())
                    {
                        nullable = (nullable33.HasValue ? new byte?((byte)nullable33.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable34.HasValue ? new byte?((byte)nullable34.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable35.HasValue ? new byte?((byte)nullable35.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 0;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_AO_WCSFATAU_SameAsSuperior.Text = "与上级保持一致，自由开火";
                                    goto Label_5FC0;
                                }
                            }
                        }
                    }
                    nullable = (nullable32.HasValue ? new byte?((byte)nullable32.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                    if (nullable.GetValueOrDefault())
                    {
                        nullable = (nullable33.HasValue ? new byte?((byte)nullable33.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable34.HasValue ? new byte?((byte)nullable34.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable35.HasValue ? new byte?((byte)nullable35.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 1;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_AO_WCSFATAU_SameAsSuperior.Text = "与上级保持一致，限制开火";
                                    goto Label_5FC0;
                                }
                            }
                        }
                    }
                    nullable = (nullable32.HasValue ? new byte?((byte)nullable32.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                    if (nullable.GetValueOrDefault())
                    {
                        nullable = (nullable33.HasValue ? new byte?((byte)nullable33.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                        if (nullable.GetValueOrDefault())
                        {
                            nullable = (nullable34.HasValue ? new byte?((byte)nullable34.GetValueOrDefault()) : ((byte?)(nullable3 = null))) == 2;
                            if (nullable.GetValueOrDefault())
                            {
                                nullable = (nullable35.HasValue ? new byte?((byte)nullable35.GetValueOrDefault()) : 0) == 2;
                                if (nullable.GetValueOrDefault())
                                {
                                    this.MenuItem_AO_WCSFATAU_SameAsSuperior.Text = "与上级保持一致，禁止开火";
                                    goto Label_5FC0;
                                }
                            }
                        }
                    }
                    this.MenuItem_AO_WCSFATAU_SameAsSuperior.Text = "与上级保持一致，多种方式";
                Label_5FC0:
                    this.MenuItem_PlotCourse.Enabled = false;
                    this.MenuItem_GO_GroupBySelectedUnit.Enabled = false;
                    this.MenuItem_SensorsStatus.Enabled = false;
                    this.MenuItem_UnassignMissionUnit.Enabled = false;
                    this.MenuItem_AttackOptions.Enabled = false;
                    this.MenuItem_AO_AutoEngageTarget.Enabled = false;
                    this.MenuItem_AO_ManualEngageTarget.Enabled = false;
                    this.MenuItem_AO_LaunchOnlyBearing.Enabled = false;
                    bool flag12 = false;
                    this.MenuItem_AirRefuel.Enabled = false;
                    this.MenuItem_AirRefuel.Text = "加油(如果可能)";
                    this.MenuItem_ReturnToBase.Enabled = false;
                    this.MenuItem_SelectNewBase.Enabled = false;
                    this.MenuItem_AO_DropTarget.Enabled = false;
                    this.MenuItem_AO_DropAllTarget.Enabled = false;
                    this.MenuItem_HoldPositon_SelectedUnit.Enabled = false;
                    this.MenuItem_HoldPositon_SelectedUnit.Checked = false;
                    this.MenuItem_GO_SelectedUnitRemoveGroup.Enabled = false;
                    this.MenuItem_AssignMissionToUnit.Enabled = false;
                    this.MenuItem_AssignMissionToUnit.DropDownItems.Clear();
                    this.MenuItem_AR_SelectForMission.Enabled = false;
                    this.MenuItem_AR_SelectForMission.DropDownItems.Clear();
                    this.MenuItem_ASW_DropPassiveSonobuoy.Enabled = false;
                    this.MenuItem_ASW_DPS_Shallow.Enabled = false;
                    this.MenuItem_ASW_DPS_Deep.Enabled = false;
                    this.MenuItem_DropActiveSonobuoy.Enabled = false;
                    this.MenuItem_ASW_DAS_Shallow.Enabled = false;
                    this.MenuItem_ASW_DAS_Deep.Enabled = false;
                    this.MenuItem_DeployDippingSonar.Enabled = false;
                    this.MenuItem_QuickTumaround.Enabled = false;
                    foreach (Unit unit19 in Client.GetClientSide().GetUnitReadOnlyCollection())
                    {
                        bool flag14;
                        bool flag15;
                        if (!unit19.IsActiveUnit() || (unit19.GetSide(false) != Client.GetClientSide()))
                        {
                            continue;
                        }
                        if (!this.MenuItem_AttackOptions.Enabled)
                        {
                            this.MenuItem_AttackOptions.Enabled = true;
                        }
                        if (!this.MenuItem_Doctrine_RoE_EMCON_WRA.Enabled)
                        {
                            this.MenuItem_Doctrine_RoE_EMCON_WRA.Enabled = true;
                        }
                        str = "";
                        if (!this.MenuItem_AO_AutoEngageTarget.Enabled)
                        {
                            Side side5 = Client.GetClientSide();
                            Unit unit20 = unit19;
                            str = null;
                            if (GameGeneral.CanIssueOrdersToUnit(side5, unit20, false, ref str))
                            {
                                this.MenuItem_AO_AutoEngageTarget.Enabled = true;
                            }
                        }
                        if (!(this.MenuItem_AO_ManualEngageTarget.Enabled || unit19.IsWeapon))
                        {
                            this.MenuItem_AO_ManualEngageTarget.Enabled = true;
                            this.MenuItem_AO_LaunchOnlyBearing.Enabled = true;
                        }
                        if (!this.MenuItem_SensorsStatus.Checked)
                        {
                            Side side6 = Client.GetClientSide();
                            Unit unit21 = unit19;
                            str = null;
                            if (GameGeneral.CanIssueOrdersToUnit(side6, unit21, true, ref str))
                            {
                                this.MenuItem_SensorsStatus.Enabled = true;
                            }
                        }
                        if (!this.MenuItem_SensorsStatus.Checked)
                        {
                            Side side7 = Client.GetClientSide();
                            Unit unit22 = unit19;
                            str = null;
                            if (GameGeneral.CanIssueOrdersToUnit(side7, unit22, false, ref str))
                            {
                                this.MenuItem_PlotCourse.Enabled = true;
                            }
                        }
                        if (!this.MenuItem_UnassignMissionUnit.Checked)
                        {
                            Side side8 = Client.GetClientSide();
                            Unit unit23 = unit19;
                            str = null;
                            if (GameGeneral.CanIssueOrdersToUnit(side8, unit23, false, ref str))
                            {
                                goto Label_62BA;
                            }
                        }
                        this.MenuItem_UnassignMissionUnit.Enabled = false;
                        goto Label_62C6;
                    Label_62BA:
                        this.MenuItem_UnassignMissionUnit.Enabled = true;
                    Label_62C6:
                        if (!(this.MenuItem_GO_GroupBySelectedUnit.Checked || unit19.IsWeapon))
                        {
                            this.MenuItem_GO_GroupBySelectedUnit.Enabled = true;
                        }
                        if (!(this.MenuItem_AO_DropTarget.Enabled || unit19.IsWeapon))
                        {
                            this.MenuItem_AO_DropTarget.Enabled = ((ActiveUnit)unit19).GetAI().GetTargets().Length > 0;
                            this.MenuItem_AO_DropAllTarget.Enabled = this.MenuItem_AO_DropTarget.Enabled;
                        }
                        if (!(flag12 || unit19.IsWeapon))
                        {
                            flag12 = true;
                        }
                        if (!(this.MenuItem_ASW_DropPassiveSonobuoy.Enabled || unit19.IsWeapon))
                        {
                            this.MenuItem_ASW_DropPassiveSonobuoy.Enabled = false;
                            this.MenuItem_ASW_DPS_Shallow.Enabled = false;
                            this.MenuItem_ASW_DPS_Deep.Enabled = false;
                            this.MenuItem_DropActiveSonobuoy.Enabled = false;
                            this.MenuItem_ASW_DAS_Shallow.Enabled = false;
                            this.MenuItem_ASW_DAS_Deep.Enabled = false;
                            this.MenuItem_DeployDippingSonar.Enabled = false;
                        }
                        if (unit19.IsGroup)
                        {
                            if (((Group)unit19).GetGroupType() == Group.GroupType.AirGroup)
                            {
                                this.MenuItem_ReturnToBase.Enabled = true;
                                this.MenuItem_SelectNewBase.Enabled = true;
                            }
                            if (!(this.MenuItem_ReturnToBase.Enabled || (((Group)unit19).GetGroupType() != Group.GroupType.AirGroup)))
                            {
                                this.MenuItem_ReturnToBase.Enabled = true;
                                this.MenuItem_SelectNewBase.Enabled = true;
                            }
                        }
                        else
                        {
                            if (!this.MenuItem_ReturnToBase.Enabled)
                            {
                                this.MenuItem_ReturnToBase.Enabled = (unit19.IsAircraft || unit19.IsShip) || unit19.IsSubmarine;
                                this.MenuItem_SelectNewBase.Enabled = (unit19.IsAircraft || unit19.IsShip) || unit19.IsSubmarine;
                            }
                            if (!(this.MenuItem_AO_DropTarget.Enabled || unit19.IsWeapon))
                            {
                                this.MenuItem_AO_DropTarget.Enabled = ((ActiveUnit)unit19).GetAI().GetTargets().Length > 0;
                                this.MenuItem_AO_DropAllTarget.Enabled = this.MenuItem_AO_DropTarget.Enabled;
                            }
                            if (!(this.MenuItem_ASW_DropPassiveSonobuoy.Enabled || unit19.IsWeapon))
                            {
                                this.MenuItem_ASW_DropPassiveSonobuoy.Enabled = false;
                            }
                            if (!(this.MenuItem_ASW_DropPassiveSonobuoy.Enabled || unit19.IsWeapon))
                            {
                                this.MenuItem_ASW_DropPassiveSonobuoy.Enabled = false;
                                this.MenuItem_ASW_DPS_Shallow.Enabled = false;
                                this.MenuItem_ASW_DPS_Deep.Enabled = false;
                                this.MenuItem_DropActiveSonobuoy.Enabled = false;
                                this.MenuItem_ASW_DAS_Shallow.Enabled = false;
                                this.MenuItem_ASW_DAS_Deep.Enabled = false;
                                this.MenuItem_DeployDippingSonar.Enabled = false;
                            }
                        }
                        bool flag13 = false;
                        if (!unit19.IsAircraft && (!unit19.IsGroup || (((Group)unit19).GetGroupType() != Group.GroupType.AirGroup)))
                        {
                            if (unit19.IsShip || (unit19.IsGroup && (((Group)unit19).GetGroupType() == Group.GroupType.SurfaceGroup)))
                            {
                                flag14 = false;
                                if (this.MenuItem_AirRefuel.Enabled && flag14)
                                {
                                    flag15 = false;
                                    this.MenuItem_AirRefuel.Enabled = true;
                                    this.MenuItem_AirRefuel.Text = "补给/加油(不能空中加油)";
                                }
                                else if (!this.MenuItem_AirRefuel.Enabled)
                                {
                                    this.MenuItem_AirRefuel.Enabled = true;
                                    this.MenuItem_AirRefuel.Text = "补给(如果可能)";
                                    flag13 = true;
                                }
                            }
                        }
                        else if (this.MenuItem_AirRefuel.Enabled && flag13)
                        {
                            flag15 = false;
                            if (unit19.IsAircraft)
                            {
                                Aircraft aircraft4 = (Aircraft)unit19;
                                if (aircraft4.BoomRefuelling || aircraft4.ProbeRefuelling)
                                {
                                    flag15 = true;
                                }
                            }
                            else if (unit19.IsGroup && (((Group)unit19).GetGroupType() == Group.GroupType.AirGroup))
                            {
                                Aircraft aircraft5 = (Aircraft)((Group)unit19).GetGroupLead();
                                if (aircraft5.BoomRefuelling || aircraft5.ProbeRefuelling)
                                {
                                    flag15 = true;
                                }
                            }
                            if (flag15)
                            {
                                this.MenuItem_AirRefuel.Enabled = true;
                                this.MenuItem_AirRefuel.Text = "补给/加油(如果可能)";
                            }
                            else
                            {
                                this.MenuItem_AirRefuel.Enabled = true;
                                this.MenuItem_AirRefuel.Text = "补给/加油(不能空中加油)";
                            }
                        }
                        else
                        {
                            flag15 = false;
                            if (!this.MenuItem_AirRefuel.Enabled || !flag15)
                            {
                                if (unit19.IsAircraft)
                                {
                                    Aircraft aircraft6 = (Aircraft)unit19;
                                    if (aircraft6.BoomRefuelling || aircraft6.ProbeRefuelling)
                                    {
                                        this.MenuItem_AirRefuel.Enabled = true;
                                        this.MenuItem_AirRefuel.Text = "加油(如果可能)";
                                        flag14 = true;
                                        flag15 = true;
                                    }
                                    else if (!flag15)
                                    {
                                        this.MenuItem_AirRefuel.Text = "加油(不能空中加油)";
                                        flag14 = true;
                                    }
                                }
                                else if (unit19.IsGroup && (((Group)unit19).GetGroupType() == Group.GroupType.AirGroup))
                                {
                                    Aircraft aircraft7 = (Aircraft)((Group)unit19).GetGroupLead();
                                    if (aircraft7.BoomRefuelling || aircraft7.ProbeRefuelling)
                                    {
                                        this.MenuItem_AirRefuel.Enabled = true;
                                        this.MenuItem_AirRefuel.Text = "加油(如果可能)";
                                        flag14 = true;
                                        flag15 = true;
                                    }
                                    else if (!flag15)
                                    {
                                        this.MenuItem_AirRefuel.Text = "加油(不能空中加油)";
                                        flag14 = true;
                                    }
                                }
                            }
                        }
                    }
                    if (flag12)
                    {
                        if (!Client.GetHookedUnit().IsWeapon)
                        {
                            foreach (Mission mission3 in Client.GetClientSide().GetMissionCollection())
                            {
                                if (mission3.category == Mission.MissionCategory.TaskPool)
                                {
                                    continue;
                                }
                                new ToolStripMenuItem();
                                new ToolStripMenuItem();
                                ((ToolStripMenuItem)this.MenuItem_AssignMissionToUnit.DropDownItems.Add(mission3.Name, null, new EventHandler(this.method_67))).Tag = mission3;
                                if ((mission3.MissionClass != Mission._MissionClass.Support) && (mission3.MissionClass != Mission._MissionClass.Ferry))
                                {
                                    goto Label_69B1;
                                }
                                bool flag16 = false;
                                using (List<ActiveUnit>.Enumerator enumerator9 = mission3.GetUnitsAssignedToMe(Client.GetClientScenario()).GetEnumerator())
                                {
                                    while (enumerator9.MoveNext())
                                    {
                                        ActiveUnit unit24 = enumerator9.Current;
                                        if (unit24.IsAircraft)
                                        {
                                            if (((Aircraft)unit24).IsAirRefuelingCapable())
                                            {
                                                goto Label_695D;
                                            }
                                        }
                                        else if (unit24.IsShip && ((Ship)unit24).IsRefuel_Out())
                                        {
                                            goto Label_6962;
                                        }
                                    }
                                    goto Label_6974;
                                Label_695D:
                                    flag16 = true;
                                    goto Label_6974;
                                Label_6962:
                                    flag16 = true;
                                }
                            Label_6974:
                                if (flag16)
                                {
                                    new ToolStripMenuItem();
                                    ((ToolStripMenuItem)this.MenuItem_AR_SelectForMission.DropDownItems.Add(mission3.Name, null, new EventHandler(this.method_544))).Tag = mission3;
                                }
                            Label_69B1:
                                if (mission3.MissionClass == Mission._MissionClass.Strike)
                                {
                                    ((ToolStripMenuItem)this.MenuItem_AssignMissionToUnit.DropDownItems.Add(mission3.Name + " - Escort", null, new EventHandler(this.method_67))).Tag = mission3;
                                }
                            }
                            foreach (Side side9 in Client.GetClientScenario().GetSides())
                            {
                                if ((side9 != Client.GetClientSide()) && side9.IsFriendlyToSide(Client.GetClientSide()))
                                {
                                    foreach (Mission mission4 in side9.GetMissionCollection().OrderBy<Mission, string>(MissionFunc4))
                                    {
                                        if ((mission4.MissionClass != Mission._MissionClass.Support) && (mission4.MissionClass != Mission._MissionClass.Ferry))
                                        {
                                            continue;
                                        }
                                        bool flag17 = false;
                                        using (List<ActiveUnit>.Enumerator enumerator11 = mission4.GetUnitsAssignedToMe(Client.GetClientScenario()).GetEnumerator())
                                        {
                                            while (enumerator11.MoveNext())
                                            {
                                                ActiveUnit unit25 = enumerator11.Current;
                                                if (unit25.IsAircraft)
                                                {
                                                    if (((Aircraft)unit25).IsAirRefuelingCapable())
                                                    {
                                                        goto Label_6AFB;
                                                    }
                                                }
                                                else if (unit25.IsShip && ((Ship)unit25).IsRefuel_Out())
                                                {
                                                    goto Label_6B00;
                                                }
                                            }
                                            goto Label_6B12;
                                        Label_6AFB:
                                            flag17 = true;
                                            goto Label_6B12;
                                        Label_6B00:
                                            flag17 = true;
                                        }
                                    Label_6B12:
                                        if (flag17)
                                        {
                                            new ToolStripMenuItem();
                                            ((ToolStripMenuItem)this.MenuItem_AR_SelectForMission.DropDownItems.Add(mission4.Name + " (" + side9.GetSideName() + ")", null, new EventHandler(this.method_544))).Tag = mission4;
                                        }
                                    }
                                }
                            }
                        }
                        this.MenuItem_AssignMissionToUnit.Enabled = Client.GetClientSide().GetMissionCollection().Count > 0;
                        this.MenuItem_AR_SelectForMission.Enabled = this.MenuItem_AR_SelectForMission.DropDownItems.Count > 0;
                    }
                }
                catch (Exception exception)
                {
                    ProjectData.SetProjectError(exception);
                    Exception exception2 = exception;
                    exception2.Data.Add("Error at 200280", exception2.Message);
                    GameGeneral.LogException(ref exception2);
                    if (Debugger.IsAttached)
                    {
                        Debugger.Break();
                    }
                    ProjectData.ClearProjectError();
                }
            }
        }

    // Token: 0x060070CE RID: 28878 RVA: 0x003F3F94 File Offset: 0x003F2194
    private void method_61()
		{
			this.MenuItem_Battle.Visible = true;
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				try
				{
					this.MenuItem_ScenarioPackingPublish.Enabled = (Client.GetClientScenario().GetScenAttachments().Count > 0);
					if (Client.GetClientSide().GetUnitReadOnlyCollection().Count == 1 && !Information.IsNothing(Client.GetHookedUnit()))
					{
						this.MenuItem_UO_RenameUnit.Enabled = true;
						this.MenuItem_UO_EditWarplane.Enabled = true;
						this.MenuItem_UO_EditBerthedBoats.Enabled = true;
						this.MenuItem_UO_CopyUnit.Enabled = !Client.GetHookedUnit().IsGroup;
						this.MenuItem_UO_CloneUnit.Enabled = !Client.GetHookedUnit().IsGroup;
						this.MenuItem_UO_MoveUnit.Enabled = true;
						this.MenuItem_UO_DeleteUnit.Enabled = true;
						if (Client.GetHookedUnit().IsActiveUnit() && !Client.GetHookedUnit().IsGroup)
						{
							this.MenuItem_UO_UnitAutoDetected.Enabled = true;
							this.MenuItem_UO_UnitAutoDetected.Checked = ((ActiveUnit)Client.GetHookedUnit()).IsAutoDetectable(null);
						}
						else
						{
							this.MenuItem_UO_UnitAutoDetected.Enabled = false;
							this.MenuItem_UO_UnitAutoDetected.Checked = false;
						}
						if (!Information.IsNothing(Client.GetHookedUnit()))
						{
							if (Client.GetHookedUnit().IsFacility)
							{
								this.MenuItem_UO_SettingBearing.Enabled = true;
							}
							else
							{
								this.MenuItem_UO_SettingBearing.Enabled = false;
							}
						}
						else
						{
							this.MenuItem_UO_SettingBearing.Enabled = false;
						}
						if (Client.GetHookedUnit().IsFacility && !Client.GetHookedUnit().IsFixedFacility())
						{
							this.MenuItem_UO_HoldPositon.Enabled = true;
							this.MenuItem_UO_HoldPositon.Checked = ((Facility)Client.GetHookedUnit()).GetFacilityAI().HoldPosition;
						}
						else
						{
							this.MenuItem_UO_HoldPositon.Enabled = false;
							this.MenuItem_UO_HoldPositon.Checked = false;
						}
						if (Client.GetHookedUnit().IsAircraft)
						{
							if (!Information.IsNothing(((Aircraft)Client.GetHookedUnit()).GetLoadout()))
							{
								this.MenuItem_UO_SetOilAndHangTime.Enabled = true;
							}
							else
							{
								this.MenuItem_UO_SetOilAndHangTime.Enabled = false;
							}
						}
						else
						{
							this.MenuItem_UO_SetOilAndHangTime.Enabled = false;
						}
					}
					else
					{
						this.MenuItem_UO_RenameUnit.Enabled = false;
						this.MenuItem_UO_EditWarplane.Enabled = false;
						this.MenuItem_UO_EditBerthedBoats.Enabled = false;
						this.MenuItem_UO_CopyUnit.Enabled = false;
						this.MenuItem_UO_MoveUnit.Enabled = false;
						this.MenuItem_UO_DeleteUnit.Enabled = false;
						this.MenuItem_UO_SetOilAndHangTime.Enabled = false;
						this.MenuItem_UO_UnitAutoDetected.Enabled = false;
						this.MenuItem_UO_UnitAutoDetected.Checked = false;
						this.MenuItem_UO_HoldPositon.Enabled = false;
						this.MenuItem_UO_HoldPositon.Checked = false;
						this.MenuItem_UO_SettingBearing.Enabled = false;
						foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
						{
							if (!this.MenuItem_UO_UnitAutoDetected.Checked && current.IsActiveUnit() && !current.IsGroup)
							{
								this.MenuItem_UO_UnitAutoDetected.Checked = ((ActiveUnit)current).IsAutoDetectable(null);
							}
							if (!this.MenuItem_UO_UnitAutoDetected.Enabled && current.IsActiveUnit() && !current.IsGroup)
							{
								this.MenuItem_UO_UnitAutoDetected.Enabled = true;
							}
							if (!this.MenuItem_UO_SettingBearing.Enabled)
							{
								if (!Information.IsNothing(Client.GetHookedUnit()))
								{
									if (Client.GetHookedUnit().IsFacility)
									{
										this.MenuItem_UO_SettingBearing.Enabled = true;
									}
									else
									{
										this.MenuItem_UO_SettingBearing.Enabled = false;
									}
								}
								else
								{
									this.MenuItem_UO_SettingBearing.Enabled = false;
								}
							}
							if (!this.MenuItem_UO_HoldPositon.Enabled)
							{
								if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsFacility && !Client.GetHookedUnit().IsFixedFacility())
								{
									this.MenuItem_UO_HoldPositon.Enabled = true;
									this.MenuItem_UO_HoldPositon.Checked = ((Facility)Client.GetHookedUnit()).GetFacilityAI().HoldPosition;
								}
								else
								{
									this.MenuItem_UO_HoldPositon.Enabled = false;
									this.MenuItem_UO_HoldPositon.Checked = false;
								}
							}
						}
					}
					this.MenuItem_IsolatedUnitView.Enabled = (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit() && (Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit || ((ActiveUnit)Client.GetHookedUnit()).GetCommStuff().IsNotOutOfComms()));
					this.MenuItem_IsolatedUnitView.Checked = !string.IsNullOrEmpty(Client.GetMap().GetIsolatedPOVObjectID());
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200282", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060070CF RID: 28879 RVA: 0x003F4490 File Offset: 0x003F2690
		private void method_62()
		{
			if (Client.GetMap().ViewMode == MapProfile._ViewMode.GroupMode)
			{
				this.MenuItem_SwitchToUnitView.Text = "切换到作战单元视图";
			}
			else
			{
				this.MenuItem_SwitchToUnitView.Text = "切换到编组视图";
			}
			if (this.bool_5)
			{
				this.MenuItem_TrackSelectedUnit.Checked = true;
			}
			else
			{
				this.MenuItem_TrackSelectedUnit.Checked = false;
			}
		}

		// Token: 0x060070D0 RID: 28880 RVA: 0x0002F03E File Offset: 0x0002D23E
		private void method_63()
		{
			if (Client.GetCommandOrder() == Client._CommandOrder.ViewRangeBearing)
			{
				this.MenuItem_DirectionRangeMeasure.Checked = true;
			}
			else
			{
				this.MenuItem_DirectionRangeMeasure.Checked = false;
			}
			this.MenuItem_MessageOutputWindow.Checked = SimConfiguration.gameOptions.IsMessageLogInWindow();
		}

		// Token: 0x060070D1 RID: 28881 RVA: 0x003F44F8 File Offset: 0x003F26F8
		private void method_64()
		{
			Configuration.EnumRunStop @enum = Client.GetConfiguration().GetSimStatus();
			if (@enum == Configuration.EnumRunStop.const_Stop)
			{
				this.MenuItem_StartOrRecover.Checked = false;
				this.MenuItem_StartOrRecover.Text = "启动/恢复";
				this.MenuItem_StartOrRecover.Image = Image.FromFile(Application.StartupPath + "\\Symbols\\Menu\\Play.gif");
			}
			else if (@enum == Configuration.EnumRunStop.const_Run)
			{
				this.MenuItem_StartOrRecover.Checked = true;
				this.MenuItem_StartOrRecover.Text = "停止/暂停";
				this.MenuItem_StartOrRecover.Image = Image.FromFile(Application.StartupPath + "\\Symbols\\Menu\\Stop.gif");
			}
		}

		// Token: 0x060070D2 RID: 28882 RVA: 0x0002F07C File Offset: 0x0002D27C
		private void method_65()
		{
			if (Client.GetClientSide().GetUnitReadOnlyCollection().Count != 1)
			{
				this.MenuItem_Rename.Enabled = false;
			}
			else
			{
				this.MenuItem_Rename.Enabled = true;
			}
		}

		// Token: 0x060070D3 RID: 28883 RVA: 0x003F4598 File Offset: 0x003F2798
		private void MenuItem_Unit_AssignMissionToUnit_Click(object sender, EventArgs e)
		{
			Collection<ActiveUnit> collection = new Collection<ActiveUnit>();
			foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
			{
				if (current.IsActiveUnit() && current.GetSide(false) == Client.GetClientSide() && !current.IsWeapon)
				{
					collection.Add((ActiveUnit)current);
					((ActiveUnit)current).GetNavigator().SupportMission_NextRefPoint = null;
				}
			}
			ToolStripMenuItem toolStripMenuItem = sender as ToolStripMenuItem;
			Mission mission_ = (Mission)toolStripMenuItem.Tag;
			bool flag = Strings.InStr(toolStripMenuItem.Text, " - Escort", CompareMethod.Binary) != 0;
			this.AssignToMission(RuntimeHelpers.GetObjectValue(sender), ref collection, ref mission_, ref flag);
			if (!flag)
			{
				StrikePlanner.smethod_0(Client.GetClientScenario(), mission_, ref collection, true);
			}
			this.method_3().method_2(Client.GetClientScenario(), Client.GetClientSide(), Client.GetHookedUnit(), false);
		}

		// Token: 0x060070D4 RID: 28884 RVA: 0x003F4698 File Offset: 0x003F2898
		private void method_67(object sender, EventArgs e)
		{
			Collection<ActiveUnit> collection = new Collection<ActiveUnit>();
			if (Client.GetClientSide().GetUnitReadOnlyCollection().Count > 0)
			{
				using (IEnumerator<Unit> enumerator = Client.GetClientSide().GetUnitReadOnlyCollection().GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						Unit current = enumerator.Current;
						if (current.IsActiveUnit() && current.GetSide(false) == Client.GetClientSide() && !current.IsWeapon)
						{
							collection.Add((ActiveUnit)current);
							((ActiveUnit)current).GetNavigator().SupportMission_NextRefPoint = null;
						}
					}
					goto IL_EF;
				}
			}
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit() && !Client.GetHookedUnit().IsWeapon && Client.GetHookedUnit().GetSide(false) == Client.GetClientSide())
			{
				collection.Add((ActiveUnit)Client.GetHookedUnit());
				((ActiveUnit)Client.GetHookedUnit()).GetNavigator().SupportMission_NextRefPoint = null;
			}
			IL_EF:
			ToolStripMenuItem toolStripMenuItem = sender as ToolStripMenuItem;
			Mission mission_ = (Mission)toolStripMenuItem.Tag;
			bool flag = Strings.InStr(toolStripMenuItem.Text, " - Escort", CompareMethod.Binary) != 0;
			this.AssignToMission(RuntimeHelpers.GetObjectValue(sender), ref collection, ref mission_, ref flag);
			if (!flag)
			{
				StrikePlanner.smethod_0(Client.GetClientScenario(), mission_, ref collection, true);
			}
			this.RefreshMap();
		}

		// Token: 0x060070D5 RID: 28885 RVA: 0x003F47FC File Offset: 0x003F29FC
		private void WorldMapBox_MouseEnter(object sender, EventArgs e)
		{
			Client._CommandOrder commandOrder = Client.GetCommandOrder();
			if (commandOrder != Client._CommandOrder.None)
			{
				if (commandOrder != Client._CommandOrder.AddUnit)
				{
					if (commandOrder == Client._CommandOrder.AddNewWayPoint)
					{
						this.WorldMapBox.Cursor = Cursors.Cross;
					}
				}
				else
				{
					this.WorldMapBox.Cursor = Cursors.Hand;
				}
			}
			else
			{
				this.WorldMapBox.Cursor = Cursors.Default;
			}
			this.method_173();
			this.timer_1.Start();
		}

		// Token: 0x060070D6 RID: 28886 RVA: 0x0002F0AC File Offset: 0x0002D2AC
		private void Click_NewScenario(object sender, EventArgs e)
		{
			if (Interaction.MsgBox("您确定吗?所有当前想定未保存的进展都将丢失.", MsgBoxStyle.OkCancel, null) == MsgBoxResult.Ok)
			{
				this.method_457();
				Client.smethod_63();
				Client.b_Completed = true;
				Client.GetConfiguration().SetGameMode(Configuration._GameMode.Edit);
				this.RefreshMap();
			}
		}

		// Token: 0x060070D7 RID: 28887 RVA: 0x003F486C File Offset: 0x003F2A6C
		private void BtnClick_StartOrRecover(object sender, EventArgs e)
		{
			Configuration.EnumRunStop @enum = Client.GetConfiguration().GetSimStatus();
			if (@enum == Configuration.EnumRunStop.const_Stop)
			{
				Client.GetConfiguration().SetSimRunMode();
			}
			else if (@enum == Configuration.EnumRunStop.const_Run)
			{
				Client.GetConfiguration().SetSimStopMode();
			}
		}

		// Token: 0x060070D8 RID: 28888 RVA: 0x003F48AC File Offset: 0x003F2AAC
		private void Click_SaveAs(object sender, EventArgs e)//另存为
        {
			if (Information.IsNothing(Client.GetClientSide()))
			{
				Interaction.MsgBox("您至少创建一个推演方才能保存想定.", MsgBoxStyle.OkOnly, "不存在推演方!");
			}
			else
			{
				if (Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit)
				{
					this.saveFileDialog_0.Title = "保存想定";
				}
				else
				{
					this.saveFileDialog_0.Title = "保存推演";
				}
				base.Enabled = false;
				if (!Information.IsNothing(Client.GetClientScenario().FileName))
				{
					if (Operators.CompareString(Client.string_3, null, false) == 0)
					{
						this.saveFileDialog_0.InitialDirectory = GameGeneral.strScenariosDir;
						this.saveFileDialog_0.FileName = Class2529.smethod_1(Client.GetClientScenario().GetScenarioTitle());
					}
					else
					{
						this.saveFileDialog_0.InitialDirectory = Path.GetDirectoryName(Client.string_3);
						this.saveFileDialog_0.FileName = Client.string_3;
					}
					bool flag;
					if (flag = (Client.GetConfiguration().GetSimStatus() == Configuration.EnumRunStop.const_Run))
					{
						Client.GetConfiguration().SetSimStopMode();
					}
					this.saveFileDialog_0.AddExtension = true;
					if (Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit)
					{
						this.saveFileDialog_0.Filter = "CommandX想定文件(*.scen)|*.scen|CommandX保存推演 (*.save)|*.save|所有文件 (*.*)|*.*";
					}
					else
					{
						this.saveFileDialog_0.Filter = "CommandX保存推演(*.save)|*.save|CommandX想定文件(*.scen)|*.scen|所有文件 (*.*)|*.*";
					}
					if (string.IsNullOrEmpty(this.saveFileDialog_0.InitialDirectory))
					{
						this.saveFileDialog_0.InitialDirectory = GameGeneral.strScenariosDir;
					}
					switch (this.saveFileDialog_0.ShowDialog())
					{
					case DialogResult.OK:
						Client.SaveTempScenarioFile(false, "", false);
						base.Enabled = true;
						Client.string_3 = this.saveFileDialog_0.FileName;
						break;
					case DialogResult.Cancel:
						base.Enabled = true;
						break;
					case DialogResult.Abort:
						base.Enabled = true;
						break;
					case DialogResult.No:
						base.Enabled = true;
						break;
					}
					Client.IssueOrdersToUnit(Client._CommandOrder.None);
					if (flag)
					{
						Client.GetConfiguration().SetSimRunMode();
					}
				}
				else
				{
					Client.IssueOrdersToUnit(Client._CommandOrder.SaveScenario);
				}
			}
		}

		// Token: 0x060070D9 RID: 28889 RVA: 0x0002F0E4 File Offset: 0x0002D2E4
		private void Click_AU_AddUnit(object sender, EventArgs e)
		{
			Client.IssueOrdersToUnit(Client._CommandOrder.AddUnit);
		}

		// Token: 0x060070DA RID: 28890 RVA: 0x0002F0EC File Offset: 0x0002D2EC
		private void method_73(object sender, EventArgs e)
		{
			base.Enabled = true;
		}

		// Token: 0x060070DB RID: 28891 RVA: 0x003F4AA8 File Offset: 0x003F2CA8
		private void WorldMapBox_Paint(object sender, PaintEventArgs e)
		{
			try
			{
				this.ViewRangeBearing(e.Graphics);
				if (this.method_9())
				{
					this.method_93(e.Graphics);
				}
				if (!Information.IsNothing(Client.GetClientSide()))
				{
					this.method_106(e.Graphics);
					if (!string.IsNullOrEmpty(Client.GetMap().GetIsolatedPOVObjectID()) && Client.GetClientScenario().GetActiveUnits().ContainsKey(Client.GetMap().GetIsolatedPOVObjectID()))
					{
						string name = Client.GetClientScenario().GetActiveUnits()[Client.GetMap().GetIsolatedPOVObjectID()].Name;
						this.DrawTextString(5, this.label_1.Height + 60, "隔离视图: " + name, e.Graphics, Color.White.ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 24f, FontStyle.Regular));
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200127", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				this.method_317(this.WorldMapBox);
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070DC RID: 28892 RVA: 0x003F4BE8 File Offset: 0x003F2DE8
		private GraphicsPath method_75(GraphicsPath graphicsPath_1)
		{
			try
			{
				MainForm.Class2492 @class = new MainForm.Class2492(null);
				GraphicsPathIterator graphicsPathIterator = new GraphicsPathIterator(graphicsPath_1);
				List<GraphicsPath> list = new List<GraphicsPath>();
				GraphicsPath graphicsPath = new GraphicsPath();
				while (true)
				{
					GraphicsPath graphicsPath2 = new GraphicsPath();
					bool flag = false;
					if (graphicsPathIterator.NextSubpath(graphicsPath2, out flag) == 0)
					{
						break;
					}
					list.Add(graphicsPath2);
				}
				IEnumerable<List<GraphicsPath>> source = Misc.smethod_62(list, 100);
				@class.concurrentDictionary_0 = new ConcurrentDictionary<double, List<IntPoint>>();
				Parallel.ForEach<List<GraphicsPath>>(source, new Action<List<GraphicsPath>>(@class.method_0));
				if (@class.concurrentDictionary_0.Count > 0)
				{
					Class2363 class2 = new Class2363(0);
					foreach (List<IntPoint> current in @class.concurrentDictionary_0.Values)
					{
						class2.method_7(current, Enum163.const_1, true);
					}
					List<List<IntPoint>> list2 = new List<List<IntPoint>>();
					class2.method_20(Enum162.const_1, list2, Enum164.const_1, Enum164.const_1);
					if (list2.Count > 0)
					{
						foreach (List<IntPoint> current2 in list2)
						{
							graphicsPath.AddPolygon(current2.Select(MainForm.IntPointFunc6).ToArray<PointF>());
						}
					}
				}
				graphicsPath_1 = graphicsPath;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200128", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
			return graphicsPath_1;
		}

		// Token: 0x060070DD RID: 28893 RVA: 0x0002F0F5 File Offset: 0x0002D2F5
		private void method_76(LoggedMessage loggedMessage_0, ref System.Drawing.Font font_8, ref SolidBrush solidBrush_1)
		{
			font_8 = loggedMessage_0.method_12((System.Drawing.Font)font_8.Clone());
			solidBrush_1 = new SolidBrush(loggedMessage_0.method_11());
		}

		// Token: 0x060070DE RID: 28894 RVA: 0x003F4DC0 File Offset: 0x003F2FC0
		private void method_77(Graphics graphics_0)
		{
			try
			{
				IEnumerable<LoggedMessage> enumerable = Client.GetClientSide().GetLoggedMessageList(Client.GetClientScenario()).ToList<LoggedMessage>().OrderByDescending(MainForm.LoggedMessageFunc7).Take(20);
				int num = (int)Math.Round((double)this.WorldMapBox.Height / 2.0);
				this.int_12 = (int)Math.Round((double)this.WorldMapBox.Width / 3.0);
				if (enumerable.Count<LoggedMessage>() != 0)
				{
					this.int_11 = this.WorldMapBox.Height - 12;
					foreach (LoggedMessage current in enumerable)
					{
						this.method_76(current, ref this.font_7, ref this.solidBrush_0);
						string text = current.TStamp.ToLongTimeString() + " - " + Class266.smethod_0(current.Text);
						System.Drawing.Font font = this.font_7;
						SizeF layoutArea = new SizeF((float)this.int_12, 2000f);
						StringFormat genericTypographic = StringFormat.GenericTypographic;
						int num2 = 0;
						graphics_0.MeasureString(text, font, layoutArea, genericTypographic, out num2, out this.int_10);
						this.int_11 -= 16 * this.int_10;
					}
					if (SimConfiguration.gameOptions.GetMapCursorBox() == Configuration.GameOptions._MapCursorBox.const_1)
					{
						this.int_11 -= 22;
					}
					if (this.int_11 < num)
					{
						this.int_11 = num;
					}
					if (SimConfiguration.gameOptions.IsMessageLogCanvas())
					{
						Point[] points = new Point[]
						{
							new Point(3, this.int_11 - 3),
							new Point(this.int_12, this.int_11 - 3),
							new Point(this.int_12, this.WorldMapBox.Height),
							new Point(3, this.WorldMapBox.Height)
						};
						this.color_7 = Color.Gray;
						this.graphicsPath_0 = new GraphicsPath();
						this.graphicsPath_0.AddPolygon(points);
						try
						{
							graphics_0.FillPolygon(new SolidBrush(Color.FromArgb(130, this.color_7)), points);
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception ex2 = ex;
							ex2.Data.Add("Error at 200234980572304893487", ex2.Message);
							GameGeneral.LogException(ref ex2);
							if (Debugger.IsAttached)
							{
								Debugger.Break();
							}
							ProjectData.ClearProjectError();
						}
					}
					foreach (LoggedMessage current2 in enumerable)
					{
						this.method_76(current2, ref this.font_7, ref this.solidBrush_0);
						graphics_0.DrawString(current2.TStamp.ToLongTimeString() + " - " + Class266.smethod_0(current2.Text), this.font_7, new SolidBrush(Color.Black), new Rectangle(6, this.int_11 + 1, this.int_12, 2000), StringFormat.GenericTypographic);
						graphics_0.DrawString(current2.TStamp.ToLongTimeString() + " - " + Class266.smethod_0(current2.Text), this.font_7, this.solidBrush_0, new Rectangle(5, this.int_11, this.int_12, 2000), StringFormat.GenericTypographic);
						string text2 = current2.TStamp.ToLongTimeString() + " - " + Class266.smethod_0(current2.Text);
						System.Drawing.Font font2 = this.font_7;
						SizeF layoutArea2 = new SizeF((float)this.int_12, 2000f);
						StringFormat genericTypographic2 = StringFormat.GenericTypographic;
						int num2 = 0;
						graphics_0.MeasureString(text2, font2, layoutArea2, genericTypographic2, out num2, out this.int_10);
						this.int_11 += 16 * this.int_10;
					}
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200129", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070DF RID: 28895 RVA: 0x003F5274 File Offset: 0x003F3474
		public void DrawReferencePoints(Graphics graphics_0)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				try
				{
					Pen pen = null;
					byte b = 0;
					switch (SimConfiguration.gameOptions.GetRefPointVisibility())
					{
					case Configuration.GameOptions._RefPointVisibility.const_0:
						pen = new Pen(Color.White, 1f);
						b = 4;
						break;
					case Configuration.GameOptions._RefPointVisibility.const_1:
						pen = new Pen(Color.Gray, 1f);
						b = 2;
						break;
					case Configuration.GameOptions._RefPointVisibility.const_2:
						return;
					}
					Pen pen2 = new Pen(Color.Yellow, 2f);
					foreach (ReferencePoint current in Client.GetClientSide().GetReferencePoints())
					{
						if (!Information.IsNothing(current))
						{
							try
							{
								double latitude = current.GetLatitude();
								double longitude = current.GetLongitude();
								if (WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, latitude, longitude))
								{
									int num = 0;
									int num2 = 0;
									WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, latitude, longitude, ref num, ref num2);
									if (current.IsLocked)
									{
										Bitmap image;
										if (current.IsSelected())
										{
											image = Client.dictionary_0["LockedRP_selected.png"];
										}
										else
										{
											image = Client.dictionary_0["LockedRP.png"];
										}
										try
										{
											graphics_0.DrawImage(image, num - 8, num2 - 8);
											if (current.IsSelected())
											{
												this.DrawTextString(num + 5, num2, current.Name, graphics_0, 0, StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 9f, FontStyle.Bold));
											}
											continue;
										}
										catch (Exception ex)
										{
											ProjectData.SetProjectError(ex);
											Exception ex2 = ex;
											ex2.Data.Add("Error at 200130", ex2.Message);
											GameGeneral.LogException(ref ex2);
											if (Debugger.IsAttached)
											{
												Debugger.Break();
											}
											ProjectData.ClearProjectError();
											continue;
										}
									}
									if (current.IsSelected())
									{
										graphics_0.DrawPolygon(pen2, new Point[]
										{
											new Point(num - (int)b, num2),
											new Point(num, num2 - (int)b),
											new Point(num + (int)b, num2),
											new Point(num, num2 + (int)b),
											new Point(num - (int)b, num2)
										});
										string text = current.Name;
										if (!Information.IsNothing(current.IsRelativeToUnit))
										{
											if (current.BearingType == ReferencePoint.OrientationType.Fixed)
											{
												text = string.Concat(new string[]
												{
													"[F]",
													current.Name,
													" (",
													current.IsRelativeToUnit.Name,
													")"
												});
											}
											else
											{
												text = string.Concat(new string[]
												{
													"[R]",
													current.Name,
													" (",
													current.IsRelativeToUnit.Name,
													")"
												});
											}
										}
										else
										{
											text = current.Name;
										}
										this.DrawTextString(num + 5, num2, text, graphics_0, 0, StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 9f, FontStyle.Bold));
									}
									else
									{
										graphics_0.DrawLine(pen, num - (int)b, num2 - (int)b, num + (int)b, num2 + (int)b);
										graphics_0.DrawLine(pen, num - (int)b, num2 + (int)b, num + (int)b, num2 - (int)b);
									}
								}
							}
							catch (Exception ex3)
							{
								ProjectData.SetProjectError(ex3);
								Exception ex4 = ex3;
								ex4.Data.Add("Error at 200131", ex4.Message);
								GameGeneral.LogException(ref ex4);
								if (Debugger.IsAttached)
								{
									Debugger.Break();
								}
								ProjectData.ClearProjectError();
							}
						}
					}
				}
				catch (Exception ex5)
				{
					ProjectData.SetProjectError(ex5);
					Exception ex6 = ex5;
					ex6.Data.Add("Error at 200534", ex6.Message);
					GameGeneral.LogException(ref ex6);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060070E0 RID: 28896 RVA: 0x003F56E0 File Offset: 0x003F38E0
		public void MapBoxResize()
		{
			if (Client.GetClientScenario().GetCurrentTime(false).Year > 1990)
			{
				if (!Information.IsNothing(this.class2001_0))
				{
					this.class2001_0.IsLayerBordersShown = false;
				}
				this.class2001_1.IsLayerBordersShown = Client.GetMap().IsLayerBordersShown();
			}
			else
			{
				this.class2001_0.IsLayerBordersShown = Client.GetMap().IsLayerBordersShown();
				this.class2001_1.IsLayerBordersShown = false;
			}
			using (List<TiledPlacenameSet>.Enumerator enumerator = this.m_TiledPlacenameSets.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					enumerator.Current.SetIsOn(SimConfiguration.gameOptions.GetPlacenameVisibility());
				}
			}
			TimeKeeper.smethod_1(Client.GetClientScenario().GetCurrentTime(false));
			Client.m_WorldWindow.Refresh();
			try
			{
				this.method_197();
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200132", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
				return;
			}
			this.RefreshMap();
		}

		// Token: 0x060070E1 RID: 28897 RVA: 0x0002F118 File Offset: 0x0002D318
		private void Click_LoadScenario(object sender, EventArgs e)
		{
			this.method_457();
			if (Client.GetConfiguration().GetSimStatus() == Configuration.EnumRunStop.const_Run)
			{
				Client.GetConfiguration().SetSimStopMode();
			}
			CommandFactory.GetCommandMain().GetLoadScenario().Show();
		}

		// Token: 0x060070E2 RID: 28898 RVA: 0x0002F14B File Offset: 0x0002D34B
		private void Click_ScenarioDescribe(object sender, EventArgs e)
		{
			base.Enabled = false;
			Client.IssueOrdersToUnit(Client._CommandOrder.EditScenario);
		}

		// Token: 0x060070E3 RID: 28899 RVA: 0x0002F15A File Offset: 0x0002D35A
		private void SetGraphicsParameters(Graphics graphics_0)
		{
			graphics_0.InterpolationMode = InterpolationMode.Low;
			graphics_0.SmoothingMode = SmoothingMode.HighQuality;
			graphics_0.PixelOffsetMode = PixelOffsetMode.None;
			graphics_0.CompositingQuality = CompositingQuality.HighQuality;
			graphics_0.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
		}

		// Token: 0x060070E4 RID: 28900 RVA: 0x003F581C File Offset: 0x003F3A1C
		private SolidBrush GetSolidBrush(Color color_8)
		{
			SolidBrush solidBrush;
			if (this.dictionary_3.ContainsKey(color_8))
			{
				solidBrush = this.dictionary_3[color_8];
			}
			else
			{
				solidBrush = new SolidBrush(Color.FromArgb(25, color_8));
				this.dictionary_3.Add(color_8, solidBrush);
			}
			return solidBrush;
		}

		// Token: 0x060070E5 RID: 28901 RVA: 0x003F5868 File Offset: 0x003F3A68
		private void method_84(List<ReferencePoint> list_10, Color color_8, Graphics graphics_0)
		{
			try
			{
				Collection<Point> collection = new Collection<Point>();
				foreach (ReferencePoint current in list_10)
				{
					Point item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(), current.GetLongitude());
					collection.Add(item);
				}
				collection.Add(collection[0]);
				Point[] array = new Point[collection.Count - 1 + 1];
				int count = collection.Count;
				for (int i = 1; i <= count; i++)
				{
					array[i - 1] = collection[i - 1];
				}
				GraphicsPath graphicsPath = new GraphicsPath();
				graphicsPath.AddPolygon(array);
				Pen pen_ = new Pen(Color.FromArgb(75, color_8), 1f);
				try
				{
					graphics_0.FillPolygon(this.GetSolidBrush(color_8), array);
					this.DrawPath(pen_, graphicsPath, graphics_0);
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200134", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200533", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070E6 RID: 28902 RVA: 0x003F5A2C File Offset: 0x003F3C2C
		private void DrawDockingOpsGraphics(Graphics graphics_0)
		{
			try
			{
				List<List<GeoPoint>> list = new List<List<GeoPoint>>();
				foreach (Unit current in this.UnitList)
				{
					if (current.IsActiveUnit() && current.IsFixedFacility() && ((ActiveUnit)current).GetDockingOps().HasPier())
					{
						list.Add(((ActiveUnit)current).GetDockingOps().method_5());
					}
				}
				list = Math2.smethod_22(list);
				using (List<List<GeoPoint>>.Enumerator enumerator2 = list.GetEnumerator())
				{
					while (enumerator2.MoveNext())
					{
						this.list_5 = enumerator2.Current;
						this.method_137(this.list_5, 1, Color.FromArgb(25, Color.DodgerBlue), Color.FromArgb(10, Color.DodgerBlue), graphics_0);
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200521", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070E7 RID: 28903 RVA: 0x003F5B74 File Offset: 0x003F3D74
		private void method_86(Mission mission_0, Graphics graphics_0)
		{
			if (!Information.IsNothing(mission_0))
			{
				try
				{
					switch (mission_0.MissionClass)
					{
					case Mission._MissionClass.Patrol:
					{
						Patrol patrol = (Patrol)mission_0;
						if (patrol.PatrolAreaVertices.Count >= 2)
						{
							Color color = Color.White;
							switch (patrol.patrolType)
							{
							case GlobalVariables.PatrolType.ASW:
								color = Client.GetMap().struct14_0.color_6;
								break;
							case GlobalVariables.PatrolType.ASuW_Naval:
							case GlobalVariables.PatrolType.ASuW_Land:
							case GlobalVariables.PatrolType.ASuW_Mixed:
							case GlobalVariables.PatrolType.SEAD:
							case GlobalVariables.PatrolType.SeaControl:
								color = Client.GetMap().struct14_0.color_3;
								break;
							case GlobalVariables.PatrolType.AAW:
								color = Client.GetMap().struct14_0.color_1;
								break;
							}
							this.method_84(patrol.PatrolAreaVertices, color, graphics_0);
							if (patrol.ProsecutionAreaVertices.Count >= 2)
							{
								color = Color.FromArgb(127, color);
								this.method_84(patrol.ProsecutionAreaVertices, color, graphics_0);
							}
						}
						break;
					}
					case Mission._MissionClass.Support:
					{
						SupportMission supportMission = (SupportMission)mission_0;
						if (!Information.IsNothing(supportMission.NavigationCourseReferencePoints) && supportMission.NavigationCourseReferencePoints.Count >= 2)
						{
							Pen pen = new Pen(Color.FromArgb(80, Client.color_Friendly), 5f);
							pen.SetLineCap(LineCap.Round, LineCap.ArrowAnchor, DashCap.Flat);
							pen.DashStyle = DashStyle.Solid;
							this.SetGraphicsParameters(graphics_0);
							List<Point> list = new List<Point>();
							int num = supportMission.NavigationCourseReferencePoints.Count - 1;
							for (int i = 0; i <= num; i++)
							{
								ReferencePoint referencePoint = supportMission.NavigationCourseReferencePoints[i];
								list.Add(WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, referencePoint.GetLatitude(), referencePoint.GetLongitude()));
							}
							int num2 = list.Count - 2;
							for (int j = 0; j <= num2; j++)
							{
								GraphicsPath graphicsPath = new GraphicsPath();
								graphicsPath.AddLine(list[j], list[j + 1]);
								this.DrawPath(pen, graphicsPath, graphics_0);
								graphicsPath.Dispose();
							}
							pen.Dispose();
						}
						break;
					}
					case Mission._MissionClass.Mining:
					{
						MiningMission miningMission = (MiningMission)mission_0;
						if (miningMission.AreaVertices.Count >= 2)
						{
							Color color_ = Client.GetMap().struct14_0.color_6;
							this.method_84(miningMission.AreaVertices, color_, graphics_0);
						}
						break;
					}
					case Mission._MissionClass.MineClearing:
					{
						MineClearingMission mineClearingMission = (MineClearingMission)mission_0;
						if (mineClearingMission.AreaVertices.Count >= 2)
						{
							Color color_2 = Client.GetMap().struct14_0.color_6;
							this.method_84(mineClearingMission.AreaVertices, color_2, graphics_0);
						}
						break;
					}
					case Mission._MissionClass.Cargo:
					{
						CargoMission cargoMission = (CargoMission)mission_0;
						if (cargoMission.AreaPoints.Count >= 2)
						{
							Color color_3 = Client.GetMap().struct14_0.color_6;
							this.method_84(cargoMission.AreaPoints, color_3, graphics_0);
						}
						break;
					}
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200135", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060070E8 RID: 28904 RVA: 0x003F5EAC File Offset: 0x003F40AC
		private void DrawMissionAreaGraphics(Graphics graphics_0)
		{
			this.SetGraphicsParameters(graphics_0);
			switch (SimConfiguration.gameOptions.ShowMissionArea())
			{
			case Configuration.GameOptions._ShowMissionArea.const_0:
				if (Information.IsNothing(Client.GetClientSide()))
				{
					return;
				}
				using (IEnumerator<Mission> enumerator = Client.GetClientSide().GetPatrolMissionCollection(Client.GetClientScenario()).GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						Mission current = enumerator.Current;
						this.method_86(current, graphics_0);
					}
					return;
				}
				break;
			case Configuration.GameOptions._ShowMissionArea.const_1:
				break;
			case Configuration.GameOptions._ShowMissionArea.const_2:
				return;
			default:
				return;
			}
			if (!Information.IsNothing(Client.GetMissionEditor()) && !Information.IsNothing(Client.GetClientSide()) && !Information.IsNothing(Client.GetMissionEditor().GetSelectedMission()) && Client.GetClientSide().GetPatrolMissionCollection(Client.GetClientScenario()).Contains(Client.GetMissionEditor().GetSelectedMission()))
			{
				this.method_86(Client.GetMissionEditor().GetSelectedMission(), graphics_0);
			}
		}

		// Token: 0x060070E9 RID: 28905 RVA: 0x003F5FA4 File Offset: 0x003F41A4
		private void DrawEventsGraphics(Graphics graphics_0)
		{
			try
			{
				if (CommandFactory.GetCommandMain().GetEditEvent().Visible || CommandFactory.GetCommandMain().GetListEvents().Visible || CommandFactory.GetCommandMain().GetListTriggers().Visible || CommandFactory.GetCommandMain().GetListActions().Visible)
				{
					foreach (EventTrigger current in Client.GetClientScenario().GetEventTriggers().Values)
					{
						EventTrigger.EventTriggerType eventTriggerType = current.eventTriggerType;
						if (eventTriggerType != EventTrigger.EventTriggerType.UnitRemainsInArea)
						{
							if (eventTriggerType == EventTrigger.EventTriggerType.UnitEntersArea)
							{
								this.method_89(graphics_0, null, ((EventTrigger_UnitEntersArea)current).Area, Color.HotPink);
							}
						}
						else
						{
							this.method_89(graphics_0, null, ((EventTrigger_UnitRemainsInArea)current).referencePointList, Color.HotPink);
						}
					}
					foreach (EventAction current2 in Client.GetClientScenario().GetEventActions().Values)
					{
						EventAction.EventActionType eventActionType = current2.eventActionType;
						if (eventActionType == EventAction.EventActionType.TeleportInArea)
						{
							this.method_89(graphics_0, null, ((EventAction_TeleportInArea)current2).Area, Color.HotPink);
						}
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200526", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070EA RID: 28906 RVA: 0x003F6170 File Offset: 0x003F4370
		private void method_89(Graphics graphics_0, List<GeoPoint> list_10, List<ReferencePoint> list_11, Color color_8)
		{
			if ((Information.IsNothing(list_10) || list_10.Count >= 2) && (Information.IsNothing(list_11) || list_11.Count >= 2))
			{
				this.collection_0.Clear();
				try
				{
					if (!Information.IsNothing(list_10))
					{
						Point item;
						foreach (GeoPoint current in list_10)
						{
							item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(), current.GetLongitude());
							this.collection_0.Add(item);
						}
						item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, list_10[0].GetLatitude(), list_10[0].GetLongitude());
						this.collection_0.Add(item);
					}
					if (!Information.IsNothing(list_11))
					{
						Point item;
						foreach (ReferencePoint current2 in list_11)
						{
							item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current2.GetLatitude(), current2.GetLongitude());
							this.collection_0.Add(item);
						}
						item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, list_11[0].GetLatitude(), list_11[0].GetLongitude());
						this.collection_0.Add(item);
					}
					Point[] array = new Point[this.collection_0.Count - 1 + 1];
					int count = this.collection_0.Count;
					int num = count;
					this.int_3 = 1;
					while (this.int_3 <= num)
					{
						array[this.int_3 - 1] = this.collection_0[this.int_3 - 1];
						this.int_3++;
					}
					GraphicsPath graphicsPath = new GraphicsPath();
					graphicsPath.AddPolygon(array);
					Pen pen_ = new Pen(Color.FromArgb(75, color_8), 5f);
					this.DrawPath(pen_, graphicsPath, graphics_0);
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200136", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060070EB RID: 28907 RVA: 0x003F63F4 File Offset: 0x003F45F4
		private void DrawAllNoNavZone(Graphics graphics_0)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				try
				{
					foreach (NoNavZone current in Client.GetClientSide().NoNavZoneList)
					{
						if (!Information.IsNothing(current) && current.IsActive && current.Area.Count != 0)
						{
							Collection<Point> collection = new Collection<Point>();
							Point item;
							foreach (ReferencePoint current2 in current.Area)
							{
								item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current2.GetLatitude(), current2.GetLongitude());
								collection.Add(item);
							}
							item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.Area[0].GetLatitude(), current.Area[0].GetLongitude());
							collection.Add(item);
							Point[] array = new Point[collection.Count - 1 + 1];
							int count = collection.Count;
							for (int i = 1; i <= count; i++)
							{
								array[i - 1] = collection[i - 1];
							}
							Color darkRed = Color.DarkRed;
							new GraphicsPath().AddPolygon(array);
							try
							{
								graphics_0.FillPolygon(new SolidBrush(Color.FromArgb(100, darkRed)), array);
							}
							catch (Exception ex)
							{
								ProjectData.SetProjectError(ex);
								Exception ex2 = ex;
								ex2.Data.Add("Error at 200137", ex2.Message);
								GameGeneral.LogException(ref ex2);
								if (Debugger.IsAttached)
								{
									Debugger.Break();
								}
								ProjectData.ClearProjectError();
							}
						}
					}
				}
				catch (Exception ex3)
				{
					ProjectData.SetProjectError(ex3);
					Exception ex4 = ex3;
					ex4.Data.Add("Error at 200531", ex4.Message);
					GameGeneral.LogException(ref ex4);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060070EC RID: 28908 RVA: 0x003F665C File Offset: 0x003F485C
		private void DrawExclusionZones(Graphics graphics_0)
		{
			try
			{
				if (!Information.IsNothing(this.m_ExclusionZonesWindow))
				{
					ExclusionZone exclusionZone = this.m_ExclusionZonesWindow.method_1();
					if (!Information.IsNothing(exclusionZone))
					{
						Collection<Point> collection = new Collection<Point>();
						Point item;
						foreach (ReferencePoint current in exclusionZone.Area)
						{
							item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(), current.GetLongitude());
							collection.Add(item);
						}
						item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, exclusionZone.Area[0].GetLatitude(), exclusionZone.Area[0].GetLongitude());
						collection.Add(item);
						Point[] array = new Point[collection.Count - 1 + 1];
						int count = collection.Count;
						int num = count;
						this.int_3 = 1;
						while (this.int_3 <= num)
						{
							array[this.int_3 - 1] = collection[this.int_3 - 1];
							this.int_3++;
						}
						Misc.PostureStance markViolatorAs = exclusionZone.MarkViolatorAs;
						Color baseColor = Color.Red;
						if (markViolatorAs != Misc.PostureStance.Unfriendly)
						{
							if (markViolatorAs == Misc.PostureStance.Hostile)
							{
								baseColor = Color.Red;
							}
						}
						else
						{
							baseColor = Color.Orange;
						}
						GraphicsPath graphicsPath = new GraphicsPath();
						graphicsPath.AddPolygon(array);
						Pen pen = new Pen(Color.FromArgb(75, baseColor), 5f);
						if (exclusionZone.IsActive)
						{
							pen.DashStyle = DashStyle.Solid;
						}
						else
						{
							pen.DashStyle = DashStyle.Dot;
						}
						try
						{
							this.DrawPath(pen, graphicsPath, graphics_0);
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception ex2 = ex;
							ex2.Data.Add("Error at 200138", ex2.Message);
							GameGeneral.LogException(ref ex2);
							if (Debugger.IsAttached)
							{
								Debugger.Break();
							}
							ProjectData.ClearProjectError();
						}
					}
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200527", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070ED RID: 28909 RVA: 0x003F68D4 File Offset: 0x003F4AD4
		private void DrawThisNoNavZone(Graphics graphics_0)
		{
			NoNavZone noNavZone = CommandFactory.GetCommandMain().GetNoNavZonesWindow().method_1();
			if (!Information.IsNothing(noNavZone))
			{
				Collection<Point> collection = new Collection<Point>();
				try
				{
					Point item;
					foreach (ReferencePoint current in noNavZone.Area)
					{
						item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(), current.GetLongitude());
						collection.Add(item);
					}
					item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, noNavZone.Area[0].GetLatitude(), noNavZone.Area[0].GetLongitude());
					collection.Add(item);
					Point[] array = new Point[collection.Count - 1 + 1];
					int count = collection.Count;
					for (int i = 1; i <= count; i++)
					{
						array[i - 1] = collection[i - 1];
					}
					Color red = Color.Red;
					GraphicsPath graphicsPath = new GraphicsPath();
					graphicsPath.AddPolygon(array);
					Pen pen_ = new Pen(Color.FromArgb(75, red), 5f);
					try
					{
						this.DrawPath(pen_, graphicsPath, graphics_0);
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 200139", ex2.Message);
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
				catch (Exception ex3)
				{
					ProjectData.SetProjectError(ex3);
					Exception ex4 = ex3;
					ex4.Data.Add("Error at 200536", ex4.Message);
					GameGeneral.LogException(ref ex4);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060070EE RID: 28910 RVA: 0x003F6ADC File Offset: 0x003F4CDC
		private void method_93(Graphics graphics_0)
		{
			try
			{
				int x = this.point_3.X;
				int y = this.point_3.Y;
				int x2 = this.point_4.X;
				int y2 = this.point_4.Y;
				if (x != 0 || y != 0 || x2 != 0 || y2 != 0)
				{
					GraphicsPath graphicsPath = new GraphicsPath();
					if (x2 > x && y2 > y)
					{
						this.SelectionRectangle = new Rectangle(x, y, x2 - x, y2 - y);
					}
					if (x2 > x && y2 < y)
					{
						this.SelectionRectangle = new Rectangle(x, y2, x2 - x, y - y2);
					}
					if (x2 < x && this.point_1.Y < y)
					{
						this.SelectionRectangle = new Rectangle(this.point_1.X, this.point_1.Y, x - x2, y - y2);
					}
					if (x2 < x && y2 > y)
					{
						this.SelectionRectangle = new Rectangle(x2, y, x - x2, y2 - y);
					}
					graphicsPath.AddRectangle(this.SelectionRectangle);
					Pen pen = new Pen(Color.White, 1f);
					try
					{
						if (graphicsPath.PointCount > 0)
						{
							this.DrawPath(pen, graphicsPath, graphics_0);
						}
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 200219", ex2.Message);
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
					finally
					{
						pen.Dispose();
						graphicsPath.Dispose();
					}
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200524", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070EF RID: 28911 RVA: 0x003F6D00 File Offset: 0x003F4F00
		private void DrawUnguidedWeapons(Graphics graphics_0)
		{
			try
			{
				if (!Information.IsNothing(Client.GetClientSide()))
				{
					List<UnguidedWeapon> list = new List<UnguidedWeapon>();
					list.AddRange(Client.GetClientScenario().GetUnguidedWeapons().Values.ToList<UnguidedWeapon>());
					list = list.Where(MainForm.UnguidedWeaponFunc8).ToList<UnguidedWeapon>();
					int count = list.Count;
					Bitmap image = null;
					for (int num = count - 1; num >= 0; num += -1)
					{
						try
						{
							UnguidedWeapon unguidedWeapon = list[num];
							Weapon._WeaponType weaponType = unguidedWeapon.GetWeaponType();
							if (weaponType != Weapon._WeaponType.DepthCharge)
							{
								if (weaponType - Weapon._WeaponType.BottomMine <= 4 && (Client.GetMap().IsGodsEyeView() || unguidedWeapon.GetSide(false) == Client.GetClientSide() || unguidedWeapon.GetSide(false).GetPostureStance(Client.GetClientSide()) == Misc.PostureStance.Friendly || Client.GetClientSide().Contacts_NonAU.Contains(unguidedWeapon.GetGuid())))
								{
									Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, unguidedWeapon.GetLatitude(null), unguidedWeapon.GetLongitude(null));
									switch (unguidedWeapon.GetWeaponType())
									{
									case Weapon._WeaponType.BottomMine:
										image = Client.dictionary_0["mine_bottom.png"];
										break;
									case Weapon._WeaponType.MooredMine:
										image = Client.dictionary_0["mine_moored.png"];
										break;
									case Weapon._WeaponType.FloatingMine:
										image = Client.dictionary_0["mine_float.png"];
										break;
									case Weapon._WeaponType.MovingMine:
										image = Client.dictionary_0["mine_mobile.png"];
										break;
									case Weapon._WeaponType.RisingMine:
										image = Client.dictionary_0["mine_rising.png"];
										break;
									}
									graphics_0.DrawImage(image, point.X - 8, point.Y - 8, 16, 16);
									if (unguidedWeapon.GetTimeToDetonate() > 0f && (Client.GetMap().IsGodsEyeView() || unguidedWeapon.GetSide(false) == Client.GetClientSide() || unguidedWeapon.GetSide(false).GetPostureStance(Client.GetClientSide()) == Misc.PostureStance.Friendly))
									{
										this.DrawTextString(point.X - 8, point.Y + 8, Misc.GetTimeString((long)Math.Round((double)unguidedWeapon.GetTimeToDetonate()), Aircraft_AirOps._Maintenance.const_0, false, false), graphics_0, 0, StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 10f, FontStyle.Regular));
									}
								}
							}
							else
							{
								Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, unguidedWeapon.GetLatitude(null), unguidedWeapon.GetLongitude(null));
								image = Client.dictionary_0["DC.png"];
								graphics_0.DrawImage(image, point.X - 8, point.Y - 8, 16, 16);
							}
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception ex2 = ex;
							ex2.Data.Add("Error at 200140", ex2.Message);
							GameGeneral.LogException(ref ex2);
							if (Debugger.IsAttached)
							{
								Debugger.Break();
							}
							ProjectData.ClearProjectError();
						}
					}
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200542", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070F0 RID: 28912 RVA: 0x003F706C File Offset: 0x003F526C
		private void method_95(Graphics graphics_0)
		{
			try
			{
				List<UnguidedWeapon> list = Client.GetClientScenario().GetUnguidedWeapons().Values.ToList<UnguidedWeapon>();
				list = list.Where(MainForm.UnguidedWeaponFunc9).ToList<UnguidedWeapon>();
				int count = list.Count;
				if (count != 0)
				{
					for (int num = count - 1; num >= 0; num += -1)
					{
						UnguidedWeapon unguidedWeapon = list[num];
						if (!Information.IsNothing(unguidedWeapon))
						{
							Weapon._WeaponType weaponType = unguidedWeapon.GetWeaponType();
							switch (weaponType)
							{
							case Weapon._WeaponType.Rocket:
							{
								bool flag = unguidedWeapon.Name.ToLower().Contains("salvo");
								float num2 = 0.2f;
								float num3 = unguidedWeapon.HorizontalRangeTo(unguidedWeapon.LaunchPoint);
								if (num2 > num3)
								{
									num2 = num3;
								}
								if (num2 == 0f)
								{
									goto IL_8FD;
								}
								Warhead.WarheadCaliber caliber = unguidedWeapon.WarheadArray[0].Caliber;
								byte b;
								if (caliber - Warhead.WarheadCaliber.Rocket_6_15mm > 2)
								{
									if (caliber - Warhead.WarheadCaliber.Rocket_61_80mm > 1)
									{
										b = 3;
									}
									else
									{
										b = 2;
									}
								}
								else
								{
									b = 1;
								}
								float azimuth = Math2.GetAzimuth(unguidedWeapon.GetLatitude(null), unguidedWeapon.GetLongitude(null), unguidedWeapon.LaunchPoint.GetLatitude(), unguidedWeapon.LaunchPoint.GetLongitude());
								double lng = 0.0;
								double lat = 0.0;
								GeoPointGenerator.GetOtherGeoPoint(unguidedWeapon.GetLongitude(null), unguidedWeapon.GetLatitude(null), ref lng, ref lat, (double)num2, (double)azimuth);
								Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, unguidedWeapon.GetLatitude(null), unguidedWeapon.GetLongitude(null));
								Point point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, lat, lng);
								if (point.X == point2.X && point.Y == point2.Y)
								{
									goto IL_8FD;
								}
								graphics_0.DrawRectangle(new Pen(Color.Yellow, (float)(b + 1)), new Rectangle(point.X - 1, point.Y - 1, (int)(b + 1), (int)(b + 1)));
								Brush brush = new LinearGradientBrush(point2, point, Color.Transparent, Color.Red);
								using (brush)
								{
									Pen pen = new Pen(brush, (float)b);
									pen.SetLineCap(LineCap.Round, LineCap.Round, DashCap.Flat);
									if (flag)
									{
										pen.DashStyle = DashStyle.Dash;
									}
									else
									{
										pen.DashStyle = DashStyle.Solid;
									}
									using (pen)
									{
										graphics_0.DrawLine(pen, point2.X, point2.Y, point.X, point.Y);
									}
									goto IL_8FD;
								}
								break;
							}
							case Weapon._WeaponType.IronBomb:
								break;
							case Weapon._WeaponType.Gun:
								goto IL_502;
							default:
							{
								if (weaponType != Weapon._WeaponType.Laser)
								{
									goto IL_8FD;
								}
								ActiveUnit activeUnit = null;
								Client.GetClientScenario().GetActiveUnits().TryGetValue(unguidedWeapon.FiringParentName, ref activeUnit);
								if (Information.IsNothing(activeUnit))
								{
									goto IL_8FD;
								}
								Point pt = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, activeUnit.GetLatitude(null), activeUnit.GetLongitude(null));
								Point pt2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, unguidedWeapon.Target.GetLatitude(null), unguidedWeapon.Target.GetLongitude(null));
								if (pt.X != pt2.X || pt.Y != pt2.Y)
								{
									GraphicsPath graphicsPath = new GraphicsPath();
									graphicsPath.AddLine(pt, pt2);
									int num4 = (int)Math.Round((double)(255f * Math.Min(1f, 2f - unguidedWeapon.GetTimeToDetonate())));
									int green = num4;
									Color color = Color.FromArgb(255, num4, green, 255);
									Pen pen3 = new Pen(color, 2f);
									pen3.DashStyle = DashStyle.Solid;
									this.DrawPath(pen3, graphicsPath, graphics_0);
									pen3.Dispose();
									graphicsPath.Dispose();
									goto IL_8FD;
								}
								goto IL_8FD;
							}
							}
							Point point3 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, unguidedWeapon.GetLatitude(null), unguidedWeapon.GetLongitude(null));
							point3.X = GameGeneral.GetRandom().Next(point3.X - 2, point3.X + 3);
							point3.Y = GameGeneral.GetRandom().Next(point3.Y - 2, point3.Y + 3);
							Bitmap image = Client.dictionary_0["Bomb.gif"];
							image = Class2529.smethod_2("Bomb.gif", image, (double)unguidedWeapon.GetCurrentHeading());
							try
							{
								graphics_0.DrawImage(image, point3.X - 8, point3.Y - 8);
								goto IL_8FD;
							}
							catch (Exception ex)
							{
								ProjectData.SetProjectError(ex);
								Exception ex2 = ex;
								ex2.Data.Add("Error at 200141", ex2.Message);
								GameGeneral.LogException(ref ex2);
								if (Debugger.IsAttached)
								{
									Debugger.Break();
								}
								ProjectData.ClearProjectError();
								goto IL_8FD;
							}
							IL_502:
							bool flag2 = UnguidedWeapon.ContainsBurst(unguidedWeapon.Name);
							bool flag3 = UnguidedWeapon.ContainsSalvo(unguidedWeapon.Name);
							if (flag2)
							{
								float num5 = 0.3f;
								float num6 = unguidedWeapon.HorizontalRangeTo(unguidedWeapon.LaunchPoint);
								if (num5 > num6)
								{
									num5 = num6;
								}
								if (num5 != 0f)
								{
									float azimuth = Math2.GetAzimuth(unguidedWeapon.GetLatitude(null), unguidedWeapon.GetLongitude(null), unguidedWeapon.LaunchPoint.GetLatitude(), unguidedWeapon.LaunchPoint.GetLongitude());
									double lng2 = 0.0;
									double lat2 = 0.0;
									GeoPointGenerator.GetOtherGeoPoint(unguidedWeapon.GetLongitude(null), unguidedWeapon.GetLatitude(null), ref lng2, ref lat2, (double)num5, (double)azimuth);
									Point point4 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, unguidedWeapon.GetLatitude(null), unguidedWeapon.GetLongitude(null));
									Point point5 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, lat2, lng2);
									if (point4.X != point5.X || point4.Y != point5.Y)
									{
										Brush brush3 = null;
										try
										{
											brush3 = new LinearGradientBrush(point5, point4, Color.Transparent, Color.White);
										}
										catch (Exception ex3)
										{
											ProjectData.SetProjectError(ex3);
											Exception ex4 = ex3;
											ex4.Data.Add("Error at 101157", "");
											GameGeneral.LogException(ref ex4);
											if (Debugger.IsAttached)
											{
												Debugger.Break();
											}
											ProjectData.ClearProjectError();
										}
										using (brush3)
										{
											Pen pen4 = new Pen(brush3, 1f);
											pen4.DashStyle = DashStyle.DashDot;
											using (pen4)
											{
												graphics_0.DrawLine(pen4, point5.X, point5.Y, point4.X, point4.Y);
											}
											pen4.Dispose();
											pen4 = null;
										}
										brush3.Dispose();
										brush3 = null;
									}
								}
							}
							else
							{
								float num7 = 0.2f;
								float num8 = unguidedWeapon.HorizontalRangeTo(unguidedWeapon.LaunchPoint);
								if (num7 > num8)
								{
									num7 = num8;
								}
								if (num7 != 0f)
								{
									Warhead.WarheadCaliber caliber2 = unguidedWeapon.WarheadArray[0].Caliber;
									byte b2;
									if (caliber2 - Warhead.WarheadCaliber.Gun_6_15mm > 2)
									{
										if (caliber2 - Warhead.WarheadCaliber.Gun_61_80mm > 1)
										{
											b2 = 3;
										}
										else
										{
											b2 = 2;
										}
									}
									else
									{
										b2 = 1;
									}
									float azimuth2 = Math2.GetAzimuth(unguidedWeapon.GetLatitude(null), unguidedWeapon.GetLongitude(null), unguidedWeapon.LaunchPoint.GetLatitude(), unguidedWeapon.LaunchPoint.GetLongitude());
									double lng3 = 0.0;
									double lat3 = 0.0;
									GeoPointGenerator.GetOtherGeoPoint(unguidedWeapon.GetLongitude(null), unguidedWeapon.GetLatitude(null), ref lng3, ref lat3, (double)num7, (double)azimuth2);
									Point point6 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, unguidedWeapon.GetLatitude(null), unguidedWeapon.GetLongitude(null));
									Point point7 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, lat3, lng3);
									if (point6.X != point7.X || point6.Y != point7.Y)
									{
										Brush brush4 = new LinearGradientBrush(point7, point6, Color.Transparent, Color.White);
										using (brush4)
										{
											Pen pen5 = new Pen(brush4, (float)b2);
											pen5.SetLineCap(LineCap.Round, LineCap.Round, DashCap.Flat);
											if (flag3)
											{
												pen5.DashStyle = DashStyle.Dash;
											}
											else
											{
												pen5.DashStyle = DashStyle.Solid;
											}
											using (pen5)
											{
												graphics_0.DrawLine(pen5, point7.X, point7.Y, point6.X, point6.Y);
											}
										}
									}
								}
							}
						}
						IL_8FD:;
					}
				}
			}
			catch (OutOfMemoryException projectError)
			{
				ProjectData.SetProjectError(projectError);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
			catch (Exception ex5)
			{
				ProjectData.SetProjectError(ex5);
				Exception ex6 = ex5;
				ex6.Data.Add("Error at 200142", ex6.Message);
				GameGeneral.LogException(ref ex6);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070F1 RID: 28913 RVA: 0x003F7AD8 File Offset: 0x003F5CD8
		private void DrawSatelliteGraphics(Graphics graphics_0)
		{
			if (!Information.IsNothing(Client.GetHookedUnit()))
			{
				try
				{
					Satellite satellite;
					if (Client.GetHookedUnit().IsSatellite())
					{
						satellite = (Satellite)Client.GetHookedUnit();
					}
					else
					{
						if (!Client.GetHookedUnit().IsContact())
						{
							return;
						}
						Contact contact = (Contact)Client.GetHookedUnit();
						if (Information.IsNothing(contact.ActualUnit))
						{
							return;
						}
						if (contact.IsDestroyed(Client.GetClientScenario()))
						{
							return;
						}
						if (!contact.ActualUnit.IsSatellite())
						{
							return;
						}
						if (!contact.GetIsPreciselyLocatedOnThisPulse())
						{
							return;
						}
						satellite = (Satellite)contact.ActualUnit;
					}
					if (WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, Client.GetHookedUnit()) && !satellite.method_129())
					{
						DateTime currentTime = Client.GetClientScenario().GetCurrentTime(false);
						Satellite_Kinematics satelliteKinematics = satellite.GetSatelliteKinematics();
						this.graphicsPath_0 = new GraphicsPath();
						this.pen_0 = new Pen(Color.White, 1f);
						new GeoPoint(Client.GetHookedUnit().GetLongitude(null), Client.GetHookedUnit().GetLatitude(null));
						List<GeoPoint> list = new List<GeoPoint>();
						for (int i = -60; i <= 60; i++)
						{
							int num = i + 1;
							double num2 = 0.0;
							double num3 = 0.0;
							double num4 = 0.0;
							double num5 = 0.0;
							satelliteKinematics.CalculateOrbit(currentTime.AddMinutes((double)i), ref num2, ref num3, ref num4, ref num5);
							if (WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, num2, num3))
							{
								list.Add(new GeoPoint(num3, num2));
							}
							else
							{
								double lat = 0.0;
								double lng = 0.0;
								satelliteKinematics.CalculateOrbit(currentTime.AddMinutes((double)num), ref lat, ref lng, ref num4, ref num5);
								if (WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, lat, lng))
								{
									list.Add(new GeoPoint(num3, num2));
								}
							}
						}
						GeoPoint geoPoint = new GeoPoint();
						GeoPoint geoPoint2 = new GeoPoint();
						try
						{
							int num6 = list.Count - 2;
							for (int j = 0; j <= num6; j++)
							{
								geoPoint = list[j];
								geoPoint2 = list[j + 1];
								this.graphicsPath_0.AddLine(WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, geoPoint.GetLatitude(), geoPoint.GetLongitude()), WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, geoPoint2.GetLatitude(), geoPoint2.GetLongitude()));
							}
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception ex2 = ex;
							ex2.Data.Add("Error at 200143", ex2.Message);
							GameGeneral.LogException(ref ex2);
							if (Debugger.IsAttached)
							{
								Debugger.Break();
							}
							ProjectData.ClearProjectError();
						}
						this.SetGraphicsParameters(graphics_0);
						this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
					}
				}
				catch (Exception ex3)
				{
					ProjectData.SetProjectError(ex3);
					Exception ex4 = ex3;
					ex4.Data.Add("Error at 200532", ex4.Message);
					GameGeneral.LogException(ref ex4);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060070F2 RID: 28914 RVA: 0x003F7E44 File Offset: 0x003F6044
		private void method_97(Graphics graphics_0)
		{
			try
			{
				foreach (FixedGeoPolygon current in this.list_4)
				{
					bool flag = false;
					foreach (GeoPoint current2 in current.vmethod_0())
					{
						if (WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, current2.GetLatitude(), current2.GetLongitude()))
						{
							flag = true;
							break;
						}
					}
					if (flag)
					{
						Collection<Point> collection = new Collection<Point>();
						this.SetGraphicsParameters(graphics_0);
						foreach (GeoPoint current3 in current.vmethod_0())
						{
							try
							{
								Point item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current3.GetLatitude(), current3.GetLongitude());
								collection.Add(item);
							}
							catch (Exception ex)
							{
								ProjectData.SetProjectError(ex);
								Exception ex2 = ex;
								ex2.Data.Add("Error at 200144", ex2.Message);
								GameGeneral.LogException(ref ex2);
								if (Debugger.IsAttached)
								{
									Debugger.Break();
								}
								ProjectData.ClearProjectError();
							}
						}
						if (collection.Count != 0)
						{
							collection.Add(collection[0]);
							Point[] array = new Point[collection.Count - 1 + 1];
							int count = collection.Count;
							for (int i = 1; i <= count; i++)
							{
								array[i - 1] = collection[i - 1];
							}
							Color yellow = Color.Yellow;
							GraphicsPath graphicsPath = new GraphicsPath();
							graphicsPath.AddPolygon(array);
							Pen pen_ = new Pen(Color.FromArgb(128, yellow), 1f);
							try
							{
								this.DrawPath(pen_, graphicsPath, graphics_0);
							}
							catch (Exception ex3)
							{
								ProjectData.SetProjectError(ex3);
								Exception ex4 = ex3;
								ex4.Data.Add("Error at 200145", ex4.Message);
								GameGeneral.LogException(ref ex4);
								if (Debugger.IsAttached)
								{
									Debugger.Break();
								}
								ProjectData.ClearProjectError();
							}
						}
					}
				}
			}
			catch (Exception ex5)
			{
				ProjectData.SetProjectError(ex5);
				Exception ex6 = ex5;
				ex6.Data.Add("Error at 200522", ex6.Message);
				GameGeneral.LogException(ref ex6);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070F3 RID: 28915 RVA: 0x003F8148 File Offset: 0x003F6348
		private void ViewRangeBearing(Graphics graphics_0)
		{
			if (Client.GetCommandOrder() == Client._CommandOrder.ViewRangeBearing && !Information.IsNothing(this.geoPoint_1))
			{
				this.graphicsPath_0 = new GraphicsPath();
				this.pen_0 = new Pen(Color.White, 1f);
				try
				{
					GeoPoint geoPoint = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, this.point_1.X, this.point_1.Y);
					if (!double.IsNaN(geoPoint.GetLatitude()) && !double.IsNaN(geoPoint.GetLongitude()))
					{
						Math2.GetDistance(this.geoPoint_1.GetLatitude(), this.geoPoint_1.GetLongitude(), geoPoint.GetLatitude(), geoPoint.GetLongitude());
						this.graphicsPath_0.AddLine(WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, this.geoPoint_1.GetLatitude(), this.geoPoint_1.GetLongitude()), this.point_1);
						this.SetGraphicsParameters(graphics_0);
						this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
						float distance = Math2.GetDistance(this.geoPoint_1.GetLatitude(), this.geoPoint_1.GetLongitude(), geoPoint.GetLatitude(), geoPoint.GetLongitude());
						float azimuth = Math2.GetAzimuth(this.geoPoint_1.GetLatitude(), this.geoPoint_1.GetLongitude(), geoPoint.GetLatitude(), geoPoint.GetLongitude());
						string text;
						if (distance < 1f)
						{
							text = string.Concat(new string[]
							{
								Conversions.ToString(Math.Round((double)distance, 5)),
								"海里(",
								Conversions.ToString((int)Math.Round((double)(distance * 1852f))),
								"米) - ",
								Conversions.ToString(Math.Round((double)azimuth, 2)),
								"度"
							});
						}
						else
						{
							text = Conversions.ToString(Math.Round((double)distance, 2)) + "海里- " + Conversions.ToString(Math.Round((double)azimuth, 2)) + "度";
						}
						this.DrawTextString(this.point_1.X + 10, this.point_1.Y - 5, text, graphics_0, 0, StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 10f, FontStyle.Bold));
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200146", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
				finally
				{
					this.pen_0.Dispose();
					this.graphicsPath_0.Dispose();
				}
			}
		}

		// Token: 0x060070F4 RID: 28916 RVA: 0x003F8400 File Offset: 0x003F6600
		public void DrawText(int X, int y, string text, Graphics theGraphObj, int ColorARGB = 0)
		{
			Color color;
			if (ColorARGB == 0)
			{
				color = Color.White;
			}
			else
			{
				color = Color.FromArgb(ColorARGB);
			}
			try
			{
				System.Drawing.Font font = new System.Drawing.Font("Verdana", 9f, FontStyle.Bold);
				SolidBrush brush = new SolidBrush(color);
				StringFormat stringFormat = new StringFormat();
				stringFormat.FormatFlags = StringFormatFlags.NoFontFallback;
				try
				{
					theGraphObj.DrawString(text, font, brush, (float)X, (float)y, stringFormat);
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200147", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200540", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070F5 RID: 28917 RVA: 0x003F8504 File Offset: 0x003F6704
		public void DrawTextString(int X, int y, string text, Graphics theGraphObj, int ColorARGB = 0, StringAlignment Align_H = StringAlignment.Near, StringFormatFlags Align_H_Direction = (StringFormatFlags)0, StringAlignment Align_V = StringAlignment.Near, System.Drawing.Font drawFont = null)
		{
			Color color;
			if (ColorARGB == 0)
			{
				color = Color.White;
			}
			else
			{
				color = Color.FromArgb(ColorARGB);
			}
			try
			{
				if (Information.IsNothing(drawFont))
				{
					drawFont = new System.Drawing.Font("Verdana", 8f, FontStyle.Bold);
				}
				SolidBrush brush = new SolidBrush(color);
				StringFormat stringFormat = new StringFormat();
				stringFormat.Alignment = Align_V;
				stringFormat.LineAlignment = Align_H;
				if (!Information.IsNothing(Align_H_Direction))
				{
					stringFormat.FormatFlags = Align_H_Direction;
				}
				theGraphObj.DrawString(text, drawFont, brush, (float)X, (float)y, stringFormat);
				drawFont = null;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200541", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070F6 RID: 28918 RVA: 0x003F85E0 File Offset: 0x003F67E0
		private void DrawUnitContactsGraphics(Graphics graphics_0)
		{
			List<ActiveUnit> list = Client.GetClientSide().ActiveUnitArray.ToList<ActiveUnit>();
			Point point = default(Point);
			Point point2 = default(Point);
			Point point3 = default(Point);
			try
			{
				MapProfile._UnitCoverage showTargetingVectors = Client.GetMap().GetShowTargetingVectors();
				if (showTargetingVectors != MapProfile._UnitCoverage.const_0)
				{
					if (showTargetingVectors != MapProfile._UnitCoverage.const_1)
					{
						goto IL_68A;
					}
					Unit hookedUnit = Client.GetHookedUnit();
					if (Information.IsNothing(hookedUnit) || !hookedUnit.IsActiveUnit() || !Client.IsVisible(hookedUnit) || (hookedUnit.GetSide(false) != Client.GetClientSide() && Client.GetClientSide().GetPostureStance(hookedUnit.GetSide(false)) != Misc.PostureStance.Friendly))
					{
						goto IL_68A;
					}
					if (!hookedUnit.IsGroup)
					{
						point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, hookedUnit.GetLatitude(null), hookedUnit.GetLongitude(null));
						List<Contact> list2 = ((ActiveUnit)hookedUnit).GetAI().GetTargets().ToList<Contact>();
						using (List<Contact>.Enumerator enumerator = list2.GetEnumerator())
						{
							while (enumerator.MoveNext())
							{
								Contact current = enumerator.Current;
								Color color_;
								if (((ActiveUnit)hookedUnit).GetAI().method_63(current))
								{
									color_ = Color.LawnGreen;
								}
								else
								{
									color_ = Color.Yellow;
								}
								point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(null), current.GetLongitude(null));
								GeoPoint geoPoint = Class263.smethod_1(hookedUnit.GetLatitude(null), hookedUnit.GetLongitude(null), 0f, current.GetLatitude(null), current.GetLongitude(null), 0f, (double)(hookedUnit.HorizontalRangeTo(new GeoPoint(current.GetLongitude(null), current.GetLatitude(null))) / 2f));
								point3 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, geoPoint.GetLatitude(), geoPoint.GetLongitude());
								this.DrawTargetingGraphics(ref point, ref point2, ref point3, ((ActiveUnit)hookedUnit).GetAI().GetTargetingBehavior(current), ((ActiveUnit)hookedUnit).GetAI().GetOODAReactionTime(current), current == ((ActiveUnit)hookedUnit).GetAI().GetPrimaryTarget(), graphics_0, color_);
							}
							goto IL_68A;
						}
					}
					if (SimConfiguration.gameOptions.ShowGhostedGroupMembers() == Configuration.GameOptions._ShowGhostedGroupMembers.NONE)
					{
						goto IL_68A;
					}
					Group group = (Group)hookedUnit;
					using (IEnumerator<ActiveUnit> enumerator2 = group.GetUnitsInGroup().Values.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							ActiveUnit current2 = enumerator2.Current;
							point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current2.GetLatitude(null), current2.GetLongitude(null));
							List<Contact> list3 = current2.GetAI().GetTargets().ToList<Contact>();
							foreach (Contact current3 in list3)
							{
								Color color_;
								if (current2.GetAI().method_63(current3))
								{
									color_ = Color.LawnGreen;
								}
								else
								{
									color_ = Color.Yellow;
								}
								point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current3.GetLatitude(null), current3.GetLongitude(null));
								GeoPoint geoPoint = Class263.smethod_1(current2.GetLatitude(null), current2.GetLongitude(null), 0f, current3.GetLatitude(null), current3.GetLongitude(null), 0f, (double)(current2.HorizontalRangeTo(new GeoPoint(current3.GetLongitude(null), current3.GetLatitude(null))) / 2f));
								point3 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, geoPoint.GetLatitude(), geoPoint.GetLongitude());
								this.DrawTargetingGraphics(ref point, ref point2, ref point3, current2.GetAI().GetTargetingBehavior(current3), current2.GetAI().GetOODAReactionTime(current3), current3 == current2.GetAI().GetPrimaryTarget(), graphics_0, color_);
							}
						}
						goto IL_68A;
					}
				}
                ActiveUnit current4X;
                foreach (ActiveUnit current4 in list)
				{
                    current4X = current4;
                    float num = 0f;
					Client.GetAlpha(ref num, ref this.int_13, ref current4X);
					if (current4.GetSide(false) == Client.GetClientSide() || Client.GetClientSide().GetPostureStance(current4.GetSide(false)) == Misc.PostureStance.Friendly)
					{
						point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current4.GetLatitude(null), current4.GetLongitude(null));
						if (Client.IsVisible(current4))
						{
							List<Contact> list4 = current4.GetAI().GetTargets().ToList<Contact>();
							foreach (Contact current5 in list4)
							{
								Color color_;
								if (current4.GetAI().method_63(current5))
								{
									color_ = Color.LawnGreen;
								}
								else
								{
									color_ = Color.Yellow;
								}
								point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current5.GetLatitude(null), current5.GetLongitude(null));
								GeoPoint geoPoint = Class263.smethod_1(current4.GetLatitude(null), current4.GetLongitude(null), 0f, current5.GetLatitude(null), current5.GetLongitude(null), 0f, (double)(current4.HorizontalRangeTo(new GeoPoint(current5.GetLongitude(null), current5.GetLatitude(null))) / 2f));
								point3 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, geoPoint.GetLatitude(), geoPoint.GetLongitude());
								this.DrawTargetingGraphics(ref point, ref point2, ref point3, current4.GetAI().GetTargetingBehavior(current5), current4.GetAI().GetOODAReactionTime(current5), current5 == current4.GetAI().GetPrimaryTarget(), graphics_0, color_);
							}
						}
					}
				}
				IL_68A:;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200148", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070F7 RID: 28919 RVA: 0x003F8D50 File Offset: 0x003F6F50
		private void DrawGroupGraphics(Collection<Group> collection_1, Graphics graphics_0)
		{
			if (SimConfiguration.gameOptions.ShowGhostedGroupMembers() != Configuration.GameOptions._ShowGhostedGroupMembers.NONE)
			{
				for (int num = collection_1.Count - 1; num >= 0; num += -1)
				{
					try
					{
						Group group;
						try
						{
							group = collection_1[num];
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception ex2 = ex;
							ex2.Data.Add("Error at 200384", ex2.Message);
							GameGeneral.LogException(ref ex2);
							if (!Debugger.IsAttached)
							{
							}
							ProjectData.ClearProjectError();
							goto IL_1CD;
						}
						if (!Information.IsNothing(group) && !Information.IsNothing(group.GetSide(false)) && (SimConfiguration.gameOptions.ShowGhostedGroupMembers() != Configuration.GameOptions._ShowGhostedGroupMembers.SEL || group == Client.GetHookedUnit()) && (group.GetSide(false) == Client.GetClientSide() || Client.GetClientSide().GetPostureStance(group.GetSide(false)) == Misc.PostureStance.Friendly))
						{
							Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, group.GetGroupLead().GetLatitude(null), group.GetGroupLead().GetLongitude(null));
							foreach (ActiveUnit current in group.GetUnitsInGroup().Values)
							{
								if (current.IsOperating())
								{
									Point point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(null), current.GetLongitude(null));
									this.method_123(ref point, ref point2, graphics_0);
								}
							}
						}
					}
					catch (Exception ex3)
					{
						ProjectData.SetProjectError(ex3);
						Exception ex4 = ex3;
						ex4.Data.Add("Error at 200149", ex4.Message);
						GameGeneral.LogException(ref ex4);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
					IL_1CD:;
				}
			}
		}

		// Token: 0x060070F8 RID: 28920 RVA: 0x003F8F80 File Offset: 0x003F7180
		private void DrawCommunciationGraphics(Graphics graphics_0)
		{
			List<ActiveUnit> list = new List<ActiveUnit>();
			list.AddRange(Client.GetClientSide().ActiveUnitArray);
			Point point = default(Point);
			Point point2 = default(Point);
			try
			{
				MapProfile._UnitCoverage showDatalinks = Client.GetMap().GetShowDatalinks();
				if (showDatalinks != MapProfile._UnitCoverage.const_0)
				{
					if (showDatalinks != MapProfile._UnitCoverage.const_1)
					{
						goto IL_522;
					}
					Unit hookedUnit = Client.GetHookedUnit();
					if (Information.IsNothing(hookedUnit) || !hookedUnit.IsActiveUnit() || (hookedUnit.GetSide(false) != Client.GetClientSide() && !Client.GetClientSide().IsFriendlyToSide(hookedUnit.GetSide(false))))
					{
						goto IL_522;
					}
					if (!hookedUnit.IsGroup)
					{
						point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, hookedUnit.GetLatitude(null), hookedUnit.GetLongitude(null));
						List<ActiveUnit_CommLink> list2 = new List<ActiveUnit_CommLink>();
						if (hookedUnit.IsWeapon)
						{
							list2.AddRange(((ActiveUnit)hookedUnit).GetCommStuff().GetCommLinksEstablished());
							using (List<ActiveUnit_CommLink>.Enumerator enumerator = list2.GetEnumerator())
							{
								while (enumerator.MoveNext())
								{
									ActiveUnit_CommLink current = enumerator.Current;
									if (!Information.IsNothing(current))
									{
										ActiveUnit commPartner = current.CommPartner;
										point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, commPartner.GetLatitude(null), commPartner.GetLongitude(null));
										this.DrawLine(ref point, ref point2, graphics_0);
									}
								}
								goto IL_522;
							}
						}
						using (List<ActiveUnit>.Enumerator enumerator2 = list.GetEnumerator())
						{
							while (enumerator2.MoveNext())
							{
								ActiveUnit current2 = enumerator2.Current;
								if (hookedUnit != current2 && this.UnitList.Contains(current2) && current2.IsWeapon)
								{
									list2.Clear();
									list2.AddRange(current2.GetCommStuff().GetCommLinksEstablished());
									foreach (ActiveUnit_CommLink current3 in list2)
									{
										if (!Information.IsNothing(current3) && current3.CommPartner == hookedUnit)
										{
											point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current2.GetLatitude(null), current2.GetLongitude(null));
											this.DrawLine(ref point, ref point2, graphics_0);
										}
									}
								}
							}
							goto IL_522;
						}
					}
					if (SimConfiguration.gameOptions.ShowGhostedGroupMembers() == Configuration.GameOptions._ShowGhostedGroupMembers.NONE)
					{
						goto IL_522;
					}
					Group group = (Group)hookedUnit;
					using (IEnumerator<ActiveUnit> enumerator4 = group.GetUnitsInGroup().Values.GetEnumerator())
					{
						while (enumerator4.MoveNext())
						{
							ActiveUnit current4 = enumerator4.Current;
							point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current4.GetLatitude(null), current4.GetLongitude(null));
							List<ActiveUnit_CommLink> list3 = new List<ActiveUnit_CommLink>();
							foreach (ActiveUnit current5 in list)
							{
								if (current4 != current5 && this.UnitList.Contains(current5) && current5.IsWeapon)
								{
									list3.Clear();
									list3.AddRange(current5.GetCommStuff().GetCommLinksEstablished());
									foreach (ActiveUnit_CommLink current6 in list3)
									{
										if (!Information.IsNothing(current6) && current6.CommPartner == current4)
										{
											point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current5.GetLatitude(null), current5.GetLongitude(null));
											this.DrawLine(ref point, ref point2, graphics_0);
										}
									}
								}
							}
						}
						goto IL_522;
					}
				}
                ActiveUnit current7X;

                foreach (ActiveUnit current7 in list)
				{
                    current7X = current7;
                    if (!Information.IsNothing(current7) && this.UnitList.Contains(current7) && Client.IsVisible(current7))
					{
						Client.GetAlpha(ref this.float_6, ref this.int_13, ref current7X);
						point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current7.GetLatitude(null), current7.GetLongitude(null));
						int num = current7.GetCommStuff().GetCommLinksEstablished().Length - 1;
						for (int i = 0; i <= num; i++)
						{
							ActiveUnit_CommLink activeUnit_CommLink;
							try
							{
								activeUnit_CommLink = current7.GetCommStuff().GetCommLinksEstablished()[0];
							}
							catch (Exception projectError)
							{
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								i++;
								continue;
							}
							if (!Information.IsNothing(activeUnit_CommLink))
							{
								ActiveUnit commPartner2 = activeUnit_CommLink.CommPartner;
								point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, commPartner2.GetLatitude(null), commPartner2.GetLongitude(null));
								this.DrawLine(ref point, ref point2, graphics_0);
							}
						}
					}
				}
            IL_522:
                ActiveUnit current8X;
                foreach (ActiveUnit current8 in list)
				{
                    current8X = current8;
                    if (current8.IsSubmarine && ((Submarine)current8).IsROV() && this.UnitList.Contains(current8))
					{
						Client.GetAlpha(ref this.float_6, ref this.int_13, ref current8X);
						point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current8.GetLatitude(null), current8.GetLongitude(null));
						ActiveUnit assignedHostUnit = current8.GetDockingOps().GetAssignedHostUnit(false);
						if (!Information.IsNothing(assignedHostUnit))
						{
							point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, assignedHostUnit.GetLatitude(null), assignedHostUnit.GetLongitude(null));
							this.DrawLine(ref point, ref point2, graphics_0);
						}
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200150", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070F9 RID: 28921 RVA: 0x003F96D8 File Offset: 0x003F78D8
		private void DrawSensorContacts(Graphics graphics_0)
		{
			List<ActiveUnit> list = new List<ActiveUnit>();
			list.AddRange(Client.GetClientSide().ActiveUnitArray);
			Point point = default(Point);
			try
			{
				MapProfile._UnitCoverage showIlluminationVectors = Client.GetMap().GetShowIlluminationVectors();
				int num;
				if (showIlluminationVectors != MapProfile._UnitCoverage.const_0)
				{
					if (showIlluminationVectors != MapProfile._UnitCoverage.const_1)
					{
						goto IL_5EA;
					}
					Unit hookedUnit = Client.GetHookedUnit();
					if (Information.IsNothing(hookedUnit) || (hookedUnit.GetSide(false) != Client.GetClientSide() && Client.GetClientSide().GetPostureStance(hookedUnit.GetSide(false)) != Misc.PostureStance.Friendly))
					{
						goto IL_5EA;
					}
					if (!hookedUnit.IsGroup)
					{
						Tuple<int, int> tuple = null;
						this.dictionary_2.TryGetValue(hookedUnit, out tuple);
						Point point2;
						if (!Information.IsNothing(tuple))
						{
							int item = tuple.Item1;
							int item2 = tuple.Item2;
							point2 = new Point(item, item2);
						}
						else
						{
							point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, hookedUnit.GetLatitude(null), hookedUnit.GetLongitude(null));
						}
						if (!hookedUnit.IsActiveUnit())
						{
							goto IL_5EA;
						}
						Sensor[] allNoneMCMSensors = ((ActiveUnit)hookedUnit).GetAllNoneMCMSensors();
						if (!Information.IsNothing(allNoneMCMSensors))
						{
							num = allNoneMCMSensors.Length;
							int num2 = num - 1;
							for (int i = 0; i <= num2; i++)
							{
								Sensor sensor = allNoneMCMSensors[i];
								List<Contact> list2 = sensor.GetTargetsTrackedForFireControl().ToList<Contact>();
								int num3 = list2.Count - 1;
								this.int_3 = 0;
								while (this.int_3 <= num3)
								{
									Contact contact = list2[this.int_3];
									Tuple<int, int> tuple2 = null;
									this.dictionary_2.TryGetValue(contact, out tuple2);
									if (!Information.IsNothing(tuple2))
									{
										int item3 = tuple2.Item1;
										int item4 = tuple2.Item2;
										point = new Point(item3, item4);
									}
									else
									{
										point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, contact.GetLatitude(null), contact.GetLongitude(null));
									}
									this.method_121(ref point2, ref point, graphics_0);
									this.int_3++;
								}
							}
							goto IL_5EA;
						}
						goto IL_5EA;
					}
					else
					{
						if (SimConfiguration.gameOptions.ShowGhostedGroupMembers() == Configuration.GameOptions._ShowGhostedGroupMembers.NONE)
						{
							goto IL_5EA;
						}
						Group group = (Group)hookedUnit;
						using (IEnumerator<ActiveUnit> enumerator = group.GetUnitsInGroup().Values.GetEnumerator())
						{
							while (enumerator.MoveNext())
							{
								ActiveUnit current = enumerator.Current;
								Tuple<int, int> tuple3 = null;
								this.dictionary_2.TryGetValue(current, out tuple3);
								Point point3;
								if (!Information.IsNothing(tuple3))
								{
									int item5 = tuple3.Item1;
									int item6 = tuple3.Item2;
									point3 = new Point(item5, item6);
								}
								else
								{
									point3 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(null), current.GetLongitude(null));
								}
								if (current.IsActiveUnit())
								{
									Sensor[] allNoneMCMSensors = current.GetAllNoneMCMSensors();
									num = allNoneMCMSensors.Length;
									int num4 = num - 1;
									for (int j = 0; j <= num4; j++)
									{
										Sensor sensor = allNoneMCMSensors[j];
										List<Contact> list3 = sensor.GetTargetsTrackedForFireControl().ToList<Contact>();
										int num5 = list3.Count - 1;
										this.int_3 = 0;
										while (this.int_3 <= num5)
										{
											Contact contact2 = list3[this.int_3];
											Tuple<int, int> tuple4 = null;
											this.dictionary_2.TryGetValue(contact2, out tuple4);
											if (!Information.IsNothing(tuple4))
											{
												int item7 = tuple4.Item1;
												int item8 = tuple4.Item2;
												point = new Point(item7, item8);
											}
											else
											{
												point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, contact2.GetLatitude(null), contact2.GetLongitude(null));
											}
											this.method_121(ref point3, ref point, graphics_0);
											this.int_3++;
										}
									}
								}
							}
							goto IL_5EA;
						}
					}
				}
				num = list.Count;
				int num6 = num - 1;
				for (int k = 0; k <= num6; k++)
				{
					ActiveUnit activeUnit = list[k];
					if (!activeUnit.IsGroup && activeUnit.IsOperating() && Client.IsVisible(activeUnit))
					{
						Tuple<int, int> tuple5 = null;
						this.dictionary_2.TryGetValue(activeUnit, out tuple5);
						Point point4;
						if (!Information.IsNothing(tuple5))
						{
							int item9 = tuple5.Item1;
							int item10 = tuple5.Item2;
							point4 = new Point(item9, item10);
						}
						else
						{
							point4 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, activeUnit.GetLatitude(null), activeUnit.GetLongitude(null));
						}
						if (!Information.IsNothing(activeUnit))
						{
							Sensor[] allNoneMCMSensors = activeUnit.GetAllNoneMCMSensors();
							if (!Information.IsNothing(allNoneMCMSensors))
							{
								List<Sensor> list4 = allNoneMCMSensors.ToList<Sensor>();
								num = list4.Count;
								if (num > 0)
								{
									int num7 = num - 1;
									for (int l = 0; l <= num7; l++)
									{
										Sensor sensor = list4[l];
										if (sensor.GetTargetsTrackedForFireControl().Count != -1)
										{
											List<Contact> list5 = sensor.GetTargetsTrackedForFireControl().ToList<Contact>();
											int num8 = list5.Count - 1;
											for (int m = 0; m <= num8; m++)
											{
												Contact contact3 = list5[m];
												if (!Information.IsNothing(contact3))
												{
													Tuple<int, int> tuple6 = null;
													this.dictionary_2.TryGetValue(contact3, out tuple6);
													if (!Information.IsNothing(tuple6))
													{
														int item11 = tuple6.Item1;
														int item12 = tuple6.Item2;
														point = new Point(item11, item12);
													}
													else
													{
														point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, contact3.GetLatitude(null), contact3.GetLongitude(null));
													}
													this.method_121(ref point4, ref point, graphics_0);
												}
											}
										}
									}
								}
							}
						}
					}
				}
				IL_5EA:;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200151", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070FA RID: 28922 RVA: 0x003F9D48 File Offset: 0x003F7F48
		private void method_105(Graphics graphics_0)
		{
			try
			{
				Tuple<int, int> tuple = null;
				Pen pen = new Pen(Color.White, 1f);
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (!current.IsGroup || !((Group)current).IsNotActive())
					{
						int num = 0;
						int num2 = 0;
						if (current.IsActiveUnit())
						{
							if (!((ActiveUnit)current).GetCommStuff().IsNotOutOfComms() && !Client.GetMap().IsGodsEyeView() && !Class2529.IsIsolatedPOVObject((ActiveUnit)current))
							{
								WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, ((ActiveUnit)current).GetLatitudeLR().Value, ((ActiveUnit)current).GetLongitudeLR().Value, ref num, ref num2);
							}
							else
							{
								this.dictionary_2.TryGetValue(current, out tuple);
								if (!Information.IsNothing(tuple))
								{
									num = tuple.Item1;
									num2 = tuple.Item2;
									new Point(num, num2);
								}
								else
								{
									WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(null), current.GetLongitude(null), ref num, ref num2);
								}
							}
						}
						else
						{
							WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(null), current.GetLongitude(null), ref num, ref num2);
						}
						Rectangle rect = new Rectangle(num - 10, num2 - 10, 20, 20);
						GraphicsPath graphicsPath = new GraphicsPath();
						graphicsPath.AddRectangle(rect);
						try
						{
							this.DrawPath(pen, graphicsPath, graphics_0);
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception ex2 = ex;
							string arg_19E_0 = ex2.Message;
							ex2.Data.Add("Error at 200152", ex2.Message);
							GameGeneral.LogException(ref ex2);
							if (Debugger.IsAttached)
							{
								Debugger.Break();
							}
							ProjectData.ClearProjectError();
						}
						finally
						{
							graphicsPath.Dispose();
						}
					}
				}
				pen.Dispose();
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200538", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060070FB RID: 28923 RVA: 0x003F9FFC File Offset: 0x003F81FC
		private void method_106(Graphics graphics_0)
		{
			if (!Information.IsNothing(Client.smethod_33()) && Client.smethod_33() != Client.GetHookedUnit() && (!Client.smethod_33().IsGroup || !((Group)Client.smethod_33()).IsNotActive()))
			{
				this.pen_0 = new Pen(Color.FromArgb(200, Color.White), 2f);
				try
				{
					if (Client.smethod_33().IsActiveUnit() && !(((ActiveUnit)Client.smethod_33()).GetCommStuff().IsNotOutOfComms() | Client.GetMap().IsGodsEyeView()))
					{
						WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, ((ActiveUnit)Client.smethod_33()).GetLatitudeLR().Value, ((ActiveUnit)Client.smethod_33()).GetLongitudeLR().Value, ref this.ScreenX, ref this.ScreenY);
					}
					else
					{
						WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, Client.smethod_33().GetLatitude(null), Client.smethod_33().GetLongitude(null), ref this.ScreenX, ref this.ScreenY);
					}
					new Rectangle(this.ScreenX - 10, this.ScreenY - 10, 20, 20);
					this.graphicsPath_0 = new GraphicsPath();
					this.graphicsPath_0.AddLine(new Point(this.ScreenX - 11, this.ScreenY - 11), new Point(this.ScreenX - 5, this.ScreenY - 11));
					this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
					this.graphicsPath_0 = new GraphicsPath();
					this.graphicsPath_0.AddLine(new Point(this.ScreenX + 5, this.ScreenY - 11), new Point(this.ScreenX + 11, this.ScreenY - 11));
					this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
					this.graphicsPath_0 = new GraphicsPath();
					this.graphicsPath_0.AddLine(new Point(this.ScreenX + 11, this.ScreenY - 11), new Point(this.ScreenX + 11, this.ScreenY - 5));
					this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
					this.graphicsPath_0 = new GraphicsPath();
					this.graphicsPath_0.AddLine(new Point(this.ScreenX + 11, this.ScreenY + 5), new Point(this.ScreenX + 11, this.ScreenY + 11));
					this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
					this.graphicsPath_0 = new GraphicsPath();
					this.graphicsPath_0.AddLine(new Point(this.ScreenX + 11, this.ScreenY + 11), new Point(this.ScreenX + 5, this.ScreenY + 11));
					this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
					this.graphicsPath_0 = new GraphicsPath();
					this.graphicsPath_0.AddLine(new Point(this.ScreenX - 5, this.ScreenY + 11), new Point(this.ScreenX - 11, this.ScreenY + 11));
					this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
					this.graphicsPath_0 = new GraphicsPath();
					this.graphicsPath_0.AddLine(new Point(this.ScreenX - 11, this.ScreenY + 11), new Point(this.ScreenX - 11, this.ScreenY + 5));
					this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
					this.graphicsPath_0 = new GraphicsPath();
					this.graphicsPath_0.AddLine(new Point(this.ScreenX - 11, this.ScreenY - 5), new Point(this.ScreenX - 11, this.ScreenY - 11));
					this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
					System.Drawing.Font font_;
					if (Client.float_0 == 1f)
					{
						font_ = this.font_0;
					}
					else
					{
						font_ = new System.Drawing.Font("Verdana", (float)((int)Math.Round((double)(11f / Client.float_0))), FontStyle.Bold);
					}
					if (Client.GetMap().GetShowDatablocks() != MapProfile._UnitCoverage.const_0)
					{
						if (Client.smethod_33().IsActiveUnit())
						{
							this.method_133((ActiveUnit)Client.smethod_33(), 200, Color.White, font_, graphics_0);
						}
						else if (Client.smethod_33().IsContact())
						{
							this.method_134((Contact)Client.smethod_33(), Color.FromArgb(200, Color.White), font_, graphics_0);
						}
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200153", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
				finally
				{
					this.graphicsPath_0.Dispose();
					this.pen_0.Dispose();
				}
			}
		}

		// Token: 0x060070FC RID: 28924 RVA: 0x003FA518 File Offset: 0x003F8718
		private void method_107(Graphics graphics_0)
		{
			if (SimConfiguration.gameOptions.GetShowPlottedPaths() == Configuration.GameOptions.Enum45.const_0)
			{
				try
				{
					if (this.UnitList.Count > 0)
					{
						for (int num = this.UnitList.Count - 1; num >= 0; num += -1)
						{
							try
							{
								Unit unit = this.UnitList[num];
								if (unit.IsActiveUnit())
								{
									ActiveUnit activeUnit = (ActiveUnit)unit;
									if ((!activeUnit.IsGroup || !((Group)activeUnit).IsNotActive()) && Client.IsVisible(activeUnit) && activeUnit.GetNavigator().HasPlottedCourse())
									{
										Client.GetAlpha(ref this.float_6, ref this.int_13, ref activeUnit);
										if (!Information.IsNothing(activeUnit.GetSide(false)) && (activeUnit.GetSide(false) == Client.GetClientSide() || (Client.GetClientSide().GetPostureStance(activeUnit.GetSide(false)) == Misc.PostureStance.Friendly && WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, activeUnit))) && activeUnit != Client.GetHookedUnit() && (!activeUnit.IsGroupLead() || Client.GetMap().ViewMode != MapProfile._ViewMode.GroupMode))
										{
											new GeoPoint(activeUnit.GetLongitude(null), activeUnit.GetLatitude(null));
											this.method_119(activeUnit, graphics_0);
										}
									}
								}
							}
							catch (Exception ex)
							{
								ProjectData.SetProjectError(ex);
								Exception ex2 = ex;
								ex2.Data.Add("Error at 200154", ex2.Message);
								GameGeneral.LogException(ref ex2);
								if (Debugger.IsAttached)
								{
									Debugger.Break();
								}
								ProjectData.ClearProjectError();
							}
						}
					}
				}
				catch (Exception ex3)
				{
					ProjectData.SetProjectError(ex3);
					Exception ex4 = ex3;
					ex4.Data.Add("Error at 200155", ex4.Message);
					GameGeneral.LogException(ref ex4);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060070FD RID: 28925 RVA: 0x00004BC2 File Offset: 0x00002DC2
		private void method_108(Graphics graphics_0)
		{
		}

		// Token: 0x060070FE RID: 28926 RVA: 0x00004BC2 File Offset: 0x00002DC2
		private void method_109(Graphics graphics_0)
		{
		}

		// Token: 0x060070FF RID: 28927 RVA: 0x003FA734 File Offset: 0x003F8934
		private void method_110(ActiveUnit activeUnit_0, Graphics graphics_0)
		{
			if (!Information.IsNothing(activeUnit_0))
			{
				try
				{
					if (Client.IsVisible(activeUnit_0) && !Information.IsNothing(activeUnit_0.GetAI().geoPoint_1))
					{
						Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, activeUnit_0.GetAI().geoPoint_1.GetLatitude(), activeUnit_0.GetAI().geoPoint_1.GetLongitude());
						Point[] points = new Point[]
						{
							new Point(point.X - 4, point.Y),
							new Point(point.X, point.Y - 4),
							new Point(point.X + 4, point.Y),
							new Point(point.X, point.Y + 4),
							new Point(point.X - 4, point.Y)
						};
						graphics_0.DrawPolygon(new Pen(Color.Red, 1f), points);
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200530", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x06007100 RID: 28928 RVA: 0x003FA8BC File Offset: 0x003F8ABC
		private void DrawMineCounterMeasuresGraphics(Graphics graphics_0)
		{
			try
			{
				foreach (Unit current in this.UnitList)
				{
					if (current.IsActiveUnit())
					{
						ActiveUnit activeUnit = (ActiveUnit)current;
						try
						{
							using (List<Sensor>.Enumerator enumerator2 = activeUnit.GetMineCounterMeasures().GetEnumerator())
							{
								while (enumerator2.MoveNext())
								{
									List<GeoPoint> mineSweepingAreaVertices = enumerator2.Current.GetMineSweepingAreaVertices();
									if (!Information.IsNothing(mineSweepingAreaVertices))
									{
										Point[] array = new Point[mineSweepingAreaVertices.Count + 1];
										long num = (long)(mineSweepingAreaVertices.Count - 1);
										for (long num2 = 0L; num2 <= num; num2 += 1L)
										{
											this.geoPoint_3 = mineSweepingAreaVertices[(int)num2];
											array[(int)num2] = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, this.geoPoint_3.GetLatitude(), this.geoPoint_3.GetLongitude());
										}
										array[mineSweepingAreaVertices.Count] = array[0];
										this.SetGraphicsParameters(graphics_0);
										graphics_0.FillPolygon(new SolidBrush(Color.FromArgb(50, Color.DodgerBlue)), array);
									}
								}
							}
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception ex2 = ex;
							ex2.Data.Add("Error at 200156", ex2.Message);
							GameGeneral.LogException(ref ex2);
							if (Debugger.IsAttached)
							{
								Debugger.Break();
							}
							ProjectData.ClearProjectError();
						}
					}
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200528", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007101 RID: 28929 RVA: 0x003FAB08 File Offset: 0x003F8D08
		private void method_112(Graphics graphics_0)
        {
            int count = Client.GetClientScenario().GetExplosions().Count;
            if (count != 0)
            {
                try
                {
                    int num26;
                    List<Explosion> list = new List<Explosion>();
                    list.AddRange(Client.GetClientScenario().GetExplosions());
                    int num2 = count - 1;
                Label_0034:
                    if (num2 < 0)
                    {
                        return;
                    }
                    Explosion explosion = list[num2];
                    double timeToLast = 0.0;
                    if (explosion.GetTimeToLast() < 0.5)
                    {
                        timeToLast = 0.5;
                    }
                    else
                    {
                        timeToLast = explosion.GetTimeToLast();
                    }
                    if (!WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, explosion.GetLat_Graphics(), explosion.GetLon_Graphics()))
                    {
                        goto Label_071A;
                    }
                    Warhead.WarheadType warheadType = explosion.warheadType;
                    if (warheadType <= Warhead.WarheadType.SuperFrag)
                    {
                        if (warheadType <= Warhead.WarheadType.SemiAP)
                        {
                            switch (warheadType)
                            {
                                case Warhead.WarheadType.HE_BlastFrag:
                                case Warhead.WarheadType.SemiAP:
                                    goto Label_03FF;
                            }
                            goto Label_071A;
                        }
                        if (warheadType != Warhead.WarheadType.HardTargetPenetrator)
                        {
                            if (warheadType == Warhead.WarheadType.SuperFrag)
                            {
                                goto Label_0124;
                            }
                            goto Label_071A;
                        }
                        goto Label_03FF;
                    }
                    if (warheadType <= Warhead.WarheadType.Nuclear)
                    {
                        goto Label_0282;
                    }
                    if (((warheadType - 0x1771) > ((Warhead.WarheadType)2)) && (warheadType != Warhead.WarheadType.Cluster_SmartSubs))
                    {
                        goto Label_071A;
                    }
                Label_0124:
                    num26 = explosion.ClusterSubmunitionQty;
                    List<GeoPoint> source = explosion.method_73((float)(timeToLast / ((double)explosion.GetMaxDuration())));
                    double num27 = source.Select<GeoPoint, double>(GeoPointFunc10).Max();
                    double num28 = source.Select<GeoPoint, double>(GeoPointFunc11).Min();
                    double num29 = source.Select<GeoPoint, double>(GeoPointFunc12).Max();
                    double num30 = source.Select<GeoPoint, double>(GeoPointFunc13).Min();
                    Random random = GameGeneral.GetRandom();
                    int num31 = num26;
                    int num32 = 1;
                Label_0199:
                    if (num32 > num31)
                    {
                        goto Label_071A;
                    }
                    try
                    {
                        double num33 = Math2.NormalizeLatitude(num28 + (random.NextDouble() * (num27 - num28)));
                        GeoPoint point4 = new GeoPoint(Math2.NormalizeLongitude(num30 + (random.NextDouble() * (num29 - num30))), num33);
                        if (point4.method_21(ref source, true))
                        {
                            Point point5 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, point4.GetLatitude(), point4.GetLongitude());
                            graphics_0.DrawRectangle(new Pen(Color.Yellow, 1f), new Rectangle(point5.X - 1, point5.Y - 1, 2, 2));
                        }
                    }
                    catch (Exception exception3)
                    {
                        ProjectData.SetProjectError(exception3);
                        Exception exception4 = exception3;
                        exception4.Data.Add("Error at 200158", exception4.Message);
                        GameGeneral.LogException(ref exception4);
                        if (Debugger.IsAttached)
                        {
                            Debugger.Break();
                        }
                        ProjectData.ClearProjectError();
                    }
                    goto Label_0723;
                Label_0282:
                    if ((warheadType - 0xbb9) > ((Warhead.WarheadType)1))
                    {
                        if (warheadType == Warhead.WarheadType.Nuclear)
                        {
                            Color white;
                            int num12;
                            int num4 = 0;
                            if (explosion.method_62())
                            {
                                num4 = 0x295;
                                white = Color.White;
                            }
                            else if (explosion.IsUnderGround())
                            {
                                num4 = 0x16c8;
                                white = Color.YellowGreen;
                            }
                            else
                            {
                                if (!explosion.IsUnderWater())
                                {
                                    throw new NotImplementedException();
                                }
                                num4 = 0xb64;
                                white = Color.DodgerBlue;
                            }
                            float num5 = (float)((timeToLast / 3600.0) * num4);
                            WorldWindow worldWindow = Client.m_WorldWindow;
                            double num6 = explosion.GetLat_Graphics();
                            double num7 = explosion.GetLon_Graphics();
                            double num8 = 0.0;
                            double num9 = 0.0;
                            GeoPointGenerator.GetOtherGeoPoint(num7, num6, ref num8, ref num9, (double)num5, 0.0);
                            Point point = WorldWindUtil.WorldToScreenCoordinate(ref worldWindow, num6, num7);
                            short num10 = (short)Math.Abs((int)(WorldWindUtil.WorldToScreenCoordinate(ref worldWindow, num9, num8).Y - point.Y));
                            float num11 = (float)(timeToLast / ((double)explosion.GetMaxDuration()));
                            if (num11 < 0.5)
                            {
                                num12 = 0xff;
                            }
                            else
                            {
                                num12 = (int)Math.Round((double)(255f * (2f - (2f * num11))));
                            }
                            SolidBrush brush = new SolidBrush(Color.FromArgb(num12, white));
                            graphics_0.FillEllipse(brush, (int)(point.X - num10), (int)(point.Y - num10), (int)(num10 * 2), (int)(num10 * 2));
                        }
                        goto Label_071A;
                    }
                Label_03FF:
                    try
                    {
                        int num13;
                        Color yellowGreen;
                        int num15;
                        if (explosion.method_62())
                        {
                            num13 = 0x295;
                            yellowGreen = Color.White;
                        }
                        else if (explosion.IsUnderGround())
                        {
                            num13 = 0x16c8;
                            yellowGreen = Color.YellowGreen;
                        }
                        else if (explosion.IsUnderWater())
                        {
                            num13 = 0xb64;
                            yellowGreen = Color.DodgerBlue;
                        }
                        else
                        {
                            num13 = 0x295;
                            yellowGreen = Color.White;
                        }
                        float num14 = (float)(timeToLast / ((double)explosion.GetMaxDuration()));
                        if (num14 < 0.5)
                        {
                            num15 = 0xff;
                        }
                        else
                        {
                            num15 = (int)Math.Round((double)(255f * Math.Max((float)0f, (float)(1f - num14))));
                        }
                        yellowGreen = Color.FromArgb(num15, yellowGreen);
                        float num16 = Math.Min((float)((timeToLast / 3600.0) * num13), Explosion.smethod_1(explosion.Yield_Graphics, Weapon._DetonationMedium.Air));
                        WorldWindow window2 = Client.m_WorldWindow;
                        double num17 = explosion.GetLat_Graphics();
                        double num18 = explosion.GetLon_Graphics();
                        double num19 = 0.0;
                        double num20 = 0.0;
                        GeoPointGenerator.GetOtherGeoPoint(num18, num17, ref num19, ref num20, (double)num16, 0.0);
                        Point point3 = WorldWindUtil.WorldToScreenCoordinate(ref window2, num17, num18);
                        int num21 = Math.Abs((int)(WorldWindUtil.WorldToScreenCoordinate(ref window2, num20, num19).Y - point3.Y));
                        int num22 = num21 - 2;
                        int num23 = num22 - 2;
                        int num24 = num23 - 2;
                        int num25 = num24 - 2;
                        GraphicsPath path = new GraphicsPath();
                        path.AddEllipse((int)(point3.X - num21), (int)(point3.Y - num21), (int)(num21 * 2), (int)(num21 * 2));
                        Pen pen = new Pen(yellowGreen, 2f);
                        this.DrawPath(pen, path, graphics_0);
                        path = new GraphicsPath();
                        path.AddEllipse((int)(point3.X - num22), (int)(point3.Y - num22), (int)(num22 * 2), (int)(num22 * 2));
                        pen = new Pen(Color.FromArgb(230, yellowGreen), 2f);
                        this.DrawPath(pen, path, graphics_0);
                        path = new GraphicsPath();
                        path.AddEllipse((int)(point3.X - num23), (int)(point3.Y - num23), (int)(num23 * 2), (int)(num23 * 2));
                        pen = new Pen(Color.FromArgb(180, yellowGreen), 2f);
                        this.DrawPath(pen, path, graphics_0);
                        path = new GraphicsPath();
                        path.AddEllipse((int)(point3.X - num24), (int)(point3.Y - num24), (int)(num24 * 2), (int)(num24 * 2));
                        pen = new Pen(Color.FromArgb(120, yellowGreen), 2f);
                        this.DrawPath(pen, path, graphics_0);
                        path = new GraphicsPath();
                        path.AddEllipse((int)(point3.X - num25), (int)(point3.Y - num25), (int)(num25 * 2), (int)(num25 * 2));
                        pen = new Pen(Color.FromArgb(50, yellowGreen), 2f);
                        this.DrawPath(pen, path, graphics_0);
                    }
                    catch (Exception exception)
                    {
                        ProjectData.SetProjectError(exception);
                        Exception exception2 = exception;
                        exception2.Data.Add("Error at 200159", exception2.Message);
                        GameGeneral.LogException(ref exception2);
                        if (Debugger.IsAttached)
                        {
                            Debugger.Break();
                        }
                        ProjectData.ClearProjectError();
                    }
                Label_071A:
                    num2 += -1;
                    goto Label_0034;
                Label_0723:
                    num32++;
                    goto Label_0199;
                }
                catch (Exception exception5)
                {
                    ProjectData.SetProjectError(exception5);
                    Exception exception6 = exception5;
                    exception6.Data.Add("Error at 200160", exception6.Message);
                    GameGeneral.LogException(ref exception6);
                    if (Debugger.IsAttached)
                    {
                        Debugger.Break();
                    }
                    ProjectData.ClearProjectError();
                }
            }

        }

        // Token: 0x06007102 RID: 28930 RVA: 0x003FB2DC File Offset: 0x003F94DC
        private void DrawWaterSplashs(Graphics graphics_0)
		{
			if (Information.IsNothing(Client.GetClientScenario().GetWaterSplashes()))
			{
				Client.GetClientScenario().SetWaterSplashes(new ObservableCollection<WaterSplash>());
			}
			try
			{
				for (short num = (short)(Client.GetClientScenario().GetWaterSplashes().Count - 1); num >= 0; num += -1)
				{
					WaterSplash waterSplash;
					try
					{
						waterSplash = Client.GetClientScenario().GetWaterSplashes()[(int)num];
					}
					catch (Exception projectError)
					{
						ProjectData.SetProjectError(projectError);
						ProjectData.ClearProjectError();
						num += -1;
						continue;
					}
					float num2 = waterSplash.CR / 10f;
					Color color = Color.FromArgb((int)((short)Math.Round(63.0 + 192.0 * (1.0 - ((double)waterSplash.CR + 1E-07) / (double)waterSplash.MR))), Color.White);
					WorldWindow worldWindow = Client.m_WorldWindow;
					double latitude = waterSplash.GetLatitude(null);
					double longitude = waterSplash.GetLongitude(null);
					double lng = 0.0;
					double lat = 0.0;
					GeoPointGenerator.GetOtherGeoPoint(longitude, latitude, ref lng, ref lat, (double)num2, 0.0);
					Point point = WorldWindUtil.WorldToScreenCoordinate(ref worldWindow, latitude, longitude);
					short num3 = (short)Math.Abs(WorldWindUtil.WorldToScreenCoordinate(ref worldWindow, lat, lng).Y - point.Y);
					if (num3 >= 2)
					{
						SolidBrush brush = new SolidBrush(color);
						graphics_0.FillEllipse(brush, point.X - (int)num3, point.Y - (int)num3, (int)(num3 * 2), (int)(num3 * 2));
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200161", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007103 RID: 28931 RVA: 0x003FB4EC File Offset: 0x003F96EC
		private void DrawGroundImpacts(Graphics graphics_0)
		{
			if (Information.IsNothing(Client.GetClientScenario().GetGroundImpacts()))
			{
				Client.GetClientScenario().SetGroundImpacts(new ObservableCollection<GroundImpact>());
			}
			try
			{
				int count = Client.GetClientScenario().GetGroundImpacts().Count;
				List<Point> list = new List<Point>();
				for (short num = (short)(count - 1); num >= 0; num += -1)
				{
					GroundImpact groundImpact;
					try
					{
						groundImpact = Client.GetClientScenario().GetGroundImpacts()[(int)num];
					}
					catch (Exception projectError)
					{
						ProjectData.SetProjectError(projectError);
						ProjectData.ClearProjectError();
						num += -1;
						continue;
					}
					float num2 = (float)Math.Max(0.008099352051835854, (double)groundImpact.CR);
					short alpha = (short)Math.Round(63.0 + 192.0 * (1.0 - ((double)groundImpact.CR + 1E-07) / (double)groundImpact.MR));
					Color color;
					if (groundImpact.bool_8)
					{
						color = Color.FromArgb((int)alpha, Color.Yellow);
					}
					else
					{
						color = Color.FromArgb((int)alpha, Color.SaddleBrown);
					}
					WorldWindow worldWindow = Client.m_WorldWindow;
					double latitude = groundImpact.GetLatitude(null);
					double longitude = groundImpact.GetLongitude(null);
					double lng = 0.0;
					double lat = 0.0;
					GeoPointGenerator.GetOtherGeoPoint(longitude, latitude, ref lng, ref lat, (double)num2, 0.0);
					Point item = WorldWindUtil.WorldToScreenCoordinate(ref worldWindow, latitude, longitude);
					short num3 = (short)Math.Abs(WorldWindUtil.WorldToScreenCoordinate(ref worldWindow, lat, lng).Y - item.Y);
					if (num3 >= 2)
					{
						SolidBrush brush = new SolidBrush(color);
						graphics_0.FillEllipse(brush, item.X - (int)num3, item.Y - (int)num3, (int)(num3 * 2), (int)(num3 * 2));
						list.Add(item);
					}
				}
				foreach (Point current in list)
				{
					Color color2 = Color.FromArgb(255, Color.OrangeRed);
					SolidBrush brush2 = new SolidBrush(color2);
					graphics_0.FillEllipse(brush2, current.X - 2, current.Y - 2, 4, 4);
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200589", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007104 RID: 28932 RVA: 0x003FB7B4 File Offset: 0x003F99B4
		private void method_115(Graphics graphics_0)
		{
			if (Information.IsNothing(Client.GetClientScenario().GetWeaponImpacts()))
			{
				Client.GetClientScenario().SetWeaponImpacts(new ObservableCollection<WeaponImpact>());
			}
			try
			{
				for (short num = (short)(Client.GetClientScenario().GetWeaponImpacts().Count - 1); num >= 0; num += -1)
				{
					WeaponImpact weaponImpact = Client.GetClientScenario().GetWeaponImpacts()[(int)num];
					WeaponImpact._WeaponImpactType impactType = weaponImpact.ImpactType;
					string text = "";
					if (impactType != WeaponImpact._WeaponImpactType.Airburst)
					{
						if (impactType == WeaponImpact._WeaponImpactType.const_1)
						{
							text = Application.StartupPath + "\\Symbols\\Impact_Electronic.png";
						}
					}
					else
					{
						text = Application.StartupPath + "\\Symbols\\Impact.png";
					}
					Bitmap bitmap;
					if (this.dictionary_1.ContainsKey(text))
					{
						bitmap = this.dictionary_1[text];
					}
					else
					{
						bitmap = (Bitmap)Image.FromFile(text);
						this.dictionary_1.Add(text, bitmap);
					}
					Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, weaponImpact.GetLatitude(null), weaponImpact.GetLongitude(null));
					try
					{
						graphics_0.DrawImage(bitmap, point.X - 22, point.Y - 22, 44, 44);
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 200162", ex2.Message);
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200163", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007105 RID: 28933 RVA: 0x003FB9A0 File Offset: 0x003F9BA0
		public void method_116(Graphics graphics_0)
		{
			try
			{
				Pen pen = new Pen(Brushes.Red, 1f);
				float num = -90f;
				while (true)
				{
					num = (float)Math.Round((double)num, 2);
					float num2 = -180f;
					do
					{
						num2 = (float)Math.Round((double)num2, 2);
						if (WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, (double)num, (double)num2))
						{
							try
							{
								WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, (double)num, (double)num2, ref this.int_5, ref this.int_6);
								graphics_0.DrawLine(pen, this.int_5 - 4, this.int_6 - 4, this.int_5 + 4, this.int_6 + 4);
								graphics_0.DrawLine(pen, this.int_5 - 4, this.int_6 + 4, this.int_5 + 4, this.int_6 - 4);
								goto IL_10B;
							}
							catch (Exception ex)
							{
								ProjectData.SetProjectError(ex);
								Exception ex2 = ex;
								ex2.Data.Add("Error at 200164", ex2.Message);
								GameGeneral.LogException(ref ex2);
								if (Debugger.IsAttached)
								{
									Debugger.Break();
								}
								ProjectData.ClearProjectError();
								goto IL_10B;
							}
							break;
						}
						IL_10B:
						num2 += 0.05f;
					}
					while (num2 <= 180f);
					IL_F1:
					num += 0.05f;
					if (num > 90f)
					{
						break;
					}
					continue;
					goto IL_F1;
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200525", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007106 RID: 28934 RVA: 0x003FBB4C File Offset: 0x003F9D4C
		public void method_117(double double_1, double double_2, float float_7, float float_8, Point point_7, Color color_8, Graphics graphics_0)
		{
			try
			{
				this.float_2 = float_7;
				GeoPoint geoPoint;
				double longitude = (geoPoint = this.geoPoint_4).GetLongitude();
				GeoPoint geoPoint2;
				double latitude = (geoPoint2 = this.geoPoint_4).GetLatitude();
				GeoPointGenerator.GetOtherGeoPoint(double_2, double_1, ref longitude, ref latitude, 100.0, (double)this.float_2);
				geoPoint2.SetLatitude(latitude);
				geoPoint.SetLongitude(longitude);
				Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, this.geoPoint_4.GetLatitude(), this.geoPoint_4.GetLongitude());
				int num = point.Y - point_7.Y;
				int num2 = point.X - point_7.X;
				this.float_3 = (float)Math2.Normalize(Math.Atan2((double)num, (double)num2) * 180.0 / 3.14159265358979 + 90.0);
				short num3 = (short)Math.Round((double)20f * Math2.Cos_D((double)this.float_3));
				short num4 = (short)Math.Round((double)20f * Math2.Sin_D((double)this.float_3));
				Point point2 = new Point(point_7.X + (int)num4, point_7.Y - (int)num3);
				GraphicsPath graphicsPath = new GraphicsPath();
				graphicsPath.AddLine(point_7.X, point_7.Y, point2.X, point2.Y);
				Pen pen = new Pen(color_8, 1f);
				try
				{
					this.DrawPath(pen, graphicsPath, graphics_0);
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200165", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
				finally
				{
					pen.Dispose();
					graphicsPath.Dispose();
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200529", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007107 RID: 28935 RVA: 0x003FBD9C File Offset: 0x003F9F9C
		public void method_118(Graphics graphics_0)
		{
			checked
			{
				if (Client.GetCommandOrder() == Client._CommandOrder.AddNewWeaponWaypoint && !Information.IsNothing(Client.weaponSalvo))
				{
					Color color = Color.FromArgb(255, Color.LightGray);
					try
					{
						Contact target = Client.weaponSalvo.Target;
						Point pt;
						if (Client.weaponSalvo.PlottedCourse.Count<Waypoint>() == 0)
						{
							pt = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, target.GetLatitude(null), target.GetLongitude(null));
						}
						else
						{
							pt = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, Client.weaponSalvo.PlottedCourse[0].GetLatitude(), Client.weaponSalvo.PlottedCourse[0].GetLongitude());
						}
						this.SetGraphicsParameters(graphics_0);
						this.pen_0 = new Pen(color, 1f);
						this.pen_0.DashStyle = DashStyle.Dash;
						WeaponSalvo.Shooter[] shooters = Client.weaponSalvo.m_Shooters;
						int i = 0;
						while (i < shooters.Length)
						{
							WeaponSalvo.Shooter shooter = shooters[i];
							ActiveUnit activeUnit = null;
							try
							{
								activeUnit = Client.GetClientScenario().GetActiveUnits()[shooter.ShooterObjectID];
							}
							catch (Exception ex)
							{
								ProjectData.SetProjectError(ex);
								Exception ex2 = ex;
								ex2.Data.Add("Error at 200385", ex2.Message);
								GameGeneral.LogException(ref ex2);
								if (Debugger.IsAttached)
								{
									Debugger.Break();
								}
								ProjectData.ClearProjectError();
								goto IL_19B;
							}
							goto IL_143;
							IL_19B:
							i++;
							continue;
							IL_143:
							Point pt2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, activeUnit.GetLatitude(null), activeUnit.GetLongitude(null));
							this.graphicsPath_0 = new GraphicsPath();
							this.graphicsPath_0.AddLine(pt2, pt);
							this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
							goto IL_19B;
						}
						if (Client.weaponSalvo.PlottedCourse.Count<Waypoint>() > 0)
						{
							List<Point> list = new List<Point>();
							Waypoint[] plottedCourse = Client.weaponSalvo.PlottedCourse;
							for (int j = 0; j < plottedCourse.Length; j++)
							{
								Waypoint waypoint = plottedCourse[j];
								list.Add(WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint.GetLatitude(), waypoint.GetLongitude()));
							}
							list.Add(WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, target.GetLatitude(null), target.GetLongitude(null)));
							this.graphicsPath_0 = new GraphicsPath();
							unchecked
							{
								int num = list.Count - 2;
								for (int k = 0; k <= num; k++)
								{
									this.graphicsPath_0.AddLine(list[k], list[k + 1]);
								}
								this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
							}
						}
						this.pen_0.Dispose();
						this.graphicsPath_0.Dispose();
					}
					catch (Exception ex3)
					{
						ProjectData.SetProjectError(ex3);
						Exception ex4 = ex3;
						ex4.Data.Add("Error at 200386", ex4.Message);
						GameGeneral.LogException(ref ex4);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		// Token: 0x06007108 RID: 28936 RVA: 0x003FC0DC File Offset: 0x003FA2DC
		public void method_119(ActiveUnit activeUnit_0, Graphics graphics_0)
		{
			if (!Information.IsNothing(activeUnit_0) && (!activeUnit_0.IsActiveUnit() || Client.IsVisible(activeUnit_0)))
			{
				Waypoint[] plottedCourse = activeUnit_0.GetNavigator().GetPlottedCourse();
				if (plottedCourse.Length != 0)
				{
					Color color;
					if (activeUnit_0 == Client.GetHookedUnit())
					{
						color = Color.FromArgb(255, Color.LightGray);
					}
					else
					{
						color = Color.FromArgb(90, Color.LightGray);
					}
					Pen pen = new Pen(color, 1f);
					pen.SetLineCap(LineCap.Round, LineCap.Round, DashCap.Flat);
					this.SetGraphicsParameters(graphics_0);
					try
					{
						List<Point> list = new List<Point>();
						Tuple<int, int> tuple = null;
						this.dictionary_2.TryGetValue(activeUnit_0, out tuple);
						if (!Information.IsNothing(tuple))
						{
							int item = tuple.Item1;
							int item2 = tuple.Item2;
							list.Add(new Point(item, item2));
						}
						else
						{
							list.Add(WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, activeUnit_0.GetLatitude(null), activeUnit_0.GetLongitude(null)));
						}
						int num = plottedCourse.Length - 1;
						bool flag = true;
						int num2 = num;
						for (int i = 0; i <= num2; i++)
						{
							Waypoint waypoint = plottedCourse[i];
							if (!Information.IsNothing(waypoint))
							{
								list.Add(WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint.GetLatitude(), waypoint.GetLongitude()));
								this.list_6.Add(waypoint);
							}
						}
						int num3 = list.Count - 2;
						for (int j = 0; j <= num3; j++)
						{
							this.graphicsPath_0 = new GraphicsPath();
							this.graphicsPath_0.AddLine(list[j], list[j + 1]);
							if (this.graphicsPath_0.PointCount != 0)
							{
								if (plottedCourse[j].waypointType == Waypoint.WaypointType.PathfindingPoint)
								{
									pen.DashStyle = DashStyle.Dash;
								}
								else
								{
									pen.DashStyle = DashStyle.Solid;
								}
								this.DrawPath(pen, this.graphicsPath_0, graphics_0);
								if (flag && activeUnit_0 == Client.GetHookedUnit())
								{
									switch (plottedCourse[j].waypointType)
									{
									case Waypoint.WaypointType.ManualPlottedCourseWaypoint:
									case Waypoint.WaypointType.PatrolStation:
									case Waypoint.WaypointType.Assemble:
									case Waypoint.WaypointType.TurningPoint:
									case Waypoint.WaypointType.Split:
									case Waypoint.WaypointType.Formate:
									case Waypoint.WaypointType.LandingMarshal:
									case Waypoint.WaypointType.StrikeIngress:
									case Waypoint.WaypointType.StrikeEgress:
										graphics_0.DrawRectangle(new Pen(color, 2f), new Rectangle(list[j + 1].X - 2, list[j + 1].Y - 2, 4, 4));
										break;
									case Waypoint.WaypointType.InitialPoint:
									case Waypoint.WaypointType.WeaponLaunch:
									{
										graphics_0.DrawRectangle(new Pen(color, 2f), new Rectangle(list[j + 1].X - 2, list[j + 1].Y - 2, 4, 4));
										Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, plottedCourse[j].GetLatitude(), plottedCourse[j].GetLongitude());
										System.Drawing.Font font = new System.Drawing.Font("Verdana", 10f, FontStyle.Bold);
										SolidBrush brush = new SolidBrush(color);
										if (plottedCourse[j].waypointType == Waypoint.WaypointType.InitialPoint)
										{
											graphics_0.DrawString("IP", font, brush, (float)(point.X + 6), (float)(point.Y - 8));
										}
										else
										{
											graphics_0.DrawString("Wpn Lnch", font, brush, (float)(point.X + 6), (float)(point.Y - 8));
										}
										break;
									}
									case Waypoint.WaypointType.Target:
									case Waypoint.WaypointType.WeaponTarget:
									{
										Point point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, plottedCourse[j].GetLatitude(), plottedCourse[j].GetLongitude());
										Point[] points = new Point[]
										{
											new Point(point2.X + 4, point2.Y + 4),
											new Point(point2.X - 4, point2.Y + 4),
											new Point(point2.X, point2.Y - 4)
										};
										graphics_0.DrawPolygon(pen, points);
										break;
									}
									}
								}
							}
						}
						if (flag && !Information.IsNothing(Client.GetWayPointSelected()) && activeUnit_0 == Client.GetHookedUnit())
						{
							Pen pen2 = new Pen(Color.Yellow, 2f);
							switch (Client.GetWayPointSelected().waypointType)
							{
							case Waypoint.WaypointType.ManualPlottedCourseWaypoint:
							case Waypoint.WaypointType.Assemble:
							case Waypoint.WaypointType.TurningPoint:
							case Waypoint.WaypointType.Split:
							case Waypoint.WaypointType.Formate:
							case Waypoint.WaypointType.LandingMarshal:
							case Waypoint.WaypointType.StrikeIngress:
							case Waypoint.WaypointType.StrikeEgress:
							{
								Point point3 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, Client.GetWayPointSelected().GetLatitude(), Client.GetWayPointSelected().GetLongitude());
								graphics_0.DrawRectangle(pen2, new Rectangle(point3.X - 3, point3.Y - 3, 6, 6));
								break;
							}
							case Waypoint.WaypointType.InitialPoint:
							case Waypoint.WaypointType.WeaponLaunch:
							{
								Point point4 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, Client.GetWayPointSelected().GetLatitude(), Client.GetWayPointSelected().GetLongitude());
								graphics_0.DrawRectangle(pen2, new Rectangle(point4.X - 3, point4.Y - 3, 6, 6));
								break;
							}
							case Waypoint.WaypointType.Target:
							case Waypoint.WaypointType.WeaponTarget:
							{
								Point point5 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, Client.GetWayPointSelected().GetLatitude(), Client.GetWayPointSelected().GetLongitude());
								Point[] points2 = new Point[]
								{
									new Point(point5.X + 3, point5.Y + 3),
									new Point(point5.X - 3, point5.Y + 3),
									new Point(point5.X, point5.Y - 3)
								};
								graphics_0.DrawPolygon(pen2, points2);
								break;
							}
							}
						}
						if (!Information.IsNothing(this.graphicsPath_0))
						{
							this.graphicsPath_0.Dispose();
						}
						if (!Information.IsNothing(this.graphicsPath_0))
						{
							this.graphicsPath_0.Dispose();
						}
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 200166", ex2.Message);
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		// Token: 0x06007109 RID: 28937 RVA: 0x003FC764 File Offset: 0x003FA964
		private void DrawTargetingGraphics(ref Point point_7, ref Point point_8, ref Point point_9, ActiveUnit_AI.TargetingEntry._TargetingBehavior _TargetingBehavior_0, float float_7, bool isPrimaryTarget, Graphics graphics_0, Color color_8)
		{
			try
			{
				string text = "";
				switch (_TargetingBehavior_0)
				{
				case ActiveUnit_AI.TargetingEntry._TargetingBehavior.AutoTargeted:
					text = "自动";
					break;
				case ActiveUnit_AI.TargetingEntry._TargetingBehavior.ManualWeaponAlloc:
					text = "手动+分配";
					break;
				case ActiveUnit_AI.TargetingEntry._TargetingBehavior.ManualTargeted:
					text = "手动";
					break;
				}
				if (isPrimaryTarget)
				{
					text += "-主要";
				}
				if (float_7 > 0f)
				{
					text = text + " - " + Conversions.ToString(Math.Round((double)float_7, 1));
				}
				GraphicsPath graphicsPath = new GraphicsPath();
				graphicsPath.AddLine(point_7, point_8);
				Pen pen = new Pen(color_8, 1f);
				pen.DashStyle = DashStyle.Dash;
				try
				{
					this.DrawPath(pen, graphicsPath, graphics_0);
					this.DrawTextString(point_9.X, point_9.Y, text, graphics_0, pen.Color.ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 10f, FontStyle.Bold));
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200167", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
				finally
				{
					pen.Dispose();
					graphicsPath.Dispose();
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200539", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600710A RID: 28938 RVA: 0x003FC930 File Offset: 0x003FAB30
		private void method_121(ref Point point_7, ref Point point_8, Graphics graphics_0)
		{
			this.graphicsPath_0 = new GraphicsPath();
			this.graphicsPath_0.AddLine(point_7, point_8);
			this.pen_0 = new Pen(Color.FromArgb(255, 105, 105), 1f);
			this.pen_0.DashStyle = DashStyle.Dash;
			try
			{
				this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200168", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
			finally
			{
				this.pen_0.Dispose();
				this.graphicsPath_0.Dispose();
			}
		}

		// Token: 0x0600710B RID: 28939 RVA: 0x003FCA10 File Offset: 0x003FAC10
		private void DrawLine(ref Point point_7, ref Point point_8, Graphics graphics_0)
		{
			try
			{
				this.graphicsPath_0 = new GraphicsPath();
				this.graphicsPath_0.AddLine(point_7, point_8);
				this.pen_0 = new Pen(Color.DarkOrange, 1f);
				try
				{
					this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200169", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
				finally
				{
					this.pen_0.Dispose();
					this.graphicsPath_0.Dispose();
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200523", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600710C RID: 28940 RVA: 0x003FCB28 File Offset: 0x003FAD28
		public void method_123(ref Point point_7, ref Point point_8, Graphics graphics_0)
		{
			this.graphicsPath_0 = new GraphicsPath();
			this.graphicsPath_0.AddLine(point_7, point_8);
			this.pen_0 = new Pen(Color.FromArgb((int)Client.byte_0, 84, 252, 252));
			try
			{
				this.DrawPath(this.pen_0, this.graphicsPath_0, graphics_0);
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200170", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
			finally
			{
				this.pen_0.Dispose();
				this.graphicsPath_0.Dispose();
			}
		}

		// Token: 0x0600710D RID: 28941 RVA: 0x003FCC00 File Offset: 0x003FAE00
		private void DrawDamageGraphics(Graphics graphics_0)
		{
			int num = this.UnitList.Count - 1;
			for (int num2 = 0; num2 <= num; num2++)
			{
				try
				{
					Unit unit = this.UnitList[num2];
					if (unit.IsActiveUnit())
					{
						ActiveUnit activeUnit_ = (ActiveUnit)unit;
						this.method_129(activeUnit_, graphics_0);
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200171", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x0600710E RID: 28942 RVA: 0x003FCCA8 File Offset: 0x003FAEA8
		private void DrawSonybuoysGraphics(Graphics graphics_0)
		{
			List<ActiveUnit> list = new List<ActiveUnit>();
			list.AddRange(Client.GetClientSide().ActiveUnitArray);
			if (!Information.IsNothing(list))
			{
				int num = list.Count - 1;
				for (int num2 = 0; num2 <= num; num2++)
				{
					try
					{
						ActiveUnit activeUnit = list[num2];
						if (this.UnitList.Contains(activeUnit))
						{
							this.method_126(activeUnit, graphics_0);
						}
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 200172", ex2.Message);
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		// Token: 0x0600710F RID: 28943 RVA: 0x003FCD68 File Offset: 0x003FAF68
		private void method_126(ActiveUnit activeUnit_0, Graphics graphics_0)
		{
			if (!Information.IsNothing(activeUnit_0) && (activeUnit_0.IsWeapon || activeUnit_0.IsAircraft || activeUnit_0.IsShip || activeUnit_0.IsSubmarine) && Client.IsVisible(activeUnit_0))
			{
				try
				{
					if (!Information.IsNothing(activeUnit_0) && (activeUnit_0.IsWeapon || activeUnit_0.IsAircraft || activeUnit_0.IsShip || activeUnit_0.IsSubmarine))
					{
						if (activeUnit_0.IsSubmarine)
						{
							if (((Submarine)activeUnit_0).IsNuclearPropelled())
							{
								return;
							}
						}
						else if (activeUnit_0.IsShip && ((Ship)activeUnit_0).IsNuclearPowered())
						{
							return;
						}
						if (!activeUnit_0.IsWeapon || ((Weapon)activeUnit_0).GetWeaponType() != Weapon._WeaponType.Sonobuoy || SimConfiguration.gameOptions.GetSonobuoyVisibility() != Configuration.GameOptions._SonobuoyVisibility.const_2)
						{
							this.color_7 = Color.Silver;
							if (activeUnit_0.IsWeapon && ((Weapon)activeUnit_0).GetWeaponType() == Weapon._WeaponType.Sonobuoy && SimConfiguration.gameOptions.GetSonobuoyVisibility() == Configuration.GameOptions._SonobuoyVisibility.const_1)
							{
								this.color_7 = Color.FromArgb(128, this.color_7);
							}
							double num = 18.0;
							double num2 = 0.0;
							double num3 = 0.0;
							this.int_9 = (int)Math.Round(num * activeUnit_0.GetFuelLeft(ref num2, ref num3, false));
							Tuple<int, int> tuple = null;
							this.dictionary_2.TryGetValue(activeUnit_0, out tuple);
							Point point;
							if (!Information.IsNothing(tuple))
							{
								int item = tuple.Item1;
								int item2 = tuple.Item2;
								point = new Point(item, item2);
							}
							else
							{
								point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, activeUnit_0.GetLatitude(null), activeUnit_0.GetLongitude(null));
							}
							Pen pen = new Pen(this.color_7, 4f);
							try
							{
								graphics_0.DrawLine(pen, new Point(point.X - 9, point.Y + 13), new Point(point.X - 9 + this.int_9, point.Y + 13));
							}
							catch (Exception ex)
							{
								ProjectData.SetProjectError(ex);
								Exception ex2 = ex;
								ex2.Data.Add("Error at 200173", ex2.Message);
								GameGeneral.LogException(ref ex2);
								if (Debugger.IsAttached)
								{
									Debugger.Break();
								}
								ProjectData.ClearProjectError();
							}
							finally
							{
								pen.Dispose();
							}
						}
					}
				}
				catch (Exception ex3)
				{
					ProjectData.SetProjectError(ex3);
					Exception ex4 = ex3;
					ex4.Data.Add("Error at 101148", "");
					GameGeneral.LogException(ref ex4);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x06007110 RID: 28944 RVA: 0x003FD06C File Offset: 0x003FB26C
		private void method_127(Contact contact_0, Graphics graphics_0)
		{
			if (!Information.IsNothing(contact_0) && !Information.IsNothing(contact_0.ActualUnit))
			{
				ActiveUnit actualUnit = contact_0.ActualUnit;
				if (actualUnit.IsWeapon || actualUnit.IsAircraft || actualUnit.IsShip)
				{
					try
					{
						this.color_7 = Color.Red;
						this.int_9 = 18;
						if (contact_0.GetBDA_Fire(Client.GetClientSide()).HasValue)
						{
							ActiveUnit_Damage.FireIntensityLevel? bDA_Fire = contact_0.GetBDA_Fire(Client.GetClientSide());
							byte? b = bDA_Fire.HasValue ? new byte?((byte)bDA_Fire.GetValueOrDefault()) : null;
							if (!(b.HasValue ? new bool?(b.GetValueOrDefault() == 0) : null).GetValueOrDefault())
							{
								b = (bDA_Fire.HasValue ? new byte?((byte)bDA_Fire.GetValueOrDefault()) : null);
								if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 1) : null).GetValueOrDefault())
								{
									this.int_9 = (int)Math.Round((double)this.int_9 * 0.25);
								}
								else
								{
									b = (bDA_Fire.HasValue ? new byte?((byte)bDA_Fire.GetValueOrDefault()) : null);
									if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 2) : null).GetValueOrDefault())
									{
										this.int_9 = (int)Math.Round((double)this.int_9 * 0.5);
									}
									else
									{
										b = (bDA_Fire.HasValue ? new byte?((byte)bDA_Fire.GetValueOrDefault()) : null);
										if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 3) : null).GetValueOrDefault())
										{
											this.int_9 = (int)Math.Round((double)this.int_9 * 0.75);
										}
										else
										{
											b = (bDA_Fire.HasValue ? new byte?((byte)bDA_Fire.GetValueOrDefault()) : null);
											if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 4) : null).GetValueOrDefault())
											{
												this.int_9 = this.int_9;
											}
										}
									}
								}
								Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, contact_0.GetLatitude(null), contact_0.GetLongitude(null));
								this.pen_0 = new Pen(this.color_7, 4f);
								try
								{
									graphics_0.DrawLine(this.pen_0, new Point(point.X - 9, point.Y + 13), new Point(point.X - 9 + this.int_9, point.Y + 13));
								}
								catch (Exception ex)
								{
									ProjectData.SetProjectError(ex);
									Exception ex2 = ex;
									ex2.Data.Add("Error at 200174", ex2.Message);
									GameGeneral.LogException(ref ex2);
									if (Debugger.IsAttached)
									{
										Debugger.Break();
									}
									ProjectData.ClearProjectError();
								}
								finally
								{
									this.pen_0.Dispose();
								}
							}
						}
					}
					catch (Exception ex3)
					{
						ProjectData.SetProjectError(ex3);
						Exception ex4 = ex3;
						ex4.Data.Add("Error at 101149", "");
						GameGeneral.LogException(ref ex4);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		// Token: 0x06007111 RID: 28945 RVA: 0x003FD474 File Offset: 0x003FB674
		private void method_128(Contact contact_0, Graphics graphics_0)
		{
			try
			{
				if (!Information.IsNothing(contact_0) && !Information.IsNothing(contact_0.ActualUnit))
				{
					ActiveUnit actualUnit = contact_0.ActualUnit;
					if (actualUnit.IsWeapon || actualUnit.IsAircraft || actualUnit.IsShip)
					{
						this.color_7 = Color.DodgerBlue;
						this.int_9 = 18;
						if (contact_0.GetBDA_Flood(Client.GetClientSide()).HasValue)
						{
							ActiveUnit_Damage.FloodingIntensityLevel? bDA_Flood = contact_0.GetBDA_Flood(Client.GetClientSide());
							byte? b = bDA_Flood.HasValue ? new byte?((byte)bDA_Flood.GetValueOrDefault()) : null;
							if (!(b.HasValue ? new bool?(b.GetValueOrDefault() == 0) : null).GetValueOrDefault())
							{
								b = (bDA_Flood.HasValue ? new byte?((byte)bDA_Flood.GetValueOrDefault()) : null);
								if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 1) : null).GetValueOrDefault())
								{
									this.int_9 = (int)Math.Round((double)this.int_9 * 0.25);
								}
								else
								{
									b = (bDA_Flood.HasValue ? new byte?((byte)bDA_Flood.GetValueOrDefault()) : null);
									if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 2) : null).GetValueOrDefault())
									{
										this.int_9 = (int)Math.Round((double)this.int_9 * 0.5);
									}
									else
									{
										b = (bDA_Flood.HasValue ? new byte?((byte)bDA_Flood.GetValueOrDefault()) : null);
										if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 3) : null).GetValueOrDefault())
										{
											this.int_9 = (int)Math.Round((double)this.int_9 * 0.75);
										}
										else
										{
											b = (bDA_Flood.HasValue ? new byte?((byte)bDA_Flood.GetValueOrDefault()) : null);
											if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 4) : null).GetValueOrDefault())
											{
												this.int_9 = this.int_9;
											}
										}
									}
								}
								Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, contact_0.GetLatitude(null), contact_0.GetLongitude(null));
								Pen pen = new Pen(this.color_7, 4f);
								try
								{
									graphics_0.DrawLine(pen, new Point(point.X - 9, point.Y + 17), new Point(point.X - 9 + this.int_9, point.Y + 17));
								}
								catch (Exception ex)
								{
									ProjectData.SetProjectError(ex);
									Exception ex2 = ex;
									ex2.Data.Add("Error at 200175", ex2.Message);
									GameGeneral.LogException(ref ex2);
									if (Debugger.IsAttached)
									{
										Debugger.Break();
									}
									ProjectData.ClearProjectError();
								}
								finally
								{
									pen.Dispose();
								}
							}
						}
					}
				}
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 101150", "");
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007112 RID: 28946 RVA: 0x003FD870 File Offset: 0x003FBA70
		private void method_129(ActiveUnit activeUnit_, Graphics graphics_0)
		{
			if (!Information.IsNothing(activeUnit_) && !activeUnit_.IsWeapon && !activeUnit_.IsGroup && (!activeUnit_.IsAircraft || Client.GetClientScenario().DeclaredFeatures.Contains(Scenario.ScenarioFeatureOption.AircraftDamageModel)) && Client.IsVisible(activeUnit_))
			{
				try
				{
					float damagePts = activeUnit_.GetDamage().GetDamagePts();
					if (damagePts > 80f)
					{
						this.color_7 = Color.Red;
					}
					else if (damagePts > 60f)
					{
						this.color_7 = Color.Orange;
					}
					else if (damagePts > 40f)
					{
						this.color_7 = Color.Yellow;
					}
					else if (damagePts > 0f)
					{
						this.color_7 = Color.Lime;
					}
					else
					{
						this.color_7 = Color.Green;
					}
					this.int_9 = (int)Math.Round((double)Math.Max(20f * ((100f - activeUnit_.GetDamage().GetDamagePts()) / 100f), 1f));
					Tuple<int, int> tuple = null;
					this.dictionary_2.TryGetValue(activeUnit_, out tuple);
					Point point;
					if (!Information.IsNothing(tuple))
					{
						int item = tuple.Item1;
						int item2 = tuple.Item2;
						point = new Point(item, item2);
					}
					else
					{
						point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, activeUnit_.GetLatitude(null), activeUnit_.GetLongitude(null));
					}
					Pen pen = new Pen(this.color_7, 4f);
					try
					{
						graphics_0.DrawLine(pen, new Point(point.X - 10, point.Y - 14), new Point(point.X - 10 + this.int_9, point.Y - 14));
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 200176", ex2.Message);
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
					finally
					{
						pen.Dispose();
					}
				}
				catch (Exception ex3)
				{
					ProjectData.SetProjectError(ex3);
					Exception ex4 = ex3;
					ex4.Data.Add("Error at 101151", "");
					GameGeneral.LogException(ref ex4);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x06007113 RID: 28947 RVA: 0x003FDB04 File Offset: 0x003FBD04
		private void method_130(Contact contact_0, Graphics graphics_0)
		{
			if (!Information.IsNothing(contact_0) && !Information.IsNothing(contact_0.ActualUnit))
			{
				ActiveUnit actualUnit = contact_0.ActualUnit;
				if (!actualUnit.IsWeapon && !actualUnit.IsGroup && !actualUnit.IsAircraft)
				{
					try
					{
						this.int_9 = 20;
						Contact._BattleDamageAssessment? battleDamageAssessment = contact_0.GetBattleDamageAssessment(Client.GetClientSide());
						byte? b = battleDamageAssessment.HasValue ? new byte?((byte)battleDamageAssessment.GetValueOrDefault()) : null;
						if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 0) : null).GetValueOrDefault())
						{
							this.int_9 = this.int_9;
							this.color_7 = Color.Green;
						}
						else
						{
							b = (battleDamageAssessment.HasValue ? new byte?((byte)battleDamageAssessment.GetValueOrDefault()) : null);
							if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 1) : null).GetValueOrDefault())
							{
								this.int_9 = (int)Math.Round((double)this.int_9 * 0.75);
								this.color_7 = Color.Yellow;
							}
							else
							{
								b = (battleDamageAssessment.HasValue ? new byte?((byte)battleDamageAssessment.GetValueOrDefault()) : null);
								if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 2) : null).GetValueOrDefault())
								{
									this.int_9 = (int)Math.Round((double)this.int_9 * 0.5);
									this.color_7 = Color.Orange;
								}
								else
								{
									b = (battleDamageAssessment.HasValue ? new byte?((byte)battleDamageAssessment.GetValueOrDefault()) : null);
									if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 3) : null).GetValueOrDefault())
									{
										this.int_9 = (int)Math.Round((double)this.int_9 * 0.25);
										this.color_7 = Color.Red;
									}
									else
									{
										b = (battleDamageAssessment.HasValue ? new byte?((byte)battleDamageAssessment.GetValueOrDefault()) : null);
										if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 4) : null).GetValueOrDefault())
										{
											return;
										}
									}
								}
							}
						}
						Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, contact_0.GetLatitude(null), contact_0.GetLongitude(null));
						Pen pen = new Pen(this.color_7, 4f);
						try
						{
							graphics_0.DrawLine(pen, new Point(point.X - 10, point.Y - 14), new Point(point.X - 10 + this.int_9, point.Y - 14));
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception ex2 = ex;
							ex2.Data.Add("Error at 200177", ex2.Message);
							GameGeneral.LogException(ref ex2);
							if (Debugger.IsAttached)
							{
								Debugger.Break();
							}
							ProjectData.ClearProjectError();
						}
						finally
						{
							pen.Dispose();
						}
					}
					catch (Exception ex3)
					{
						ProjectData.SetProjectError(ex3);
						Exception ex4 = ex3;
						ex4.Data.Add("Error at 101152", "");
						GameGeneral.LogException(ref ex4);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		// Token: 0x06007114 RID: 28948 RVA: 0x003FDF08 File Offset: 0x003FC108
		private void method_131(ActiveUnit theUnit_, Graphics graphics_0)
		{
			try
			{
				if (!Information.IsNothing(theUnit_) && theUnit_.GetSide(false) == Client.GetClientSide() && Client.IsVisible(theUnit_) && theUnit_.HasParentGroup() && !theUnit_.IsGroupLead() && theUnit_.GetParentGroup(false).GetGroupType() != Group.GroupType.AirGroup && !Information.IsNothing(theUnit_.GetParentGroup(false).GetGroupLead()) && !Information.IsNothing(theUnit_.GetNavigator().GetFormationStation()))
				{
					ActiveUnit groupLead = theUnit_.GetParentGroup(false).GetGroupLead();
					ActiveUnit_Navigator.FormationStation formationStation = theUnit_.GetNavigator().GetFormationStation();
					if (!Information.IsNothing(formationStation))
					{
						WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, formationStation.GetLatitude(theUnit_, groupLead), formationStation.GetLongitude(theUnit_, groupLead), ref this.ScreenX, ref this.ScreenY);
						Point point = new Point(this.ScreenX, this.ScreenY);
						this.pen_0 = new Pen(Color.FromArgb(128, 255, 255, 255), 1f);
						Point[] points = new Point[]
						{
							new Point(point.X - 10, point.Y),
							new Point(point.X, point.Y - 10),
							new Point(point.X + 10, point.Y),
							new Point(point.X, point.Y + 10),
							new Point(point.X - 10, point.Y)
						};
						graphics_0.DrawPolygon(this.pen_0, points);
						string text;
						if (formationStation.BearingType == ReferencePoint.OrientationType.Fixed)
						{
							text = "阵位(绝对)";
						}
						else
						{
							text = "阵位(相对)";
						}
						this.DrawTextString(point.X - 70, point.Y, text, graphics_0, Color.FromArgb(128, 255, 255, 255).ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 10f, FontStyle.Bold));
					}
					this.pen_0.Dispose();
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 101153", "");
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007115 RID: 28949 RVA: 0x003FE1C4 File Offset: 0x003FC3C4
		private Bitmap GetUnitSymbol(Unit unit_, ref bool bool_13)
		{
			Bitmap bitmap = null;
			string str = "";
			string key = "";
			unit_.Name.Contains("Wierd");
			Bitmap bitmap2;
			Bitmap result;
			try
			{
				if (unit_.IsActiveUnit())
				{
					if (this.dictionary_0[Client.GetClientSide()].Contains(unit_.GetSide(false)))
					{
						str = "friendly.png";
					}
					else
					{
						switch (Client.GetClientSide().GetPostureStance(unit_.GetSide(false)))
						{
						case Misc.PostureStance.Neutral:
							str = "neutral.png";
							break;
						case Misc.PostureStance.Friendly:
							str = "friendly.png";
							break;
						case Misc.PostureStance.Unfriendly:
							str = "unfriendly.png";
							break;
						case Misc.PostureStance.Hostile:
							str = "hostile.png";
							break;
						case Misc.PostureStance.Unknown:
							str = "unknown.png";
							break;
						}
					}
				}
				if (unit_.IsGroup)
				{
					if (((Group)unit_).GetUnitsInGroup().Count == 0)
					{
						bitmap2 = null;
						result = bitmap2;
						return result;
					}
					switch (((Group)unit_).GetGroupType())
					{
					case Group.GroupType.AirGroup:
						key = "AirGroup_" + str;
						bool_13 = true;
						break;
					case Group.GroupType.SurfaceGroup:
						key = "SurfaceGroup_" + str;
						bool_13 = true;
						break;
					case Group.GroupType.SubGroup:
						key = "SubGroup_" + str;
						bool_13 = true;
						break;
					case Group.GroupType.Installation:
					case Group.GroupType.NavalBase:
						key = "Installation_" + str;
						break;
					case Group.GroupType.MobileGroup:
						key = "mobilegroup_" + str;
						break;
					case Group.GroupType.AirBase:
						key = "AirBase_" + str;
						break;
					}
				}
				else if (unit_.IsAircraft)
				{
					if (((Aircraft)unit_).IsRotaryWingAircraft())
					{
						key = "air_rw_" + str;
					}
					else if (((Aircraft)unit_).Category == Aircraft._AircraftCategory.Airship)
					{
						key = "aerostat_" + str;
					}
					else
					{
						key = "air_fw_" + str;
					}
					bool_13 = true;
				}
				else if (unit_.IsShip)
				{
					if (((Ship)unit_).Category == Ship._ShipCategory.SurfaceCombatant)
					{
						key = "carrier_" + str;
					}
					else
					{
						key = "seasurface_" + str;
					}
					bool_13 = true;
				}
				else if (unit_.IsSubmarine)
				{
					key = "sub_" + str;
					bool_13 = true;
				}
				else if (unit_.IsFacility)
				{
					Facility._FacilityCategory category = ((Facility)unit_).Category;
					if (category != Facility._FacilityCategory.Mobile_Vehicle)
					{
						if (category != Facility._FacilityCategory.Mobile_Personnel)
						{
							string left = Misc.smethod_45(unit_.UnitClass);
							uint num = Class2541.smethod_0(left);
							if (num <= 716611045u)
							{
								if (num <= 536261884u)
								{
									if (num != 108276744u)
									{
										if (num == 536261884u && Operators.CompareString(left, "SAM", false) == 0)
										{
											key = "airdef_mis_" + str;
											goto IL_7E7;
										}
									}
									else if (Operators.CompareString(left, "Inf", false) == 0)
									{
										key = "infantry_" + str;
										goto IL_7E7;
									}
								}
								else if (num != 562859689u)
								{
									if (num == 716611045u && Operators.CompareString(left, "Armored", false) == 0)
									{
										key = "armor_" + str;
										goto IL_7E7;
									}
								}
								else if (Operators.CompareString(left, "Arty", false) == 0)
								{
									key = "arty_gun_" + str;
									goto IL_7E7;
								}
							}
							else if (num <= 1267298235u)
							{
								if (num != 1142521834u)
								{
									if (num == 1267298235u && Operators.CompareString(left, "Radar", false) == 0)
									{
										key = "radar_" + str;
										goto IL_7E7;
									}
								}
								else if (Operators.CompareString(left, "SSM", false) == 0)
								{
									key = "arty_mis_" + str;
									goto IL_7E7;
								}
							}
							else if (num != 3061902210u)
							{
								if (num == 3887666188u && Operators.CompareString(left, "Mech", false) == 0)
								{
									key = "mechinf_" + str;
									goto IL_7E7;
								}
							}
							else if (Operators.CompareString(left, "AAA", false) == 0)
							{
								key = "airdef_arty_" + str;
								goto IL_7E7;
							}
							if (unit_.UnitClass.Contains("irfield"))
							{
								key = "AirBase_" + str;
							}
							else
							{
								key = "fixed_" + str;
							}
						}
						else
						{
							key = "infantry_" + str;
						}
					}
					else
					{
						string left2 = Misc.smethod_45(unit_.UnitClass);
						uint num = Class2541.smethod_0(left2);
						if (num <= 716611045u)
						{
							if (num <= 536261884u)
							{
								if (num != 108276744u)
								{
									if (num == 536261884u && Operators.CompareString(left2, "SAM", false) == 0)
									{
										key = "airdef_mis_" + str;
										goto IL_7E7;
									}
								}
								else if (Operators.CompareString(left2, "Inf", false) == 0)
								{
									key = "infantry_" + str;
									goto IL_7E7;
								}
							}
							else if (num != 562859689u)
							{
								if (num == 716611045u && Operators.CompareString(left2, "Armored", false) == 0)
								{
									key = "armor_" + str;
									goto IL_7E7;
								}
							}
							else if (Operators.CompareString(left2, "Arty", false) == 0)
							{
								key = "arty_gun_" + str;
								goto IL_7E7;
							}
						}
						else if (num <= 1267298235u)
						{
							if (num != 1142521834u)
							{
								if (num == 1267298235u && Operators.CompareString(left2, "Radar", false) == 0)
								{
									key = "radar_" + str;
									goto IL_7E7;
								}
							}
							else if (Operators.CompareString(left2, "SSM", false) == 0)
							{
								key = "arty_mis_" + str;
								goto IL_7E7;
							}
						}
						else if (num != 3061902210u)
						{
							if (num == 3887666188u && Operators.CompareString(left2, "Mech", false) == 0)
							{
								key = "mechinf_" + str;
								goto IL_7E7;
							}
						}
						else if (Operators.CompareString(left2, "AAA", false) == 0)
						{
							key = "airdef_arty_" + str;
							goto IL_7E7;
						}
						key = "mobile_" + str;
					}
				}
				else if (unit_.IsWeapon)
				{
					Weapon._WeaponType weaponType = ((Weapon)unit_).GetWeaponType();
					if (weaponType <= Weapon._WeaponType.GuidedProjectile)
					{
						if (weaponType != Weapon._WeaponType.GuidedWeapon)
						{
							if (weaponType == Weapon._WeaponType.Decoy_Vehicle)
							{
								if (((Weapon)unit_).IsAirDecoy())
								{
									key = "air_decoy_" + str;
								}
								bool_13 = true;
								goto IL_7E7;
							}
							if (weaponType != Weapon._WeaponType.GuidedProjectile)
							{
								goto IL_7E7;
							}
						}
					}
					else if (weaponType <= Weapon._WeaponType.Sonobuoy)
					{
						if (weaponType == Weapon._WeaponType.Torpedo)
						{
							key = "torp_" + str;
							bool_13 = true;
							goto IL_7E7;
						}
						if (weaponType != Weapon._WeaponType.Sonobuoy)
						{
							goto IL_7E7;
						}
						if (((Weapon)unit_).GetAllNoneMCMSensors().Length <= 0)
						{
							key = "sonobuoy_passive_" + str;
							goto IL_7E7;
						}
						if (((Weapon)unit_).GetAllNoneMCMSensors()[0].IsActiveModeOnly())
						{
							key = "sonobuoy_active_" + str;
							goto IL_7E7;
						}
						key = "sonobuoy_passive_" + str;
						goto IL_7E7;
					}
					else if (weaponType != Weapon._WeaponType.RV && weaponType != Weapon._WeaponType.HGV)
					{
						goto IL_7E7;
					}
					key = "missile_" + str;
					bool_13 = true;
				}
				else if (unit_.IsSatellite())
				{
					key = "satellite_" + str;
				}
				IL_7E7:
				if (unit_.IsContact())
				{
					switch (((Contact)unit_).GetPostureStance(Client.GetClientSide()))
					{
					case Misc.PostureStance.Neutral:
						str = "neutral.png";
						break;
					case Misc.PostureStance.Friendly:
						str = "friendly.png";
						break;
					case Misc.PostureStance.Unfriendly:
						str = "unfriendly.png";
						break;
					case Misc.PostureStance.Hostile:
						str = "hostile.png";
						break;
					case Misc.PostureStance.Unknown:
						str = "unknown.png";
						break;
					}
					Contact contact = (Contact)unit_;
					switch (contact.contactType)
					{
					case Contact_Base.ContactType.Air:
						if (Information.IsNothing(contact.ActualUnit))
						{
							bitmap2 = null;
							result = bitmap2;
							return result;
						}
						if (contact.ActualUnit.IsAircraft)
						{
							if (((Aircraft)contact.ActualUnit).IsRotaryWingAircraft())
							{
								key = "air_rw_" + str;
							}
							else if (((Aircraft)contact.ActualUnit).Category == Aircraft._AircraftCategory.Airship)
							{
								key = "aerostat_" + str;
							}
							else
							{
								key = "air_fw_" + str;
							}
						}
						else
						{
							key = "air_fw_" + str;
						}
						bool_13 = true;
						goto IL_11E4;
					case Contact_Base.ContactType.Missile:
					case Contact_Base.ContactType.Torpedo:
					case Contact_Base.ContactType.Mine:
					{
						if (Information.IsNothing(contact.ActualUnit))
						{
							bitmap2 = null;
							result = bitmap2;
							return result;
						}
						Weapon._WeaponType weaponType2 = ((Weapon)contact.ActualUnit).GetWeaponType();
						if (weaponType2 <= Weapon._WeaponType.GuidedProjectile)
						{
							if (weaponType2 != Weapon._WeaponType.GuidedWeapon && weaponType2 != Weapon._WeaponType.Decoy_Vehicle && weaponType2 != Weapon._WeaponType.GuidedProjectile)
							{
								goto IL_FF7;
							}
						}
						else
						{
							if (weaponType2 == Weapon._WeaponType.Torpedo)
							{
								key = "torp_hostile.png";
								goto IL_FF7;
							}
							if (weaponType2 != Weapon._WeaponType.RV && weaponType2 != Weapon._WeaponType.HGV)
							{
								goto IL_FF7;
							}
						}
						key = "missile_hostile.png";
						IL_FF7:
						bool_13 = true;
						goto IL_11E4;
					}
					case Contact_Base.ContactType.Surface:
					{
						Contact_Base.IdentificationStatus identificationStatus = contact.GetIdentificationStatus();
						if (identificationStatus > Contact_Base.IdentificationStatus.KnownDomain)
						{
							if (identificationStatus - Contact_Base.IdentificationStatus.KnownType <= 2)
							{
								if (Information.IsNothing(contact.ActualUnit))
								{
									bitmap2 = null;
									result = bitmap2;
									return result;
								}
								if (contact.ActualUnit.IsShip)
								{
									if (((Ship)contact.ActualUnit).Category == Ship._ShipCategory.SurfaceCombatant)
									{
										key = "carrier_" + str;
									}
									else
									{
										key = "seasurface_" + str;
									}
								}
								else if (contact.ActualUnit.IsSubmarine)
								{
									key = "sub_" + str;
								}
							}
						}
						else
						{
							key = "seasurface_" + str;
						}
						bool_13 = true;
						goto IL_11E4;
					}
					case Contact_Base.ContactType.Submarine:
						key = "sub_" + str;
						bool_13 = true;
						goto IL_11E4;
					case Contact_Base.ContactType.Aimpoint:
						key = "Installation_" + str;
						goto IL_11E4;
					case Contact_Base.ContactType.Orbital:
						key = "satellite_" + str;
						goto IL_11E4;
					case Contact_Base.ContactType.Facility_Fixed:
					{
						if (Information.IsNothing(contact.ActualUnit))
						{
							bitmap2 = null;
							result = bitmap2;
							return result;
						}
						Facility._FacilityCategory category2 = ((Facility)contact.ActualUnit).Category;
						if (category2 == Facility._FacilityCategory.Runway || category2 == Facility._FacilityCategory.AirBase)
						{
							key = "AirBase_" + str;
							goto IL_11E4;
						}
						string left3 = Misc.smethod_45(contact.ActualUnit.UnitClass);
						if (Operators.CompareString(left3, "Radar", false) == 0)
						{
							key = "radar_" + str;
							goto IL_11E4;
						}
						if (Operators.CompareString(left3, "SAM", false) == 0)
						{
							key = "airdef_mis_" + str;
							goto IL_11E4;
						}
						if (Operators.CompareString(left3, "AAA", false) == 0)
						{
							key = "airdef_arty_" + str;
							goto IL_11E4;
						}
						if (Operators.CompareString(left3, "Arty", false) == 0)
						{
							key = "arty_gun_" + str;
							goto IL_11E4;
						}
						if (Operators.CompareString(left3, "SSM", false) == 0)
						{
							key = "arty_mis_" + str;
							goto IL_11E4;
						}
						if (Operators.CompareString(left3, "Remote", false) != 0)
						{
							key = "fixed_" + str;
							goto IL_11E4;
						}
						key = "AirBase_" + str;
						goto IL_11E4;
					}
					case Contact_Base.ContactType.Facility_Mobile:
						switch (contact.GetIdentificationStatus())
						{
						case Contact_Base.IdentificationStatus.Unknown:
							key = "unknown.png";
							goto IL_11E4;
						case Contact_Base.IdentificationStatus.KnownDomain:
							switch (contact.GetPostureStance(Client.GetClientSide()))
							{
							case Misc.PostureStance.Neutral:
								key = "unknown.png";
								goto IL_11E4;
							case Misc.PostureStance.Friendly:
								key = "unknown.png";
								goto IL_11E4;
							case Misc.PostureStance.Unfriendly:
								key = "unknown_unfriendly.png";
								goto IL_11E4;
							case Misc.PostureStance.Hostile:
								key = "unknown_hostile.png";
								goto IL_11E4;
							case Misc.PostureStance.Unknown:
								key = "unknown.png";
								goto IL_11E4;
							default:
								goto IL_11E4;
							}
							break;
						case Contact_Base.IdentificationStatus.KnownType:
						case Contact_Base.IdentificationStatus.KnownClass:
						case Contact_Base.IdentificationStatus.PreciseID:
						{
							if (Information.IsNothing(contact.ActualUnit))
							{
								bitmap2 = null;
								result = bitmap2;
								return result;
							}
							string left4 = Misc.smethod_45(contact.ActualUnit.UnitClass);
							uint num = Class2541.smethod_0(left4);
							if (num <= 716611045u)
							{
								if (num <= 536261884u)
								{
									if (num != 108276744u)
									{
										if (num == 536261884u && Operators.CompareString(left4, "SAM", false) == 0)
										{
											key = "airdef_mis_" + str;
											goto IL_11E4;
										}
									}
									else if (Operators.CompareString(left4, "Inf", false) == 0)
									{
										switch (contact.GetPostureStance(Client.GetClientSide()))
										{
										case Misc.PostureStance.Neutral:
											key = "infantry_neutral.png";
											goto IL_11E4;
										case Misc.PostureStance.Friendly:
											key = "infantry_friendly.png";
											goto IL_11E4;
										case Misc.PostureStance.Unfriendly:
											key = "infantry_unfriendly.png";
											goto IL_11E4;
										case Misc.PostureStance.Hostile:
											key = "infantry_hostile.png";
											goto IL_11E4;
										case Misc.PostureStance.Unknown:
											key = "infantry_unknown.png";
											goto IL_11E4;
										default:
											goto IL_11E4;
										}
									}
								}
								else if (num != 562859689u)
								{
									if (num == 716611045u && Operators.CompareString(left4, "Armored", false) == 0)
									{
										key = "armor_" + str;
										goto IL_11E4;
									}
								}
								else if (Operators.CompareString(left4, "Arty", false) == 0)
								{
									key = "arty_gun_" + str;
									goto IL_11E4;
								}
							}
							else if (num <= 1267298235u)
							{
								if (num != 1142521834u)
								{
									if (num == 1267298235u && Operators.CompareString(left4, "Radar", false) == 0)
									{
										key = "radar_" + str;
										goto IL_11E4;
									}
								}
								else if (Operators.CompareString(left4, "SSM", false) == 0)
								{
									key = "arty_mis_" + str;
									goto IL_11E4;
								}
							}
							else if (num != 3061902210u)
							{
								if (num == 3887666188u && Operators.CompareString(left4, "Mech", false) == 0)
								{
									switch (contact.GetPostureStance(Client.GetClientSide()))
									{
									case Misc.PostureStance.Neutral:
										key = "mechinf_neutral.png";
										goto IL_11E4;
									case Misc.PostureStance.Friendly:
										key = "mechinf_friendly.png";
										goto IL_11E4;
									case Misc.PostureStance.Unfriendly:
										key = "mechinf_unfriendly.png";
										goto IL_11E4;
									case Misc.PostureStance.Hostile:
										key = "mechinf_hostile.png";
										goto IL_11E4;
									case Misc.PostureStance.Unknown:
										key = "mechinf_unknown.png";
										goto IL_11E4;
									default:
										goto IL_11E4;
									}
								}
							}
							else if (Operators.CompareString(left4, "AAA", false) == 0)
							{
								key = "airdef_arty_" + str;
								goto IL_11E4;
							}
							switch (contact.GetPostureStance(Client.GetClientSide()))
							{
							case Misc.PostureStance.Neutral:
								key = "mobile_neutral.png";
								goto IL_11E4;
							case Misc.PostureStance.Friendly:
								key = "mobile_friendly.png";
								goto IL_11E4;
							case Misc.PostureStance.Unfriendly:
								key = "mobile_unfriendly.png";
								goto IL_11E4;
							case Misc.PostureStance.Hostile:
								key = "mobile_hostile.png";
								goto IL_11E4;
							case Misc.PostureStance.Unknown:
								key = "mobile_unknown.png";
								goto IL_11E4;
							default:
								goto IL_11E4;
							}
							break;
						}
						default:
							goto IL_11E4;
						}
						break;
					case Contact_Base.ContactType.Decoy_Air:
					case Contact_Base.ContactType.Decoy_Surface:
					case Contact_Base.ContactType.Decoy_Land:
					case Contact_Base.ContactType.Decoy_Sub:
						switch (contact.GetPostureStance(Client.GetClientSide()))
						{
						case Misc.PostureStance.Neutral:
							key = "air_decoy_neutral.png";
							break;
						case Misc.PostureStance.Friendly:
							key = "air_decoy_friendly.png";
							break;
						case Misc.PostureStance.Unfriendly:
							key = "air_decoy_unfriendly.png";
							break;
						case Misc.PostureStance.Hostile:
							key = "air_decoy_hostile.png";
							break;
						case Misc.PostureStance.Unknown:
							key = "air_decoy_unknown.png";
							break;
						}
						bool_13 = true;
						goto IL_11E4;
					case Contact_Base.ContactType.Sonobuoy:
						key = "sonobuoy_active_" + str;
						goto IL_11E4;
					case Contact_Base.ContactType.Installation:
						switch (contact.GetPostureStance(Client.GetClientSide()))
						{
						case Misc.PostureStance.Neutral:
							key = "Installation_neutral.png";
							goto IL_11E4;
						case Misc.PostureStance.Friendly:
							key = "Installation_friendly.png";
							goto IL_11E4;
						case Misc.PostureStance.Unfriendly:
							key = "Installation_unfriendly.png";
							goto IL_11E4;
						case Misc.PostureStance.Hostile:
							key = "Installation_hostile.png";
							goto IL_11E4;
						case Misc.PostureStance.Unknown:
							key = "Installation_unknown.png";
							goto IL_11E4;
						default:
							goto IL_11E4;
						}
						break;
					case Contact_Base.ContactType.AirBase:
						switch (contact.GetPostureStance(Client.GetClientSide()))
						{
						case Misc.PostureStance.Neutral:
							key = "AirBase_neutral.png";
							goto IL_11E4;
						case Misc.PostureStance.Friendly:
							key = "AirBase_friendly.png";
							goto IL_11E4;
						case Misc.PostureStance.Unfriendly:
							key = "AirBase_unfriendly.png";
							goto IL_11E4;
						case Misc.PostureStance.Hostile:
							key = "AirBase_hostile.png";
							goto IL_11E4;
						case Misc.PostureStance.Unknown:
							key = "AirBase_unknown.png";
							goto IL_11E4;
						default:
							goto IL_11E4;
						}
						break;
					case Contact_Base.ContactType.NavalBase:
						switch (contact.GetPostureStance(Client.GetClientSide()))
						{
						case Misc.PostureStance.Neutral:
							key = "Installation_neutral.png";
							goto IL_11E4;
						case Misc.PostureStance.Friendly:
							key = "Installation_friendly.png";
							goto IL_11E4;
						case Misc.PostureStance.Unfriendly:
							key = "Installation_unfriendly.png";
							goto IL_11E4;
						case Misc.PostureStance.Hostile:
							key = "Installation_hostile.png";
							goto IL_11E4;
						case Misc.PostureStance.Unknown:
							key = "Installation_unknown.png";
							goto IL_11E4;
						default:
							goto IL_11E4;
						}
						break;
					case Contact_Base.ContactType.MobileGroup:
						switch (contact.GetPostureStance(Client.GetClientSide()))
						{
						case Misc.PostureStance.Neutral:
							key = "mobile_neutral.png";
							goto IL_11E4;
						case Misc.PostureStance.Friendly:
							key = "mobile_friendly.png";
							goto IL_11E4;
						case Misc.PostureStance.Unfriendly:
							key = "mobile_unfriendly.png";
							goto IL_11E4;
						case Misc.PostureStance.Hostile:
							key = "mobile_hostile.png";
							goto IL_11E4;
						case Misc.PostureStance.Unknown:
							key = "mobile_unknown.png";
							goto IL_11E4;
						default:
							goto IL_11E4;
						}
						break;
					}
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
				}
				IL_11E4:
				bitmap = Client.dictionary_0[key];
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200178", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
			bitmap2 = bitmap;
			result = bitmap2;
			return result;
		}

		// Token: 0x06007116 RID: 28950 RVA: 0x003FF42C File Offset: 0x003FD62C
		private void method_133(ActiveUnit activeUnit_0, int int_14, Color color_8, System.Drawing.Font font_8, Graphics graphics_0)
		{
			if (!Information.IsNothing(activeUnit_0))
			{
				try
				{
					this.string_4 = Misc.smethod_11(activeUnit_0.Name);
					this.string_3 = "";
					if (!activeUnit_0.GetCommStuff().IsNotOutOfComms() && !Client.GetMap().IsGodsEyeView() && !Class2529.IsIsolatedPOVObject(activeUnit_0))
					{
						int_14 = 64;
					}
					else
					{
						this.string_4 = string.Concat(new string[]
						{
							this.string_4,
							"\r\n",
							Conversions.ToString(Math.Round((double)activeUnit_0.GetCurrentHeading(), 0)),
							"度\r\n",
							Conversions.ToString(Math.Round((double)activeUnit_0.GetCurrentSpeed(), 0)),
							"节"
						});
					}
					if ((int)color_8.A != int_14)
					{
						color_8 = Color.FromArgb(int_14, (int)color_8.R, (int)color_8.G, (int)color_8.B);
					}
					Point point;
					if (activeUnit_0.IsGroup)
					{
						if (Information.IsNothing(((Group)activeUnit_0).GetGroupLead()))
						{
							point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, activeUnit_0.GetLatitude(null), activeUnit_0.GetLongitude(null));
						}
						else
						{
							point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, ((Group)activeUnit_0).GetGroupLead().GetLatitude(null), ((Group)activeUnit_0).GetGroupLead().GetLongitude(null));
						}
					}
					else if (!activeUnit_0.GetCommStuff().IsNotOutOfComms() && !Client.GetMap().IsGodsEyeView() && Operators.CompareString(activeUnit_0.GetGuid(), Client.GetMap().GetIsolatedPOVObjectID(), false) != 0)
					{
						point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, activeUnit_0.GetLatitudeLR().Value, activeUnit_0.GetLongitudeLR().Value);
					}
					else
					{
						point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, activeUnit_0.GetLatitude(null), activeUnit_0.GetLongitude(null));
					}
					if (activeUnit_0.IsSubmarine && (activeUnit_0.GetCommStuff().IsNotOutOfComms() || Class2529.IsIsolatedPOVObject(activeUnit_0) || Client.GetMap().IsGodsEyeView()))
					{
						if (SimConfiguration.gameOptions.UseImperialUnit())
						{
							this.string_3 = Conversions.ToString(Math.Round((double)(activeUnit_0.GetCurrentAltitude_ASL(false) * 3.28084f), 0)) + "英尺";
						}
						else
						{
							this.string_3 = Conversions.ToString(Math.Round((double)activeUnit_0.GetCurrentAltitude_ASL(false), 0)) + "米";
						}
						this.string_4 = this.string_4 + "\r\n" + this.string_3;
					}
					if ((activeUnit_0.IsAircraft && (activeUnit_0.GetCommStuff().IsNotOutOfComms() || Class2529.IsIsolatedPOVObject(activeUnit_0) || Client.GetMap().IsGodsEyeView())) || activeUnit_0.IsWeapon)
					{
						if (SimConfiguration.gameOptions.UseImperialUnit())
						{
							if (activeUnit_0.GetCurrentAltitude_ASL(false) > 45720f)
							{
								this.string_3 = Conversions.ToString(Math.Round((double)(activeUnit_0.GetCurrentAltitude_ASL(false) / 1000f), 1)) + "公里(海高) ";
							}
							else if (activeUnit_0.GetCurrentAltitude_ASL(false) > 3048f)
							{
								this.string_3 = Conversions.ToString(Math.Round((double)(activeUnit_0.GetCurrentAltitude_ASL(false) * 3.28084f), 0)) + "英尺(海高) ";
							}
							else if (activeUnit_0.IsOnLand())
							{
								this.string_3 = Conversions.ToString(Math.Round((double)(activeUnit_0.GetCurrentAltitude_ASL(false) * 3.28084f), 0)) + "英尺(海高) (" + Conversions.ToString(Math.Round((double)(activeUnit_0.GetAltitude_AGL() * 3.28084f), 0)) + "英尺(真高))";
							}
							else
							{
								this.string_3 = Conversions.ToString(Math.Round((double)(activeUnit_0.GetCurrentAltitude_ASL(false) * 3.28084f), 0)) + "英尺(海高) ";
							}
						}
						else if (activeUnit_0.GetCurrentAltitude_ASL(false) > 45720f)
						{
							this.string_3 = Conversions.ToString(Math.Round((double)(activeUnit_0.GetCurrentAltitude_ASL(false) / 1000f), 1)) + "公里(海高) ";
						}
						else if (activeUnit_0.GetCurrentAltitude_ASL(false) > 3048f)
						{
							this.string_3 = Conversions.ToString(Math.Round((double)activeUnit_0.GetCurrentAltitude_ASL(false), 0)) + "米(海高)";
						}
						else if (activeUnit_0.IsOnLand())
						{
							this.string_3 = Conversions.ToString(Math.Round((double)activeUnit_0.GetCurrentAltitude_ASL(false), 0)) + "米(海高) (" + Conversions.ToString(Math.Round((double)activeUnit_0.GetAltitude_AGL(), 0)) + "米(真高))";
						}
						else
						{
							this.string_3 = Conversions.ToString(Math.Round((double)activeUnit_0.GetCurrentAltitude_ASL(false), 0)) + "米(海高)";
						}
						this.string_4 = this.string_4 + "\r\n" + this.string_3;
					}
					if ((activeUnit_0.GetCommStuff().IsNotOutOfComms() || Class2529.IsIsolatedPOVObject(activeUnit_0) || Client.GetMap().IsGodsEyeView()) && activeUnit_0.IsGroup && ((Group)activeUnit_0).GetGroupType() == Group.GroupType.AirGroup)
					{
						if (!Information.IsNothing(((Group)activeUnit_0).GetGroupLead()))
						{
							if (SimConfiguration.gameOptions.UseImperialUnit())
							{
								this.string_3 = Conversions.ToString(Math.Round((double)(((Group)activeUnit_0).GetGroupLead().GetCurrentAltitude_ASL(false) * 3.28084f), 0)) + "英尺";
							}
							else
							{
								this.string_3 = Conversions.ToString(Math.Round((double)((Group)activeUnit_0).GetGroupLead().GetCurrentAltitude_ASL(false), 0)) + "米";
							}
						}
						this.string_4 = this.string_4 + "\r\n" + this.string_3;
					}
					Point point2 = new Point(point.X + 10, point.Y - 13);
					this.DrawTextString(point2.X, point2.Y, this.string_4, graphics_0, color_8.ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, font_8);
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 101154", "");
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x06007117 RID: 28951 RVA: 0x003FFAAC File Offset: 0x003FDCAC
		private void method_134(Contact contact_0, Color color_8, System.Drawing.Font font_8, Graphics graphics_0)
		{
			try
			{
				if (!Information.IsNothing(contact_0))
				{
					this.string_4 = string.Concat(new string[]
					{
						Misc.smethod_11(contact_0.Name),
						"\r\n",
						Conversions.ToString(Math.Round((double)contact_0.GetCurrentHeading(), 0)),
						"度\r\n",
						Conversions.ToString(Math.Round((double)contact_0.GetCurrentSpeed(), 0)),
						"节"
					});
					Tuple<int, int> tuple = null;
					this.dictionary_2.TryGetValue(contact_0, out tuple);
					Point point;
					if (!Information.IsNothing(tuple))
					{
						int item = tuple.Item1;
						int item2 = tuple.Item2;
						point = new Point(item, item2);
					}
					else
					{
						point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, contact_0.GetLatitude(null), contact_0.GetLongitude(null));
					}
					this.string_4 = Misc.smethod_11(contact_0.Name);
					this.string_4 = string.Concat(new string[]
					{
						this.string_4,
						"\r\n",
						contact_0.method_80(),
						"\r\n",
						contact_0.method_81()
					});
					Contact_Base.ContactType contactType = contact_0.contactType;
					if (contactType <= Contact_Base.ContactType.Missile || contactType == Contact_Base.ContactType.Submarine || contactType - Contact_Base.ContactType.Torpedo <= 1)
					{
						this.string_4 = this.string_4 + "\r\n" + contact_0.method_82(SimConfiguration.gameOptions.UseImperialUnit());
					}
					Point point2 = new Point(point.X + 10, point.Y - 13);
					this.DrawTextString(point2.X, point2.Y, this.string_4, graphics_0, color_8.ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, font_8);
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 101229", "");
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007118 RID: 28952 RVA: 0x003FFCBC File Offset: 0x003FDEBC
		private void method_135(ActiveUnit activeUnit_, float float_7, int int_14, Graphics graphics_0)
		{
			if (!Information.IsNothing(activeUnit_))
			{
				try
				{
					if (activeUnit_.IsWeapon && ((Weapon)activeUnit_).GetWeaponType() == Weapon._WeaponType.Sonobuoy && SimConfiguration.gameOptions.GetSonobuoyVisibility() == Configuration.GameOptions._SonobuoyVisibility.const_2)
					{
						return;
					}
					if (activeUnit_ == Client.GetHookedUnit())
					{
						this.method_131(activeUnit_, graphics_0);
					}
					int num = (int)((byte)int_14);
					Client.GetAlpha(ref float_7, ref num, ref activeUnit_);
					if (!activeUnit_.GetLatitudeLR().HasValue)
					{
						activeUnit_.SetLatitudeLR(new double?(activeUnit_.GetLatitude(null)));
					}
					if (!activeUnit_.GetLongitudeLR().HasValue)
					{
						activeUnit_.SetLongitudeLR(new double?(activeUnit_.GetLongitude(null)));
					}
					if (!activeUnit_.GetCommStuff().IsNotOutOfComms() && !Client.GetMap().IsGodsEyeView() && !Class2529.IsIsolatedPOVObject(activeUnit_))
					{
						this.point_5 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, activeUnit_.GetLatitudeLR().Value, activeUnit_.GetLongitudeLR().Value);
					}
					else
					{
						Tuple<int, int> tuple = null;
						this.dictionary_2.TryGetValue(activeUnit_, out tuple);
						if (!Information.IsNothing(tuple))
						{
							int item = tuple.Item1;
							int item2 = tuple.Item2;
							this.point_5 = new Point(item, item2);
						}
						else
						{
							this.point_5 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, activeUnit_.GetLatitude(null), activeUnit_.GetLongitude(null));
						}
					}
					if (activeUnit_.IsWeapon)
					{
						float num2 = (float)Math.Round((double)((Weapon)activeUnit_).GetBlindTime(), 1);
						if (num2 != 0f)
						{
							try
							{
								this.DrawTextString(this.point_5.X - 65, this.point_5.Y - 8, "致盲:" + Conversions.ToString(num2) + "秒", graphics_0, 0, StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 11f, FontStyle.Regular));
							}
							catch (Exception ex)
							{
								ProjectData.SetProjectError(ex);
								Exception ex2 = ex;
								ex2.Data.Add("Error at 200179", ex2.Message);
								GameGeneral.LogException(ref ex2);
								if (Debugger.IsAttached)
								{
									Debugger.Break();
								}
								ProjectData.ClearProjectError();
							}
						}
						if (!Information.IsNothing(((Weapon)activeUnit_).GetDataLinkParent()))
						{
							float num3 = (float)Math.Round((double)((Weapon)activeUnit_).GetDRT(), 1);
							if (num3 > 6f)
							{
								try
								{
									this.DrawTextString(this.point_5.X - 65, this.point_5.Y - 18, "重新瞄准:" + Conversions.ToString(num3) + "秒", graphics_0, 0, StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 11f, FontStyle.Regular));
								}
								catch (Exception ex3)
								{
									ProjectData.SetProjectError(ex3);
									Exception ex4 = ex3;
									ex4.Data.Add("Error at 200267", ex4.Message);
									GameGeneral.LogException(ref ex4);
									if (Debugger.IsAttached)
									{
										Debugger.Break();
									}
									ProjectData.ClearProjectError();
								}
							}
						}
					}
					int num4 = 20;
					this.bool_12 = false;
					this.UnitSymbol = this.GetUnitSymbol(activeUnit_, ref this.bool_12);
					if (Information.IsNothing(this.UnitSymbol))
					{
						return;
					}
					if (SimConfiguration.gameOptions.GetMapSymbolsSet() == Configuration.GameOptions._MapSymbolsSet.Directional || SimConfiguration.gameOptions.GetMapSymbolsSet() == Configuration.GameOptions._MapSymbolsSet.ChineseMilitary)
					{
						if (this.bool_12)
						{
							num = this.UnitSymbol.GetHashCode();
							this.UnitSymbol = Class2529.smethod_2(num.ToString(), this.UnitSymbol, (double)activeUnit_.GetCurrentHeading());
							if (activeUnit_.IsShip | activeUnit_.IsSubmarine)
							{
								num4 = 40;
							}
						}
						if (activeUnit_.IsGroup)
						{
							Group.GroupType groupType = ((Group)activeUnit_).GetGroupType();
							if (groupType - Group.GroupType.SurfaceGroup <= 2 || groupType - Group.GroupType.AirBase <= 1)
							{
								num4 = 30;
							}
						}
					}
					Point point = this.point_5;
					MapProfile._ViewMode viewMode = Client.GetMap().ViewMode;
					if (viewMode != MapProfile._ViewMode.GroupMode)
					{
						if (viewMode != MapProfile._ViewMode.UnitMode)
						{
							goto IL_5DB;
						}
						try
						{
							graphics_0.DrawImage(Class2529.smethod_0(this.UnitSymbol, float_7), point.X - (int)Math.Round((double)num4 / 2.0), point.Y - (int)Math.Round((double)num4 / 2.0), num4, num4);
							if (activeUnit_.GetAirOps().GetHostedAircrafts().Count > 0 || activeUnit_.GetDockingOps().GetDockedUnits().Count > 0)
							{
								graphics_0.DrawImage(this.bitmap_2, this.point_5.X, this.point_5.Y, 10, 10);
							}
							goto IL_5DB;
						}
						catch (Exception ex5)
						{
							ProjectData.SetProjectError(ex5);
							Exception ex6 = ex5;
							ex6.Data.Add("Error at 200181", ex6.Message);
							GameGeneral.LogException(ref ex6);
							if (Debugger.IsAttached)
							{
								Debugger.Break();
							}
							ProjectData.ClearProjectError();
							goto IL_5DB;
						}
					}
					if (!activeUnit_.IsGroupLead())
					{
						try
						{
							graphics_0.DrawImage(Class2529.smethod_0(this.UnitSymbol, float_7), point.X - (int)Math.Round((double)num4 / 2.0), point.Y - (int)Math.Round((double)num4 / 2.0), num4, num4);
							if (activeUnit_.GetAirOps().GetHostedAircrafts().Count > 0 || activeUnit_.GetDockingOps().GetDockedUnits().Count > 0)
							{
								graphics_0.DrawImage(this.bitmap_2, this.point_5.X, this.point_5.Y, 10, 10);
							}
						}
						catch (Exception ex7)
						{
							ProjectData.SetProjectError(ex7);
							Exception ex8 = ex7;
							ex8.Data.Add("Error at 200180", ex8.Message);
							GameGeneral.LogException(ref ex8);
							if (Debugger.IsAttached)
							{
								Debugger.Break();
							}
							ProjectData.ClearProjectError();
						}
					}
					IL_5DB:
					if ((!this.bool_12 || SimConfiguration.gameOptions.GetMapSymbolsSet() != Configuration.GameOptions._MapSymbolsSet.Directional) && Math.Round((double)activeUnit_.GetCurrentSpeed(), 1) > 0.0 && (activeUnit_.GetCommStuff().IsNotOutOfComms() || Client.GetMap().IsGodsEyeView() || Class2529.IsIsolatedPOVObject(activeUnit_)))
					{
						switch (Client.GetClientSide().GetPostureStance(activeUnit_.GetSide(false)))
						{
						case Misc.PostureStance.Neutral:
							this.method_117(activeUnit_.GetLatitude(null), activeUnit_.GetLongitude(null), activeUnit_.GetCurrentHeading(), activeUnit_.GetCurrentSpeed(), this.point_5, Client.color_Neutral, graphics_0);
							break;
						case Misc.PostureStance.Friendly:
							this.method_117(activeUnit_.GetLatitude(null), activeUnit_.GetLongitude(null), activeUnit_.GetCurrentHeading(), activeUnit_.GetCurrentSpeed(), this.point_5, Client.color_Friendly, graphics_0);
							break;
						case Misc.PostureStance.Unfriendly:
							this.method_117(activeUnit_.GetLatitude(null), activeUnit_.GetLongitude(null), activeUnit_.GetCurrentHeading(), activeUnit_.GetCurrentSpeed(), this.point_5, Client.color_Unfriendly, graphics_0);
							break;
						case Misc.PostureStance.Hostile:
							this.method_117(activeUnit_.GetLatitude(null), activeUnit_.GetLongitude(null), activeUnit_.GetCurrentHeading(), activeUnit_.GetCurrentSpeed(), this.point_5, Client.color_Hostile, graphics_0);
							break;
						case Misc.PostureStance.Unknown:
							this.method_117(activeUnit_.GetLatitude(null), activeUnit_.GetLongitude(null), activeUnit_.GetCurrentHeading(), activeUnit_.GetCurrentSpeed(), this.point_5, Client.color_Unknown, graphics_0);
							break;
						}
					}
				}
				catch (Exception ex9)
				{
					ProjectData.SetProjectError(ex9);
					Exception ex10 = ex9;
					ex10.Data.Add("Error at 200512", ex10.Message);
					GameGeneral.LogException(ref ex10);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
				try
				{
					if (activeUnit_.IsShip && ((Ship)activeUnit_).IsDestroyed())
					{
						Pen pen = new Pen(Client.color_Friendly, 2f);
						pen.DashStyle = DashStyle.Solid;
						GraphicsPath graphicsPath = new GraphicsPath();
						graphicsPath.AddLine(new Point(this.point_5.X - 10, this.point_5.Y - 10), new Point(this.point_5.X + 10, this.point_5.Y + 10));
						this.DrawPath(pen, graphicsPath, graphics_0);
						graphicsPath = new GraphicsPath();
						graphicsPath.AddLine(new Point(this.point_5.X - 10, this.point_5.Y + 10), new Point(this.point_5.X + 10, this.point_5.Y - 10));
						this.DrawPath(pen, graphicsPath, graphics_0);
						pen.Dispose();
						graphicsPath.Dispose();
					}
				}
				catch (Exception ex11)
				{
					ProjectData.SetProjectError(ex11);
					Exception ex12 = ex11;
					ex12.Data.Add("Error at 200182", ex12.Message);
					GameGeneral.LogException(ref ex12);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
				try
				{
					if (activeUnit_.IsWeapon && ((Weapon)activeUnit_).GetWeaponType() == Weapon._WeaponType.Sonobuoy)
					{
						Color color = Color.White;
						switch (Client.GetClientSide().GetPostureStance(activeUnit_.GetSide(false)))
						{
						case Misc.PostureStance.Neutral:
							color = Client.color_Neutral;
							break;
						case Misc.PostureStance.Friendly:
							color = Client.color_Friendly;
							break;
						case Misc.PostureStance.Unfriendly:
							color = Client.color_Unfriendly;
							break;
						case Misc.PostureStance.Hostile:
							color = Client.color_Hostile;
							break;
						case Misc.PostureStance.Unknown:
							color = Client.color_Unknown;
							break;
						}
						if (SimConfiguration.gameOptions.GetSonobuoyVisibility() == Configuration.GameOptions._SonobuoyVisibility.const_1)
						{
							color = Color.FromArgb(128, color);
						}
						Pen pen2 = new Pen(color, 1f);
						pen2.DashStyle = DashStyle.Solid;
						GraphicsPath graphicsPath2 = new GraphicsPath();
						if (activeUnit_.GetCurrentAltitude_ASL(false) >= -40f)
						{
							graphicsPath2.AddLine(new Point(this.point_5.X - 8, this.point_5.Y), new Point(this.point_5.X, this.point_5.Y - 8));
							graphicsPath2.AddLine(new Point(this.point_5.X, this.point_5.Y - 8), new Point(this.point_5.X + 8, this.point_5.Y));
						}
						else
						{
							graphicsPath2.AddLine(new Point(this.point_5.X - 8, this.point_5.Y + 4), new Point(this.point_5.X, this.point_5.Y + 12));
							graphicsPath2.AddLine(new Point(this.point_5.X, this.point_5.Y + 12), new Point(this.point_5.X + 8, this.point_5.Y + 4));
						}
						this.DrawPath(pen2, graphicsPath2, graphics_0);
						pen2.Dispose();
						graphicsPath2.Dispose();
					}
				}
				catch (Exception ex13)
				{
					ProjectData.SetProjectError(ex13);
					Exception ex14 = ex13;
					ex14.Data.Add("Error at 200183", ex14.Message);
					GameGeneral.LogException(ref ex14);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
				try
				{
					MapProfile._UnitCoverage showDatablocks = Client.GetMap().GetShowDatablocks();
					if (showDatablocks != MapProfile._UnitCoverage.const_0)
					{
						if (showDatablocks == MapProfile._UnitCoverage.const_1 && activeUnit_ == Client.GetHookedUnit())
						{
							MapProfile._ViewMode viewMode2 = Client.GetMap().ViewMode;
							if (viewMode2 != MapProfile._ViewMode.GroupMode)
							{
								if (viewMode2 == MapProfile._ViewMode.UnitMode && !activeUnit_.IsGroup)
								{
									this.method_133(activeUnit_, int_14, Color.White, this.font_0, graphics_0);
								}
							}
							else if (activeUnit_.IsGroup || !activeUnit_.HasParentGroup())
							{
								this.method_133(activeUnit_, int_14, Color.White, this.font_0, graphics_0);
							}
						}
					}
					else
					{
						MapProfile._ViewMode viewMode3 = Client.GetMap().ViewMode;
						if (viewMode3 != MapProfile._ViewMode.GroupMode)
						{
							if (viewMode3 == MapProfile._ViewMode.UnitMode && !activeUnit_.IsGroup)
							{
								this.method_133(activeUnit_, int_14, Color.White, this.font_0, graphics_0);
							}
						}
						else if (activeUnit_.IsGroup || !activeUnit_.HasParentGroup())
						{
							this.method_133(activeUnit_, int_14, Color.White, this.font_0, graphics_0);
						}
					}
					if (Client.IsVisible(activeUnit_) && !activeUnit_.IsGroup && activeUnit_.GetSensory().HasEmittingJammer())
					{
						Point point2 = new Point(this.point_5.X - 14, this.point_5.Y - 28);
						this.DrawTextString(point2.X, point2.Y, "干扰", graphics_0, Color.Red.ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 11f, FontStyle.Regular));
					}
				}
				catch (Exception ex15)
				{
					ProjectData.SetProjectError(ex15);
					Exception ex16 = ex15;
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ex16.Data.Add("Error at 200513", ex16.Message);
					GameGeneral.LogException(ref ex16);
					ProjectData.ClearProjectError();
				}
				if (Client.IsVisible(activeUnit_))
				{
					try
					{
						if (!Information.IsNothing(activeUnit_))
						{
							if (!activeUnit_.IsGroup)
							{
								if (!Information.IsNothing(activeUnit_.GetSensory()) && (activeUnit_.GetSensory().IsSensorJamCapable() || activeUnit_.GetCommStuff().IsJammed()))
								{
									Point point3 = new Point(this.point_5.X - 65, this.point_5.Y - 8);
									this.DrawTextString(point3.X, point3.Y, "被干扰", graphics_0, Color.Red.ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 11f, FontStyle.Regular));
								}
							}
							else
							{
								foreach (ActiveUnit current in ((Group)activeUnit_).GetUnitsInGroup().Values)
								{
									if (current.GetSensory().IsSensorJamCapable() || current.GetCommStuff().IsJammed())
									{
										Point point4 = new Point(this.point_5.X - 65, this.point_5.Y - 8);
										this.DrawTextString(point4.X, point4.Y, "被干扰", graphics_0, Color.Red.ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 11f, FontStyle.Regular));
										break;
									}
								}
							}
						}
					}
					catch (Exception ex17)
					{
						ProjectData.SetProjectError(ex17);
						Exception ex18 = ex17;
						ex18.Data.Add("Error at 200184", ex18.Message);
						GameGeneral.LogException(ref ex18);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
				try
				{
					if (activeUnit_.GetSide(false) != Client.GetClientSide())
					{
						if (Client.GetClientSide().IsFriendlyToSide(activeUnit_.GetSide(false)))
						{
							this.DrawTextString(this.point_5.X - 8, this.point_5.Y + 10, "A", graphics_0, Client.color_Friendly.ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, this.font_1);
						}
						else if (Client.GetClientSide().GetPostureStance(activeUnit_.GetSide(false)) == Misc.PostureStance.Friendly)
						{
							this.DrawTextString(this.point_5.X - 8, this.point_5.Y + 10, "F", graphics_0, Client.color_Friendly.ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, this.font_1);
						}
						else if (this.dictionary_0[Client.GetClientSide()].Contains(activeUnit_.GetSide(false)))
						{
							this.DrawTextString(this.point_5.X - 10, this.point_5.Y + 10, "(F)", graphics_0, Client.color_Friendly.ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, this.font_1);
						}
					}
					if (activeUnit_.IsWeapon && ((Weapon)activeUnit_).weaponTarget.IsRadar && !Information.IsNothing(((Weapon)activeUnit_).ARM_SpecifiedEmission))
					{
						Point point5 = default(Point);
						point5.X = this.point_5.X - 12;
						point5.Y = this.point_5.Y - 22;
						int key = ((Weapon)activeUnit_).ARM_SpecifiedEmission.Key;
						string text;
						if (key > 0)
						{
							int dBID = key;
							SQLiteConnection sQLiteConnection = Client.GetClientScenario().GetSQLiteConnection();
							DBFunctions.LoadSensorData(dBID, ref sQLiteConnection);
							text = Misc.smethod_11(((Weapon)activeUnit_).ARM_SpecifiedEmission.Value.method_1(key, Client.GetClientScenario()));
						}
						else
						{
							text = "No emission lock";
						}
						this.DrawTextString(point5.X, point5.Y, text, graphics_0, 0, StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 9f, FontStyle.Regular));
					}
					if (!activeUnit_.GetCommStuff().IsNotOutOfComms())
					{
						this.DrawTextString(this.point_5.X - 26, this.point_5.Y + 12, "通信中断", graphics_0, Color.OrangeRed.ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 11f, FontStyle.Regular));
					}
					if (Client.IsVisible(activeUnit_) && (Client.GetMap().GetRSVisible_ASWSensor() != MapProfile._UnitCoverage.const_2 || Client.GetMap().GetRSVisible_ASWWeapon() != MapProfile._UnitCoverage.const_2) && ((activeUnit_.IsShip && ((Ship)activeUnit_).method_127()) || (activeUnit_.IsSubmarine && ((Submarine)activeUnit_).method_135())))
					{
						this.DrawTextString(this.point_5.X - 16, this.point_5.Y + 15, "CAV", graphics_0, Client.color_Unfriendly.ToArgb(), StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, new System.Drawing.Font("Verdana", 11f, FontStyle.Regular));
					}
					if (Client.IsVisible(activeUnit_) && activeUnit_.IsAircraft && ((Aircraft_AirOps)activeUnit_.GetAirOps()).GetAirOpsCondition() == Aircraft_AirOps._AirOpsCondition.HoldingOnLandingQueue)
					{
						if (!Information.IsNothing(activeUnit_.GetAssignedMission(false)) && activeUnit_.GetAssignedMission(false).MissionClass == Mission._MissionClass.Ferry && !Information.IsNothing(((Aircraft_AirOps)activeUnit_.GetAirOps()).GetAssignedHostUnit()))
						{
							this.DrawText(this.point_5.X, this.point_5.Y, "L" + Conversions.ToString(Array.IndexOf<Aircraft>(((Aircraft_AirOps)activeUnit_.GetAirOps()).GetAssignedHostUnit().GetAirOps().GetLandingQueue(), (Aircraft)activeUnit_)), graphics_0, Color.Yellow.ToArgb());
						}
						else
						{
							this.DrawText(this.point_5.X, this.point_5.Y, "L" + Conversions.ToString(Array.IndexOf<Aircraft>(((Aircraft_AirOps)activeUnit_.GetAirOps()).GetAssignedHostUnit(false).GetAirOps().GetLandingQueue(), (Aircraft)activeUnit_)), graphics_0, Color.Yellow.ToArgb());
						}
					}
				}
				catch (Exception ex19)
				{
					ProjectData.SetProjectError(ex19);
					Exception ex20 = ex19;
					ex20.Data.Add("Error at 200514", ex20.Message);
					GameGeneral.LogException(ref ex20);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x06007119 RID: 28953 RVA: 0x00401150 File Offset: 0x003FF350
		private void method_136(Color color_8, ref Contact contact_0, Graphics graphics_0)
		{
			try
			{
				if (!contact_0.IsFilterOut || (!Information.IsNothing(Client.smethod_33()) && contact_0 == Client.smethod_33()) || (!Information.IsNothing(Client.GetHookedUnit()) && contact_0 == Client.GetHookedUnit()))
				{
					byte int_;
					if (contact_0 == Client.GetHookedUnit())
					{
						int_ = 3;
					}
					else
					{
						int_ = 1;
					}
					List<GeoPoint> uncertaintyArea = contact_0.GetUncertaintyArea();
					if (contact_0.Age > 0f)
					{
						color_8 = Color.FromArgb(127, (int)color_8.R, (int)color_8.G, (int)color_8.B);
					}
					this.method_137(uncertaintyArea, (int)int_, color_8, default(Color), graphics_0);
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200185", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600711A RID: 28954 RVA: 0x00401250 File Offset: 0x003FF450
		private void method_137(List<GeoPoint> list_10, int int_14, Color color_8, Color color_9, Graphics graphics_0)
		{
			try
			{
				if (!Information.IsNothing(list_10))
				{
					Point[] array = new Point[list_10.Count + 1];
					int count = list_10.Count;
					long num = (long)(count - 1);
					for (long num2 = 0L; num2 <= num; num2 += 1L)
					{
						GeoPoint geoPoint = list_10[(int)num2];
						array[(int)num2] = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, geoPoint.GetLatitude(), geoPoint.GetLongitude());
					}
					array[count] = array[0];
					this.SetGraphicsParameters(graphics_0);
					if (!Information.IsNothing(color_8))
					{
						this.graphicsPath_0 = new GraphicsPath();
						this.graphicsPath_0.AddPolygon(array);
						Pen pen_ = new Pen(color_8, (float)int_14);
						this.DrawPath(pen_, this.graphicsPath_0, graphics_0);
					}
					if (!Information.IsNothing(color_9))
					{
						this.solidBrush_0 = new SolidBrush(color_9);
						graphics_0.FillPolygon(this.solidBrush_0, array);
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ex2.Data.Add("Error at 22340958986", ex2.Message);
				GameGeneral.LogException(ref ex2);
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600711B RID: 28955 RVA: 0x004013B0 File Offset: 0x003FF5B0
		private void method_138(Contact contact_0, float float_7, float float_8, Graphics graphics_0)
		{
			Point point_ = default(Point);
			try
			{
				if (Information.IsNothing(contact_0))
				{
					return;
				}
				if (contact_0.IsDestroyed(Client.GetClientScenario()))
				{
					return;
				}
				switch (contact_0.GetPostureStance(Client.GetClientSide()))
				{
				case Misc.PostureStance.Neutral:
					this.color_7 = Client.color_Neutral;
					break;
				case Misc.PostureStance.Friendly:
					this.color_7 = Client.color_Friendly;
					break;
				case Misc.PostureStance.Unfriendly:
					this.color_7 = Client.color_Unfriendly;
					break;
				case Misc.PostureStance.Hostile:
					this.color_7 = Client.color_Hostile;
					break;
				case Misc.PostureStance.Unknown:
					this.color_7 = Client.color_Unknown;
					break;
				}
				if (!Information.IsNothing(contact_0.GetUncertaintyArea()))
				{
					this.method_136(this.color_7, ref contact_0, graphics_0);
				}
				Tuple<int, int> tuple = null;
				this.dictionary_2.TryGetValue(contact_0, out tuple);
				if (!Information.IsNothing(tuple))
				{
					int item = tuple.Item1;
					int item2 = tuple.Item2;
					point_ = new Point(item, item2);
				}
				else
				{
					point_ = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, contact_0.GetLatitude(null), contact_0.GetLongitude(null));
				}
				int num = 20;
				this.bool_12 = false;
				this.UnitSymbol = this.GetUnitSymbol(contact_0, ref this.bool_12);
				if (Information.IsNothing(this.UnitSymbol))
				{
					return;
				}
				if (SimConfiguration.gameOptions.GetMapSymbolsSet() == Configuration.GameOptions._MapSymbolsSet.Directional || SimConfiguration.gameOptions.GetMapSymbolsSet() == Configuration.GameOptions._MapSymbolsSet.ChineseMilitary)
				{
					if (this.bool_12 && contact_0.Heading_Known)
					{
						this.UnitSymbol = Class2529.smethod_2(this.UnitSymbol.GetHashCode().ToString(), this.UnitSymbol, (double)contact_0.GetCurrentHeading());
					}
					Contact_Base.ContactType contactType = contact_0.contactType;
					if (contactType - Contact_Base.ContactType.Surface > 1)
					{
						if (contactType - Contact_Base.ContactType.Installation <= 1)
						{
							num = 30;
						}
					}
					else
					{
						num = 40;
					}
				}
				MapProfile._ViewMode viewMode = Client.GetMap().ViewMode;
				if (viewMode != MapProfile._ViewMode.GroupMode)
				{
					if (viewMode != MapProfile._ViewMode.UnitMode)
					{
						goto IL_5CA;
					}
					try
					{
						if (contact_0.IsFilterOut && (Information.IsNothing(Client.smethod_33()) || contact_0 != Client.smethod_33()) && (Information.IsNothing(Client.GetHookedUnit()) || contact_0 != Client.GetHookedUnit()))
						{
							float_7 = 0.5f;
							graphics_0.DrawImage(Class2529.smethod_0(this.UnitSymbol, float_7), point_.X - 10, point_.Y - 10, 20, 20);
						}
						else
						{
							graphics_0.DrawImage(this.UnitSymbol, point_.X - 10, point_.Y - 10, 20, 20);
						}
						if (contact_0.GetRadiationHostUnits(Client.GetClientSide()).Count > 0)
						{
							graphics_0.DrawImage(this.bitmap_2, point_.X, point_.Y, 10, 10);
						}
						goto IL_5CA;
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 200188", ex2.Message);
						GameGeneral.LogException(ref ex2);
						bool arg_2F3_0 = Debugger.IsAttached;
						ProjectData.ClearProjectError();
						goto IL_5CA;
					}
				}
				Contact_Base.ContactType contactType2 = contact_0.contactType;
				if (contactType2 - Contact_Base.ContactType.Facility_Fixed <= 1)
				{
					if (Information.IsNothing(contact_0.ActualUnit) || contact_0.ActualUnit.IsGroupLead())
					{
						goto IL_5CA;
					}
					try
					{
						if (contact_0.IsFilterOut && (Information.IsNothing(Client.smethod_33()) || contact_0 != Client.smethod_33()) && (Information.IsNothing(Client.GetHookedUnit()) || contact_0 != Client.GetHookedUnit()))
						{
							float_7 = 0.5f;
							graphics_0.DrawImage(Class2529.smethod_0(this.UnitSymbol, float_7), point_.X - 10, point_.Y - 10, 20, 20);
						}
						else
						{
							graphics_0.DrawImage(this.UnitSymbol, (int)Math.Round((double)point_.X - (double)num / 2.0), (int)Math.Round((double)point_.Y - (double)num / 2.0), num, num);
						}
						if (contact_0.GetRadiationHostUnits(Client.GetClientSide()).Count > 0)
						{
							graphics_0.DrawImage(this.bitmap_2, point_.X, point_.Y, 10, 10);
						}
						goto IL_5CA;
					}
					catch (Exception ex3)
					{
						ProjectData.SetProjectError(ex3);
						Exception ex4 = ex3;
						ex4.Data.Add("Error at 200186", ex4.Message);
						GameGeneral.LogException(ref ex4);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
						goto IL_5CA;
					}
				}
				try
				{
					if (contact_0.IsFilterOut && (Information.IsNothing(Client.smethod_33()) || contact_0 != Client.smethod_33()) && (Information.IsNothing(Client.GetHookedUnit()) || contact_0 != Client.GetHookedUnit()))
					{
						float_7 = 0.5f;
						graphics_0.DrawImage(Class2529.smethod_0(this.UnitSymbol, float_7), (int)Math.Round((double)point_.X - (double)num / 2.0), (int)Math.Round((double)point_.Y - (double)num / 2.0), num, num);
					}
					else
					{
						graphics_0.DrawImage(this.UnitSymbol, (int)Math.Round((double)point_.X - (double)num / 2.0), (int)Math.Round((double)point_.Y - (double)num / 2.0), num, num);
					}
					if (contact_0.GetRadiationHostUnits(Client.GetClientSide()).Count > 0)
					{
						graphics_0.DrawImage(this.bitmap_2, point_.X, point_.Y, 10, 10);
					}
				}
				catch (Exception ex5)
				{
					ProjectData.SetProjectError(ex5);
					Exception ex6 = ex5;
					ex6.Data.Add("Error at 200187", ex6.Message);
					GameGeneral.LogException(ref ex6);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
				IL_5CA:
				if ((!this.bool_12 || SimConfiguration.gameOptions.GetMapSymbolsSet() != Configuration.GameOptions._MapSymbolsSet.Directional) && contact_0.Speed_Known && contact_0.Heading_Known && contact_0.GetCurrentSpeed() > 0f)
				{
					switch (contact_0.GetPostureStance(Client.GetClientSide()))
					{
					case Misc.PostureStance.Neutral:
						this.method_117(contact_0.GetLatitude(null), contact_0.GetLongitude(null), contact_0.GetCurrentHeading(), contact_0.GetCurrentSpeed(), point_, Client.color_Neutral, graphics_0);
						break;
					case Misc.PostureStance.Friendly:
						this.method_117(contact_0.GetLatitude(null), contact_0.GetLongitude(null), contact_0.GetCurrentHeading(), contact_0.GetCurrentSpeed(), point_, Client.color_Friendly, graphics_0);
						break;
					case Misc.PostureStance.Unfriendly:
						this.method_117(contact_0.GetLatitude(null), contact_0.GetLongitude(null), contact_0.GetCurrentHeading(), contact_0.GetCurrentSpeed(), point_, Client.color_Unfriendly, graphics_0);
						break;
					case Misc.PostureStance.Hostile:
						this.method_117(contact_0.GetLatitude(null), contact_0.GetLongitude(null), contact_0.GetCurrentHeading(), contact_0.GetCurrentSpeed(), point_, Client.color_Hostile, graphics_0);
						break;
					case Misc.PostureStance.Unknown:
						this.method_117(contact_0.GetLatitude(null), contact_0.GetLongitude(null), contact_0.GetCurrentHeading(), contact_0.GetCurrentSpeed(), point_, Client.color_Unknown, graphics_0);
						break;
					}
				}
			}
			catch (Exception ex7)
			{
				ProjectData.SetProjectError(ex7);
				Exception ex8 = ex7;
				ex8.Data.Add("Error at 200518", ex8.Message);
				GameGeneral.LogException(ref ex8);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
			try
			{
				try
				{
					Contact._BattleDamageAssessment? battleDamageAssessment = contact_0.GetBattleDamageAssessment(Client.GetClientSide());
					byte? b = battleDamageAssessment.HasValue ? new byte?((byte)battleDamageAssessment.GetValueOrDefault()) : null;
					if ((b.HasValue ? new bool?(b.GetValueOrDefault() == 4) : null).GetValueOrDefault())
					{
						Pen pen = new Pen(this.color_7, 2f);
						pen.DashStyle = DashStyle.Solid;
						GraphicsPath graphicsPath = new GraphicsPath();
						graphicsPath.AddLine(new Point(point_.X - 10, point_.Y - 10), new Point(point_.X + 10, point_.Y + 10));
						this.DrawPath(pen, graphicsPath, graphics_0);
						graphicsPath = new GraphicsPath();
						graphicsPath.AddLine(new Point(point_.X - 10, point_.Y + 10), new Point(point_.X + 10, point_.Y - 10));
						this.DrawPath(pen, graphicsPath, graphics_0);
						pen.Dispose();
						graphicsPath.Dispose();
					}
				}
				catch (Exception ex9)
				{
					ProjectData.SetProjectError(ex9);
					Exception ex10 = ex9;
					ex10.Data.Add("Error at 200189", ex10.Message);
					GameGeneral.LogException(ref ex10);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
				if (!contact_0.IsFilterOut || (!Information.IsNothing(Client.smethod_33()) && contact_0 == Client.smethod_33()) || (!Information.IsNothing(Client.GetHookedUnit()) && contact_0 == Client.GetHookedUnit()))
				{
					Weapon[] array = contact_0.method_92();
					int num2 = 0;
					if (!Client.GetMap().IsGodsEyeView())
					{
						Weapon[] array2 = array;
						for (int i = 0; i < array2.Length; i = checked(i + 1))
						{
							Weapon weapon = array2[i];
							if (weapon.GetSide(false) == Client.GetClientSide())
							{
								num2++;
							}
							else if (weapon.GetSide(false).GetPostureStance(Client.GetClientSide()) == Misc.PostureStance.Friendly)
							{
								num2++;
							}
							else if (Client.GetClientSide().GetContactObservableDictionary().ContainsKey(weapon.GetGuid()))
							{
								num2++;
							}
						}
					}
					int num3;
					if (Client.GetMap().IsGodsEyeView())
					{
						num3 = array.Length;
					}
					else
					{
						num3 = num2;
					}
					if (num3 != 0)
					{
						try
						{
							this.DrawText(point_.X - 25, point_.Y - 8, num3.ToString(), graphics_0, 0);
						}
						catch (Exception ex11)
						{
							ProjectData.SetProjectError(ex11);
							Exception ex12 = ex11;
							ex12.Data.Add("Error at 200190", ex12.Message);
							GameGeneral.LogException(ref ex12);
							if (Debugger.IsAttached)
							{
								Debugger.Break();
							}
							ProjectData.ClearProjectError();
						}
					}
				}
				if (!contact_0.IsFilterOut || (!Information.IsNothing(Client.smethod_33()) && contact_0 == Client.smethod_33()) || (!Information.IsNothing(Client.GetHookedUnit()) && contact_0 == Client.GetHookedUnit()))
				{
					if (contact_0.GetBattleDamageAssessment(Client.GetClientSide()).HasValue)
					{
						this.method_130(contact_0, graphics_0);
					}
					if (contact_0.GetBDA_Fire(Client.GetClientSide()).HasValue)
					{
						this.method_127(contact_0, graphics_0);
					}
					if (contact_0.GetBDA_Flood(Client.GetClientSide()).HasValue)
					{
						this.method_128(contact_0, graphics_0);
					}
				}
				if ((!contact_0.IsFilterOut || (!Information.IsNothing(Client.smethod_33()) && contact_0 == Client.smethod_33()) || (!Information.IsNothing(Client.GetHookedUnit()) && contact_0 == Client.GetHookedUnit())) && !Information.IsNothing(contact_0.ActualUnit) && contact_0.ActualUnit.MountsAreAimpoints())
				{
					List<Mount> list = new List<Mount>();
					list.AddRange(contact_0.ActualUnit.m_Mounts);
					int value = list.Select(MainForm.MountFunc14).Where(MainForm.MountFunc15).Count<Mount>();
					this.DrawText(point_.X - 25, point_.Y - 16, Conversions.ToString(value), graphics_0, 0);
				}
				bool arg_BFF_0;
				if (contact_0.IsFilterOut && (Information.IsNothing(Client.smethod_33()) || contact_0 != Client.smethod_33()))
				{
					if (Information.IsNothing(Client.GetHookedUnit()) || contact_0 != Client.GetHookedUnit())
					{
						arg_BFF_0 = true;
						goto IL_BFF;
					}
				}
				arg_BFF_0 = (contact_0.Age < 1f);
				IL_BFF:
				if (!arg_BFF_0)
				{
					try
					{
						this.DrawTextString(point_.X - 10, point_.Y + 10, Misc.GetTimeString((long)((int)Math.Round((double)contact_0.Age)), Aircraft_AirOps._Maintenance.const_0, false, false), graphics_0, 0, StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, this.font_3);
					}
					catch (Exception ex13)
					{
						ProjectData.SetProjectError(ex13);
						Exception ex14 = ex13;
						ex14.Data.Add("Error at 200191", ex14.Message);
						GameGeneral.LogException(ref ex14);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
				if (!contact_0.IsFilterOut || (!Information.IsNothing(Client.smethod_33()) && contact_0 == Client.smethod_33()) || (!Information.IsNothing(Client.GetHookedUnit()) && contact_0 == Client.GetHookedUnit()))
				{
					point_ = new Point(point_.X + 10, point_.Y - 9);
					MapProfile._UnitCoverage showDatablocks = Client.GetMap().GetShowDatablocks();
					if (showDatablocks != MapProfile._UnitCoverage.const_0)
					{
						if (showDatablocks == MapProfile._UnitCoverage.const_1 && contact_0 == Client.GetHookedUnit())
						{
							this.method_134(contact_0, Color.White, this.font_0, graphics_0);
						}
					}
					else
					{
						this.method_134(contact_0, Color.White, this.font_0, graphics_0);
					}
				}
				switch (Client.GetMap().GetShowContactEmissions())
				{
				case MapProfile._UnitCoverage.const_0:
					this.method_139(contact_0, point_, graphics_0);
					break;
				case MapProfile._UnitCoverage.const_1:
					if (contact_0 == Client.GetHookedUnit())
					{
						this.method_139(contact_0, point_, graphics_0);
					}
					break;
				}
			}
			catch (Exception ex15)
			{
				ProjectData.SetProjectError(ex15);
				Exception ex16 = ex15;
				ex16.Data.Add("Error at 200517", ex16.Message);
				GameGeneral.LogException(ref ex16);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600711C RID: 28956 RVA: 0x00402234 File Offset: 0x00400434
		private void method_139(Contact theTarget, Point point_7, Graphics graphics_0)
		{
			if (!Information.IsNothing(theTarget) && (!theTarget.IsFilterOut || (!Information.IsNothing(Client.smethod_33()) && theTarget == Client.smethod_33()) || (!Information.IsNothing(Client.GetHookedUnit()) && theTarget == Client.GetHookedUnit())) && theTarget.HasEmissionContainer())
			{
				try
				{
					IEnumerable<KeyValuePair<int, EmissionContainer>> source;
					if (Client.GetMap().GetShowContactEmissions_Details() == MapProfile.Enum56.const_1)
					{
						source = theTarget.GetEmissionContainerObDictionary().Dictionary.Select(MainForm.KeyValuePairFunc16).Where(MainForm.KeyValuePairFunc17).OrderBy(MainForm.KeyValuePairFunc18).ToList<KeyValuePair<int, EmissionContainer>>();
					}
					else if (Client.GetMap().GetShowContactEmissions_Details() == MapProfile.Enum56.const_2)
					{
						if (!Information.IsNothing(Client.GetHookedUnit()) && theTarget == Client.GetHookedUnit())
						{
							source = theTarget.GetEmissionContainerObDictionary().Dictionary.Select(MainForm.KeyValuePairFunc19).Where(MainForm.KeyValuePairFunc20).OrderBy(MainForm.KeyValuePairFunc21).ToList<KeyValuePair<int, EmissionContainer>>();
						}
						else
						{
							source = theTarget.GetEmissionContainerObDictionary().Dictionary.Select(MainForm.KeyValuePairFunc22).Where(MainForm.KeyValuePairFunc23).OrderBy(MainForm.KeyValuePairFunc24).ToList<KeyValuePair<int, EmissionContainer>>();
						}
					}
					else
					{
						source = theTarget.GetEmissionContainerObDictionary().Dictionary.Select(MainForm.KeyValuePairFunc25).Where(MainForm.KeyValuePairFunc26).OrderBy(MainForm.KeyValuePairFunc27);
					}
					int num = source.Count<KeyValuePair<int, EmissionContainer>>();
					for (int i = num - 1; i >= 0; i += -1)
					{
						KeyValuePair<int, EmissionContainer> keyValuePair = source.ElementAtOrDefault(i);
						int alpha = (int)Math.Round(Math.Min(255.0 * (1.0 / ((double)keyValuePair.Value.elapsedTime + 0.1)), 255.0));
						int colorARGB;
						if (keyValuePair.Value.bool_0)
						{
							colorARGB = Color.OrangeRed.ToArgb();
						}
						else if (!keyValuePair.Value.method_0(keyValuePair.Key, Client.GetClientScenario()).IsJammer() && !keyValuePair.Value.method_0(keyValuePair.Key, Client.GetClientScenario()).IsCommunicationsJammer())
						{
							colorARGB = Color.FromArgb(alpha, 255, 255, 255).ToArgb();
						}
						else
						{
							colorARGB = Color.Yellow.ToArgb();
						}
						string text = keyValuePair.Value.method_1(keyValuePair.Key, Client.GetClientScenario());
						this.DrawTextString(point_7.X - 23, point_7.Y - num * 13 + i * 13, text, graphics_0, colorARGB, StringAlignment.Near, (StringFormatFlags)0, StringAlignment.Near, this.font_2);
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200192", ex2.Message);
					GameGeneral.LogException(ref ex2);
					bool arg_2B2_0 = Debugger.IsAttached;
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x0600711D RID: 28957 RVA: 0x00402518 File Offset: 0x00400718
		private void method_140()
		{
			try
			{
				if (!Information.IsNothing(Client.GetClientSide()))
				{
					List<ActiveUnit> activeUnitList = Client.GetClientScenario().GetActiveUnitList();
					new List<ActiveUnit>().AddRange(Client.GetClientSide().ActiveUnitArray);
					List<Contact> list = new List<Contact>();
					list.AddRange(Client.GetClientSide().GetContactList());
					if (Client.GetClientSide().GetBaseContacts().Count > 0)
					{
						list.AddRange(Client.GetClientSide().GetBaseContacts());
					}
					this.dictionary_0 = new Dictionary<Side, List<Side>>();
					Side[] sides = Client.GetClientScenario().GetSides();
					checked
					{
						for (int i = 0; i < sides.Length; i++)
						{
							Side side = sides[i];
							List<Side> list2 = new List<Side>();
							side.EvaluateSides(Client.GetClientScenario(), list2, null);
							this.dictionary_0.Add(side, list2);
						}
						this.UnitList.Clear();
						this.dictionary_2.Clear();
					}
					if (!Information.IsNothing(activeUnitList) && activeUnitList.Count != 0)
					{
						List<Unit> list3 = new List<Unit>();
						List<Unit> list4 = new List<Unit>();
						List<Unit> list5 = new List<Unit>();
						if (Client.GetMap().IsGodsEyeView())
						{
							List<ActiveUnit> list6 = activeUnitList.Where(MainForm.ActiveUnitFunc28).ToList<ActiveUnit>();
							for (int num = list6.Count - 1; num >= 0; num += -1)
							{
								try
								{
									ActiveUnit activeUnit = list6[num];
									if (!activeUnit.IsAircraft && !activeUnit.IsGuidedWeapon_RV_HGV() && !activeUnit.IsSatellite() && !activeUnit.IsAirDecoy() && !activeUnit.IsGuidedProjectile())
									{
										if (!activeUnit.IsShip && !activeUnit.IsFacility && !activeUnit.IsGroup)
										{
											if (activeUnit.IsSubmarine || activeUnit.IsTorpedo() || activeUnit.method_7() || (activeUnit.IsWeapon && ((Weapon)activeUnit).GetWeaponType() == Weapon._WeaponType.Sonobuoy))
											{
												list5.Add(activeUnit);
											}
										}
										else
										{
											list4.Add(activeUnit);
										}
									}
									else
									{
										list3.Add(activeUnit);
									}
								}
								catch (Exception ex)
								{
									ProjectData.SetProjectError(ex);
									Exception ex2 = ex;
									ex2.Data.Add("Error at 200193", ex2.Message);
									GameGeneral.LogException(ref ex2);
									if (Debugger.IsAttached)
									{
										Debugger.Break();
									}
									ProjectData.ClearProjectError();
								}
							}
						}
						else
						{
							List<ActiveUnit> list7 = new List<ActiveUnit>();
							if (!string.IsNullOrEmpty(Client.GetMap().GetIsolatedPOVObjectID()))
							{
								if (!Client.GetClientScenario().GetActiveUnits().ContainsKey(Client.GetMap().GetIsolatedPOVObjectID()))
								{
									goto IL_943;
								}
								ActiveUnit activeUnit2 = Client.GetClientScenario().GetActiveUnits()[Client.GetMap().GetIsolatedPOVObjectID()];
								this.UnitList.Add(activeUnit2);
								foreach (Weapon current in Client.GetClientScenario().GetGuidedWeaponsInAir())
								{
									if (current.GetFiringParent() == activeUnit2)
									{
										this.UnitList.Add(current);
									}
								}
								foreach (ActiveUnit current2 in activeUnitList)
								{
									if (!Information.IsNothing(current2.GetSide(false)) && current2.IsOperating() && WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, current2) && current2.IsFixedFacility() && (current2.GetSide(false) == activeUnit2.GetSide(false) || current2.GetSide(false).GetPostureStance(activeUnit2.GetSide(false)) == Misc.PostureStance.Friendly))
									{
										this.UnitList.Add(current2);
									}
								}
								using (List<Contact>.Enumerator enumerator3 = activeUnit2.GetSensory().GetContactList().GetEnumerator())
								{
									while (enumerator3.MoveNext())
									{
										Contact current3 = enumerator3.Current;
										try
										{
											if (!current3.IsDestroyed(Client.GetClientScenario()) && WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, current3) && (Information.IsNothing(current3.ActualUnit) || Client.smethod_73(ref current3.ActualUnit, false, ref current3)))
											{
												switch (current3.contactType)
												{
												case Contact_Base.ContactType.Air:
												case Contact_Base.ContactType.Missile:
												case Contact_Base.ContactType.Orbital:
												case Contact_Base.ContactType.Explosion:
												case Contact_Base.ContactType.Decoy_Air:
													list3.Add(current3);
													break;
												case Contact_Base.ContactType.Surface:
												case Contact_Base.ContactType.UndeterminedNaval:
												case Contact_Base.ContactType.Aimpoint:
												case Contact_Base.ContactType.Undetermined:
												case Contact_Base.ContactType.Decoy_Surface:
													list4.Add(current3);
													break;
												case Contact_Base.ContactType.Submarine:
												case Contact_Base.ContactType.Torpedo:
												case Contact_Base.ContactType.Mine:
												case Contact_Base.ContactType.Decoy_Sub:
												case Contact_Base.ContactType.Sonobuoy:
													list5.Add(current3);
													break;
												case Contact_Base.ContactType.Facility_Fixed:
												case Contact_Base.ContactType.Facility_Mobile:
												case Contact_Base.ContactType.Decoy_Land:
													list4.Add(current3);
													break;
												case Contact_Base.ContactType.Installation:
												case Contact_Base.ContactType.AirBase:
												case Contact_Base.ContactType.NavalBase:
													list4.Add(current3);
													break;
												}
											}
										}
										catch (Exception ex3)
										{
											ProjectData.SetProjectError(ex3);
											Exception ex4 = ex3;
											string arg_4B9_0 = ex4.Message;
											ex4.Data.Add("Error at 20023453465777", ex4.Message);
											GameGeneral.LogException(ref ex4);
											if (Debugger.IsAttached)
											{
												Debugger.Break();
											}
											ProjectData.ClearProjectError();
										}
									}
									goto IL_943;
								}
							}
                            ActiveUnit current4X;
                            foreach (ActiveUnit current4 in activeUnitList)
							{
                                current4X = current4;
                                if (!Information.IsNothing(current4.GetSide(false)) && current4.IsOperating())
								{
									double lat;
									double lng;
									if (!current4.GetCommStuff().IsNotOutOfComms())
									{
										lat = current4.GetLatitudeLR().Value;
										lng = current4.GetLongitudeLR().Value;
									}
									else
									{
										lat = current4.GetLatitude(null);
										lng = current4.GetLongitude(null);
									}
									if (WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, lat, lng) && (!current4.IsGroup || Client.GetMap().ViewMode != MapProfile._ViewMode.UnitMode))
									{
										Contact contact = null;
										if (Client.smethod_73(ref current4X, false, ref contact) && (!current4.IsWeapon || Information.IsNothing(((Weapon)current4).GetFiringParent()) || ((Weapon)current4).GetFiringParent().GetCommStuff().IsNotOutOfComms()) && (current4.GetSide(false) == Client.GetClientSide() | this.dictionary_0[current4.GetSide(false)].Contains(Client.GetClientSide())))
										{
											list7.Add(current4);
										}
									}
								}
							}
							for (int num2 = list7.Count - 1; num2 >= 0; num2 += -1)
							{
								try
								{
									ActiveUnit activeUnit = list7[num2];
									if (!(activeUnit.IsAircraft | activeUnit.IsGuidedWeapon_RV_HGV() | activeUnit.IsSatellite() | activeUnit.IsAirDecoy()) && !activeUnit.IsGuidedProjectile())
									{
										if (activeUnit.IsShip | activeUnit.IsFacility | activeUnit.IsGroup)
										{
											list4.Add(activeUnit);
										}
										else if (activeUnit.IsSubmarine | activeUnit.IsTorpedo() | activeUnit.method_7() | (activeUnit.IsWeapon && ((Weapon)activeUnit).GetWeaponType() == Weapon._WeaponType.Sonobuoy))
										{
											list5.Add(activeUnit);
										}
									}
									else
									{
										list3.Add(activeUnit);
									}
								}
								catch (Exception ex5)
								{
									ProjectData.SetProjectError(ex5);
									Exception ex6 = ex5;
									string arg_760_0 = ex6.Message;
									ex6.Data.Add("Error at 200194", ex6.Message);
									GameGeneral.LogException(ref ex6);
									if (Debugger.IsAttached)
									{
										Debugger.Break();
									}
									ProjectData.ClearProjectError();
								}
							}
							if (Information.IsNothing(list))
							{
								return;
							}
							if (!Client.GetMap().IsGodsEyeView() && !Information.IsNothing(Client.GetClientSide()) && (Client.GetClientSide().GetContactObservableDictionary().Count > 0 | Client.GetClientSide().GetContactsObDictionary().Count > 0))
							{
								for (int num3 = list.Count - 1; num3 >= 0; num3 += -1)
								{
									try
									{
										Contact contact2 = list[num3];
										if (!contact2.IsDestroyed(Client.GetClientScenario()) && WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, contact2) && !Information.IsNothing(contact2.ActualUnit))
										{
											switch (contact2.contactType)
											{
											case Contact_Base.ContactType.Air:
											case Contact_Base.ContactType.Missile:
											case Contact_Base.ContactType.Orbital:
											case Contact_Base.ContactType.Explosion:
												list3.Add(contact2);
												break;
											case Contact_Base.ContactType.Surface:
											case Contact_Base.ContactType.UndeterminedNaval:
											case Contact_Base.ContactType.Aimpoint:
											case Contact_Base.ContactType.Undetermined:
												list4.Add(contact2);
												break;
											case Contact_Base.ContactType.Submarine:
											case Contact_Base.ContactType.Torpedo:
											case Contact_Base.ContactType.Mine:
											case Contact_Base.ContactType.Sonobuoy:
												list5.Add(contact2);
												break;
											case Contact_Base.ContactType.Facility_Fixed:
											case Contact_Base.ContactType.Facility_Mobile:
												list4.Add(contact2);
												break;
											case Contact_Base.ContactType.Installation:
											case Contact_Base.ContactType.AirBase:
											case Contact_Base.ContactType.NavalBase:
												list4.Add(contact2);
												break;
											}
										}
									}
									catch (Exception ex7)
									{
										ProjectData.SetProjectError(ex7);
										Exception ex8 = ex7;
										string arg_902_0 = ex8.Message;
										ex8.Data.Add("Error at 200195", ex8.Message);
										if (Debugger.IsAttached)
										{
											Debugger.Break();
										}
										GameGeneral.LogException(ref ex8);
										ProjectData.ClearProjectError();
									}
								}
							}
						}
						IL_943:
						this.UnitList.AddRange(list5);
						this.UnitList.AddRange(list4);
						this.UnitList.AddRange(list3);
						int arg_975_0 = this.UnitList.Count;
						for (int j = this.UnitList.Count - 1; j >= 0; j += -1)
						{
							Unit unit = this.UnitList[j];
							int item = 0;
							int item2 = 0;
							WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, unit.GetLatitude(null), unit.GetLongitude(null), ref item, ref item2);
							if (!this.dictionary_2.ContainsKey(unit))
							{
								this.dictionary_2.Add(unit, new Tuple<int, int>(item, item2));
							}
						}
					}
				}
			}
			catch (Exception ex9)
			{
				ProjectData.SetProjectError(ex9);
				Exception ex10 = ex9;
				ex10.Data.Add("Error at 200544", ex10.Message);
				GameGeneral.LogException(ref ex10);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600711E RID: 28958 RVA: 0x00403048 File Offset: 0x00401248
		private void method_141()
		{
			try
			{
				this.list_3.Clear();
				int num = this.UnitList.Count - 1;
				for (int i = 0; i <= num; i++)
				{
					Unit unit = this.UnitList[i];
					if ((unit.IsActiveUnit() || unit.IsContact()) && (SimConfiguration.gameOptions.GetSonobuoyVisibility() != Configuration.GameOptions._SonobuoyVisibility.const_2 || !unit.IsActiveUnit() || !unit.IsWeapon || ((Weapon)unit).GetWeaponType() != Weapon._WeaponType.Sonobuoy))
					{
						this.list_3.Add(unit);
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200545", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600711F RID: 28959 RVA: 0x00403134 File Offset: 0x00401334
		public void DrawSensorContactsx(ref float float_7, Graphics graphics_0)
		{
			checked
			{
				try
				{
					if (!Information.IsNothing(this.UnitList))
					{
						Unit[] array = this.UnitList.OrderBy(MainForm.UnitFunc29).ToArray<Unit>();
						for (int i = 0; i < array.Length; i++)
						{
							Unit unit = array[i];
							try
							{
								if (unit.IsActiveUnit())
								{
									this.method_135((ActiveUnit)unit, float_7, this.int_13, graphics_0);
								}
								else
								{
									this.method_138((Contact)unit, float_7, (float)this.int_13, graphics_0);
								}
							}
							catch (Exception ex)
							{
								ProjectData.SetProjectError(ex);
								Exception ex2 = ex;
								ex2.Data.Add("Error at 200197", ex2.Message);
								GameGeneral.LogException(ref ex2);
								if (Debugger.IsAttached)
								{
									Debugger.Break();
								}
								ProjectData.ClearProjectError();
							}
						}
					}
				}
				catch (Exception ex3)
				{
					ProjectData.SetProjectError(ex3);
					Exception ex4 = ex3;
					ex4.Data.Add("Error at 200543", ex4.Message);
					GameGeneral.LogException(ref ex4);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x06007120 RID: 28960 RVA: 0x0040325C File Offset: 0x0040145C
		private void method_143(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientScenario()) && !Information.IsNothing(SimConfiguration.gameOptions))
			{
				if (Client.GetClientScenario().IsFastMode())
				{
					this.timer_0.Interval = 100;
					this.timer_2.Interval = 100;
					this.timer_1.Interval = 250;
					Client.ScenarioAutoSaveInterval = 10;
				}
				else
				{
					this.timer_0.Interval = 1000;
					if (this.method_11())
					{
						this.timer_2.Interval = 100;
					}
					else
					{
						this.timer_2.Interval = 1000;
					}
					this.timer_1.Interval = 500;
					Client.ScenarioAutoSaveInterval = 30;
				}
				Client.GetClientScenario().HighFidelityMode = SimConfiguration.gameOptions.IsHighFidelityMode();
				Client.GetClientScenario().SetTimeCompression(this.CB_TimeCompression.SelectedIndex);
				if (Client.GetConfiguration().GetSimStatus() == Configuration.EnumRunStop.const_Run)
				{
					Client.LastAutoSave -= (double)this.timer_0.Interval;
				}
				if (!Client.GetClientScenario().ExecutionInProgress)
				{
					Client.SetEventSchedulerTime(this.timer_0.Interval);
				}
			}
		}

		// Token: 0x06007121 RID: 28961 RVA: 0x0002F17F File Offset: 0x0002D37F
		private void method_144(object sender, EventArgs e)
		{
			Client.SetDBUsedHash(Conversions.ToString((sender as ToolStripMenuItem).Tag));
			Client.smethod_63();
		}

		// Token: 0x06007122 RID: 28962 RVA: 0x00403388 File Offset: 0x00401588
		private void SwitchToRole(object sender, EventArgs e)//切换推演方事件函数
		{
			ToolStripMenuItem toolStripMenuItem = sender as ToolStripMenuItem;
			Side[] sides = Client.GetClientScenario().GetSides();
			checked
			{
				for (int i = 0; i < sides.Length; i++)
				{
					Side side = sides[i];
					if (Operators.CompareString(side.GetSideName(), toolStripMenuItem.Text, false) == 0)
					{
						Client.GetClientScenario().ChangeSide(side);
						return;
					}
				}
			}
		}

		// Token: 0x06007123 RID: 28963 RVA: 0x0002F19B File Offset: 0x0002D39B
		private void method_146()
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit())
			{
				Client.smethod_26().activeUnit_0 = (ActiveUnit)Client.GetHookedUnit();
				Client.smethod_26().Show();
			}
		}

		// Token: 0x06007124 RID: 28964 RVA: 0x0001F6B5 File Offset: 0x0001D8B5
		private void Click_Exit(object sender, EventArgs e)
		{
			base.Close();
		}

		// Token: 0x06007125 RID: 28965 RVA: 0x0002657A File Offset: 0x0002477A
		private void Click_NewOrEditRole(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetSides().Show();
		}

		// Token: 0x06007126 RID: 28966 RVA: 0x0002F1D9 File Offset: 0x0002D3D9
		private void method_149(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetOptions().Show();
		}

		// Token: 0x06007127 RID: 28967 RVA: 0x004033E4 File Offset: 0x004015E4
		private ReferencePoint method_150()
		{
			List<ReferencePoint> list = new List<ReferencePoint>();
			ReferencePoint result;
			if (Information.IsNothing(Client.GetClientSide()))
			{
				result = null;
			}
			else
			{
				List<ActiveUnit> list2 = new List<ActiveUnit>();
				list2.AddRange(Client.GetClientSide().ActiveUnitArray);
				if (Information.IsNothing(list2))
				{
					result = null;
				}
				else
				{
					short num = (short)(this.point_0.Y - 4);
					short num2 = (short)(this.point_0.Y + 4);
					short num3 = (short)(this.point_0.X - 4);
					short num4 = (short)(this.point_0.X + 4);
					try
					{
						foreach (ReferencePoint current in Client.GetClientSide().GetReferencePoints())
						{
							if (!Information.IsNothing(current))
							{
								Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(), current.GetLongitude());
								if ((int)num <= point.Y && point.Y <= (int)num2 && (int)num3 <= point.X && point.X <= (int)num4)
								{
									list.Add(current);
								}
							}
						}
						IEnumerable<ReferencePoint> source = list.OrderBy(new Func<ReferencePoint, float>(this.method_554));
						if (source.Count<ReferencePoint>() > 0)
						{
							this.method_12(false);
							result = source.ElementAtOrDefault(0);
						}
						else
						{
							result = null;
						}
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 200198", ex2.Message);
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						result = null;
						ProjectData.ClearProjectError();
					}
				}
			}
			return result;
		}

		// Token: 0x06007128 RID: 28968 RVA: 0x004035A4 File Offset: 0x004017A4
		private Waypoint method_151()
		{
			List<Waypoint> list = new List<Waypoint>();
			Waypoint waypoint = null;
			Waypoint result;
			if (Information.IsNothing(Client.GetClientSide()))
			{
				waypoint = null;
			}
			else
			{
				List<ActiveUnit> list2 = new List<ActiveUnit>();
				list2.AddRange(Client.GetClientSide().ActiveUnitArray);
				if (Information.IsNothing(list2))
				{
					waypoint = null;
				}
				else if (Information.IsNothing(Client.GetHookedUnit()) && SimConfiguration.gameOptions.GetShowFlightPlans_Airborne() == Configuration.GameOptions._ShowFlightPlans_Airborne.const_2 && SimConfiguration.gameOptions.GetShowFlightPlans_Planned() == Configuration.GameOptions._ShowFlightPlans_Planned.const_4)
				{
					waypoint = null;
				}
				else if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsWeapon && Information.IsNothing(((Weapon)Client.GetHookedUnit()).GetDataLinkParent()))
				{
					waypoint = null;
				}
				else
				{
					short num = (short)(this.point_0.Y - 4);
					short num2 = (short)(this.point_0.Y + 4);
					short num3 = (short)(this.point_0.X - 4);
					short num4 = (short)(this.point_0.X + 4);
					short num5 = (short)(this.point_0.Y - 8);
					short num6 = (short)(this.point_0.Y + 8);
					short num7 = (short)(this.point_0.X - 8);
					short num8 = (short)(this.point_0.X + 8);
					try
					{
						if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit() && Client.GetHookedUnit().GetSide(false) == Client.GetClientSide())
						{
							ActiveUnit activeUnit = (ActiveUnit)Client.GetHookedUnit();
							List<Waypoint> list3 = new List<Waypoint>();
							if (Information.IsNothing(activeUnit.GetNavigator().GetPlottedCourse()))
							{
								waypoint = null;
								result = waypoint;
								return result;
							}
							list3.AddRange(activeUnit.GetNavigator().GetPlottedCourse());
							foreach (Waypoint current in list3)
							{
								if (current.waypointType != Waypoint.WaypointType.PathfindingPoint)
								{
									Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(), current.GetLongitude());
									if ((int)num <= point.Y && point.Y <= (int)num2 && (int)num3 <= point.X && point.X <= (int)num4)
									{
										MapProfile._ViewMode viewMode = Client.GetMap().ViewMode;
										if (viewMode != MapProfile._ViewMode.GroupMode)
										{
											if (viewMode == MapProfile._ViewMode.UnitMode)
											{
												list.Add(current);
											}
										}
										else if (!activeUnit.HasParentGroup())
										{
											list.Add(current);
										}
									}
								}
							}
						}
						if (this.list_7.Count > 0)
						{
							int count = this.list_7.Count;
							int num9 = count - 1;
							this.int_3 = num9;
							while (this.int_3 >= 0)
							{
								Waypoint waypoint2 = this.list_7[this.int_3];
								if (!list.Contains(waypoint2))
								{
									Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint2.GetLatitude(), waypoint2.GetLongitude());
									if ((int)num5 <= point.Y && point.Y <= (int)num6 && (int)num7 <= point.X && point.X <= (int)num8)
									{
										list.Add(waypoint2);
									}
									if (waypoint2.FlightFormation == Waypoint._FlightFormation.Split)
									{
										if (!Information.IsNothing(waypoint2.WP_LeadElementWingman))
										{
											point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint2.WP_LeadElementWingman.GetLatitude(), waypoint2.WP_LeadElementWingman.GetLongitude());
											if ((int)num5 <= point.Y && point.Y <= (int)num6 && (int)num7 <= point.X && point.X <= (int)num8)
											{
												list.Add(waypoint2.WP_LeadElementWingman);
											}
										}
										if (!Information.IsNothing(waypoint2.WP_SecondElement))
										{
											point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint2.WP_SecondElement.GetLatitude(), waypoint2.WP_SecondElement.GetLongitude());
											if ((int)num5 <= point.Y && point.Y <= (int)num6 && (int)num7 <= point.X && point.X <= (int)num8)
											{
												list.Add(waypoint2.WP_SecondElement);
											}
										}
										if (!Information.IsNothing(waypoint2.WP_SecondElementWingman))
										{
											point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint2.WP_SecondElementWingman.GetLatitude(), waypoint2.WP_SecondElementWingman.GetLongitude());
											if ((int)num5 <= point.Y && point.Y <= (int)num6 && (int)num7 <= point.X && point.X <= (int)num8)
											{
												list.Add(waypoint2.WP_SecondElementWingman);
											}
										}
										if (!Information.IsNothing(waypoint2.WP_ThirdElement))
										{
											point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint2.WP_ThirdElement.GetLatitude(), waypoint2.WP_ThirdElement.GetLongitude());
											if ((int)num5 <= point.Y && point.Y <= (int)num6 && (int)num7 <= point.X && point.X <= (int)num8)
											{
												list.Add(waypoint2.WP_ThirdElement);
											}
										}
										if (!Information.IsNothing(waypoint2.WP_ThirdElementWingman))
										{
											point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint2.WP_ThirdElementWingman.GetLatitude(), waypoint2.WP_ThirdElementWingman.GetLongitude());
											if ((int)num5 <= point.Y && point.Y <= (int)num6 && (int)num7 <= point.X && point.X <= (int)num8)
											{
												list.Add(waypoint2.WP_ThirdElementWingman);
											}
										}
									}
								}
								this.int_3 += -1;
							}
						}
						if (this.list_8.Count > 0)
						{
							int count2 = this.list_8.Count;
							int num10 = count2 - 1;
							this.int_3 = num10;
							while (this.int_3 >= 0)
							{
								Waypoint waypoint3 = this.list_8[this.int_3];
								if (!list.Contains(waypoint3))
								{
									Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint3.GetLatitude(), waypoint3.GetLongitude());
									if ((int)num5 <= point.Y && point.Y <= (int)num6 && (int)num7 <= point.X && point.X <= (int)num8)
									{
										list.Add(waypoint3);
									}
									if (waypoint3.FlightFormation == Waypoint._FlightFormation.Split)
									{
										if (!Information.IsNothing(waypoint3.WP_LeadElementWingman))
										{
											point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint3.WP_LeadElementWingman.GetLatitude(), waypoint3.WP_LeadElementWingman.GetLongitude());
											if ((int)num5 <= point.Y && point.Y <= (int)num6 && (int)num7 <= point.X && point.X <= (int)num8)
											{
												list.Add(waypoint3.WP_LeadElementWingman);
											}
										}
										if (!Information.IsNothing(waypoint3.WP_SecondElement))
										{
											point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint3.WP_SecondElement.GetLatitude(), waypoint3.WP_SecondElement.GetLongitude());
											if ((int)num5 <= point.Y && point.Y <= (int)num6 && (int)num7 <= point.X && point.X <= (int)num8)
											{
												list.Add(waypoint3.WP_SecondElement);
											}
										}
										if (!Information.IsNothing(waypoint3.WP_SecondElementWingman))
										{
											point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint3.WP_SecondElementWingman.GetLatitude(), waypoint3.WP_SecondElementWingman.GetLongitude());
											if ((int)num5 <= point.Y && point.Y <= (int)num6 && (int)num7 <= point.X && point.X <= (int)num8)
											{
												list.Add(waypoint3.WP_SecondElementWingman);
											}
										}
										if (!Information.IsNothing(waypoint3.WP_ThirdElement))
										{
											point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint3.WP_ThirdElement.GetLatitude(), waypoint3.WP_ThirdElement.GetLongitude());
											if ((int)num5 <= point.Y && point.Y <= (int)num6 && (int)num7 <= point.X && point.X <= (int)num8)
											{
												list.Add(waypoint3.WP_ThirdElement);
											}
										}
										if (!Information.IsNothing(waypoint3.WP_ThirdElementWingman))
										{
											point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, waypoint3.WP_ThirdElementWingman.GetLatitude(), waypoint3.WP_ThirdElementWingman.GetLongitude());
											if ((int)num5 <= point.Y && point.Y <= (int)num6 && (int)num7 <= point.X && point.X <= (int)num8)
											{
												list.Add(waypoint3.WP_ThirdElementWingman);
											}
										}
									}
								}
								this.int_3 += -1;
							}
						}
						IEnumerable<Waypoint> source = list.OrderBy(new Func<Waypoint, double>(this.method_555));
						if (source.Count<Waypoint>() > 0)
						{
							this.method_12(false);
							waypoint = source.ElementAtOrDefault(0);
						}
						else
						{
							waypoint = null;
						}
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 200199", ex2.Message);
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						waypoint = null;
						ProjectData.ClearProjectError();
					}
				}
			}
			result = waypoint;
			return result;
		}

		// Token: 0x06007129 RID: 28969 RVA: 0x00403EF4 File Offset: 0x004020F4
		private ReferencePoint method_152()
		{
			HashSet<ReferencePoint> hashSet = new HashSet<ReferencePoint>();
			ReferencePoint result;
			if (Client.GetClientSide() == null)
			{
				result = null;
			}
			else
			{
				short num = (short)(this.point_0.Y - 4);
				short num2 = (short)(this.point_0.Y + 4);
				short num3 = (short)(this.point_0.X - 4);
				short num4 = (short)(this.point_0.X + 4);
				List<ReferencePoint> list = new List<ReferencePoint>();
				list.AddRange(Client.GetClientSide().GetReferencePoints());
				foreach (ReferencePoint current in list)
				{
					if (!Information.IsNothing(current))
					{
						Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(), current.GetLongitude());
						if ((int)num <= point.Y && point.Y <= (int)num2 && (int)num3 <= point.X && point.X <= (int)num4)
						{
							hashSet.Add(current);
						}
					}
				}
				result = hashSet.OrderBy(new Func<ReferencePoint, float>(this.method_556)).ElementAtOrDefault(0);
			}
			return result;
		}

		// Token: 0x0600712A RID: 28970 RVA: 0x00404028 File Offset: 0x00402228
		private List<Unit> method_153(object object_, MapProfile._ViewMode ViewMode_, MouseEventArgs mouseEventArgs_1)
		{
			List<Unit> list = new List<Unit>();
			short num = (short)(this.point_0.Y - 12);
			short num2 = (short)(this.point_0.Y + 12);
			short num3 = (short)(this.point_0.X - 12);
			short num4 = (short)(this.point_0.X + 12);
			Client.GetClientScenario().GetActiveUnitList();
			List<Contact> list2 = new List<Contact>();
			list2.AddRange(Client.GetClientSide().GetContactObservableDictionary().Values);
			list2.AddRange(Client.GetClientSide().GetContactsObDictionary().Values);
			foreach (Unit current in this.list_3)
			{
				Point point;
				if (current.IsActiveUnit() && !((ActiveUnit)current).GetCommStuff().IsNotOutOfComms() && !Client.GetMap().IsGodsEyeView() && !Class2529.IsIsolatedPOVObject((ActiveUnit)current))
				{
					point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, ((ActiveUnit)current).GetLatitudeLR().Value, ((ActiveUnit)current).GetLongitudeLR().Value);
				}
				else
				{
					point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, current.GetLatitude(null), current.GetLongitude(null));
				}
				if ((int)num < point.Y & point.Y < (int)num2 & ((int)num3 < point.X & point.X < (int)num4))
				{
					if (ViewMode_ != MapProfile._ViewMode.GroupMode)
					{
						if (ViewMode_ == MapProfile._ViewMode.UnitMode && !current.IsGroup && (!current.IsContact() || !((Contact)current).ActualUnit.IsGroup))
						{
							list.Add(current);
						}
					}
					else if (current.IsActiveUnit())
					{
						if (!((ActiveUnit)current).HasParentGroup())
						{
							list.Add(current);
						}
					}
					else if (current.IsContact())
					{
						Contact_Base.ContactType contactType = ((Contact)current).contactType;
						if (contactType - Contact_Base.ContactType.Facility_Fixed <= 1)
						{
							if (!Information.IsNothing(((Contact)current).ActualUnit))
							{
								if (!((Contact)current).ActualUnit.HasParentGroup())
								{
									list.Add(current);
								}
							}
							else
							{
								list.Add(current);
							}
						}
						else
						{
							list.Add(current);
						}
					}
				}
			}
			return list;
		}

		// Token: 0x0600712B RID: 28971 RVA: 0x004042BC File Offset: 0x004024BC
		private Unit method_154(object object_, MapProfile._ViewMode ViewMode, MouseEventArgs mouseEventArgs_)
		{
			Collection<Unit> collection = new Collection<Unit>();
			Unit unit = null;
			short num = (short)(this.point_0.Y - 12);
			short num2 = (short)(this.point_0.Y + 12);
			short num3 = (short)(this.point_0.X - 12);
			short num4 = (short)(this.point_0.X + 12);
			int num5 = this.list_3.Count - 1;
			for (int i = 0; i <= num5; i++)
			{
				Unit unit2 = this.list_3[i];
				int x = 0;
				int y = 0;
				if (unit2.IsActiveUnit())
				{
					if (!((ActiveUnit)unit2).GetCommStuff().IsNotOutOfComms() && !Client.GetMap().IsGodsEyeView() && !Class2529.IsIsolatedPOVObject((ActiveUnit)unit2))
					{
						WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, ((ActiveUnit)unit2).GetLatitudeLR().Value, ((ActiveUnit)unit2).GetLongitudeLR().Value, ref x, ref y);
					}
					else
					{
						Tuple<int, int> tuple = null;
						this.dictionary_2.TryGetValue(unit2, out tuple);
						if (!Information.IsNothing(tuple))
						{
							x = tuple.Item1;
							y = tuple.Item2;
						}
						else
						{
							WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, unit2.GetLatitude(null), unit2.GetLongitude(null), ref x, ref y);
						}
					}
				}
				else
				{
					WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, unit2.GetLatitude(null), unit2.GetLongitude(null), ref x, ref y);
				}
				Point point = new Point(x, y);
				if ((int)num < point.Y && point.Y < (int)num2 && (int)num3 < point.X && point.X < (int)num4)
				{
					if (ViewMode != MapProfile._ViewMode.GroupMode)
					{
						if (ViewMode == MapProfile._ViewMode.UnitMode && !unit2.IsGroup && (!unit2.IsContact() || !((Contact)unit2).ActualUnit.IsGroup))
						{
							collection.Add(unit2);
						}
					}
					else if (unit2.IsActiveUnit())
					{
						if (!((ActiveUnit)unit2).HasParentGroup())
						{
							collection.Add(unit2);
						}
					}
					else if (unit2.IsContact())
					{
						Contact_Base.ContactType contactType = ((Contact)unit2).contactType;
						if (contactType - Contact_Base.ContactType.Facility_Fixed <= 1)
						{
							if (!Information.IsNothing(((Contact)unit2).ActualUnit))
							{
								if (!((Contact)unit2).ActualUnit.HasParentGroup())
								{
									collection.Add(unit2);
								}
							}
							else
							{
								collection.Add(unit2);
							}
						}
						else
						{
							collection.Add(unit2);
						}
					}
				}
			}
			int count = collection.Count;
			Unit result;
			if (count != 0)
			{
				if (count != 1)
				{
					float num6 = float.PositiveInfinity;
					using (IEnumerator<Unit> enumerator = collection.GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							Unit current = enumerator.Current;
							float num7 = (float)current.GetApproxAngularDistanceInDegrees(this.geoPoint_0);
							if (num7 < num6)
							{
								num6 = num7;
								unit = current;
							}
						}
						result = unit;
						return result;
					}
				}
				unit = collection[0];
			}
			else
			{
				unit = null;
			}
			result = unit;
			return result;
		}

		// Token: 0x0600712C RID: 28972 RVA: 0x0002F1EA File Offset: 0x0002D3EA
		private void WorldMapBox_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
		{
			if (e.KeyCode == Keys.Left || e.KeyCode == Keys.Up || e.KeyCode == Keys.Right || e.KeyCode == Keys.Down)
			{
				e.IsInputKey = true;
			}
		}

		// Token: 0x0600712D RID: 28973 RVA: 0x0040460C File Offset: 0x0040280C
		public void method_156()
		{
			string text = Conversions.ToString(Interaction.IIf(this.bool_5, "(跟踪)", ""));
			string text2 = Client.GetClientScenario().GetCurrentTime(false).Hour.ToString("D2");
			string text3 = Client.GetClientScenario().GetCurrentTime(false).Minute.ToString("D2");
			string text4 = Client.GetClientScenario().GetCurrentTime(false).Second.ToString("D2");
			string text5 = "";
			TimeSpan timeSpan = Client.GetClientScenario().GetStartTime().Add(Client.GetClientScenario().GetDuration()) - Client.GetClientScenario().GetCurrentTime(false);
			if (timeSpan.TotalSeconds > 0.0)
			{
				text5 = "剩余时间:" + Misc.GetTimeString((long)Math.Round(timeSpan.TotalSeconds), Aircraft_AirOps._Maintenance.const_0, false, false) + " - ";
			}
			string text6 = "";
			if (!double.IsNaN(this.method_13(true).GetLongitude()) && !double.IsNaN(this.method_13(true).GetLatitude()))
			{
				text6 = string.Concat(new string[]
				{
					" - 当地时间: ",
					Misc.GetLocalTime(Client.GetClientScenario().GetCurrentTime(false), this.method_13(true).GetLongitude(), Client.GetClientScenario().IsUseDaylightSavingTime(), Client.GetClientScenario().GetDaylightSavingTime_Start(), Client.GetClientScenario().GetDaylightSavingTime_End()).Hour.ToString("D2"),
					":",
					text3,
					":",
					text4
				});
			}
			string text7 = string.Concat(new string[]
			{
				"日期: ",
				Client.GetClientScenario().GetCurrentTime(false).ToLongDateString(),
				" -格林威治时间: ",
				text2,
				":",
				text3,
				":",
				text4,
				text6,
				" - ",
				text5,
				" 相机高度: ",
				Conversions.ToString((long)this.method_5()),
				"米 ",
				text
			});
			if (SimConfiguration.gameOptions.IsShowDiagnostics())
			{
				StringBuilder stringBuilder = new StringBuilder();
				stringBuilder.Append("- 活动单元数: ").Append(Client.NumOfUnits.ToString());
				stringBuilder.Append(" - 脉冲时间: ").Append(Client.ElapsedTime.ToString()).Append("毫秒");
				stringBuilder.Append(" - 航路规划队列: ").Append(Client.double_1.ToString()).Append(" 当前: ").Append(Client.string_1);
				if (EventExporters.listRegular.Any<IEventExporter>())
				{
					stringBuilder.Append("\r\n").Append("事件队列长度:");
					foreach (IEventExporter current in EventExporters.listRegular)
					{
						stringBuilder.Append(" ").Append(current.GetExporterName()).Append(":").Append(current.GetEventQueueLength());
					}
				}
				text7 += stringBuilder.ToString();
			}
			this.label_0.Text = text7;
		}

		// Token: 0x0600712E RID: 28974 RVA: 0x00004BC2 File Offset: 0x00002DC2
		public void method_157()
		{
		}

		// Token: 0x0600712F RID: 28975 RVA: 0x004049A8 File Offset: 0x00402BA8
		private bool IsUnitSelected(Unit unit_0)
		{
			return this.UnitList.Contains(unit_0) && this.IsPointSelected(unit_0.GetLatitude(null), unit_0.GetLongitude(null));
		}

		// Token: 0x06007130 RID: 28976 RVA: 0x004049EC File Offset: 0x00402BEC
		private bool IsPointSelected(double Lat_, double Lon_)
		{
			Point point = default(Point);
			point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, Lat_, Lon_);
			return this.SelectionRectangle.Contains(point.X, point.Y);
		}

		// Token: 0x06007131 RID: 28977 RVA: 0x0002F223 File Offset: 0x0002D423
		private void WorldMapBox_MouseLeave(object sender, EventArgs e)
		{
			this.label_1.Visible = false;
			this.timer_1.Stop();
		}

		// Token: 0x06007132 RID: 28978 RVA: 0x00404A28 File Offset: 0x00402C28
		public void method_161()
		{
			int timeCompression = Client.GetClientScenario().GetTimeCompression();
			if (timeCompression <= 30)
			{
				switch (timeCompression)
				{
				case 1:
					this.toolStripComboBox_0.SelectedIndex = 0;
					break;
				case 2:
					this.toolStripComboBox_0.SelectedIndex = 1;
					break;
				case 3:
				case 4:
					break;
				case 5:
					this.toolStripComboBox_0.SelectedIndex = 2;
					break;
				default:
					if (timeCompression == 15)
					{
						this.toolStripComboBox_0.SelectedIndex = 3;
					}
					else if (timeCompression == 30)
					{
						this.toolStripComboBox_0.SelectedIndex = 4;
					}
					break;
				}
			}
			else if (timeCompression <= 300)
			{
				if (timeCompression == 60)
				{
					this.toolStripComboBox_0.SelectedIndex = 5;
				}
				else if (timeCompression == 300)
				{
					this.toolStripComboBox_0.SelectedIndex = 6;
				}
			}
			else if (timeCompression == 600)
			{
				this.toolStripComboBox_0.SelectedIndex = 7;
			}
			else if (timeCompression == 900)
			{
				this.toolStripComboBox_0.SelectedIndex = 8;
			}
		}

		// Token: 0x06007133 RID: 28979 RVA: 0x00404B38 File Offset: 0x00402D38
		private void method_162()
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit() && (Information.IsNothing(Client.damageControlWindow) || !Client.damageControlWindow.Visible) && Client.GetHookedUnit().IsPlatform())
			{
				Client.damageControlWindow = new DamageControlWindow();
				Client.damageControlWindow.activeUnit_0 = (ActiveUnit)Client.GetHookedUnit();
				Client.damageControlWindow.configuration = Client.GetConfiguration();
				Client.damageControlWindow.Show();
			}
		}

		// Token: 0x06007134 RID: 28980 RVA: 0x00404BC0 File Offset: 0x00402DC0
		private void method_163()
		{
			foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
			{
				if (current.GetSide(false) == Client.GetClientSide())
				{
					ActiveUnit activeUnit = (ActiveUnit)current;
					if (activeUnit.IsAircraft)
					{
						Aircraft aircraft = (Aircraft)activeUnit;
						activeUnit.SetFuelState(aircraft.GetFuelState(null));
						activeUnit.SetWeaponState(aircraft.GetAircraftWeaponry().vmethod_3());
						activeUnit.GetAirOps().vmethod_6(true, ActiveUnit._ActiveUnitStatus.RTB_Manual, false, ActiveUnit._ActiveUnitStatus.Unassigned, true, true);
						string str = "";
						if (Operators.CompareString(activeUnit.Name, activeUnit.UnitClass, false) != 0)
						{
							str = " (" + activeUnit.UnitClass + ")";
						}
						string str2 = "";
						ActiveUnit assignedHostUnit = ((Aircraft_AirOps)activeUnit.GetAirOps()).GetAssignedHostUnit();
						if (!Information.IsNothing(assignedHostUnit))
						{
							str2 = " (" + assignedHostUnit.Name + ")";
						}
						if (activeUnit.GetNavigator().NextUpdateTime > 2f)
						{
							activeUnit.GetNavigator().NextUpdateTime = 2f;
						}
						Client.GetClientScenario().LogMessage(activeUnit.Name + str + "正在返回基地" + str2, LoggedMessage.MessageType.AirOps, 5, activeUnit.GetGuid(), Client.GetClientSide(), null);
					}
					else if (activeUnit.IsShip || activeUnit.IsSubmarine)
					{
						string str3 = "";
						ActiveUnit assignedHostUnit2 = activeUnit.GetDockingOps().GetAssignedHostUnit();
						if (!Information.IsNothing(assignedHostUnit2))
						{
							str3 = " (" + assignedHostUnit2.Name + ")";
						}
						activeUnit.GetDockingOps().method_7(true, ActiveUnit._ActiveUnitStatus.RTB_Manual, false, ActiveUnit._ActiveUnitStatus.Unassigned, true, true);
						if (activeUnit.GetNavigator().NextUpdateTime > 2f)
						{
							activeUnit.GetNavigator().NextUpdateTime = 2f;
						}
						Client.GetClientScenario().LogMessage(activeUnit.Name + "正在返回停靠单元" + str3, LoggedMessage.MessageType.DockingOps, 5, activeUnit.GetGuid(), Client.GetClientSide(), null);
					}
					if (activeUnit.IsGroup)
					{
						if (((Group)activeUnit).GetGroupType() == Group.GroupType.AirGroup)
						{
							List<ActiveUnit> list = new List<ActiveUnit>();
							list.AddRange(((Group)activeUnit).GetUnitsInGroup().Values);
							using (List<ActiveUnit>.Enumerator enumerator2 = list.GetEnumerator())
							{
								while (enumerator2.MoveNext())
								{
									ActiveUnit current2 = enumerator2.Current;
									current2.SetFuelState(((Aircraft)current2).GetFuelState(null));
									current2.SetWeaponState(((Aircraft)current2).GetAircraftWeaponry().vmethod_3());
									string str4 = "";
									if (Operators.CompareString(current2.Name, current2.UnitClass, false) != 0)
									{
										str4 = " (" + current2.UnitClass + ")";
									}
									string str5 = "";
									ActiveUnit assignedHostUnit3 = ((Aircraft_AirOps)current2.GetAirOps()).GetAssignedHostUnit();
									if (!Information.IsNothing(assignedHostUnit3))
									{
										str5 = " (" + assignedHostUnit3.Name + ") ";
									}
									current2.GetAirOps().vmethod_6(true, ActiveUnit._ActiveUnitStatus.RTB_Manual, false, ActiveUnit._ActiveUnitStatus.Unassigned, false, true);
									if (current2.GetNavigator().NextUpdateTime > 2f)
									{
										current2.GetNavigator().NextUpdateTime = 2f;
									}
									Client.GetClientScenario().LogMessage(current2.Name + str4 + "正在返回基地" + str5, LoggedMessage.MessageType.AirOps, 5, current2.GetGuid(), Client.GetClientSide(), null);
								}
								continue;
							}
						}
						if (((Group)activeUnit).GetGroupType() == Group.GroupType.SurfaceGroup || ((Group)activeUnit).GetGroupType() == Group.GroupType.SubGroup)
						{
							List<ActiveUnit> list2 = new List<ActiveUnit>();
							list2.AddRange(((Group)activeUnit).GetUnitsInGroup().Values);
							foreach (ActiveUnit current3 in list2)
							{
								if (current3.IsShip || current3.IsSubmarine)
								{
									current3.GetDockingOps().method_7(true, ActiveUnit._ActiveUnitStatus.RTB_Manual, false, ActiveUnit._ActiveUnitStatus.Unassigned, true, true);
									string str6 = "";
									ActiveUnit assignedHostUnit4 = activeUnit.GetDockingOps().GetAssignedHostUnit();
									if (!Information.IsNothing(assignedHostUnit4))
									{
										str6 = " (" + assignedHostUnit4.Name + ") ";
									}
									if (current3.GetNavigator().NextUpdateTime > 2f)
									{
										current3.GetNavigator().NextUpdateTime = 2f;
									}
									Client.GetClientScenario().LogMessage(current3.Name + "正在返回停靠单元" + str6, LoggedMessage.MessageType.DockingOps, 5, current3.GetGuid(), Client.GetClientSide(), null);
								}
							}
						}
					}
				}
			}
			Client.b_Completed = true;
		}

		// Token: 0x06007135 RID: 28981 RVA: 0x0002F23C File Offset: 0x0002D43C
		private void Click_Unit_ReturnToBase(object sender, EventArgs e)
		{
			this.method_163();
		}

		// Token: 0x06007136 RID: 28982 RVA: 0x0002F244 File Offset: 0x0002D444
		private void Click_Unit_SE_EUP_Magazine(object sender, EventArgs e)
		{
			this.method_166();
		}

		// Token: 0x06007137 RID: 28983 RVA: 0x004050E8 File Offset: 0x004032E8
		private void method_166()
		{
			checked
			{
				if (!Information.IsNothing(Client.GetHookedUnit()) && (Information.IsNothing(Client.magazines) || !Client.magazines.Visible) && Client.GetHookedUnit().IsActiveUnit())
				{
					if (Client.GetHookedUnit().IsPlatform())
					{
						if (Information.IsNothing(((Platform)Client.GetHookedUnit()).m_Magazines))
						{
							Interaction.MsgBox("所选单元没有弹药库.", MsgBoxStyle.OkOnly, "无弹药库!");
						}
						else if (Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit || ((Platform)Client.GetHookedUnit()).m_Magazines.Count<Magazine>() > 0)
						{
							Client.magazines = new Magazines();
							Client.magazines.activeUnit_0 = (ActiveUnit)Client.GetHookedUnit();
							Client.magazines.Show();
						}
						else
						{
							bool flag = false;
							if ((Client.GetHookedUnit().IsShip || Client.GetHookedUnit().IsFacility) && ((Platform)Client.GetHookedUnit()).m_Mounts.Length > 0)
							{
								Mount[] mounts = ((Platform)Client.GetHookedUnit()).m_Mounts;
								for (int i = 0; i < mounts.Length; i++)
								{
									if (mounts[i].GetMagazineForMount().GetWeaponRecCollection().Count > 0)
									{
										flag = true;
										break;
									}
								}
							}
							if (flag)
							{
								Client.magazines = new Magazines();
								Client.magazines.activeUnit_0 = (ActiveUnit)Client.GetHookedUnit();
								Client.magazines.Show();
							}
							else
							{
								Interaction.MsgBox("所选单元没有弹药库.", MsgBoxStyle.OkOnly, "无弹药库!");
							}
						}
					}
					else if (Client.GetHookedUnit().IsGroup)
					{
						if (Information.IsNothing(((Group)Client.GetHookedUnit()).GetMagazines()))
						{
							Interaction.MsgBox("所选单元没有弹药库.", MsgBoxStyle.OkOnly, "无弹药库!");
						}
						else if (((Group)Client.GetHookedUnit()).GetMagazines().Length > 0)
						{
							Client.magazines = new Magazines();
							Client.magazines.activeUnit_0 = (ActiveUnit)Client.GetHookedUnit();
							Client.magazines.Show();
						}
						else
						{
							Interaction.MsgBox("所选编组没有弹药库.", MsgBoxStyle.OkOnly, "无弹药库!");
						}
					}
				}
			}
		}

		// Token: 0x06007138 RID: 28984 RVA: 0x0002F24C File Offset: 0x0002D44C
		private void method_167(object sender, EventArgs e)
		{
			Client.SetDBUsedHash(Conversions.ToString(1));
			Client.smethod_80();
		}

		// Token: 0x06007139 RID: 28985 RVA: 0x0002F25E File Offset: 0x0002D45E
		private void method_168(object sender, EventArgs e)
		{
			Client.SetDBUsedHash(Conversions.ToString(1));
			Client.smethod_81();
		}

		// Token: 0x0600713A RID: 28986 RVA: 0x0002F270 File Offset: 0x0002D470
		private void method_169(object sender, EventArgs e)
		{
			Client.SetDBUsedHash(Conversions.ToString(1));
			Client.smethod_82();
		}

		// Token: 0x0600713B RID: 28987 RVA: 0x0002F282 File Offset: 0x0002D482
		private void method_170(object sender, EventArgs e)
		{
			Client.SetDBUsedHash(Conversions.ToString(1));
			Client.smethod_83();
		}

		// Token: 0x0600713C RID: 28988 RVA: 0x00405318 File Offset: 0x00403518
		private void method_171(object sender, EventArgs e)
		{
			try
			{
				if (SimConfiguration.gameOptions.GetMapCursorBox() != Configuration.GameOptions._MapCursorBox.const_2 && (this.point_2.X != this.point_1.X || this.point_2.Y != this.point_1.Y) && !this.backgroundWorker_0.IsBusy)
				{
					this.backgroundWorker_0.RunWorkerAsync();
					this.point_2.X = this.point_1.X;
					this.point_2.Y = this.point_1.Y;
					this.method_173();
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200200", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				GC.Collect();
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600713D RID: 28989 RVA: 0x00405404 File Offset: 0x00403604
		private void method_172(object sender, DoWorkEventArgs e)
		{
			GeoPoint geoPoint = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, this.point_1.X, this.point_1.Y);
			if (geoPoint.GetLatitude() > 90.0 || geoPoint.GetLatitude() < -90.0 || geoPoint.GetLongitude() > 180.0 || geoPoint.GetLongitude() < -180.0)
			{
				this.string_0 = "";
			}
			else
			{
				int elevation = (int)Terrain.GetElevation(geoPoint.GetLatitude(), geoPoint.GetLongitude(), true);
				if (SimConfiguration.gameOptions.UseImperialUnit())
				{
					if (elevation > 0)
					{
						this.string_0 = " - 高度: " + Conversions.ToString((int)Math.Round((double)((float)elevation * 3.28084f))) + "英尺";
					}
					else
					{
						this.string_0 = " - 深度: " + Conversions.ToString((int)Math.Round((double)((float)elevation * 3.28084f))) + "英尺";
					}
				}
				else if (elevation > 0)
				{
					this.string_0 = " - 高度: " + Conversions.ToString(elevation) + "米";
				}
				else
				{
					this.string_0 = " - 深度: " + Conversions.ToString(elevation) + "米";
				}
				if (elevation < 0)
				{
					int num = 0;
					int num2 = 0;
					float num3 = 0f;
					SonarEnvironment.SetLayerData(geoPoint.GetLatitude(), geoPoint.GetLongitude(), elevation, ref num, ref num2, ref num3, true);
					if (SimConfiguration.gameOptions.UseImperialUnit())
					{
						this.string_1 = string.Concat(new string[]
						{
							"温跃层: ",
							Conversions.ToString((int)Math.Round((double)((float)num * 3.28084f))),
							"英尺—",
							Conversions.ToString((int)Math.Round((double)((float)num2 * 3.28084f))),
							"英尺—强度: ",
							Conversions.ToString(Math.Round((double)num3, 2))
						});
					}
					else
					{
						this.string_1 = string.Concat(new string[]
						{
							"温跃层: ",
							Conversions.ToString(num),
							"米—",
							Conversions.ToString(num2),
							"米 - 强度: ",
							Conversions.ToString(Math.Round((double)num3, 2))
						});
					}
					string str;
					if (elevation < -200)
					{
						int num4 = (int)Math.Round((double)SonarEnvironment.GetConvergenceZoneIncrement(geoPoint.GetLatitude()));
						str = string.Concat(new string[]
						{
							" - 汇聚区存在于",
							Conversions.ToString(num4),
							"-",
							Conversions.ToString(2 * num4),
							"-",
							Conversions.ToString(3 * num4),
							"-",
							Conversions.ToString(4 * num4),
							"海里"
						});
					}
					else
					{
						str = " - 无汇聚区";
					}
					this.string_1 += str;
					this.string_2 = "";
				}
				else
				{
					this.string_2 = "斜率: " + Conversions.ToString((int)Math.Round((double)(100f * Terrain.smethod_5(geoPoint.GetLatitude(), geoPoint.GetLongitude(), true)))) + "%";
				}
			}
		}

		// Token: 0x0600713E RID: 28990 RVA: 0x00405750 File Offset: 0x00403950
		private void method_173()
		{
			try
			{
				if (!this.label_1.Visible)
				{
					this.label_1.Visible = true;
				}
				if (Information.IsNothing(Client.m_WorldWindow))
				{
					string text = "WorldWindow1 object not found! Error 200596";
					GameGeneral.Log(ref text);
				}
				else
				{
					int x = this.point_1.X;
					int y = this.point_1.Y;
					double num = 0.0;
					double num2 = 0.0;
					WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, ref x, ref y, ref num, ref num2);
					this.point_1.Y = y;
					this.point_1.X = x;
					if (!double.IsNaN(num2) && !double.IsNaN(num))
					{
						this.label_1.Visible = true;
						DateTime currentTime = Client.GetClientScenario().GetCurrentTime(false);
						bool flag = Client.GetClientScenario().IsUseDaylightSavingTime();
						string daylightSavingTime_Start = Client.GetClientScenario().GetDaylightSavingTime_Start();
						string daylightSavingTime_End = Client.GetClientScenario().GetDaylightSavingTime_End();
						string text2 = Misc.GetLocalTime(currentTime, num, flag, daylightSavingTime_Start, daylightSavingTime_End).ToShortTimeString();
						Weather._TimeOfDay timeOfDay = Class240.GetTimeOfDay(currentTime.Year, currentTime.Month, currentTime.Day, currentTime.Hour, currentTime.Minute, currentTime.Second, num2, num, 0.0);
						string text3 = "(" + Class240.GetTimeOfDayString(timeOfDay, currentTime, num, flag, daylightSavingTime_Start, daylightSavingTime_End) + ")";
						switch (timeOfDay)
						{
						case Weather._TimeOfDay.Day:
							text3 = "(白天)";
							break;
						case Weather._TimeOfDay.DawnOrDusk:
							if (Misc.GetLocalTime(currentTime, num, flag, daylightSavingTime_Start, daylightSavingTime_End).Hour < 12)
							{
								text3 = "(拂晓)";
							}
							else
							{
								text3 = "(黄昏)";
							}
							break;
						case Weather._TimeOfDay.Night:
							text3 = "(黑夜)";
							break;
						}
						string text4 = "气象: ";
						Weather.WeatherProfile weatherProfile = Weather.GetWeatherProfile(Client.GetClientScenario(), num2, num, 0);
						text4 = string.Concat(new string[]
						{
							text4,
							weatherProfile.method_5(),
							" - ",
							weatherProfile.GetRainLevelStr(),
							" - ",
							Conversions.ToString((int)weatherProfile.GetTemperature(timeOfDay)),
							"°C - 海况: ",
							Conversions.ToString(weatherProfile.SeaState)
						});
						string text5 = "";
						if (!Information.IsNothing(Client.GetHookedUnit()))
						{
							float distance = Math2.GetDistance(Client.GetHookedUnit().GetLatitude(null), Client.GetHookedUnit().GetLongitude(null), num2, num);
							if (distance < 1f)
							{
								text5 = " - " + Conversions.ToString((int)Math.Round((double)(distance * 1852f))) + "米(离选中点)";
							}
							else if (distance < 10f)
							{
								text5 = " - " + Conversions.ToString(Math.Round((double)distance, 2)) + "海里(离选中点)";
							}
							else
							{
								text5 = " - " + Conversions.ToString(Math.Round((double)distance, 0)) + "海里(离选中点)";
							}
						}
						switch (SimConfiguration.gameOptions.GetMapCursorBox())
						{
						case Configuration.GameOptions._MapCursorBox.const_0:
						{
							string text6 = string.Concat(new string[]
							{
								Misc.GetGeoLocationString(num2, num),
								text5,
								this.string_0,
								"\r\n",
								this.string_1,
								" - ",
								this.string_2,
								"\r\n当地时间: ",
								text2,
								" ",
								text3,
								"\r\n",
								text4,
								"\r\n"
							});
							this.label_1.Text = text6;
							int num3;
							if (this.point_1.X > this.WorldMapBox.Width - this.label_1.Width)
							{
								num3 = -this.label_1.Width;
							}
							else
							{
								num3 = 20;
							}
							this.label_1.Location = new Point(this.point_1.X + num3, this.point_1.Y + 20);
							break;
						}
						case Configuration.GameOptions._MapCursorBox.const_1:
						{
							string text6 = string.Concat(new string[]
							{
								Misc.GetGeoLocationString(num2, num),
								text5,
								this.string_0,
								" - ",
								this.string_1,
								" - ",
								this.string_2,
								"\r\n当地时间: ",
								text2,
								" ",
								text3,
								"- ",
								text4
							});
							this.label_1.Text = text6;
							this.label_1.Location = new Point(0, this.WorldMapBox.Height - this.label_1.Height);
							break;
						}
						case Configuration.GameOptions._MapCursorBox.const_2:
							this.label_1.Location = new Point(0, -40);
							break;
						}
					}
					else
					{
						this.label_1.Visible = false;
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200601", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600713F RID: 28991 RVA: 0x00405CD0 File Offset: 0x00403ED0
		private void CB_TimeCompression_MouseWheel(object sender, MouseEventArgs e)
		{
			bool flag;
			if (flag = (e.Delta > 0))
			{
				if (flag && this.CB_TimeCompression.SelectedIndex != this.CB_TimeCompression.Items.Count - 1)
				{
					this.CB_TimeCompression.SelectedIndex = this.CB_TimeCompression.SelectedIndex + 1;
				}
			}
			else if (this.CB_TimeCompression.SelectedIndex != 0)
			{
				this.CB_TimeCompression.SelectedIndex = this.CB_TimeCompression.SelectedIndex - 1;
			}
		}

		// Token: 0x06007140 RID: 28992 RVA: 0x0002F294 File Offset: 0x0002D494
		private void CB_TimeCompression_SelectionChangeCommitted(object sender, EventArgs e)
		{
			Client.GetClientScenario().SetTimeCompression(this.CB_TimeCompression.SelectedIndex);
			this.WorldMapBox.Focus();
		}

		// Token: 0x06007141 RID: 28993 RVA: 0x00405D58 File Offset: 0x00403F58
		private void method_176(object sender, EventArgs e)
		{
			try
			{
				if (Client.b_Completed)
				{
					this.method_57();
					Client.b_Completed = false;
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200201", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				GC.Collect();
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007142 RID: 28994 RVA: 0x0002F2B7 File Offset: 0x0002D4B7
		private void method_177(object sender, EventArgs e)
		{
			this.method_457();
			CommandFactory.GetCommandMain().GetStartGame().Show();
		}

		// Token: 0x06007143 RID: 28995 RVA: 0x0002F2CE File Offset: 0x0002D4CE
		private void Click_UIAE_SelectedUnitOrGroupSaveAsFile(object sender, EventArgs e)
		{
			if (Client.GetClientSide().GetUnitReadOnlyCollection().Count > 0)
			{
				CommandFactory.GetCommandMain().GetSaveGroup().Show();
			}
			else
			{
				Interaction.MsgBox("请先选择单元/编组然后才能导出到文件.", MsgBoxStyle.OkOnly, "没有选择作战单元/编组!");
			}
		}

		// Token: 0x06007144 RID: 28996 RVA: 0x0002F309 File Offset: 0x0002D509
		private void Click_UIAE_LoadUnitOrGroupForFile(object sender, EventArgs e)
		{
			if (Information.IsNothing(Client.GetClientSide()))
			{
				Interaction.MsgBox("加载编组前请先选择一个推演方", MsgBoxStyle.OkOnly, "没选推演方!");
			}
			else
			{
				CommandFactory.GetCommandMain().GetLoadGroup().Show();
			}
		}

		// Token: 0x06007145 RID: 28997 RVA: 0x00405DD0 File Offset: 0x00403FD0
		private void Click_EditMissionBriefReport(object sender, EventArgs e)
		{
			if (Information.IsNothing(Client.GetClientSide()))
			{
				Interaction.MsgBox("编辑任务简报前请先选择一个推演方", MsgBoxStyle.OkOnly, "没选推演方!");
			}
			else
			{
				try
				{
					CommandFactory.GetCommandMain().GetEditBriefing().Show();
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200202", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x06007146 RID: 28998 RVA: 0x0002F33C File Offset: 0x0002D53C
		private void method_181(object sender, EventArgs e)
		{
			Client.SetDBUsedHash(Conversions.ToString(1));
			Client.smethod_84();
		}

		// Token: 0x06007147 RID: 28999 RVA: 0x0002F1D9 File Offset: 0x0002D3D9
		private void Click_Options(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetOptions().Show();
		}

		// Token: 0x06007148 RID: 29000 RVA: 0x0002F34E File Offset: 0x0002D54E
		private void Click_UO_EditWarplane(object sender, EventArgs e)
		{
			this.method_184();
		}

		// Token: 0x06007149 RID: 29001 RVA: 0x00405E5C File Offset: 0x0040405C
		private void method_184()
		{
			if (Information.IsNothing(Client.GetHookedUnit()))
			{
				Interaction.MsgBox("没有选择作战单元!", MsgBoxStyle.OkOnly, null);
			}
			else if (Client.GetHookedUnit().IsActiveUnit() && !Information.IsNothing(((ActiveUnit)Client.GetHookedUnit()).GetAirFacilities()))
			{
				CommandFactory.GetCommandMain().GetEditAC().activeUnit_0 = (ActiveUnit)Client.GetHookedUnit();
				CommandFactory.GetCommandMain().GetEditAC().Show();
			}
		}

		// Token: 0x0600714A RID: 29002 RVA: 0x0002F356 File Offset: 0x0002D556
		private void Click_DirectorView(object sender, EventArgs e)
		{
			this.SwitchGodsEyeView();
		}

		// Token: 0x0600714B RID: 29003 RVA: 0x00405ED4 File Offset: 0x004040D4
		private void SwitchGodsEyeView()
		{
			if (Client.GetClientScenario().GetSides().Count<Side>() != 0)
			{
				bool flag;
				if (flag = Client.GetMap().IsGodsEyeView())
				{
					if (flag)
					{
						Client.GetMap().SetIsGodsEyeView(false);
						Client.GetClientScenario().LogMessage("关闭导演视图.", LoggedMessage.MessageType.UI, 5, null, Client.GetClientSide(), null);
					}
				}
				else
				{
					Client.GetMap().SetIsGodsEyeView(true);
					Client.GetClientScenario().LogMessage("打开导演视图.", LoggedMessage.MessageType.UI, 5, null, Client.GetClientSide(), null);
				}
				Client.b_Completed = true;
				Client.m_WorldWindow.Refresh();
				this.RefreshMap();
			}
		}

		// Token: 0x0600714C RID: 29004 RVA: 0x0002F35E File Offset: 0x0002D55E
		private void method_187(object sender, EventArgs e)
		{
			Client.SetDBUsedHash(Conversions.ToString(1));
			Client.smethod_85();
		}

		// Token: 0x0600714D RID: 29005 RVA: 0x00405F70 File Offset: 0x00404170
		private void PrepareWoldWindow()
		{
			try
			{
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Preparing Wold Window.";
					GameGeneral.Log(ref text);
				}
				Client.m_WorldWindow.method_3(GameGeneral.world);
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					if (Information.IsNothing(Client.m_WorldWindow.method_2()))
					{
						string text = "Preparing Wold Window failed! WorldWindow1.CurrentWorld is null.";
						GameGeneral.Log(ref text);
					}
					if (!Directory.Exists(Application.StartupPath + "\\WW\\Cache"))
					{
						string text = "Preparing Wold Window failed! Could not find path " + Application.StartupPath + "\\WW\\Cache.";
						GameGeneral.Log(ref text);
					}
				}
				Client.m_WorldWindow.SetCache(new Cache(Application.StartupPath + "\\WW\\Cache", new TimeSpan(999, 59, 59), TimeSpan.Zero));
				if (SimConfiguration.gameOptions.LogDebugInfoToFile() && Information.IsNothing(Client.m_WorldWindow.GetCache()))
				{
					string text = "Preparing Wold Window failed! WorldWindow1.Cache is null.";
					GameGeneral.Log(ref text);
				}
				ImageLayer imageLayer = new ImageLayer("BaseLayer", Client.m_WorldWindow.method_2(), 1000.0, Application.StartupPath + "\\WW\\Data\\Earth\\BmngBathy\\world.topo.bathy.200407.jpg", -90.0, 90.0, -180.0, 180.0, (double)1f, this.class1970_0);
				imageLayer.Initialize(Client.m_WorldWindow.GetDrawArgs());
				Client.m_WorldWindow.method_2().GetRenderableObjectList().Add(imageLayer);
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					if (Information.IsNothing(imageLayer))
					{
						string text = "Preparing Wold Window failed! Variable newLayer is null.";
						GameGeneral.Log(ref text);
					}
					if (Client.m_WorldWindow.method_2().GetRenderableObjectList().vmethod_20() == 0)
					{
						string text = "Preparing Wold Window failed! WorldWindow1.CurrentWorld.RenderableObjects has no objects.";
						GameGeneral.Log(ref text);
					}
				}
				this.CreateBMNGLayer();
				this.CreateReliefLayer();
				this.PrepareSHP_ColdWar();
				this.PrepareSHP_NewWorldOrder();
				this.PrepareSHP_Ice_Arctic();
				this.PrepareMapScaleLayer();
				this.PreparePlacenameSets();
				this.MenuItem_BMNG.Checked = true;
				this.MenuItem_PlacenameLayer.Checked = true;
				this.MenuItem_ShowBorders.Checked = true;
				this.MenuItem_DayNightLight.Checked = true;
				World.Settings.method_27(false);
				World.Settings.method_28(false);
				World.Settings.method_11(true);
				World.Settings.method_13(true);
				World.Settings.method_31(1f);
				World.Settings.method_32(1f);
				World.Settings.method_26(false);
				World.Settings.method_50(0f);
				World.Settings.method_38(false);
				World.Settings.method_4(false);
				World.Settings.SetIsEnableSunShading(true);
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Preparing Wold Window done.";
					GameGeneral.Log(ref text);
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200519", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600714E RID: 29006 RVA: 0x00406294 File Offset: 0x00404494
		private void WorldMapBox_MouseUp(object sender, MouseEventArgs e)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			try
			{
				if (this.method_11() && !Information.IsNothing(Client.GetWayPointSelected()) && Client.GetWayPointSelected().Category == Waypoint._Category.const_1 && Client.GetClientSide().GetMissionCollection().Count > 0)
				{
					foreach (Mission current in Client.GetClientSide().GetMissionCollection())
					{
						if (current.HasFlightCourse())
						{
							foreach (Mission.Flight current2 in current.FlightList)
							{
								int num = current2.GetFlightCourse().Count<Waypoint>() - 1;
								for (int i = 0; i <= num; i++)
								{
									Waypoint waypoint = current2.GetFlightCourse()[i];
									if (waypoint == Client.GetWayPointSelected())
									{
										flag2 = true;
									}
									if (waypoint.FlightFormation == Waypoint._FlightFormation.Split)
									{
										if (!Information.IsNothing(waypoint.WP_LeadElementWingman) && waypoint.WP_LeadElementWingman == Client.GetWayPointSelected())
										{
											flag2 = true;
										}
										else if (!Information.IsNothing(waypoint.WP_SecondElement) && waypoint.WP_SecondElement == Client.GetWayPointSelected())
										{
											flag2 = true;
										}
										else if (!Information.IsNothing(waypoint.WP_SecondElementWingman) && waypoint.WP_SecondElementWingman == Client.GetWayPointSelected())
										{
											flag2 = true;
										}
										else if (!Information.IsNothing(waypoint.WP_ThirdElement) && waypoint.WP_ThirdElement == Client.GetWayPointSelected())
										{
											flag2 = true;
										}
										else if (!Information.IsNothing(waypoint.WP_ThirdElementWingman) && waypoint.WP_ThirdElementWingman == Client.GetWayPointSelected())
										{
											flag2 = true;
										}
									}
									if (flag2)
									{
										Scenario clientScenario = Client.GetClientScenario();
										Mission theStrikeMission_ = current;
										ActiveUnit referenceUnit = current2.GetReferenceUnit(Client.GetClientScenario());
										Mission.Flight theFlight_ = current2;
										Mission.Flight flight;
										Waypoint[] flightCourse = (flight = current2).GetFlightCourse();
										Mission.Enum60 bingo = ((Strike)current).Bingo;
										float num2 = 0f;
										StrikePlanner.smethod_8(clientScenario, theStrikeMission_, referenceUnit, theFlight_, ref flightCourse, bingo, ref num2, 0f, false, true, true, true, false, true, true, null, 0f, 0f, 0f, Misc.Enum102.const_0, null, false);
										flight.SetFlightCourse(flightCourse);
										this.method_157();
										if (Client.flightPlanEditor.Visible)
										{
											Client.flightPlanEditor.method_6();
										}
										flag = true;
										goto IL_27D;
									}
								}
								if (!flag)
								{
									continue;
								}
								IL_27D:
								break;
							}
							if (flag)
							{
								break;
							}
						}
					}
				}
				this.method_12(false);
				if (!this.bool_7)
				{
					if (!this.bool_10)
					{
						if (this.bool_9)
						{
							if (!Information.IsNothing(this.referencePoint_1))
							{
								this.referencePoint_1.SetIsSelected(!this.referencePoint_1.IsSelected());
							}
							this.bool_9 = false;
							this.method_19();
						}
					}
					else
					{
						this.bool_10 = false;
					}
					Client._CommandOrder commandOrder = Client.GetCommandOrder();
					if (this.method_9())
					{
						Client._CommandOrder commandOrder2 = Client.GetCommandOrder();
						if (commandOrder2 != Client._CommandOrder.None)
						{
							switch (commandOrder2)
							{
							case Client._CommandOrder.SelectTargetToIntercept:
								for (int j = Client.GetClientSide().GetContactList().Count - 1; j >= 0; j += -1)
								{
									Contact contact = Client.GetClientSide().GetContactList()[j];
									if (this.IsUnitSelected(contact))
									{
										for (int k = Client.GetClientSide().GetUnitReadOnlyCollection().Count - 1; k >= 0; k += -1)
										{
											Unit unit = Client.GetClientSide().GetUnitReadOnlyCollection()[k];
											string text = null;
											if (GameGeneral.CanIssueOrdersToUnit(Client.GetClientSide(), unit, false, ref text))
											{
												if (unit.GetSide(false) == Client.GetClientSide())
												{
													if (!unit.IsWeapon)
													{
														((ActiveUnit)unit).GetAI().TargetingContact(contact, true, false, ActiveUnit_AI.TargetingEntry._TargetingBehavior.ManualTargeted);
													}
													else
													{
														((ActiveUnit)unit).GetAI().TargetingContact(contact, true, true, ActiveUnit_AI.TargetingEntry._TargetingBehavior.ManualTargeted);
													}
												}
											}
											else if (unit.IsActiveUnit())
											{
												((ActiveUnit)unit).LogMessage(unit.Name + "不能参与攻击任务(无法向此单元下达命令)", LoggedMessage.MessageType.UnitAI, 0, false, new GeoPoint(unit.GetLongitude(null), unit.GetLatitude(null)));
											}
										}
									}
									else if (Client.GetMap().ViewMode == MapProfile._ViewMode.GroupMode && !Information.IsNothing(contact.ActualUnit) && contact.ActualUnit.HasParentGroup())
									{
										for (int l = this.UnitList.Count - 1; l >= 0; l += -1)
										{
											Unit unit2 = this.UnitList[l];
											if (unit2.IsContact() && this.IsUnitSelected(unit2))
											{
												Contact_Base.ContactType contactType = ((Contact)unit2).contactType;
												if (contactType - Contact_Base.ContactType.Installation <= 3 && ((Contact)unit2).ActualUnit.IsGroup && contact.ActualUnit.GetParentGroup(false) == ((Contact)unit2).ActualUnit)
												{
													for (int m = Client.GetClientSide().GetUnitReadOnlyCollection().Count - 1; m >= 0; m += -1)
													{
														Unit unit3 = Client.GetClientSide().GetUnitReadOnlyCollection()[m];
														Side clientSide = Client.GetClientSide();
														Unit unit_ = unit3;
														string text2 = null;
														if (GameGeneral.CanIssueOrdersToUnit(clientSide, unit_, false, ref text2) && unit3.GetSide(false) == Client.GetClientSide())
														{
															if (!unit3.IsWeapon)
															{
																((ActiveUnit)unit3).GetAI().TargetingContact(contact, true, false, ActiveUnit_AI.TargetingEntry._TargetingBehavior.ManualTargeted);
															}
															else
															{
																((ActiveUnit)unit3).GetAI().TargetingContact(contact, true, true, ActiveUnit_AI.TargetingEntry._TargetingBehavior.ManualTargeted);
															}
														}
													}
												}
											}
										}
									}
								}
								Client.IssueOrdersToUnit(Client._CommandOrder.None);
								break;
							case Client._CommandOrder.SelectTargetToAttack:
								Client.SetAttackTarget(new AttackTarget());
								for (int n = Client.GetClientSide().GetUnitReadOnlyCollection().Count - 1; n >= 0; n += -1)
								{
									Unit unit4 = Client.GetClientSide().GetUnitReadOnlyCollection()[n];
									if (unit4.GetSide(false) == Client.GetClientSide())
									{
										Side clientSide2 = Client.GetClientSide();
										Unit unit_2 = unit4;
										string text2 = null;
										if (GameGeneral.CanIssueOrdersToUnit(clientSide2, unit_2, false, ref text2) && !unit4.IsWeapon)
										{
											Client.GetAttackTarget().list_1.Add((ActiveUnit)unit4);
										}
									}
								}
								for (int num3 = Client.GetClientSide().GetContactList().Count - 1; num3 >= 0; num3 += -1)
								{
									Contact contact2 = Client.GetClientSide().GetContactList()[num3];
									if (this.IsUnitSelected(contact2))
									{
										Client.GetAttackTarget().TargetList.Add(contact2);
									}
									else if (Client.GetMap().ViewMode == MapProfile._ViewMode.GroupMode && !Information.IsNothing(contact2.ActualUnit) && contact2.ActualUnit.HasParentGroup())
									{
										for (int num4 = this.UnitList.Count - 1; num4 >= 0; num4 += -1)
										{
											Unit unit5 = this.UnitList[num4];
											if (unit5.IsContact() && this.IsUnitSelected(unit5))
											{
												Contact_Base.ContactType contactType2 = ((Contact)unit5).contactType;
												if (contactType2 - Contact_Base.ContactType.Installation <= 3 && ((Contact)unit5).ActualUnit.IsGroup && contact2.ActualUnit.GetParentGroup(false) == ((Contact)unit5).ActualUnit)
												{
													Client.GetAttackTarget().TargetList.Add(contact2);
												}
											}
										}
									}
								}
								if (Client.GetAttackTarget().list_1.Count == 0)
								{
									Client.IssueOrdersToUnit(Client._CommandOrder.None);
									this.SelectionRectangle = default(Rectangle);
									this.method_10(false);
									this.RefreshMap();
									return;
								}
								if (Client.GetAttackTarget().TargetList.Count == 0)
								{
									Client.IssueOrdersToUnit(Client._CommandOrder.None);
									this.SelectionRectangle = default(Rectangle);
									this.method_10(false);
									this.RefreshMap();
									return;
								}
								Client.GetAttackTarget().Show();
								Client.IssueOrdersToUnit(Client._CommandOrder.None);
								break;
							case Client._CommandOrder.DefineArea:
							{
								if (Information.IsNothing(Client.GetClientSide()))
								{
									this.SelectionRectangle = default(Rectangle);
									this.method_10(false);
									this.RefreshMap();
									return;
								}
								Point point = new Point(this.SelectionRectangle.Left, this.SelectionRectangle.Top);
								Point point2 = new Point(this.SelectionRectangle.Right, this.SelectionRectangle.Top);
								Point point3 = new Point(this.SelectionRectangle.Right, this.SelectionRectangle.Bottom);
								Point point4 = new Point(this.SelectionRectangle.Left, this.SelectionRectangle.Bottom);
								ReferencePoint referencePoint = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, point.X, point.Y).ToReferencePoint();
								Client.GetClientScenario().UnitsAutoIncrement = Client.GetClientScenario().UnitsAutoIncrement + 1;
								referencePoint.Name = "RP-" + Conversions.ToString(Client.GetClientScenario().UnitsAutoIncrement);
								ReferencePoint referencePoint2 = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, point2.X, point2.Y).ToReferencePoint();
								Client.GetClientScenario().UnitsAutoIncrement = Client.GetClientScenario().UnitsAutoIncrement + 1;
								referencePoint2.Name = "RP-" + Conversions.ToString(Client.GetClientScenario().UnitsAutoIncrement);
								ReferencePoint referencePoint3 = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, point3.X, point3.Y).ToReferencePoint();
								Client.GetClientScenario().UnitsAutoIncrement = Client.GetClientScenario().UnitsAutoIncrement + 1;
								referencePoint3.Name = "RP-" + Conversions.ToString(Client.GetClientScenario().UnitsAutoIncrement);
								ReferencePoint referencePoint4 = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, point4.X, point4.Y).ToReferencePoint();
								Client.GetClientScenario().UnitsAutoIncrement = Client.GetClientScenario().UnitsAutoIncrement + 1;
								referencePoint4.Name = "RP-" + Conversions.ToString(Client.GetClientScenario().UnitsAutoIncrement);
								for (int num5 = Client.GetClientSide().GetReferencePoints().Count - 1; num5 >= 0; num5 += -1)
								{
									Client.GetClientSide().GetReferencePoints()[num5].SetIsSelected(false);
								}
								referencePoint.SetIsSelected(true);
								referencePoint2.SetIsSelected(true);
								referencePoint3.SetIsSelected(true);
								referencePoint4.SetIsSelected(true);
								Client.GetClientSide().GetReferencePoints().Add(referencePoint);
								Client.GetClientSide().GetReferencePoints().Add(referencePoint2);
								Client.GetClientSide().GetReferencePoints().Add(referencePoint3);
								Client.GetClientSide().GetReferencePoints().Add(referencePoint4);
								Client.IssueOrdersToUnit(Client._CommandOrder.None);
								break;
							}
							}
						}
						else
						{
							List<Unit> list = new List<Unit>();
							list.AddRange(this.list_3);
							for (int num6 = list.Count - 1; num6 >= 0; num6 += -1)
							{
								Unit unit6 = list[num6];
								if (this.IsUnitSelected(unit6))
								{
									MapProfile._ViewMode viewMode = Client.GetMap().ViewMode;
									if (viewMode != MapProfile._ViewMode.GroupMode)
									{
										if (viewMode == MapProfile._ViewMode.UnitMode)
										{
											if (!flag3)
											{
												if (!unit6.IsGroup && (!unit6.IsContact() || !((Contact)unit6).ActualUnit.IsGroup))
												{
													this.method_18(unit6, true);
													flag3 = true;
												}
											}
											else if (!unit6.IsGroup && (!unit6.IsContact() || !((Contact)unit6).ActualUnit.IsGroup))
											{
												this.method_18(unit6, false);
											}
										}
									}
									else if (unit6.IsActiveUnit())
									{
										if (!flag3)
										{
											if (!((ActiveUnit)unit6).HasParentGroup())
											{
												this.method_18(unit6, true);
												flag3 = true;
											}
										}
										else if (!((ActiveUnit)unit6).HasParentGroup())
										{
											this.method_18(unit6, false);
										}
									}
									else if (unit6.IsContact())
									{
										Contact_Base.ContactType contactType3 = ((Contact)unit6).contactType;
										if (contactType3 - Contact_Base.ContactType.Facility_Fixed <= 1)
										{
											if (!Information.IsNothing(((Contact)unit6).ActualUnit))
											{
												if (!((Contact)unit6).ActualUnit.HasParentGroup())
												{
													flag4 = true;
												}
											}
											else
											{
												flag4 = true;
											}
										}
										else
										{
											flag4 = true;
										}
										if (flag4)
										{
											if (!flag3)
											{
												this.method_18(unit6, true);
												flag3 = true;
											}
											else
											{
												this.method_18(unit6, false);
											}
										}
									}
								}
							}
						}
						if (!Information.IsNothing(Client.GetClientSide()) && commandOrder != Client._CommandOrder.DefineArea)
						{
							for (int num7 = Client.GetClientSide().GetReferencePoints().Count - 1; num7 >= 0; num7 += -1)
							{
								ReferencePoint referencePoint5 = Client.GetClientSide().GetReferencePoints()[num7];
								if (!Information.IsNothing(referencePoint5) && this.IsPointSelected(referencePoint5.GetLatitude(), referencePoint5.GetLongitude()))
								{
									referencePoint5.SetIsSelected(!referencePoint5.IsSelected());
								}
							}
						}
					}
					else
					{
						Client._CommandOrder commandOrder3 = Client.GetCommandOrder();
						if (commandOrder3 == Client._CommandOrder.AddUnit)
						{
							if (this.geoPoint_0.GetLatitude() < -90.0 || this.geoPoint_0.GetLatitude() > 90.0 || this.geoPoint_0.GetLongitude() < -180.0 || this.geoPoint_0.GetLongitude() > 180.0)
							{
								this.SelectionRectangle = default(Rectangle);
								this.method_10(false);
								this.RefreshMap();
								return;
							}
							if (e.Button == MouseButtons.Left)
							{
								base.Enabled = false;
								CommandFactory.GetCommandMain().GetAddNewUnit().Show();
							}
						}
					}
				}
				this.method_10(false);
				this.point_3.X = 0;
				this.point_3.Y = 0;
				this.point_4.X = 0;
				this.point_4.Y = 0;
				this.SelectionRectangle = default(Rectangle);
				this.RefreshMap();
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200353", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600714F RID: 29007 RVA: 0x00407198 File Offset: 0x00405398
		private void WorldMapBox_MouseDown(object sender, MouseEventArgs e)
		{
			try
			{
				this.method_12(false);
				this.method_10(false);
				this.mouseEventArgs_0 = e;
				if (!this.rectangle_1.Contains(e.Location) || this.int_2 >= SystemInformation.DoubleClickTime)
				{
					this.timer_8.Stop();
					this.bool_6 = true;
					this.bool_7 = false;
					this.bool_8 = false;
					this.int_2 = 0;
				}
				if (this.bool_6)
				{
					Client._CommandOrder commandOrder = Client.GetCommandOrder();
					bool flag = false;
					if (commandOrder != Client._CommandOrder.ViewRangeBearing)
					{
						if (commandOrder == Client._CommandOrder.AddNewWayPoint)
						{
							flag = true;
						}
					}
					else
					{
						flag = true;
					}
					if (flag)
					{
						this.bool_6 = false;
						this.rectangle_1 = new Rectangle((int)Math.Round((double)e.X - (double)SystemInformation.DoubleClickSize.Width / 2.0), (int)Math.Round((double)e.Y - (double)SystemInformation.DoubleClickSize.Height / 2.0), SystemInformation.DoubleClickSize.Width, SystemInformation.DoubleClickSize.Height);
						base.Invalidate();
						this.timer_8.Start();
					}
					this.method_193(RuntimeHelpers.GetObjectValue(sender));
				}
				else if (this.rectangle_1.Contains(e.Location) && this.int_2 < SystemInformation.DoubleClickTime)
				{
					this.bool_7 = true;
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200354", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007150 RID: 29008 RVA: 0x00407360 File Offset: 0x00405560
		public void method_191(object sender, EventArgs e)
		{
			this.int_2 += 100;
			if (this.int_2 >= SystemInformation.DoubleClickTime)
			{
				this.timer_8.Stop();
			}
			else if (this.bool_7)
			{
				this.method_192();
				this.timer_8.Stop();
			}
		}

		// Token: 0x06007151 RID: 29009 RVA: 0x004073B4 File Offset: 0x004055B4
		private void method_192()
		{
			try
			{
				if (this.mouseEventArgs_0.Button == MouseButtons.Left)
				{
					Client._CommandOrder commandOrder = Client.GetCommandOrder();
					switch (commandOrder)
					{
					case Client._CommandOrder.None:
					case Client._CommandOrder.AddUnit:
					case Client._CommandOrder.CreateNewScenario:
					case Client._CommandOrder.EditScenario:
					case Client._CommandOrder.SaveScenario:
					case Client._CommandOrder.SetBaseForUnit:
					case Client._CommandOrder.AddReferencePoint:
					case Client._CommandOrder.MoveReferencePoint:
					case Client._CommandOrder.DropTarget:
						goto IL_83;
					case Client._CommandOrder.ViewRangeBearing:
						Client.IssueOrdersToUnit(Client._CommandOrder.None);
						Client.b_Completed = true;
						goto IL_83;
					case Client._CommandOrder.AddNewWayPoint:
						break;
					default:
						if (commandOrder != Client._CommandOrder.AddNewWeaponWaypoint)
						{
							goto IL_83;
						}
						break;
					}
					Client.IssueOrdersToUnit(Client._CommandOrder.None);
					Client.b_Completed = true;
					Scenario clientScenario = Client.GetClientScenario();
					Client.SetUserIsPlottingCourse(ref clientScenario, false);
				}
				IL_83:;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200599", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007152 RID: 29010 RVA: 0x00407498 File Offset: 0x00405698
		private void method_193(object object_3)
		{
            try
            {
                GeoPoint point;
                List<ActiveUnit> list;
                int num;
                Unit unit;
                ActiveUnit unit4;
                Unit unit6;
                GeoPoint point3;
                int num8;
                ReferencePoint point4;
                Unit unit10;
                Unit unit12;
                bool flag4;
                int num13;
                ReferencePoint point6;
                Unit unit13;
                bool? nullable3;
                Contact contact5;
                int num17;
                Contact contact6;
                int num18;
                GeoPoint point8;
                this.point_0 = new Point(this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                this.point_1 = new Point(this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                this.geoPoint_0 = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                Client.SetWayPointSelected(this.method_151());
                this.point_3 = this.point_0;
                this.referencePoint_1 = this.method_152();
                this.WorldMapBox.Focus();
                if (this.mouseEventArgs_0.Button != MouseButtons.Left)
                {
                    goto Label_18BA;
                }
                switch (Client.GetCommandOrder())
                {
                    case Client._CommandOrder.ViewRangeBearing:
                        this.WorldMapBox.Cursor = Cursors.Cross;
                        this.geoPoint_1 = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                        goto Label_18BA;

                    case Client._CommandOrder.AddUnit:
                        goto Label_18BA;

                    case Client._CommandOrder.AddNewWayPoint:
                        point = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                        list = new List<ActiveUnit>();
                        num = Client.GetClientSide().GetUnitReadOnlyCollection().Count - 1;
                        goto Label_0225;

                    case Client._CommandOrder.SetBaseForUnit:
                        if (!Information.IsNothing(Client.GetClientSide()))
                        {
                            goto Label_03FE;
                        }
                        return;

                    case Client._CommandOrder.AddReferencePoint:
                        {
                            ReferencePoint point2 = new ReferencePoint();
                            point2.SetLongitude(this.geoPoint_0.GetLongitude());
                            point2.SetLatitude(this.geoPoint_0.GetLatitude());
                            Client.GetClientScenario().UnitsAutoIncrement++;
                            point2.Name = "RP-" + Conversions.ToString(Client.GetClientScenario().UnitsAutoIncrement);
                            Client.GetClientSide().GetReferencePoints().Add(point2);
                            Client.IssueOrdersToUnit(Client._CommandOrder.None);
                            goto Label_18BA;
                        }
                    case Client._CommandOrder.MoveReferencePoint:
                        point3 = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                        num8 = Client.GetClientSide().GetReferencePoints().Count - 1;
                        goto Label_05A8;

                    case Client._CommandOrder.DropTarget:
                        {
                            if (Control.ModifierKeys != Keys.Shift)
                            {
                                Client.IssueOrdersToUnit(Client._CommandOrder.None);
                            }
                            Unit expression = this.method_154(RuntimeHelpers.GetObjectValue(object_3), Client.GetMap().ViewMode, this.mouseEventArgs_0);
                            if (!Information.IsNothing(expression) && expression.IsContact())
                            {
                                if (Information.IsNothing(Client.GetClientSide()) || (Client.GetClientSide().GetUnitReadOnlyCollection().Count == 0))
                                {
                                    return;
                                }
                                for (int n = Client.GetClientSide().GetUnitReadOnlyCollection().Count - 1; n >= 0; n += -1)
                                {
                                    Unit unit9 = Client.GetClientSide().GetUnitReadOnlyCollection()[n];
                                    if ((unit9.IsActiveUnit() && (unit9.GetSide(false) == Client.GetClientSide())) && !unit9.IsWeapon)
                                    {
                                        Contact theTarget = (Contact)expression;
                                        if ((Client.GetMap().ViewMode == MapProfile._ViewMode.GroupMode) && ((((theTarget.contactType == Contact_Base.ContactType.AirBase) || (theTarget.contactType == Contact_Base.ContactType.Installation)) || (theTarget.contactType == Contact_Base.ContactType.NavalBase)) || (theTarget.contactType == Contact_Base.ContactType.MobileGroup)))
                                        {
                                            if (!Information.IsNothing(theTarget.ActualUnit))
                                            {
                                                int num10 = Client.GetClientSide().GetContactList().Count - 1;
                                                this.CZIncrementIndex = num10;
                                                while (this.CZIncrementIndex >= 0)
                                                {
                                                    Contact contact2 = Client.GetClientSide().GetContactList()[this.CZIncrementIndex];
                                                    if ((!Information.IsNothing(contact2.ActualUnit) && !contact2.ActualUnit.IsGroup) && (contact2.ActualUnit.GetParentGroup(false) == theTarget.ActualUnit))
                                                    {
                                                        if (unit9.IsGroup)
                                                        {
                                                            IEnumerable<Unit> source = (IEnumerable<Unit>)((Group)unit9).GetParentGroup(false).GetUnitsInGroup().Values.ToList<ActiveUnit>();
                                                            for (int num11 = source.Count<Unit>() - 1; num11 >= 0; num11 += -1)
                                                            {
                                                                ((ActiveUnit)source.ElementAtOrDefault<Unit>(num11)).GetAI().DropTargeting(contact2, true);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ((ActiveUnit)unit9).GetAI().DropTargeting(contact2, true);
                                                        }
                                                    }
                                                    this.CZIncrementIndex += -1;
                                                }
                                            }
                                        }
                                        else if (unit9.IsGroup)
                                        {
                                            IEnumerable<Unit> enumerable2 = (IEnumerable<Unit>)((Group)unit9).GetParentGroup(false).GetUnitsInGroup().Values.ToList<ActiveUnit>();
                                            for (int num12 = enumerable2.Count<Unit>() - 1; num12 >= 0; num12 += -1)
                                            {
                                                ((ActiveUnit)enumerable2.ElementAtOrDefault<Unit>(num12)).GetAI().DropTargeting(theTarget, true);
                                            }
                                        }
                                        else
                                        {
                                            ((ActiveUnit)unit9).GetAI().DropTargeting(theTarget, true);
                                        }
                                    }
                                }
                                Client.b_Completed = true;
                            }
                            goto Label_18BA;
                        }
                    case Client._CommandOrder.MoveUnit:
                        if (!Information.IsNothing(Client.GetHookedUnit()))
                        {
                            goto Label_08AF;
                        }
                        Interaction.MsgBox("不能移动作战单元, 此时尚不存在.", MsgBoxStyle.ApplicationModal, "移动作战单元错误!");
                        goto Label_08DC;

                    case Client._CommandOrder.CopyUnit:
                        if (!Information.IsNothing(Client.GetHookedUnit()))
                        {
                            goto Label_090C;
                        }
                        Interaction.MsgBox("不能拷贝作战单元，此时尚不存在.", MsgBoxStyle.ApplicationModal, "拷贝作战单元错误!");
                        goto Label_0AAC;

                    case Client._CommandOrder.SetFormationLeader:
                        {
                            Unit unit11 = this.method_154(RuntimeHelpers.GetObjectValue(object_3), Client.GetMap().ViewMode, this.mouseEventArgs_0);
                            if (((!Information.IsNothing(unit11) && (unit11.GetSide(false) == Client.GetClientSide())) && (unit11.GetType() != typeof(Weapon))) && CommandFactory.GetCommandMain().GetFormationEditor().group.GetUnitsInGroup().ContainsKey(unit11.GetGuid()))
                            {
                                CommandFactory.GetCommandMain().GetFormationEditor().group.SetGroupLead((ActiveUnit)unit11);
                                Client.IssueOrdersToUnit(Client._CommandOrder.None);
                                this.toolStripStatusLabel_0.Text = unit11.Name + "现已成为领队带领编组: " + CommandFactory.GetCommandMain().GetFormationEditor().group.Name;
                                if (CommandFactory.GetCommandMain().GetFormationEditor().Visible)
                                {
                                    CommandFactory.GetCommandMain().GetFormationEditor().method_1();
                                }
                            }
                            goto Label_18BA;
                        }
                    case Client._CommandOrder.SetFormationStation:
                        if (!Information.IsNothing(Client.GetHookedUnit()))
                        {
                            goto Label_0BC3;
                        }
                        Client.IssueOrdersToUnit(Client._CommandOrder.None);
                        goto Label_18BA;

                    case Client._CommandOrder.SelectRelativeObject:
                        unit12 = this.method_154(RuntimeHelpers.GetObjectValue(object_3), Client.GetMap().ViewMode, this.mouseEventArgs_0);
                        flag4 = false;
                        if (Information.IsNothing(unit12))
                        {
                            goto Label_0CE3;
                        }
                        num13 = Client.GetClientSide().GetReferencePoints().Count - 1;
                        goto Label_0CD9;

                    case Client._CommandOrder.SelectTargetToIntercept:
                        if (!this.method_9())
                        {
                            goto Label_0D16;
                        }
                        return;

                    case Client._CommandOrder.SelectTargetToAttack:
                        {
                            Unit unit18 = this.method_154(RuntimeHelpers.GetObjectValue(object_3), Client.GetMap().ViewMode, this.mouseEventArgs_0);
                            if (!(!Information.IsNothing(unit18) && unit18.IsContact()))
                            {
                                goto Label_18BA;
                            }
                            Client.SetAttackTarget(new AttackTarget());
                            contact5 = (Contact)unit18;
                            if ((Client.GetMap().ViewMode != MapProfile._ViewMode.GroupMode) || ((((contact5.contactType != Contact_Base.ContactType.AirBase) && (contact5.contactType != Contact_Base.ContactType.Installation)) && (contact5.contactType != Contact_Base.ContactType.NavalBase)) && (contact5.contactType != Contact_Base.ContactType.MobileGroup)))
                            {
                                goto Label_1106;
                            }
                            if (Information.IsNothing(contact5.ActualUnit))
                            {
                                goto Label_1117;
                            }
                            num17 = Client.GetClientSide().GetContactList().Count - 1;
                            goto Label_10FA;
                        }
                    case Client._CommandOrder.SelectAimPointforBearingOnlyAttack:
                        if (!this.method_9())
                        {
                            goto Label_11EA;
                        }
                        return;

                    case Client._CommandOrder.SatellitePassPredication:
                        {
                            GeoPoint point7 = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                            CommandFactory.GetCommandMain().GetSatPredictionForm().double_1 = point7.GetLongitude();
                            CommandFactory.GetCommandMain().GetSatPredictionForm().double_0 = point7.GetLatitude();
                            CommandFactory.GetCommandMain().GetSatPredictionForm().Show();
                            Client.IssueOrdersToUnit(Client._CommandOrder.None);
                            return;
                        }
                    case Client._CommandOrder.CloneUnit:
                        if (!Information.IsNothing(Client.GetHookedUnit()))
                        {
                            goto Label_1367;
                        }
                        Interaction.MsgBox("不能克隆本作战单元，当前尚不存在.", MsgBoxStyle.ApplicationModal, "克隆作战单元错误!");
                        goto Label_139C;

                    case Client._CommandOrder.AddNewWeaponWaypoint:
                        if (!Information.IsNothing(Client.weaponSalvo))
                        {
                            goto Label_15A6;
                        }
                        return;

                    case Client._CommandOrder.SelectTankerToRefuelFrom:
                        {
                            Unit unit24 = this.method_154(RuntimeHelpers.GetObjectValue(object_3), Client.GetMap().ViewMode, this.mouseEventArgs_0);
                            if (((!Information.IsNothing(unit24) && unit24.IsActiveUnit()) && ((unit24.GetSide(false) == Client.GetClientSide()) || unit24.GetSide(false).IsFriendlyToSide(Client.GetClientSide()))) && (unit24.GetType() != typeof(Weapon)))
                            {
                                Client.IssueOrdersToUnit(Client._CommandOrder.None);
                                ActiveUnit unit25 = (ActiveUnit)unit24;
                                Mission mission = null;
                                this.method_296(ref unit25, ref mission);
                                this.toolStripStatusLabel_0.Text = "所选作战单元将进行空中加油,加油机: " + unit24.Name;
                            }
                            this.method_19();
                            goto Label_18BA;
                        }
                    default:
                        if (Information.IsNothing(Client.GetWayPointSelected()))
                        {
                            this.referencePoint_0 = this.method_150();
                        }
                        else
                        {
                            this.referencePoint_0 = null;
                            this.method_19();
                        }
                        if (!Information.IsNothing(this.referencePoint_1))
                        {
                            this.bool_9 = true;
                            return;
                        }
                        if (Client.GetClientScenario().GetActiveUnits().Count > 0)
                        {
                            Unit hookedUnit = Client.GetHookedUnit();
                            bool flag5 = false;
                            if (!(flag5 = this.method_9() || (Control.ModifierKeys == Keys.Shift)))
                            {
                                Client.GetClientSide().ClearUnits();
                            }
                            this.list_0 = this.method_153(RuntimeHelpers.GetObjectValue(object_3), Client.GetMap().ViewMode, this.mouseEventArgs_0);
                            switch (this.list_0.Count)
                            {
                                case 0:
                                    Client.GetClientSide().ClearUnits();
                                    goto Label_18BA;

                                case 1:
                                    this.method_18(this.list_0[0], !flag5);
                                    goto Label_18BA;
                            }
                            if (this.list_0.Contains(hookedUnit))
                            {
                                if (this.list_0.IndexOf(hookedUnit) == (this.list_0.Count - 1))
                                {
                                    this.method_18(this.list_0[0], !flag5);
                                    goto Label_18BA;
                                }
                                try
                                {
                                    this.method_18(this.list_0[this.list_0.IndexOf(hookedUnit) + 1], !flag5);
                                    goto Label_18BA;
                                }
                                catch (Exception exception5)
                                {
                                    ProjectData.SetProjectError(exception5);
                                    Exception exception6 = exception5;
                                    exception6.Data.Add("Error at 200001", exception6.Message);
                                    GameGeneral.LogException(ref exception6);
                                    if (Debugger.IsAttached)
                                    {
                                        Debugger.Break();
                                    }
                                    this.method_18(this.list_0[0], true);
                                    ProjectData.ClearProjectError();
                                    goto Label_18BA;
                                }
                            }
                            this.method_18(this.list_0[0], !flag5);
                        }
                        goto Label_18BA;
                }
            Label_019E:
                unit = Client.GetClientSide().GetUnitReadOnlyCollection()[num];
                Side clientSide = Client.GetClientSide();
                Unit unit2 = unit;
                string str = null;
                if ((GameGeneral.CanIssueOrdersToUnit(clientSide, unit2, false, ref str) && !unit.IsSatellite()) && !unit.IsFixedFacility())
                {
                    if (unit.IsGroup)
                    {
                        switch (((Group)unit).GetGroupType())
                        {
                            case Group.GroupType.Installation:
                            case Group.GroupType.AirBase:
                            case Group.GroupType.NavalBase:
                                goto Label_0221;
                        }
                    }
                    list.Add((ActiveUnit)unit);
                }
            Label_0221:
                num += -1;
            Label_0225:
                if (num >= 0)
                {
                    goto Label_019E;
                }
                if (!((list.Count != 0) || Information.IsNothing(Client.GetHookedUnit())))
                {
                    Side side2 = Client.GetClientSide();
                    Unit unit3 = Client.GetHookedUnit();
                    str = null;
                    if (GameGeneral.CanIssueOrdersToUnit(side2, unit3, false, ref str))
                    {
                        list.Add((ActiveUnit)Client.GetHookedUnit());
                    }
                }
                if (list.Count == 0)
                {
                    return;
                }
                bool flag = true;
                for (int i = list.Count - 1; i >= 0; i += -1)
                {
                    unit4 = list[i];
                    Unit unit5 = unit4;
                    double latitude = point.GetLatitude();
                    double longitude = point.GetLongitude();
                    byte num5 = 0;
                    bool flag2 = true;
                    bool flag3 = true;
                    List<ActiveUnit> list2 = null;
                    float? nullable = null;
                    short? nullable2 = null;
                    if (unit5.vmethod_41(latitude, longitude, ref num5, false, ref flag2, true, ref flag3, nullable, nullable2, ref list2, 0f, false, false))
                    {
                        unit4.GetNavigator().AddWaypoint(point.GetLatitude(), point.GetLongitude(), Waypoint.WaypointType.ManualPlottedCourseWaypoint, Waypoint._Creator.const_2, Waypoint._Category.const_0);
                    }
                    else
                    {
                        flag = false;
                    }
                }
                this.RefreshMap();
                if (!flag)
                {
                    if (list.Count == 1)
                    {
                        Client.GetClientScenario().LogMessage("所选作战单元不能移动到此位置!", LoggedMessage.MessageType.UI, 10, null, Client.GetClientSide(), null);
                    }
                    else
                    {
                        Client.GetClientScenario().LogMessage("某些所选的作战单元不能移动到此位置!", LoggedMessage.MessageType.UI, 10, null, Client.GetClientSide(), null);
                    }
                }
                for (int j = list.Count - 1; j >= 0; j += -1)
                {
                    unit4 = list[j];
                    if ((unit4.GetNavigator().GetPlottedCourse().Count<Waypoint>() == 1) && (unit4.GetNavigator().NextUpdateTime > 2f))
                    {
                        unit4.GetNavigator().NextUpdateTime = 2f;
                    }
                }
                goto Label_18BA;
            Label_03FE:
                unit6 = this.method_154(RuntimeHelpers.GetObjectValue(object_3), Client.GetMap().ViewMode, this.mouseEventArgs_0);
                if (Information.IsNothing(unit6))
                {
                    return;
                }
                for (int k = Client.GetClientSide().GetUnitReadOnlyCollection().Count - 1; k >= 0; k += -1)
                {
                    Unit unit7 = Client.GetClientSide().GetUnitReadOnlyCollection()[k];
                    if ((unit7.IsActiveUnit() && unit6.IsActiveUnit()) && (unit7.GetSide(false) == Client.GetClientSide()))
                    {
                        ((ActiveUnit)unit7).SetHomeBase((ActiveUnit)unit6);
                    }
                }
                Client.IssueOrdersToUnit(Client._CommandOrder.None);
                goto Label_18BA;
            Label_0560:
                point4 = Client.GetClientSide().GetReferencePoints()[num8];
                if (point4.IsSelected())
                {
                    point4.SetLatitude(point3.GetLatitude());
                    point4.SetLongitude(point3.GetLongitude());
                    point4.RelativeCalculate();
                }
                num8 += -1;
            Label_05A8:
                if (num8 >= 0)
                {
                    goto Label_0560;
                }
                Client.IssueOrdersToUnit(Client._CommandOrder.None);
                goto Label_18BA;
            Label_08AF:
                unit10 = Client.GetHookedUnit();
                Scenario clientScenario = Client.GetClientScenario();
                unit10.SetGeoLocation(ref clientScenario, this.geoPoint_0.GetLongitude(), this.geoPoint_0.GetLatitude());
            Label_08DC:
                Client.IssueOrdersToUnit(Client._CommandOrder.None);
                goto Label_18BA;
            Label_090C:
                if (Client.GetHookedUnit().IsActiveUnit())
                {
                    try
                    {
                        switch (((ActiveUnit)Client.GetHookedUnit()).GetUnitType())
                        {
                            case GlobalVariables.ActiveUnitType.Aircraft:
                                Client.GetClientScenario().AddAircraft(Client.GetClientSide(), Client.GetHookedUnit().Name, this.geoPoint_0.GetLongitude(), this.geoPoint_0.GetLatitude(), ((ActiveUnit)Client.GetHookedUnit()).DBID, ((Aircraft)Client.GetHookedUnit()).GetLoadout().DBID, Client.GetHookedUnit().GetCurrentAltitude_ASL(false), null);
                                goto Label_0AAC;

                            case GlobalVariables.ActiveUnitType.Ship:
                                Client.GetClientScenario().AddShip(Client.GetClientSide(), ((ActiveUnit)Client.GetHookedUnit()).DBID, Client.GetHookedUnit().Name, this.geoPoint_0.GetLongitude(), this.geoPoint_0.GetLatitude(), false, null);
                                goto Label_0AAC;

                            case GlobalVariables.ActiveUnitType.Submarine:
                                Client.GetClientScenario().AddSubmarine(Client.GetClientSide(), ((ActiveUnit)Client.GetHookedUnit()).DBID, Client.GetHookedUnit().Name, this.geoPoint_0.GetLongitude(), this.geoPoint_0.GetLatitude(), false, null);
                                goto Label_0AAC;

                            case GlobalVariables.ActiveUnitType.Facility:
                                Client.GetClientScenario().AddFacility(Client.GetClientSide(), ((ActiveUnit)Client.GetHookedUnit()).DBID, Client.GetHookedUnit().Name, this.geoPoint_0.GetLongitude(), this.geoPoint_0.GetLatitude(), false, null);
                                goto Label_0AAC;
                        }
                    }
                    catch (Exception exception)
                    {
                        ProjectData.SetProjectError(exception);
                        Exception exception2 = exception;
                        Interaction.MsgBox("Error: " + exception2.Message, MsgBoxStyle.Critical, null);
                        ProjectData.ClearProjectError();
                    }
                }
            Label_0AAC:
                Client.IssueOrdersToUnit(Client._CommandOrder.None);
                goto Label_18BA;
            Label_0BC3:
                if (!Client.GetHookedUnit().IsActiveUnit())
                {
                    Client.IssueOrdersToUnit(Client._CommandOrder.None);
                }
                else
                {
                    GeoPoint point5 = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                    ((ActiveUnit)Client.GetHookedUnit()).GetNavigator().GetFormationStation().BearingType = Client.orientationType_0;
                    ((ActiveUnit)Client.GetHookedUnit()).GetNavigator().method_46(point5.GetLongitude(), point5.GetLatitude(), true);
                    Client.IssueOrdersToUnit(Client._CommandOrder.None);
                }
                goto Label_18BA;
            Label_0C87:
                point6 = Client.GetClientSide().GetReferencePoints()[num13];
                if (point6.IsSelected())
                {
                    if (point6.IsLocked)
                    {
                        flag4 = true;
                    }
                    else
                    {
                        point6.IsRelativeToUnit = unit12;
                        point6.BearingType = Client.orientationType_0;
                        point6.RelativeCalculate();
                    }
                }
                num13 += -1;
            Label_0CD9:
                if (num13 >= 0)
                {
                    goto Label_0C87;
                }
            Label_0CE3:
                if (flag4)
                {
                    Interaction.MsgBox("某些选中的参考点已被锁定，不能将其设置为针对此单元的相对方位 .", MsgBoxStyle.ApplicationModal, "参考点被锁定!");
                }
                Client.IssueOrdersToUnit(Client._CommandOrder.None);
                goto Label_18BA;
            Label_0D16:
                unit13 = this.method_154(RuntimeHelpers.GetObjectValue(object_3), Client.GetMap().ViewMode, this.mouseEventArgs_0);
                if (!Information.IsNothing(unit13))
                {
                    if (unit13.GetType() == typeof(Contact))
                    {
                        Contact contact3 = (Contact)unit13;
                        if ((Client.GetMap().ViewMode == MapProfile._ViewMode.GroupMode) && ((((contact3.contactType == Contact_Base.ContactType.AirBase) || (contact3.contactType == Contact_Base.ContactType.Installation)) || (contact3.contactType == Contact_Base.ContactType.NavalBase)) || (contact3.contactType == Contact_Base.ContactType.MobileGroup)))
                        {
                            if (!Information.IsNothing(contact3.ActualUnit))
                            {
                                for (int num14 = Client.GetClientSide().GetContactList().Count - 1; num14 >= 0; num14 += -1)
                                {
                                    Contact contact4 = Client.GetClientSide().GetContactList()[num14];
                                    if ((!Information.IsNothing(contact4.ActualUnit) && !contact4.ActualUnit.IsGroup) && (contact4.ActualUnit.GetParentGroup(false) == contact3.ActualUnit))
                                    {
                                        for (int num15 = Client.GetClientSide().GetUnitReadOnlyCollection().Count - 1; num15 >= 0; num15 += -1)
                                        {
                                            Unit unit14 = Client.GetClientSide().GetUnitReadOnlyCollection()[num15];
                                            Side side3 = Client.GetClientSide();
                                            Unit unit15 = unit14;
                                            str = null;
                                            if (GameGeneral.CanIssueOrdersToUnit(side3, unit15, false, ref str))
                                            {
                                                ((ActiveUnit)unit14).GetAI().TargetingContact(contact4, true, false, ActiveUnit_AI.TargetingEntry._TargetingBehavior.ManualTargeted);
                                            }
                                            else
                                            {
                                                nullable3 = null;
                                                nullable3 = null;
                                                ((ActiveUnit)unit14).LogMessage(unit14.Name + "不能参与打击任务(无法向此作战单元下达命令)", LoggedMessage.MessageType.UnitAI, 0, false, new GeoPoint(unit14.GetLongitude(nullable3), unit14.GetLatitude(nullable3)));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int num16 = Client.GetClientSide().GetUnitReadOnlyCollection().Count - 1; num16 >= 0; num16 += -1)
                            {
                                Unit unit16 = Client.GetClientSide().GetUnitReadOnlyCollection()[num16];
                                Side side4 = Client.GetClientSide();
                                Unit unit17 = unit16;
                                str = null;
                                if (GameGeneral.CanIssueOrdersToUnit(side4, unit17, false, ref str))
                                {
                                    ((ActiveUnit)unit16).GetAI().TargetingContact(contact3, true, false, ActiveUnit_AI.TargetingEntry._TargetingBehavior.ManualTargeted);
                                }
                                else
                                {
                                    nullable3 = null;
                                    nullable3 = null;
                                    ((ActiveUnit)unit16).LogMessage(unit16.Name + "不能参与打击任务(无法向此作战单元下达命令)", LoggedMessage.MessageType.UnitAI, 0, false, new GeoPoint(unit16.GetLongitude(nullable3), unit16.GetLatitude(nullable3)));
                                }
                            }
                        }
                        this.RefreshMap();
                    }
                    if (Control.ModifierKeys != Keys.Shift)
                    {
                        Client.IssueOrdersToUnit(Client._CommandOrder.None);
                    }
                }
                goto Label_18BA;
            Label_1096:
                contact6 = Client.GetClientSide().GetContactList()[num17];
                if ((!Information.IsNothing(contact6.ActualUnit) && !contact6.ActualUnit.IsGroup) && (contact6.ActualUnit.GetParentGroup(false) == contact5.ActualUnit))
                {
                    Client.GetAttackTarget().TargetList.Add(contact6);
                }
                num17 += -1;
            Label_10FA:
                if (num17 >= 0)
                {
                    goto Label_1096;
                }
                goto Label_1117;
            Label_1106:
                Client.GetAttackTarget().TargetList.Add(contact5);
            Label_1117:
                num18 = Client.GetClientSide().GetUnitReadOnlyCollection().Count - 1;
                while (num18 >= 0)
                {
                    Unit unit19 = Client.GetClientSide().GetUnitReadOnlyCollection()[num18];
                    Side side5 = Client.GetClientSide();
                    Unit unit20 = unit19;
                    str = null;
                    if (!(!GameGeneral.CanIssueOrdersToUnit(side5, unit20, false, ref str) || unit19.IsWeapon))
                    {
                        Client.GetAttackTarget().list_1.Add((ActiveUnit)unit19);
                    }
                    num18 += -1;
                }
                if ((Client.GetAttackTarget().list_1.Count == 0) || (Client.GetAttackTarget().TargetList.Count == 0))
                {
                    return;
                }
                Client.IssueOrdersToUnit(Client._CommandOrder.None);
                Client.GetAttackTarget().Show();
                goto Label_18BA;
            Label_11EA:
                if (Information.IsNothing(Client.GetClientSide()))
                {
                    return;
                }
                Client.SetAttackTarget(new AttackTarget());
                ActivationPoint_BOL item = new ActivationPoint_BOL(this.geoPoint_0.GetLatitude(), this.geoPoint_0.GetLongitude());
                Client.GetAttackTarget().TargetList.Add(item);
                for (int m = Client.GetClientSide().GetUnitReadOnlyCollection().Count - 1; m >= 0; m += -1)
                {
                    Unit unit21 = Client.GetClientSide().GetUnitReadOnlyCollection()[m];
                    Side side6 = Client.GetClientSide();
                    Unit unit22 = unit21;
                    str = null;
                    if (!(!GameGeneral.CanIssueOrdersToUnit(side6, unit22, false, ref str) || unit21.IsWeapon))
                    {
                        Client.GetAttackTarget().list_1.Add((ActiveUnit)unit21);
                    }
                }
                if (Client.GetAttackTarget().list_1.Count == 0)
                {
                    return;
                }
                Client.IssueOrdersToUnit(Client._CommandOrder.None);
                Client.GetAttackTarget().Show();
                goto Label_18BA;
            Label_1367:
                if (Client.GetHookedUnit().IsActiveUnit())
                {
                    ScenarioUnits.AddUnit((ActiveUnit)Client.GetHookedUnit(), this.geoPoint_0.GetLatitude(), this.geoPoint_0.GetLongitude());
                }
            Label_139C:
                Client.IssueOrdersToUnit(Client._CommandOrder.None);
                goto Label_18BA;
            Label_15A6:
                point8 = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                if (Client.weaponSalvo.PlottedCourse.Count<Waypoint>() >= 10)
                {
                    Interaction.MsgBox("您不能再为本次齐射添加更多的航路点.", MsgBoxStyle.ApplicationModal, null);
                }
                else
                {
                    ActiveUnit unit23;
                    try
                    {
                        unit23 = Client.GetClientScenario().GetActiveUnits()[Client.weaponSalvo.m_Shooters[0].ShooterObjectID];
                    }
                    catch (Exception exception3)
                    {
                        ProjectData.SetProjectError(exception3);
                        Exception exception4 = exception3;
                        exception4.Data.Add("Error at 200388", exception4.Message);
                        GameGeneral.LogException(ref exception4);
                        if (Debugger.IsAttached)
                        {
                            Debugger.Break();
                        }
                        ProjectData.ClearProjectError();
                        goto Label_18BA;
                    }
                    float num20 = 0f;
                    if (Client.weaponSalvo.PlottedCourse.Any<Waypoint>())
                    {
                        Waypoint waypoint = Client.weaponSalvo.PlottedCourse[0];
                        num20 += unit23.HorizontalRangeTo(waypoint);
                        if (Client.weaponSalvo.PlottedCourse.Count<Waypoint>() > 1)
                        {
                            int num21 = Client.weaponSalvo.PlottedCourse.Count<Waypoint>() - 1;
                            for (int num22 = 0; num22 <= num21; num22++)
                            {
                                if (num22 != (Client.weaponSalvo.PlottedCourse.Count<Waypoint>() - 1))
                                {
                                    num20 += Client.weaponSalvo.PlottedCourse[num22].GetDistance(Client.weaponSalvo.PlottedCourse[num22 + 1].GetLongitude(), Client.weaponSalvo.PlottedCourse[num22 + 1].GetLatitude());
                                }
                            }
                        }
                        num20 += Client.weaponSalvo.PlottedCourse.Last<Waypoint>().GetDistance(point8.GetLongitude(), point8.GetLatitude());
                    }
                    else
                    {
                        num20 += unit23.HorizontalRangeTo(point8);
                    }
                    nullable3 = null;
                    num20 += point8.GetDistance(Client.weaponSalvo.Target.GetLongitude(nullable3), Client.weaponSalvo.Target.GetLatitude((bool?)null));
                    if (num20 > Client.weaponSalvo.GetWeapon(Client.GetClientScenario()).GetMaxRangeToTarget(unit23, Client.weaponSalvo.Target, false, unit23.m_Doctrine, false))
                    {
                        Interaction.MsgBox("不能添加选定的参考点，航线距离超过武器射程.", MsgBoxStyle.ApplicationModal, null);
                    }
                    else
                    {
                        ScenarioArrayUtil.AddWaypoint(ref Client.weaponSalvo.PlottedCourse, new Waypoint(point8.GetLongitude(), point8.GetLatitude(), Waypoint.WaypointType.TurningPoint, Waypoint._Creator.const_0, Waypoint._Category.const_0));
                    }
                }
            Label_18BA:
                if (this.mouseEventArgs_0.Button == MouseButtons.Right)
                {
                    GeoPoint point9 = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                    this.double_0 = Math2.ApproxAngularDistance(this.method_13(true).GetLatitude(), this.method_13(true).GetLongitude(), point9.GetLatitude(), point9.GetLongitude());
                    this.float_1 = Math2.GetAzimuth(this.method_13(true).GetLatitude(), this.method_13(true).GetLongitude(), point9.GetLatitude(), point9.GetLongitude());
                    bool flag6 = false;
                    if (Client.GetCommandOrder() == Client._CommandOrder.None)
                    {
                        if (Control.ModifierKeys == Keys.Control)
                        {
                            flag6 = true;
                            if ((point9.GetLatitude() >= -90.0) && (point9.GetLatitude() <= 90.0))
                            {
                                this.MenuItem_AU_AddUnit.Visible = Client.GetConfiguration().GetGameMode() == Configuration._GameMode.Edit;
                                this.contextMenuStrip_0.Show(Client.m_WorldWindow, this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                            }
                        }
                        if (Client.GetClientScenario().GetActiveUnits().Count > 0)
                        {
                            Unit unit27 = this.method_154(RuntimeHelpers.GetObjectValue(object_3), Client.GetMap().ViewMode, this.mouseEventArgs_0);
                            if (!Information.IsNothing(unit27))
                            {
                                if ((!Client.GetClientSide().GetUnitReadOnlyCollection().Contains(unit27) && !this.method_9()) && (Control.ModifierKeys != Keys.Shift))
                                {
                                    Client.GetClientSide().ClearUnits();
                                }
                                if (Control.ModifierKeys == Keys.Shift)
                                {
                                    this.method_18(unit27, false);
                                }
                                else
                                {
                                    this.method_18(unit27, true);
                                }
                                if (CommandFactory.GetCommandMain().GetDBViewer().Visible)
                                {
                                    CommandFactory.GetCommandMain().GetDBViewer().Focus();
                                    base.Focus();
                                }
                                if (unit27.IsActiveUnit())
                                {
                                    flag6 = true;
                                    this.method_58(unit27, this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                                }
                                if (unit27.IsContact())
                                {
                                    flag6 = true;
                                    this.method_506(unit27, this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                                }
                            }
                        }
                        if (!((Client.GetClientScenario().GetActiveUnits().Count <= 0) || Information.IsNothing(Client.GetWayPointSelected())))
                        {
                            flag6 = true;
                            this.contextMenuStrip_3.Show(Client.m_WorldWindow, this.mouseEventArgs_0.X, this.mouseEventArgs_0.Y);
                        }
                    }
                    if (!flag6)
                    {
                        this.method_14(true, new GeoPoint(this.geoPoint_0.GetLongitude(), this.geoPoint_0.GetLatitude()));
                    }
                }
                if (CommandFactory.GetCommandMain().GetSpeedAlt().Visible)
                {
                    if (!((Information.IsNothing(Client.GetHookedUnit()) || !Client.GetHookedUnit().IsActiveUnit()) || ((ActiveUnit)Client.GetHookedUnit()).GetNavigator().HasFlightCourse()))
                    {
                        CommandFactory.GetCommandMain().GetSpeedAlt().waypoint_0 = null;
                        CommandFactory.GetCommandMain().GetSpeedAlt().m_Flight = null;
                        CommandFactory.GetCommandMain().GetSpeedAlt().m_Mission = null;
                        CommandFactory.GetCommandMain().GetSpeedAlt().HookedUnit = (ActiveUnit)Client.GetHookedUnit();
                        CommandFactory.GetCommandMain().GetSpeedAlt().method_1();
                    }
                    else if (!Information.IsNothing(Client.GetWayPointSelected()) && (Client.GetWayPointSelected().Category == Waypoint._Category.const_1))
                    {
                        CommandFactory.GetCommandMain().GetSpeedAlt().waypoint_0 = Client.GetWayPointSelected();
                        CommandFactory.GetCommandMain().GetSpeedAlt().m_Flight = null;
                        CommandFactory.GetCommandMain().GetSpeedAlt().m_Mission = null;
                        bool flag7 = false;
                        foreach (Side side7 in Client.GetClientScenario().GetSides())
                        {
                            foreach (Mission mission2 in side7.GetMissionCollection())
                            {
                                if (!mission2.HasFlightCourse())
                                {
                                    continue;
                                }
                                using (List<Mission.Flight>.Enumerator enumerator2 = mission2.FlightList.GetEnumerator())
                                {
                                    Mission.Flight current;
                                    while (enumerator2.MoveNext())
                                    {
                                        current = enumerator2.Current;
                                        Waypoint[] flightCourse = current.GetFlightCourse();
                                        for (int num25 = 0; num25 < flightCourse.Length; num25++)
                                        {
                                            if (flightCourse[num25] == Client.GetWayPointSelected())
                                            {
                                                goto Label_1D1C;
                                            }
                                        }
                                        if (flag7)
                                        {
                                            break;
                                        }
                                    }
                                    goto Label_1D50;
                                Label_1D1C:
                                    CommandFactory.GetCommandMain().GetSpeedAlt().m_Flight = current;
                                    CommandFactory.GetCommandMain().GetSpeedAlt().m_Mission = mission2;
                                    flag7 = true;
                                }
                            Label_1D50:
                                if (flag7)
                                {
                                    break;
                                }
                            }
                            if (flag7)
                            {
                                break;
                            }
                        }
                        CommandFactory.GetCommandMain().GetSpeedAlt().HookedUnit = null;
                        CommandFactory.GetCommandMain().GetSpeedAlt().method_1();
                    }
                }
            }
            catch (Exception exception7)
            {
                ProjectData.SetProjectError(exception7);
                Exception exception8 = exception7;
                exception8.Data.Add("Error at 200350", exception8.Message);
                GameGeneral.LogException(ref exception8);
                if (!Debugger.IsAttached)
                {
                }
                ProjectData.ClearProjectError();
            }

        }

        // Token: 0x06007153 RID: 29011 RVA: 0x00409328 File Offset: 0x00407528
        private void method_194()
		{
			if (!Information.IsNothing(Client.exception_0))
			{
				base.Focus();
				ToolTip toolTip = new ToolTip();
				toolTip.IsBalloon = true;
				toolTip.ToolTipTitle = "Failed to perform Autosave!";
				toolTip.ToolTipIcon = ToolTipIcon.Error;
				toolTip.Show(string.Empty, this.toolStrip_0, 0);
				toolTip.Show("Error message: " + Client.exception_0.Message, this.toolStrip_0, (int)Math.Round((double)this.toolStrip_0.Width / 2.0), (int)Math.Round((double)this.toolStrip_0.Height / 2.0));
				Client.exception_0 = null;
			}
		}

		// Token: 0x06007154 RID: 29012 RVA: 0x004093DC File Offset: 0x004075DC
		private void WorldMapBox_MouseMove(object sender, MouseEventArgs e)
		{
			try
			{
				bool flag;
				if (flag = (e.X != this.point_1.X || e.Y != this.point_1.Y))
				{
					this.method_368();
				}
				if (!this.bool_7)
				{
					if (e.Button == MouseButtons.Left && flag && Control.ModifierKeys == Keys.Control && !this.method_11())
					{
						if (!Information.IsNothing(Client.GetHookedUnit()) && !Information.IsNothing(Client.GetWayPointSelected()) && Client.GetWayPointSelected().Category == Waypoint._Category.const_0)
						{
							Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, Client.GetWayPointSelected().GetLatitude(), Client.GetWayPointSelected().GetLongitude());
							if (point.X - this.point_1.X > 4 || point.X - this.point_1.X < -4 || point.Y - this.point_1.Y > 4 || point.Y - this.point_1.Y < -4)
							{
								GeoPoint geoPoint = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, e.X, e.Y);
								int num = Array.IndexOf<Waypoint>(((ActiveUnit)Client.GetHookedUnit()).GetNavigator().GetPlottedCourse(), Client.GetWayPointSelected());
								if (num >= 0)
								{
									Waypoint.WaypointType waypointType_;
									switch (Client.GetWayPointSelected().waypointType)
									{
									case Waypoint.WaypointType.ManualPlottedCourseWaypoint:
										waypointType_ = Waypoint.WaypointType.ManualPlottedCourseWaypoint;
										goto IL_1F3;
									case Waypoint.WaypointType.PatrolStation:
									case Waypoint.WaypointType.Assemble:
									case Waypoint.WaypointType.LandingMarshal:
									case Waypoint.WaypointType.Refuel:
									case Waypoint.WaypointType.TakeOff:
									case Waypoint.WaypointType.Marshal:
									case Waypoint.WaypointType.Land:
										waypointType_ = Waypoint.WaypointType.TurningPoint;
										goto IL_1F3;
									case Waypoint.WaypointType.TurningPoint:
										waypointType_ = Waypoint.WaypointType.TurningPoint;
										goto IL_1F3;
									case Waypoint.WaypointType.InitialPoint:
									case Waypoint.WaypointType.Split:
									case Waypoint.WaypointType.WeaponLaunch:
										waypointType_ = Waypoint.WaypointType.StrikeIngress;
										goto IL_1F3;
									case Waypoint.WaypointType.Formate:
									case Waypoint.WaypointType.Target:
									case Waypoint.WaypointType.WeaponTarget:
										waypointType_ = Waypoint.WaypointType.StrikeEgress;
										goto IL_1F3;
									case Waypoint.WaypointType.StrikeIngress:
										waypointType_ = Waypoint.WaypointType.StrikeIngress;
										goto IL_1F3;
									case Waypoint.WaypointType.StrikeEgress:
										waypointType_ = Waypoint.WaypointType.StrikeEgress;
										goto IL_1F3;
									}
									waypointType_ = Waypoint.WaypointType.ManualPlottedCourseWaypoint;
									IL_1F3:
									((ActiveUnit)Client.GetHookedUnit()).GetNavigator().method_43(num + 1, new Waypoint(geoPoint.GetLongitude(), geoPoint.GetLatitude(), waypointType_, Waypoint._Creator.const_2, Waypoint._Category.const_0));
									Client.SetWayPointSelected(((ActiveUnit)Client.GetHookedUnit()).GetNavigator().GetPlottedCourse()[num + 1]);
									this.method_12(true);
									this.bool_10 = true;
									Client.b_Completed = true;
								}
							}
						}
						if (!Information.IsNothing(Client.GetWayPointSelected()) && Client.GetWayPointSelected().Category == Waypoint._Category.const_1 && SimConfiguration.gameOptions.GetShowFlightPlans_Airborne() != Configuration.GameOptions._ShowFlightPlans_Airborne.const_2 && Client.GetClientSide().GetMissionCollection().Count > 0)
						{
							bool flag2 = false;
							bool flag3 = false;
							Waypoint waypoint = null;
							Waypoint waypoint2 = null;
							foreach (Mission current in Client.GetClientSide().GetMissionCollection())
							{
								if (current.HasFlightCourse())
								{
									foreach (Mission.Flight current2 in current.FlightList)
									{
										int num2 = current2.GetFlightCourse().Count<Waypoint>() - 1;
										for (int i = 0; i <= num2; i++)
										{
											if (current2.GetFlightCourse()[i] == Client.GetWayPointSelected())
											{
												Point point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, Client.GetWayPointSelected().GetLatitude(), Client.GetWayPointSelected().GetLongitude());
												if (point2.X - this.point_1.X > 4 || point2.X - this.point_1.X < -4 || point2.Y - this.point_1.Y > 4 || point2.Y - this.point_1.Y < -4)
												{
													GeoPoint geoPoint2 = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, e.X, e.Y);
													if (i >= 0)
													{
														Waypoint.WaypointType waypointType;
														switch (Client.GetWayPointSelected().waypointType)
														{
														case Waypoint.WaypointType.ManualPlottedCourseWaypoint:
															waypointType = Waypoint.WaypointType.ManualPlottedCourseWaypoint;
															goto IL_478;
														case Waypoint.WaypointType.PatrolStation:
														case Waypoint.WaypointType.Assemble:
														case Waypoint.WaypointType.LandingMarshal:
														case Waypoint.WaypointType.Refuel:
														case Waypoint.WaypointType.TakeOff:
														case Waypoint.WaypointType.Marshal:
														case Waypoint.WaypointType.Land:
															waypointType = Waypoint.WaypointType.TurningPoint;
															goto IL_478;
														case Waypoint.WaypointType.TurningPoint:
															waypointType = Waypoint.WaypointType.TurningPoint;
															goto IL_478;
														case Waypoint.WaypointType.InitialPoint:
														case Waypoint.WaypointType.Split:
														case Waypoint.WaypointType.WeaponLaunch:
															waypointType = Waypoint.WaypointType.StrikeIngress;
															goto IL_478;
														case Waypoint.WaypointType.Formate:
														case Waypoint.WaypointType.Target:
														case Waypoint.WaypointType.WeaponTarget:
															waypointType = Waypoint.WaypointType.StrikeEgress;
															goto IL_478;
														case Waypoint.WaypointType.StrikeIngress:
															waypointType = Waypoint.WaypointType.StrikeIngress;
															goto IL_478;
														case Waypoint.WaypointType.StrikeEgress:
															waypointType = Waypoint.WaypointType.StrikeEgress;
															goto IL_478;
														}
														waypointType = Waypoint.WaypointType.ManualPlottedCourseWaypoint;
														IL_478:
														waypoint = new Waypoint(geoPoint2.GetLongitude(), geoPoint2.GetLatitude(), waypointType, Waypoint._Creator.const_3, Waypoint._Category.const_1);
														Waypoint wayPointSelected = Client.GetWayPointSelected();
														Scenario clientScenario = Client.GetClientScenario();
														Waypoint wayPointSelected2 = Client.GetWayPointSelected();
														Waypoint waypoint3 = wayPointSelected.method_23(ref clientScenario, ref wayPointSelected2, false, false);
														Client.SetWayPointSelected(wayPointSelected2);
														waypoint = waypoint3;
														waypoint.waypointType = waypointType;
														waypoint.SetLatitude(geoPoint2.GetLatitude());
														waypoint.SetLongitude(geoPoint2.GetLongitude());
														Mission.Flight flight = current2;
														Waypoint[] array = flight.GetFlightCourse();
														ActiveUnit_Navigator.InsertWayPoint(ref array, i + 1, waypoint);
														flight.SetFlightCourse(array);
														waypoint2 = Client.GetWayPointSelected();
														Client.SetWayPointSelected(current2.GetFlightCourse()[i + 1]);
														this.method_12(true);
														this.bool_10 = true;
														Client.b_Completed = true;
														flag2 = true;
														Scenario clientScenario2 = Client.GetClientScenario();
														Mission theStrikeMission_ = current;
														ActiveUnit referenceUnit = current2.GetReferenceUnit(Client.GetClientScenario());
														Mission.Flight theFlight_ = current2;
														Mission.Flight flight2;
														array = (flight2 = current2).GetFlightCourse();
														Mission.Enum60 bingo = ((Strike)current).Bingo;
														float num3 = 0f;
														StrikePlanner.smethod_8(clientScenario2, theStrikeMission_, referenceUnit, theFlight_, ref array, bingo, ref num3, 0f, false, true, true, true, false, true, true, null, 0f, 0f, 0f, Misc.Enum102.const_0, null, false);
														flight2.SetFlightCourse(array);
														goto IL_5C3;
													}
												}
											}
										}
										if (!flag2)
										{
											continue;
										}
										IL_5C3:
										break;
									}
									if (flag2)
									{
										break;
									}
								}
							}
							if (!Information.IsNothing(waypoint) && !Information.IsNothing(waypoint2))
							{
								for (int j = Client.GetClientScenario().GetActiveUnitList().Count - 1; j >= 0; j += -1)
								{
									ActiveUnit activeUnit = Client.GetClientScenario().GetActiveUnitList()[j];
									if (activeUnit.IsOperating() && (SimConfiguration.gameOptions.GetShowFlightPlans_Airborne() != Configuration.GameOptions._ShowFlightPlans_Airborne.const_1 || Client.GetHookedUnit() == activeUnit))
									{
										if ((activeUnit.IsAircraft || (activeUnit.IsGroup && ((Group)activeUnit).GetGroupType() == Group.GroupType.AirGroup)) && activeUnit.GetNavigator().HasFlightCourse() && !Information.IsNothing(activeUnit.GetSide(false)) && activeUnit.GetSide(false) == Client.GetClientSide())
										{
											int num4 = activeUnit.GetNavigator().GetPlottedCourse().Count<Waypoint>() - 1;
											for (int k = 0; k <= num4; k++)
											{
												if (activeUnit.GetNavigator().GetPlottedCourse()[k] == waypoint2 && k >= 0)
												{
													ActiveUnit_Navigator navigator = activeUnit.GetNavigator();
													Waypoint[] array = navigator.GetPlottedCourse();
													ActiveUnit_Navigator.InsertWayPoint(ref array, k + 1, waypoint);
													navigator.SetPlottedCourse(array);
													flag3 = true;
													break;
												}
											}
										}
										if (flag3)
										{
											break;
										}
									}
								}
							}
						}
						if (!Information.IsNothing(this.referencePoint_0) && !this.referencePoint_0.IsLocked)
						{
							Point point3 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, this.referencePoint_0.GetLatitude(), this.referencePoint_0.GetLongitude());
							if (point3.X - this.point_1.X > 4 || point3.X - this.point_1.X < -4 || point3.Y - this.point_1.Y > 4 || point3.Y - this.point_1.Y < -4)
							{
								GeoPoint geoPoint3 = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, e.X, e.Y);
								ReferencePoint referencePoint = new ReferencePoint();
								referencePoint.SetLongitude(geoPoint3.GetLongitude());
								referencePoint.SetLatitude(geoPoint3.GetLatitude());
								Client.GetClientScenario().UnitsAutoIncrement = Client.GetClientScenario().UnitsAutoIncrement + 1;
								referencePoint.Name = "RP-" + Conversions.ToString(Client.GetClientScenario().UnitsAutoIncrement);
								Client.GetClientSide().GetReferencePoints().Add(referencePoint);
								this.referencePoint_0 = referencePoint;
								this.method_12(true);
								this.bool_9 = false;
								Client.b_Completed = true;
							}
						}
					}
					else if (e.Button == MouseButtons.Left && flag)
					{
						if (Information.IsNothing(Client.GetWayPointSelected()) && Information.IsNothing(this.referencePoint_0))
						{
							if (Client.GetCommandOrder() != Client._CommandOrder.ViewRangeBearing && (this.point_3.X - this.point_1.X > 4 || this.point_3.X - this.point_1.X < -4 || this.point_3.Y - this.point_1.Y > 4 || this.point_3.Y - this.point_1.Y < -4))
							{
								this.method_10(true);
								this.point_4 = this.point_1;
							}
						}
						else
						{
							this.method_10(false);
						}
						checked
						{
							if (!Information.IsNothing(Client.GetWayPointSelected()) && Client.GetWayPointSelected().waypointType != Waypoint.WaypointType.TakeOff && Client.GetWayPointSelected().waypointType != Waypoint.WaypointType.Land && Client.GetWayPointSelected().waypointType != Waypoint.WaypointType.LandingMarshal)
							{
								Point point4 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, Client.GetWayPointSelected().GetLatitude(), Client.GetWayPointSelected().GetLongitude());
								if (unchecked((this.method_11() || point4.X - this.point_1.X <= 4) && point4.X - this.point_1.X >= -4 && point4.Y - this.point_1.Y <= 4 && point4.Y - this.point_1.Y >= -4))
								{
									if (this.method_11())
									{
										int num5 = this.point_1.X;
										int l = this.point_1.Y;
										double num6 = 0.0;
										double num7 = 0.0;
										WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, ref num5, ref l, ref num6, ref num7);
										this.point_1.Y = l;
										this.point_1.X = num5;
										if (Client.GetWayPointSelected().Category == Waypoint._Category.const_0)
										{
											if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit())
											{
												Unit unit = (ActiveUnit)Client.GetHookedUnit();
												double lat_ = num7;
												double lon_ = num6;
												byte b = 0;
												bool flag4 = true;
												bool flag5 = true;
												float? nullable_ = null;
												short? nullable_2 = null;
												List<ActiveUnit> list = null;
												if (unit.vmethod_41(lat_, lon_, ref b, false, ref flag4, true, ref flag5, nullable_, nullable_2, ref list, 0f, false, false))
												{
													Client.GetWayPointSelected().SetLatitude(num7);
													Client.GetWayPointSelected().SetLongitude(num6);
												}
											}
										}
										else
										{
											bool flag6 = false;
											foreach (Mission current3 in Client.GetClientSide().GetMissionCollection())
											{
												if (current3.HasFlightCourse())
												{
													using (List<Mission.Flight>.Enumerator enumerator4 = current3.FlightList.GetEnumerator())
													{
														IL_E81:
														while (enumerator4.MoveNext())
														{
															Mission.Flight current4 = enumerator4.Current;
															Waypoint[] flightCourse = current4.GetFlightCourse();
															l = 0;
															while (l < flightCourse.Length)
															{
																Waypoint waypoint4 = flightCourse[l];
																if (waypoint4 == Client.GetWayPointSelected())
																{
																	flag6 = true;
																}
																if (waypoint4.FlightFormation == Waypoint._FlightFormation.Split)
																{
																	if (!Information.IsNothing(waypoint4.WP_LeadElementWingman) && waypoint4.WP_LeadElementWingman == Client.GetWayPointSelected())
																	{
																		flag6 = true;
																	}
																	else if (!Information.IsNothing(waypoint4.WP_SecondElement) && waypoint4.WP_SecondElement == Client.GetWayPointSelected())
																	{
																		flag6 = true;
																	}
																	else if (!Information.IsNothing(waypoint4.WP_SecondElementWingman) && waypoint4.WP_SecondElementWingman == Client.GetWayPointSelected())
																	{
																		flag6 = true;
																	}
																	else if (!Information.IsNothing(waypoint4.WP_ThirdElement) && waypoint4.WP_ThirdElement == Client.GetWayPointSelected())
																	{
																		flag6 = true;
																	}
																	else if (!Information.IsNothing(waypoint4.WP_ThirdElementWingman) && waypoint4.WP_ThirdElementWingman == Client.GetWayPointSelected())
																	{
																		flag6 = true;
																	}
																}
																if (!flag6)
																{
																	l++;
																}
																else
																{
																	if (!Information.IsNothing(current4.GetReferenceUnit(Client.GetClientScenario())))
																	{
																		Unit referenceUnit2 = current4.GetReferenceUnit(Client.GetClientScenario());
																		double lat_2 = num7;
																		double lon_2 = num6;
																		byte b = 0;
																		bool flag5 = true;
																		bool flag4 = true;
																		float? nullable_3 = null;
																		short? nullable_4 = null;
																		List<ActiveUnit> list = null;
																		if (referenceUnit2.vmethod_41(lat_2, lon_2, ref b, false, ref flag5, true, ref flag4, nullable_3, nullable_4, ref list, 0f, false, false))
																		{
																			Client.GetWayPointSelected().SetLatitude(num7);
																			Client.GetWayPointSelected().SetLongitude(num6);
																			Scenario clientScenario3 = Client.GetClientScenario();
																			Mission theStrikeMission_2 = current3;
																			ActiveUnit referenceUnit3 = current4.GetReferenceUnit(Client.GetClientScenario());
																			Mission.Flight theFlight_2 = current4;
																			Mission.Flight flight2;
																			Waypoint[] flightCourse2 = (flight2 = current4).GetFlightCourse();
																			Mission.Enum60 bingo2 = ((Strike)current3).Bingo;
																			float num3 = 0f;
																			StrikePlanner.smethod_8(clientScenario3, theStrikeMission_2, referenceUnit3, theFlight_2, ref flightCourse2, bingo2, ref num3, 0f, false, true, true, true, false, true, true, null, 0f, 0f, 0f, Misc.Enum102.const_0, null, false);
																			flight2.SetFlightCourse(flightCourse2);
																		}
																	}
																	else
																	{
																		Client.GetWayPointSelected().SetLatitude(num7);
																		Client.GetWayPointSelected().SetLongitude(num6);
																		Scenario clientScenario4 = Client.GetClientScenario();
																		Mission theStrikeMission_3 = current3;
																		ActiveUnit referenceUnit4 = current4.GetReferenceUnit(Client.GetClientScenario());
																		Mission.Flight theFlight_3 = current4;
																		Mission.Flight flight2;
																		Waypoint[] flightCourse2 = (flight2 = current4).GetFlightCourse();
																		Mission.Enum60 bingo3 = ((Strike)current3).Bingo;
																		float num3 = 0f;
																		StrikePlanner.smethod_8(clientScenario4, theStrikeMission_3, referenceUnit4, theFlight_3, ref flightCourse2, bingo3, ref num3, 0f, false, true, true, true, false, true, true, null, 0f, 0f, 0f, Misc.Enum102.const_0, null, false);
																		flight2.SetFlightCourse(flightCourse2);
																	}
																	if (!flag6)
																	{
																		goto IL_E81;
																	}
																	goto IL_E8D;
																}
															}
															if (flag6)
															{
																break;
															}
														}
														IL_E8D:;
													}
													if (flag6)
													{
														break;
													}
												}
											}
										}
										Client.b_Completed = true;
									}
								}
								else
								{
									int num5 = this.point_1.X;
									int m = this.point_1.Y;
									double num8 = 0.0;
									double num9 = 0.0;
									WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, ref num5, ref m, ref num8, ref num9);
									this.point_1.Y = m;
									this.point_1.X = num5;
									if (Client.GetWayPointSelected().Category == Waypoint._Category.const_0)
									{
										if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit())
										{
											Unit unit2 = (ActiveUnit)Client.GetHookedUnit();
											double lat_3 = num9;
											double lon_3 = num8;
											byte b = 0;
											bool flag4 = true;
											bool flag5 = true;
											float? nullable_5 = null;
											short? nullable_6 = null;
											List<ActiveUnit> list = null;
											if (unit2.vmethod_41(lat_3, lon_3, ref b, false, ref flag4, true, ref flag5, nullable_5, nullable_6, ref list, 0f, false, false))
											{
												Client.GetWayPointSelected().SetLatitude(num9);
												Client.GetWayPointSelected().SetLongitude(num8);
											}
										}
									}
									else
									{
										bool flag7 = false;
										foreach (Mission current5 in Client.GetClientSide().GetMissionCollection())
										{
											if (current5.HasFlightCourse())
											{
												using (List<Mission.Flight>.Enumerator enumerator6 = current5.FlightList.GetEnumerator())
												{
													IL_130F:
													while (enumerator6.MoveNext())
													{
														Mission.Flight current6 = enumerator6.Current;
														Waypoint[] array = current6.GetFlightCourse();
														m = 0;
														while (m < array.Length)
														{
															Waypoint waypoint5 = array[m];
															if (waypoint5 == Client.GetWayPointSelected())
															{
																flag7 = true;
															}
															if (waypoint5.FlightFormation == Waypoint._FlightFormation.Split)
															{
																if (!Information.IsNothing(waypoint5.WP_LeadElementWingman) && waypoint5.WP_LeadElementWingman == Client.GetWayPointSelected())
																{
																	flag7 = true;
																}
																else if (!Information.IsNothing(waypoint5.WP_SecondElement) && waypoint5.WP_SecondElement == Client.GetWayPointSelected())
																{
																	flag7 = true;
																}
																else if (!Information.IsNothing(waypoint5.WP_SecondElementWingman) && waypoint5.WP_SecondElementWingman == Client.GetWayPointSelected())
																{
																	flag7 = true;
																}
																else if (!Information.IsNothing(waypoint5.WP_ThirdElement) && waypoint5.WP_ThirdElement == Client.GetWayPointSelected())
																{
																	flag7 = true;
																}
																else if (!Information.IsNothing(waypoint5.WP_ThirdElementWingman) && waypoint5.WP_ThirdElementWingman == Client.GetWayPointSelected())
																{
																	flag7 = true;
																}
															}
															if (!flag7)
															{
																m++;
															}
															else
															{
																if (!Information.IsNothing(current6.GetReferenceUnit(Client.GetClientScenario())))
																{
																	Unit referenceUnit5 = current6.GetReferenceUnit(Client.GetClientScenario());
																	double lat_4 = num9;
																	double lon_4 = num8;
																	byte b = 0;
																	bool flag5 = true;
																	bool flag4 = true;
																	float? nullable_7 = null;
																	short? nullable_8 = null;
																	List<ActiveUnit> list = null;
																	if (referenceUnit5.vmethod_41(lat_4, lon_4, ref b, false, ref flag5, true, ref flag4, nullable_7, nullable_8, ref list, 0f, false, false))
																	{
																		Client.GetWayPointSelected().SetLatitude(num9);
																		Client.GetWayPointSelected().SetLongitude(num8);
																		Scenario clientScenario5 = Client.GetClientScenario();
																		Mission theStrikeMission_4 = current5;
																		ActiveUnit referenceUnit6 = current6.GetReferenceUnit(Client.GetClientScenario());
																		Mission.Flight theFlight_4 = current6;
																		Mission.Flight flight2;
																		Waypoint[] flightCourse = (flight2 = current6).GetFlightCourse();
																		Mission.Enum60 bingo4 = ((Strike)current5).Bingo;
																		float num3 = 0f;
																		StrikePlanner.smethod_8(clientScenario5, theStrikeMission_4, referenceUnit6, theFlight_4, ref flightCourse, bingo4, ref num3, 0f, false, true, true, true, false, true, true, null, 0f, 0f, 0f, Misc.Enum102.const_0, null, false);
																		flight2.SetFlightCourse(flightCourse);
																	}
																}
																else
																{
																	Client.GetWayPointSelected().SetLatitude(num9);
																	Client.GetWayPointSelected().SetLongitude(num8);
																	Scenario clientScenario6 = Client.GetClientScenario();
																	Mission theStrikeMission_5 = current5;
																	ActiveUnit referenceUnit7 = current6.GetReferenceUnit(Client.GetClientScenario());
																	Mission.Flight theFlight_5 = current6;
																	Mission.Flight flight2;
																	Waypoint[] flightCourse = (flight2 = current6).GetFlightCourse();
																	Mission.Enum60 bingo5 = ((Strike)current5).Bingo;
																	float num3 = 0f;
																	StrikePlanner.smethod_8(clientScenario6, theStrikeMission_5, referenceUnit7, theFlight_5, ref flightCourse, bingo5, ref num3, 0f, false, true, true, true, false, true, true, null, 0f, 0f, 0f, Misc.Enum102.const_0, null, false);
																	flight2.SetFlightCourse(flightCourse);
																}
																if (!flag7)
																{
																	goto IL_130F;
																}
																goto IL_131B;
															}
														}
														if (flag7)
														{
															break;
														}
													}
													IL_131B:;
												}
												if (flag7)
												{
													break;
												}
											}
										}
									}
									this.method_12(true);
									this.bool_10 = true;
									Client.b_Completed = true;
								}
							}
						}
						if (!Information.IsNothing(this.referencePoint_0) && !this.referencePoint_0.IsLocked)
						{
							Point point5 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, this.referencePoint_0.GetLatitude(), this.referencePoint_0.GetLongitude());
							if ((this.method_11() || point5.X - this.point_1.X <= 4) && point5.X - this.point_1.X >= -4 && point5.Y - this.point_1.Y <= 4 && point5.Y - this.point_1.Y >= -4)
							{
								if (this.method_11())
								{
									int num10 = this.point_1.X;
									int num5 = this.point_1.Y;
									ReferencePoint referencePoint2;
									double num11 = (referencePoint2 = this.referencePoint_0).GetLongitude();
									ReferencePoint referencePoint3;
									double num12 = (referencePoint3 = this.referencePoint_0).GetLatitude();
									WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, ref num10, ref num5, ref num11, ref num12);
									referencePoint3.SetLatitude(num12);
									referencePoint2.SetLongitude(num11);
									this.point_1.Y = num5;
									this.point_1.X = num10;
									this.referencePoint_0.RelativeCalculate();
									Client.b_Completed = true;
								}
							}
							else
							{
								int num5 = this.point_1.X;
								int num10 = this.point_1.Y;
								ReferencePoint referencePoint3;
								double num12 = (referencePoint3 = this.referencePoint_0).GetLongitude();
								ReferencePoint referencePoint2;
								double num11 = (referencePoint2 = this.referencePoint_0).GetLatitude();
								WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, ref num5, ref num10, ref num12, ref num11);
								referencePoint2.SetLatitude(num11);
								referencePoint3.SetLongitude(num12);
								this.point_1.Y = num10;
								this.point_1.X = num5;
								this.referencePoint_0.RelativeCalculate();
								this.method_12(true);
								this.bool_9 = false;
								Client.b_Completed = true;
							}
						}
					}
				}
				this.point_1.X = e.X;
				this.point_1.Y = e.Y;
				this.method_173();
				if (!this.method_9() && Client.GetCommandOrder() != Client._CommandOrder.ViewRangeBearing)
				{
					if (SimConfiguration.gameOptions.GetMapCursorBox() == Configuration.GameOptions._MapCursorBox.const_0 && !this.method_11())
					{
						this.WorldMapBox.Invalidate();
					}
				}
				else
				{
					this.WorldMapBox.Invalidate();
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200606", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007155 RID: 29013 RVA: 0x0040AA84 File Offset: 0x00408C84
		private void WorldMapBox_MouseWheel(object sender, MouseEventArgs e)
		{
			try
			{
				if (!this.bool_2)
				{
					int delta = e.Delta;
					if (delta > 0)
					{
						this.method_33();
					}
					else if (delta < 0)
					{
						this.method_34();
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200600", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007156 RID: 29014 RVA: 0x0040AB10 File Offset: 0x00408D10
		private void method_197()
		{
			try
			{
				if (this.graphicsStream_1 != null)
				{
					this.graphicsStream_1.Close();
					this.graphicsStream_1.Dispose();
					this.graphicsStream_1 = null;
				}
				if (this.surface_0 != null)
				{
					this.surface_0.Dispose();
					this.surface_0 = null;
				}
				if (this.surface_1 != null)
				{
					this.surface_1.Dispose();
					this.surface_1 = null;
				}
				this.device_0 = Client.m_WorldWindow.method_1();
				this.surface_0 = this.device_0.GetBackBuffer(0, 0, BackBufferType.Mono);
				this.surface_1 = this.device_0.CreateOffscreenPlainSurface(this.surface_0.Description.Width, this.surface_0.Description.Height, this.surface_0.Description.Format, Pool.SystemMemory);
				try
				{
					this.device_0.GetRenderTargetData(this.surface_0, this.surface_1);
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200515", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					GameGeneral.ForceGarbageCollection();
					ProjectData.ClearProjectError();
				}
				if (this.graphicsStream_0 != null)
				{
					this.graphicsStream_0.Close();
					this.graphicsStream_0.Dispose();
					this.graphicsStream_0 = null;
				}
				this.graphicsStream_1 = SurfaceLoader.SaveToStream(ImageFileFormat.Bmp, this.surface_1);
				this.surface_1.ReleaseGraphics();
				this.surface_0.ReleaseGraphics();
				this.graphicsStream_0 = this.graphicsStream_1;
				this.dateTime_0 = Client.GetClientScenario().GetCurrentTime(false);
			}
			catch (Exception ex3)
			{
				ProjectData.SetProjectError(ex3);
				Exception ex4 = ex3;
				ex4.Data.Add("Error at 200511", ex4.Message);
				GameGeneral.LogException(ref ex4);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06007157 RID: 29015 RVA: 0x0040AD38 File Offset: 0x00408F38
		private void CreateBMNGLayer()
		{
			if (SimConfiguration.gameOptions.LogDebugInfoToFile())
			{
				string text = "Preparing BMNG.";
				GameGeneral.Log(ref text);
			}
			Class1947[] array = new Class1947[1];
			RenderableObjectList renderableObjectList = new RenderableObjectList("BMNG");
			RenderableObjectList renderableObjectList2 = new RenderableObjectList("BMNG (Bathymetry)");
			renderableObjectList2.method_0(false);
			Class1948 @class = new Class1948("BMNG", null);
			@class.method_1(36.0);
			@class.method_3(5);
			@class.method_4("jpg");
			@class.method_5(string.Format("{0}\\\\BMNG\\\\{1}", Client.m_WorldWindow.GetCache().CacheDirectory, string.Format("BMNG (Shaded + Bathymetry) Tiled - {0}.2004", 7)));
			array[0] = @class;
			Class1998 class2 = new Class1998(string.Format("Tiled - {0}.2004", 7), Client.m_WorldWindow.method_2(), 0.0, 90.0, -90.0, -180.0, 180.0, true, array);
			class2.method_12(true);
			class2.vmethod_18(null);
			class2.method_16(3.5f);
			class2.method_14(2.9f);
			class2.method_5(new TimeSpan(999, 59, 59));
			RenderableObjectList renderableObjectList3 = new RenderableObjectList(string.Format("{0}.2004", 7));
			class2.Update(Client.m_WorldWindow.GetDrawArgs());
			class2.SetIsOn(true);
			renderableObjectList3.SetIsOn(true);
			renderableObjectList3.Add(class2);
			renderableObjectList2.Add(renderableObjectList3);
			renderableObjectList2.bool_3 = true;
			renderableObjectList2.SetIsOn(true);
			renderableObjectList.Add(renderableObjectList2);
			Client.m_WorldWindow.method_2().GetRenderableObjectList().Add(renderableObjectList);
			renderableObjectList.bool_3 = true;
			renderableObjectList.SetIsOn(true);
			renderableObjectList.Render(Client.m_WorldWindow.GetDrawArgs());
			if (SimConfiguration.gameOptions.LogDebugInfoToFile())
			{
				string text = "Preparing BMNG done.";
				GameGeneral.Log(ref text);
			}
		}

		// Token: 0x06007158 RID: 29016 RVA: 0x0002F370 File Offset: 0x0002D570
		private void BtnClick_CustomLayer(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetCustomLayersForm().Show();
		}

		// Token: 0x06007159 RID: 29017 RVA: 0x0040AF28 File Offset: 0x00409128
		private void method_200(object sender, EventArgs e)
		{
			try
			{
				this.float_0 += (float)this.timer_3.Interval;
				if (this.float_0 >= 6000f)
				{
					this.MapBoxResize();
					this.timer_3.Stop();
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200203", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				GC.Collect();
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600715A RID: 29018 RVA: 0x0040AFC4 File Offset: 0x004091C4
		private void CreateReliefLayer()
		{
			try
			{
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Preparing ReliefMap.";
					GameGeneral.Log(ref text);
				}
				if (!Directory.Exists(Application.StartupPath + "\\WW\\Cache\\Relief_300\\"))
				{
					Interaction.MsgBox("Could not find any map files in " + Application.StartupPath + "\\WW\\Cache\\Relief_300\\. Is the simulator installed correctly?", MsgBoxStyle.OkOnly, null);
				}
				else
				{
					new RenderableObjectList("Relief");
					Class1947[] array = new Class1947[1];
					RenderableObjectList renderableObjectList = new RenderableObjectList("Relief");
					RenderableObjectList renderableObjectList2 = new RenderableObjectList("Relief");
					renderableObjectList2.method_0(false);
					Class1948 @class = new Class1948("Relief", null);
					@class.method_6(Application.StartupPath + "\\WW\\Cache\\Relief_300\\");
					@class.method_1(22.5);
					@class.method_3(5);
					@class.method_4("png");
					@class.method_5(Application.StartupPath + "\\WW\\Cache\\Relief_300\\");
					array[0] = @class;
					Class1998 class2 = new Class1998("Relief Tiled", Client.m_WorldWindow.method_2(), 0.0, 90.0, -90.0, -180.0, 180.0, true, array);
					class2.method_12(true);
					class2.vmethod_18(null);
					class2.method_16(3.5f);
					class2.method_14(2.9f);
					class2.method_5(new TimeSpan(999, 59, 59));
					RenderableObjectList renderableObjectList3 = new RenderableObjectList("Relief");
					class2.Update(Client.m_WorldWindow.GetDrawArgs());
					class2.SetIsOn(true);
					renderableObjectList3.SetIsOn(true);
					renderableObjectList3.Add(class2);
					renderableObjectList2.Add(renderableObjectList3);
					renderableObjectList2.bool_3 = true;
					renderableObjectList2.SetIsOn(true);
					renderableObjectList.Add(renderableObjectList2);
					Client.m_WorldWindow.method_2().GetRenderableObjectList().Add(renderableObjectList);
					renderableObjectList.bool_3 = true;
					renderableObjectList.SetOpacity(1);
					renderableObjectList.Render(Client.m_WorldWindow.GetDrawArgs());
					if (SimConfiguration.gameOptions.LogDebugInfoToFile())
					{
						string text = "Preparing ReliefMap done.";
						GameGeneral.Log(ref text);
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				Interaction.MsgBox("Error while creating Relief layer: " + ex2.Message, MsgBoxStyle.OkOnly, null);
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600715B RID: 29019 RVA: 0x0040B228 File Offset: 0x00409428
		private void PrepareSHP_Ice_Arctic()
		{
			if (SimConfiguration.gameOptions.LogDebugInfoToFile())
			{
				string text = "Preparing SHP_Ice_Arctic.";
				GameGeneral.Log(ref text);
			}
			try
			{
				Client.m_WorldWindow.method_2().GetRenderableObjectList().Remove("SeaIceArctic");
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200204", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
			this.class2001_2 = new Class2537.Class2001("SeaIceArctic", Client.m_WorldWindow.method_2(), 0.0, ArcticSeaIce.smethod_4(DateTime.Today), Color.LightGray, 0.0, 100000.0);
			this.class2001_2.Initialize(Client.m_WorldWindow.GetDrawArgs());
			Client.m_WorldWindow.method_2().GetRenderableObjectList().Add(this.class2001_2);
			if (SimConfiguration.gameOptions.LogDebugInfoToFile())
			{
				string text = "Preparing SHP_Ice_Arctic done.";
				GameGeneral.Log(ref text);
			}
		}

		// Token: 0x0600715C RID: 29020 RVA: 0x0040B348 File Offset: 0x00409548
		private void PrepareSHP_ColdWar()
		{
			if (SimConfiguration.gameOptions.LogDebugInfoToFile())
			{
				string text = "Preparing SHP_ColdWar.";
				GameGeneral.Log(ref text);
			}
			try
			{
				Client.m_WorldWindow.method_2().GetRenderableObjectList().Remove("Borders_ColdWar");
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200205", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
			this.class2001_0 = new Class2537.Class2001("Borders_ColdWar", Client.m_WorldWindow.method_2(), 0.0, Application.StartupPath + "\\GIS\\MappingHacks\\world_borders_1976-1989.shp", Color.FromArgb(90, Color.Yellow), 0.0, 100000.0);
			this.class2001_0.Initialize(Client.m_WorldWindow.GetDrawArgs());
			Client.m_WorldWindow.method_2().GetRenderableObjectList().Add(this.class2001_0);
			if (SimConfiguration.gameOptions.LogDebugInfoToFile())
			{
				string text = "Preparing SHP_ColdWar done.";
				GameGeneral.Log(ref text);
			}
		}

		// Token: 0x0600715D RID: 29021 RVA: 0x0040B474 File Offset: 0x00409674
		private void PrepareSHP_NewWorldOrder()
		{
			if (SimConfiguration.gameOptions.LogDebugInfoToFile())
			{
				string text = "Preparing SHP_NewWorldOrder.";
				GameGeneral.Log(ref text);
			}
			try
			{
				Client.m_WorldWindow.method_2().GetRenderableObjectList().Remove("Borders_NewWorldOrder");
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200206", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
			this.class2001_1 = new Class2537.Class2001("Borders_NewWorldOrder", Client.m_WorldWindow.method_2(), 0.0, Application.StartupPath + "\\GIS\\MappingHacks\\world_borders.shp", Color.FromArgb(90, Color.Yellow), 0.0, 100000.0);
			this.class2001_1.Initialize(Client.m_WorldWindow.GetDrawArgs());
			Client.m_WorldWindow.method_2().GetRenderableObjectList().Add(this.class2001_1);
			if (SimConfiguration.gameOptions.LogDebugInfoToFile())
			{
				string text = "Preparing SHP_NewWorldOrder done.";
				GameGeneral.Log(ref text);
			}
		}

		// Token: 0x0600715E RID: 29022 RVA: 0x0040B5A0 File Offset: 0x004097A0
		public void method_205()
		{
			this.class1994_0 = new Class1994("VE", Client.m_WorldWindow);
			this.class1994_0.Initialize(Client.m_WorldWindow.GetDrawArgs());
			Client.m_WorldWindow.method_2().GetRenderableObjectList().Add(this.class1994_0);
			this.MapBoxResize();
		}

		// Token: 0x0600715F RID: 29023 RVA: 0x0040B5F8 File Offset: 0x004097F8
		private void PrepareMapScaleLayer()
		{
			if (SimConfiguration.gameOptions.LogDebugInfoToFile())
			{
				string text = "Preparing MapScaleLayer.";
				GameGeneral.Log(ref text);
			}
			Class2538.Class2002 ro = new Class2538.Class2002(Client.m_WorldWindow.method_2(), Client.m_WorldWindow.GetDrawArgs());
			Client.m_WorldWindow.method_2().GetRenderableObjectList().Add(ro);
			if (SimConfiguration.gameOptions.LogDebugInfoToFile())
			{
				string text = "Preparing MapScaleLayer done.";
				GameGeneral.Log(ref text);
			}
		}

		// Token: 0x06007160 RID: 29024 RVA: 0x0040B66C File Offset: 0x0040986C
		private void PreparePlacenameSets()
		{
			if (SimConfiguration.gameOptions.LogDebugInfoToFile())
			{
				string text = "Preparing PlacenameSets.";
				GameGeneral.Log(ref text);
			}
			FontDescription fontDescription_ = new FontDescription();
			fontDescription_.FaceName = "Arial";
			fontDescription_.Height = 15;
			fontDescription_.Weight = FontWeight.Bold;
			fontDescription_.IsItalic = false;
			fontDescription_.Quality = FontQuality.AntiAliased;
			TiledPlacenameSet tiledPlacenameSet = new TiledPlacenameSet("Synoptic", Client.m_WorldWindow.method_2(), 1000.0, 10000000000.0, 1.0, Application.StartupPath + "\\WW\\PlacenameSets\\Synoptic\\Placename.txt", fontDescription_, Color.LightGray, "\\WW\\PlacenameSet\\");
			tiledPlacenameSet.Initialize(Client.m_WorldWindow.GetDrawArgs());
			Client.m_WorldWindow.method_2().GetRenderableObjectList().Add(tiledPlacenameSet);
			this.m_TiledPlacenameSets.Add(tiledPlacenameSet);
			fontDescription_ = new FontDescription();
			fontDescription_.FaceName = "Arial";
			fontDescription_.Height = 15;
			fontDescription_.Quality = FontQuality.AntiAliased;
			TiledPlacenameSet tiledPlacenameSet2 = new TiledPlacenameSet("Cities", Client.m_WorldWindow.method_2(), 500.0, 1000000.0, 1.0, Application.StartupPath + "\\WW\\PlacenameSets\\Cities\\Placename.txt", fontDescription_, Color.White, "\\WW\\PlacenameSet\\");
			tiledPlacenameSet2.Initialize(Client.m_WorldWindow.GetDrawArgs());
			Client.m_WorldWindow.method_2().GetRenderableObjectList().Add(tiledPlacenameSet2);
			this.m_TiledPlacenameSets.Add(tiledPlacenameSet2);
			if (SimConfiguration.gameOptions.LogDebugInfoToFile())
			{
				string text = "Preparing PlacenameSets done.";
				GameGeneral.Log(ref text);
			}
		}

		// Token: 0x06007161 RID: 29025 RVA: 0x0002F381 File Offset: 0x0002D581
		private void Click_About(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetAboutBox().Show();
		}

		// Token: 0x06007162 RID: 29026 RVA: 0x0040B804 File Offset: 0x00409A04
		private void Click_ToAirDetectRange(object sender, EventArgs e)
		{
			this.MenuItem_ToAirDetectRange.Checked = !this.MenuItem_ToAirDetectRange.Checked;
			if (this.MenuItem_ToAirDetectRange.Checked)
			{
				if (this.MenuItem_SR_SelectedUnit.Checked)
				{
					Client.GetMap().SetRSVisible_AASensor(MapProfile._UnitCoverage.const_1);
				}
				else if (this.MenuItem_SR_AllUnit.Checked)
				{
					Client.GetMap().SetRSVisible_AASensor(MapProfile._UnitCoverage.const_0);
				}
			}
			else
			{
				Client.GetMap().SetRSVisible_AASensor(MapProfile._UnitCoverage.const_2);
			}
			this.RenderMap();
		}

		// Token: 0x06007163 RID: 29027 RVA: 0x0040B888 File Offset: 0x00409A88
		private void Click_ToSurfaceDetectRange(object sender, EventArgs e)
		{
			this.MenuItem_ToSurfaceDetectRange.Checked = !this.MenuItem_ToSurfaceDetectRange.Checked;
			if (this.MenuItem_ToSurfaceDetectRange.Checked)
			{
				if (this.MenuItem_SR_SelectedUnit.Checked)
				{
					Client.GetMap().SetRSVisible_ASSensor(MapProfile._UnitCoverage.const_1);
				}
				else if (this.MenuItem_SR_AllUnit.Checked)
				{
					Client.GetMap().SetRSVisible_ASSensor(MapProfile._UnitCoverage.const_0);
				}
			}
			else
			{
				Client.GetMap().SetRSVisible_ASSensor(MapProfile._UnitCoverage.const_2);
			}
			this.RenderMap();
		}

		// Token: 0x06007164 RID: 29028 RVA: 0x0040B90C File Offset: 0x00409B0C
		private void Click_ToUnderWaterDetectRange(object sender, EventArgs e)
		{
			this.MenuItem_ToUnderWaterDetectRange.Checked = !this.MenuItem_ToUnderWaterDetectRange.Checked;
			if (this.MenuItem_ToUnderWaterDetectRange.Checked)
			{
				if (this.MenuItem_SR_SelectedUnit.Checked)
				{
					Client.GetMap().SetIsRSVisible_ASWSensor(MapProfile._UnitCoverage.const_1);
				}
				else if (this.MenuItem_SR_AllUnit.Checked)
				{
					Client.GetMap().SetIsRSVisible_ASWSensor(MapProfile._UnitCoverage.const_0);
				}
			}
			else
			{
				Client.GetMap().SetIsRSVisible_ASWSensor(MapProfile._UnitCoverage.const_2);
			}
			this.RenderMap();
		}

		// Token: 0x06007165 RID: 29029 RVA: 0x0040B990 File Offset: 0x00409B90
		private void Click_ToAirAttackRange(object sender, EventArgs e)
		{
			this.MenuItem_ToAirAttackRange.Checked = !this.MenuItem_ToAirAttackRange.Checked;
			if (this.MenuItem_ToAirAttackRange.Checked)
			{
				if (this.MenuItem_SR_SelectedUnit.Checked)
				{
					Client.GetMap().SetRSVisible_AAWeapon(MapProfile._UnitCoverage.const_1);
				}
				else if (this.MenuItem_SR_AllUnit.Checked)
				{
					Client.GetMap().SetRSVisible_AAWeapon(MapProfile._UnitCoverage.const_0);
				}
			}
			else
			{
				Client.GetMap().SetRSVisible_AAWeapon(MapProfile._UnitCoverage.const_2);
			}
			this.RenderMap();
		}

		// Token: 0x06007166 RID: 29030 RVA: 0x0040BA14 File Offset: 0x00409C14
		private void Click_ToSurfaceAttackRange(object sender, EventArgs e)
		{
			this.MenuItem_ToSurfaceAttackRange.Checked = !this.MenuItem_ToSurfaceAttackRange.Checked;
			if (this.MenuItem_ToSurfaceAttackRange.Checked)
			{
				if (this.MenuItem_SR_SelectedUnit.Checked)
				{
					Client.GetMap().SetRSVisible_ASWeapon(MapProfile._UnitCoverage.const_1);
				}
				else if (this.MenuItem_SR_AllUnit.Checked)
				{
					Client.GetMap().SetRSVisible_ASWeapon(MapProfile._UnitCoverage.const_0);
				}
			}
			else
			{
				Client.GetMap().SetRSVisible_ASWeapon(MapProfile._UnitCoverage.const_2);
			}
			this.RenderMap();
		}

		// Token: 0x06007167 RID: 29031 RVA: 0x0040BA98 File Offset: 0x00409C98
		private void Click_ToLandAttackRange(object sender, EventArgs e)
		{
			this.MenuItem_ToLandAttackRange.Checked = !this.MenuItem_ToLandAttackRange.Checked;
			if (this.MenuItem_ToLandAttackRange.Checked)
			{
				if (this.MenuItem_SR_SelectedUnit.Checked)
				{
					Client.GetMap().SetRSVisible_AGWeapon(MapProfile._UnitCoverage.const_1);
				}
				else if (this.MenuItem_SR_AllUnit.Checked)
				{
					Client.GetMap().SetRSVisible_AGWeapon(MapProfile._UnitCoverage.const_0);
				}
			}
			else
			{
				Client.GetMap().SetRSVisible_AGWeapon(MapProfile._UnitCoverage.const_2);
			}
			this.RenderMap();
		}

		// Token: 0x06007168 RID: 29032 RVA: 0x0040BB1C File Offset: 0x00409D1C
		private void Click_ToUnderwaterAttackRange(object sender, EventArgs e)
		{
			this.MenuItem_ToUnderwaterAttackRange.Checked = !this.MenuItem_ToUnderwaterAttackRange.Checked;
			if (this.MenuItem_ToUnderwaterAttackRange.Checked)
			{
				if (this.MenuItem_SR_SelectedUnit.Checked)
				{
					Client.GetMap().SetRSVisible_ASWWeapon(MapProfile._UnitCoverage.const_1);
				}
				else if (this.MenuItem_SR_AllUnit.Checked)
				{
					Client.GetMap().SetRSVisible_ASWWeapon(MapProfile._UnitCoverage.const_0);
				}
			}
			else
			{
				Client.GetMap().SetRSVisible_ASWWeapon(MapProfile._UnitCoverage.const_2);
			}
			this.RenderMap();
		}

		// Token: 0x06007169 RID: 29033 RVA: 0x0002F392 File Offset: 0x0002D592
		private void Click_LV_SelectedUnit(object sender, EventArgs e)
		{
			if (!this.MenuItem_LV_SelectedUnit.Checked)
			{
				Client.GetMap().SetShowIlluminationVectors(MapProfile._UnitCoverage.const_1);
				this.RenderMap();
			}
		}

		// Token: 0x0600716A RID: 29034 RVA: 0x0002F3B2 File Offset: 0x0002D5B2
		private void Click_LV_AllUnit(object sender, EventArgs e)
		{
			if (!this.MenuItem_LV_AllUnit.Checked)
			{
				Client.GetMap().SetShowIlluminationVectors(MapProfile._UnitCoverage.const_0);
				this.RenderMap();
			}
		}

		// Token: 0x0600716B RID: 29035 RVA: 0x0002F3D2 File Offset: 0x0002D5D2
		private void Click_LV_NotShow(object sender, EventArgs e)
		{
			if (!this.MenuItem_LV_NotShow.Checked)
			{
				Client.GetMap().SetShowIlluminationVectors(MapProfile._UnitCoverage.const_2);
				this.RenderMap();
			}
		}

		// Token: 0x0600716C RID: 29036 RVA: 0x0002F3F2 File Offset: 0x0002D5F2
		private void Click_TV_SelectedUnit(object sender, EventArgs e)
		{
			if (!this.MenuItem_TV_SelectedUnit.Checked)
			{
				Client.GetMap().SetShowTargetingVectors(MapProfile._UnitCoverage.const_1);
				this.RenderMap();
			}
		}

		// Token: 0x0600716D RID: 29037 RVA: 0x0002F412 File Offset: 0x0002D612
		private void Click_TV_AllUnit(object sender, EventArgs e)
		{
			if (!this.MenuItem_TV_AllUnit.Checked)
			{
				Client.GetMap().SetShowTargetingVectors(MapProfile._UnitCoverage.const_0);
				this.RenderMap();
			}
		}

		// Token: 0x0600716E RID: 29038 RVA: 0x0002F432 File Offset: 0x0002D632
		private void Click_TV_NotShow(object sender, EventArgs e)
		{
			if (!this.MenuItem_TV_NotShow.Checked)
			{
				Client.GetMap().SetShowTargetingVectors(MapProfile._UnitCoverage.const_2);
				this.RenderMap();
			}
		}

		// Token: 0x0600716F RID: 29039 RVA: 0x0002F452 File Offset: 0x0002D652
		private void Click_UPV_SelectedUnit(object sender, EventArgs e)
		{
			if (!this.MenuItem_UPV_SelectedUnit.Checked)
			{
				Client.GetMap().SetShowDatablocks(MapProfile._UnitCoverage.const_1);
				this.RenderMap();
			}
		}

		// Token: 0x06007170 RID: 29040 RVA: 0x0002F472 File Offset: 0x0002D672
		private void Click_UPV_AllUnit(object sender, EventArgs e)
		{
			if (!this.MenuItem_UPV_AllUnit.Checked)
			{
				Client.GetMap().SetShowDatablocks(MapProfile._UnitCoverage.const_0);
				this.RenderMap();
			}
		}

		// Token: 0x06007171 RID: 29041 RVA: 0x0002F492 File Offset: 0x0002D692
		private void Click_UPV_NotShow(object sender, EventArgs e)
		{
			if (!this.MenuItem_UPV_NotShow.Checked)
			{
				Client.GetMap().SetShowDatablocks(MapProfile._UnitCoverage.const_2);
				this.RenderMap();
			}
		}

		// Token: 0x06007172 RID: 29042 RVA: 0x0002F4B2 File Offset: 0x0002D6B2
		private void Click_DL_SelectedUnit(object sender, EventArgs e)
		{
			if (!this.MenuItem_DL_SelectedUnit.Checked)
			{
				Client.GetMap().SetShowDatalinks(MapProfile._UnitCoverage.const_1);
				this.RenderMap();
			}
		}

		// Token: 0x06007173 RID: 29043 RVA: 0x0002F4D2 File Offset: 0x0002D6D2
		private void Click_DL_AllUnit(object sender, EventArgs e)
		{
			if (!this.MenuItem_DL_AllUnit.Checked)
			{
				Client.GetMap().SetShowDatalinks(MapProfile._UnitCoverage.const_0);
				this.RenderMap();
			}
		}

		// Token: 0x06007174 RID: 29044 RVA: 0x0002F4F2 File Offset: 0x0002D6F2
		private void Click_DL_NotShow(object sender, EventArgs e)
		{
			if (!this.MenuItem_DL_NotShow.Checked)
			{
				Client.GetMap().SetShowDatalinks(MapProfile._UnitCoverage.const_2);
				this.RenderMap();
			}
		}

		// Token: 0x06007175 RID: 29045 RVA: 0x0002F512 File Offset: 0x0002D712
		private void Click_LatLonGrid(object sender, EventArgs e)
		{
			Client.GetMap().SetIsMapLatLonGridShown(!Client.GetMap().IsMapLatLonGridShown());
			this.RenderMap();
		}

		// Token: 0x06007176 RID: 29046 RVA: 0x0002F531 File Offset: 0x0002D731
		private void Click_BMNG(object sender, EventArgs e)
		{
			Client.GetMap().SetIsLayerBMNGShown(!Client.GetMap().IsLayerBMNGShown());
			this.RenderMap();
		}

		// Token: 0x06007177 RID: 29047 RVA: 0x0002F550 File Offset: 0x0002D750
		private void Click_ColorTopographic(object sender, EventArgs e)
		{
			Client.GetMap().SetIsLayerReliefShown(!Client.GetMap().IsLayerReliefShown());
			this.RenderMap();
		}

		// Token: 0x06007178 RID: 29048 RVA: 0x0002F56F File Offset: 0x0002D76F
		private void Click_ShowBorders(object sender, EventArgs e)
		{
			Client.GetMap().SetIsLayerBordersShown(!Client.GetMap().IsLayerBordersShown());
			this.RenderMap();
		}

		// Token: 0x06007179 RID: 29049 RVA: 0x0002F58E File Offset: 0x0002D78E
		private void Click_PlacenameLayer(object sender, EventArgs e)
		{
			Client.GetMap().SetIsLayerPlacenamesShown(!Client.GetMap().IsLayerPlacenamesShown());
			this.RenderMap();
		}

		// Token: 0x0600717A RID: 29050 RVA: 0x0002F5AD File Offset: 0x0002D7AD
		private void method_233(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetRegressionTests().Show();
		}

		// Token: 0x0600717B RID: 29051 RVA: 0x0002F5BE File Offset: 0x0002D7BE
		private void method_234(object sender, EventArgs e)
		{
			Client.SetDBUsedHash(Conversions.ToString(1));
			Client.smethod_86();
		}

		// Token: 0x0600717C RID: 29052 RVA: 0x0040BBA0 File Offset: 0x00409DA0
		private void Click_SM_ExportToFile(object sender, EventArgs e)
		{
			this.saveFileDialog_1.InitialDirectory = Application.StartupPath;
			this.saveFileDialog_1.FileName = "ScenExport.xml";
			if (this.saveFileDialog_1.ShowDialog() == DialogResult.OK)
			{
				FileStream fileStream = File.Create(this.saveFileDialog_1.FileName);
				MemoryStream memoryStream = new MemoryStream();
				bool flag = false;
				if (Client.GetConfiguration().GetSimStatus() == Configuration.EnumRunStop.const_Run)
				{
					flag = true;
					Client.GetConfiguration().SetSimStopMode();
				}
				memoryStream = GameGeneral.GetScenarioStream(Client.GetClientScenario());
				if (flag)
				{
					Client.GetConfiguration().SetSimRunMode();
				}
				fileStream.Write(memoryStream.ToArray(), 0, (int)memoryStream.Position);
				fileStream.Close();
			}
		}

		// Token: 0x0600717D RID: 29053 RVA: 0x0040BC4C File Offset: 0x00409E4C
		private void Click_SM_ImportForFile(object sender, EventArgs e)
		{
			this.openFileDialog_1.InitialDirectory = Application.StartupPath;
			this.openFileDialog_1.FileName = "ScenExport.xml";
			string text = "";
			if (this.openFileDialog_1.ShowDialog() == DialogResult.OK)
			{
				string fileName = this.openFileDialog_1.FileName;
				double num = 0.0;
				Client.SetClientScenario(Scenario.XmlScenLoad(fileName, ref text, ref num), false);
				Client.GetConfiguration().SetSimStopMode();
			}
			if (!string.IsNullOrEmpty(text))
			{
				Interaction.MsgBox(text, MsgBoxStyle.Exclamation, null);
			}
		}

		// Token: 0x0600717E RID: 29054 RVA: 0x0002F5D0 File Offset: 0x0002D7D0
		private void Click_MissionEditor(object sender, EventArgs e)
		{
			if (Information.IsNothing(Client.GetClientSide()))
			{
				Interaction.MsgBox("请先选择一个推演方.", MsgBoxStyle.OkOnly, "没选推演方!");
			}
			else
			{
				Client.GetMissionEditor().Show();
			}
		}

		// Token: 0x0600717F RID: 29055 RVA: 0x0040BCD4 File Offset: 0x00409ED4
		private void Click_DeleteOurSideAllUnit(object sender, EventArgs e)
		{
			if (Interaction.MsgBox("您确定吗?", MsgBoxStyle.OkCancel, null) == MsgBoxResult.Ok)
			{
				List<ActiveUnit> list = new List<ActiveUnit>();
				foreach (ActiveUnit current in Client.GetClientScenario().GetActiveUnits().Values)
				{
					if (current.GetSide(false) == Client.GetClientSide())
					{
						list.Add(current);
					}
				}
				using (List<ActiveUnit>.Enumerator enumerator2 = list.GetEnumerator())
				{
					while (enumerator2.MoveNext())
					{
						enumerator2.Current.DestroyUnit(true, false, false);
					}
				}
				Client.b_Completed = true;
				this.MapBoxResize();
			}
		}

		// Token: 0x06007180 RID: 29056 RVA: 0x0002F5FE File Offset: 0x0002D7FE
		private void Click_NewMission(object sender, EventArgs e)
		{
			if (Information.IsNothing(Client.GetClientSide()))
			{
				Interaction.MsgBox("请先选择一个推演方.", MsgBoxStyle.OkOnly, "没选推演方!");
			}
			else
			{
				Client.newMission.Show();
			}
		}

		// Token: 0x06007181 RID: 29057 RVA: 0x0002F62C File Offset: 0x0002D82C
		private void Click_Unit_SelectNewBase(object sender, EventArgs e)
		{
			Client.IssueOrdersToUnit(Client._CommandOrder.SetBaseForUnit);
		}

		// Token: 0x06007182 RID: 29058 RVA: 0x0040BDA8 File Offset: 0x00409FA8
		private void Click_SM_TransformToXML(object sender, EventArgs e)
		{
			this.openFileDialog_1.InitialDirectory = GameGeneral.strScenariosDir;
			if (this.openFileDialog_1.ShowDialog() == DialogResult.OK)
			{
				ScenContainer scenContainer = ScenContainer.smethod_2(this.openFileDialog_1.FileName);
				string xml = "";
				int compressVersion = scenContainer.CompressVersion;
				if (compressVersion != 1)
				{
					if (compressVersion == 2)
					{
						xml = scenContainer.method_1();
					}
				}
				else
				{
					xml = scenContainer.method_0();
				}
				xml = Misc.smethod_4(xml);
				XmlDocument xmlDocument = new XmlDocument();
				xmlDocument.LoadXml(xml);
				xmlDocument.Save(new XmlTextWriter(this.openFileDialog_1.FileName + ".xml", Encoding.UTF8)
				{
					Formatting = Formatting.Indented
				});
				Interaction.MsgBox("想定导出到: " + this.openFileDialog_1.FileName + ".xml", MsgBoxStyle.OkOnly, null);
			}
		}

		// Token: 0x06007183 RID: 29059 RVA: 0x0002F634 File Offset: 0x0002D834
		private void WorldMapBox_Resize(object sender, EventArgs e)
		{
			if (Client.b_MainForm_Shown)
			{
				this.MapBoxResize();
			}
		}

		// Token: 0x06007184 RID: 29060 RVA: 0x0002F646 File Offset: 0x0002D846
		private void Click_AddReferencePoint(object sender, EventArgs e)
		{
			Client.IssueOrdersToUnit(Client._CommandOrder.AddReferencePoint);
			this.referencePoint_0 = null;
		}

		// Token: 0x06007185 RID: 29061 RVA: 0x0002F655 File Offset: 0x0002D855
		private void Click_DeleteSelectedRefPoint(object sender, EventArgs e)
		{
			this.method_52();
		}

		// Token: 0x06007186 RID: 29062 RVA: 0x0040BE80 File Offset: 0x0040A080
		private void method_245()
		{
			Client.GetClientScenario().ClearMessageLog();
			if (SimConfiguration.gameOptions.IsMessageLogInWindow() && CommandFactory.GetCommandMain().GetMessageLogWindow().Visible)
			{
				CommandFactory.GetCommandMain().GetMessageLogWindow().method_1();
			}
			this.RefreshMap();
		}

		// Token: 0x06007187 RID: 29063 RVA: 0x0002F65D File Offset: 0x0002D85D
		private void Click_ClearMessageLog(object sender, EventArgs e)
		{
			this.method_245();
		}

		// Token: 0x06007188 RID: 29064 RVA: 0x0002F665 File Offset: 0x0002D865
		private void Click_PrintToFile(object sender, EventArgs e)
		{
			Client.AALogPrintToFile();
		}

		// Token: 0x06007189 RID: 29065 RVA: 0x0002F646 File Offset: 0x0002D846
		private void Click_AU_AddRefPoint(object sender, EventArgs e)
		{
			Client.IssueOrdersToUnit(Client._CommandOrder.AddReferencePoint);
			this.referencePoint_0 = null;
		}

		// Token: 0x0600718A RID: 29066 RVA: 0x00004BC2 File Offset: 0x00002DC2
		private void method_249(object sender, EventArgs e)
		{
		}

		// Token: 0x0600718B RID: 29067 RVA: 0x0002F66C File Offset: 0x0002D86C
		private void Click_RelativeSelectedRefPoint_FixedBearing(object sender, EventArgs e)
		{
			Client.orientationType_0 = ReferencePoint.OrientationType.Fixed;
			Client.IssueOrdersToUnit(Client._CommandOrder.SelectRelativeObject);
		}

		// Token: 0x0600718C RID: 29068 RVA: 0x0040BED0 File Offset: 0x0040A0D0
		private void MouseEnter_MissionAndReferencePoint(object sender, EventArgs e)
		{
			this.MenuItem_AddReferencePoint.Enabled = !Information.IsNothing(Client.GetClientSide());
			this.MenuItem_DeleteSelectedRefPoint.Enabled = !Information.IsNothing(Client.GetClientSide());
			this.MenuItem_RelativeSelectedRefPoint_FixedBearing.Enabled = !Information.IsNothing(Client.GetClientSide());
		}

		// Token: 0x0600718D RID: 29069 RVA: 0x0040BF28 File Offset: 0x0040A128
		private void Click_Unit_SE_AutoDetectedUnit(object sender, EventArgs e)
		{
			ToolStripMenuItem tSMI_UnitIsAutodetectable;
			bool @checked = (tSMI_UnitIsAutodetectable = this.MenuItem_Unit_SE_AutoDetectedUnit).Checked;
			this.method_445(ref @checked);
			tSMI_UnitIsAutodetectable.Checked = @checked;
		}

		// Token: 0x0600718E RID: 29070 RVA: 0x0040BF54 File Offset: 0x0040A154
		public void RenderMap()
		{
			MapProfile map = Client.GetMap();
			if (Client.GetConfiguration().GetGameMode() != Configuration._GameMode.Edit)
			{
				map.SetIsGodsEyeView(false);
			}
			this.MenuItem_ToAirDetectRange.Checked = (map.GetRSVisible_AASensor() != MapProfile._UnitCoverage.const_2);
			this.MenuItem_ToAirAttackRange.Checked = (map.GetRSVisible_AAWeapon() != MapProfile._UnitCoverage.const_2);
			this.MenuItem_ToSurfaceDetectRange.Checked = (map.GetRSVisible_ASSensor() != MapProfile._UnitCoverage.const_2);
			this.MenuItem_ToSurfaceAttackRange.Checked = (map.GetRSVisible_ASWeapon() != MapProfile._UnitCoverage.const_2);
			this.MenuItem_ToLandAttackRange.Checked = (map.GetRSVisible_AGWeapon() != MapProfile._UnitCoverage.const_2);
			this.MenuItem_ToUnderWaterDetectRange.Checked = (map.GetRSVisible_ASWSensor() != MapProfile._UnitCoverage.const_2);
			this.MenuItem_ToUnderwaterAttackRange.Checked = (map.GetRSVisible_ASWWeapon() != MapProfile._UnitCoverage.const_2);
			this.MenuItem_MergeShowRange.Checked = map.IsMergeRangesymbols();
			this.MenuItem_ShowNonfriendlyRange.Checked = map.IsShowNonFriendly();
			this.MenuItem_LonLatGrid.Checked = map.IsMapLatLonGridShown();
			this.MenuItem_BMNG.Checked = map.IsLayerBMNGShown();
			this.MenuItem_ColorTopographic.Checked = map.IsLayerReliefShown();
			this.MenuItem_ShowBorders.Checked = map.IsLayerBordersShown();
			this.MenuItem_PlacenameLayer.Checked = map.IsLayerPlacenamesShown();
			this.MenuItem_DayNightLight.Checked = map.IsDayNightLighting();
			switch (map.GetShowDatalinks())
			{
			case MapProfile._UnitCoverage.const_0:
				this.MenuItem_DL_SelectedUnit.Checked = false;
				this.MenuItem_DL_AllUnit.Checked = true;
				this.MenuItem_DL_NotShow.Checked = false;
				break;
			case MapProfile._UnitCoverage.const_1:
				this.MenuItem_DL_SelectedUnit.Checked = true;
				this.MenuItem_DL_AllUnit.Checked = false;
				this.MenuItem_DL_NotShow.Checked = false;
				break;
			case MapProfile._UnitCoverage.const_2:
				this.MenuItem_DL_SelectedUnit.Checked = false;
				this.MenuItem_DL_AllUnit.Checked = false;
				this.MenuItem_DL_NotShow.Checked = true;
				break;
			}
			switch (map.GetShowDatablocks())
			{
			case MapProfile._UnitCoverage.const_0:
				this.MenuItem_UPV_SelectedUnit.Checked = false;
				this.MenuItem_UPV_AllUnit.Checked = true;
				this.MenuItem_UPV_NotShow.Checked = false;
				break;
			case MapProfile._UnitCoverage.const_1:
				this.MenuItem_UPV_SelectedUnit.Checked = true;
				this.MenuItem_UPV_AllUnit.Checked = false;
				this.MenuItem_UPV_NotShow.Checked = false;
				break;
			case MapProfile._UnitCoverage.const_2:
				this.MenuItem_UPV_SelectedUnit.Checked = false;
				this.MenuItem_UPV_AllUnit.Checked = false;
				this.MenuItem_UPV_NotShow.Checked = true;
				break;
			}
			switch (map.GetShowTargetingVectors())
			{
			case MapProfile._UnitCoverage.const_0:
				this.MenuItem_TV_SelectedUnit.Checked = false;
				this.MenuItem_TV_AllUnit.Checked = true;
				this.MenuItem_TV_NotShow.Checked = false;
				break;
			case MapProfile._UnitCoverage.const_1:
				this.MenuItem_TV_SelectedUnit.Checked = true;
				this.MenuItem_TV_AllUnit.Checked = false;
				this.MenuItem_TV_NotShow.Checked = false;
				break;
			case MapProfile._UnitCoverage.const_2:
				this.MenuItem_TV_SelectedUnit.Checked = false;
				this.MenuItem_TV_AllUnit.Checked = false;
				this.MenuItem_TV_NotShow.Checked = true;
				break;
			}
			switch (map.GetShowIlluminationVectors())
			{
			case MapProfile._UnitCoverage.const_0:
				this.MenuItem_LV_SelectedUnit.Checked = false;
				this.MenuItem_LV_AllUnit.Checked = true;
				this.MenuItem_LV_NotShow.Checked = false;
				break;
			case MapProfile._UnitCoverage.const_1:
				this.MenuItem_LV_SelectedUnit.Checked = true;
				this.MenuItem_LV_AllUnit.Checked = false;
				this.MenuItem_LV_NotShow.Checked = false;
				break;
			case MapProfile._UnitCoverage.const_2:
				this.MenuItem_LV_SelectedUnit.Checked = false;
				this.MenuItem_LV_AllUnit.Checked = false;
				this.MenuItem_LV_NotShow.Checked = true;
				break;
			}
			switch (map.GetShowContactEmissions())
			{
			case MapProfile._UnitCoverage.const_0:
				this.MenuItem_CE_SelectedTarget.Checked = false;
				this.MenuItem_CE_AllTarget.Checked = true;
				this.MenuItem_CE_NotShow.Checked = false;
				break;
			case MapProfile._UnitCoverage.const_1:
				this.MenuItem_CE_SelectedTarget.Checked = true;
				this.MenuItem_CE_AllTarget.Checked = false;
				this.MenuItem_CE_NotShow.Checked = false;
				break;
			case MapProfile._UnitCoverage.const_2:
				this.MenuItem_CE_SelectedTarget.Checked = false;
				this.MenuItem_CE_AllTarget.Checked = false;
				this.MenuItem_CE_NotShow.Checked = true;
				break;
			}
			switch (map.GetShowContactEmissions_Details())
			{
			case MapProfile.Enum56.const_0:
				this.MenuItem_CE_AllEmissions.Checked = true;
				this.MenuItem_CE_OnlyFCR.Checked = false;
				this.MenuItem_CE_SelectedShowAllRestOnlyFCR.Checked = false;
				break;
			case MapProfile.Enum56.const_1:
				this.MenuItem_CE_AllEmissions.Checked = false;
				this.MenuItem_CE_OnlyFCR.Checked = true;
				this.MenuItem_CE_SelectedShowAllRestOnlyFCR.Checked = false;
				break;
			case MapProfile.Enum56.const_2:
				this.MenuItem_CE_AllEmissions.Checked = false;
				this.MenuItem_CE_OnlyFCR.Checked = false;
				this.MenuItem_CE_SelectedShowAllRestOnlyFCR.Checked = true;
				break;
			}
			switch (map.GetShowRangeSymbols())
			{
			case MapProfile._UnitCoverage.const_0:
				this.MenuItem_SR_SelectedUnit.Checked = false;
				this.MenuItem_SR_AllUnit.Checked = true;
				this.MenuItem_SR_NotShow.Checked = false;
				break;
			case MapProfile._UnitCoverage.const_1:
				this.MenuItem_SR_SelectedUnit.Checked = true;
				this.MenuItem_SR_AllUnit.Checked = false;
				this.MenuItem_SR_NotShow.Checked = false;
				break;
			case MapProfile._UnitCoverage.const_2:
				this.MenuItem_SR_SelectedUnit.Checked = false;
				this.MenuItem_SR_AllUnit.Checked = false;
				this.MenuItem_SR_NotShow.Checked = true;
				break;
			}
			switch (SimConfiguration.gameOptions.GetSonobuoyVisibility())
			{
			case Configuration.GameOptions._SonobuoyVisibility.const_0:
				this.MenuItem_SV_Common.Checked = true;
				this.MenuItem_SV_Virtual.Checked = false;
				this.MenuItem_SV_NotShow.Checked = false;
				break;
			case Configuration.GameOptions._SonobuoyVisibility.const_1:
				this.MenuItem_SV_Common.Checked = false;
				this.MenuItem_SV_Virtual.Checked = true;
				this.MenuItem_SV_NotShow.Checked = false;
				break;
			case Configuration.GameOptions._SonobuoyVisibility.const_2:
				this.MenuItem_SV_Common.Checked = false;
				this.MenuItem_SV_Virtual.Checked = false;
				this.MenuItem_SV_NotShow.Checked = true;
				break;
			}
			switch (SimConfiguration.gameOptions.GetRefPointVisibility())
			{
			case Configuration.GameOptions._RefPointVisibility.const_0:
				this.MenuItem_RPV_Common.Checked = true;
				this.MenuItem_RPV_Small.Checked = false;
				this.MenuItem_RPV_NotShow.Checked = false;
				break;
			case Configuration.GameOptions._RefPointVisibility.const_1:
				this.MenuItem_RPV_Common.Checked = false;
				this.MenuItem_RPV_Small.Checked = true;
				this.MenuItem_RPV_NotShow.Checked = false;
				break;
			case Configuration.GameOptions._RefPointVisibility.const_2:
				this.MenuItem_RPV_Common.Checked = false;
				this.MenuItem_RPV_Small.Checked = false;
				this.MenuItem_RPV_NotShow.Checked = true;
				break;
			}
			switch (SimConfiguration.gameOptions.ShowGhostedGroupMembers())
			{
			case Configuration.GameOptions._ShowGhostedGroupMembers.ALL:
				this.MenuItem_GM_SelectedGroup.Checked = false;
				this.MenuItem_GM_AllGroup.Checked = true;
				this.MenuItem_GM_NotShow.Checked = false;
				break;
			case Configuration.GameOptions._ShowGhostedGroupMembers.SEL:
				this.MenuItem_GM_SelectedGroup.Checked = true;
				this.MenuItem_GM_AllGroup.Checked = false;
				this.MenuItem_GM_NotShow.Checked = false;
				break;
			case Configuration.GameOptions._ShowGhostedGroupMembers.NONE:
				this.MenuItem_GM_SelectedGroup.Checked = false;
				this.MenuItem_GM_AllGroup.Checked = false;
				this.MenuItem_GM_NotShow.Checked = true;
				break;
			}
			switch (SimConfiguration.gameOptions.GetShowPlottedPaths())
			{
			case Configuration.GameOptions.Enum45.const_0:
				this.MenuItem_AU_AddUnit54.Checked = false;
				this.MenuItem_PC_AllUnit.Checked = true;
				this.MenuItem_PC_NotShow.Checked = false;
				break;
			case Configuration.GameOptions.Enum45.const_1:
				this.MenuItem_AU_AddUnit54.Checked = true;
				this.MenuItem_PC_AllUnit.Checked = false;
				this.MenuItem_PC_NotShow.Checked = false;
				break;
			case Configuration.GameOptions.Enum45.const_2:
				this.MenuItem_AU_AddUnit54.Checked = false;
				this.MenuItem_PC_AllUnit.Checked = false;
				this.MenuItem_PC_NotShow.Checked = true;
				break;
			}
			switch (SimConfiguration.gameOptions.GetShowFlightPlans_Airborne())
			{
			case Configuration.GameOptions._ShowFlightPlans_Airborne.const_0:
				this.toolStripMenuItem_362.Checked = false;
				this.toolStripMenuItem_363.Checked = true;
				this.toolStripMenuItem_364.Checked = false;
				break;
			case Configuration.GameOptions._ShowFlightPlans_Airborne.const_1:
				this.toolStripMenuItem_362.Checked = true;
				this.toolStripMenuItem_363.Checked = false;
				this.toolStripMenuItem_364.Checked = false;
				break;
			case Configuration.GameOptions._ShowFlightPlans_Airborne.const_2:
				this.toolStripMenuItem_362.Checked = false;
				this.toolStripMenuItem_363.Checked = false;
				this.toolStripMenuItem_364.Checked = true;
				break;
			}
			this.MenuItem_MAOC_SelectedMission.Checked = (SimConfiguration.gameOptions.ShowMissionArea() == Configuration.GameOptions._ShowMissionArea.const_1);
			this.MenuItem_MAOC_AllMission.Checked = (SimConfiguration.gameOptions.ShowMissionArea() == Configuration.GameOptions._ShowMissionArea.const_0);
			this.MenuItem_MAOC_NotShow.Checked = (SimConfiguration.gameOptions.ShowMissionArea() == Configuration.GameOptions._ShowMissionArea.const_2);
			Client.m_WorldWindow.vmethod_0(map.IsMapLatLonGridShown());
			if (map.IsLayerBMNGShown())
			{
				Client.m_WorldWindow.method_2().GetRenderableObjectList().vmethod_18("BMNG").SetOpacity(255);
				Client.m_WorldWindow.method_2().GetRenderableObjectList().vmethod_18("BaseLayer").SetOpacity(255);
			}
			else
			{
				Client.m_WorldWindow.method_2().GetRenderableObjectList().vmethod_18("BMNG").SetOpacity(1);
				Client.m_WorldWindow.method_2().GetRenderableObjectList().vmethod_18("BaseLayer").SetOpacity(1);
			}
			if (map.IsLayerReliefShown())
			{
				Client.m_WorldWindow.method_2().GetRenderableObjectList().vmethod_18("Relief").SetOpacity(255);
			}
			else
			{
				Client.m_WorldWindow.method_2().GetRenderableObjectList().vmethod_18("Relief").SetOpacity(1);
			}
			using (List<TiledPlacenameSet>.Enumerator enumerator = this.m_TiledPlacenameSets.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					enumerator.Current.SetIsOn(SimConfiguration.gameOptions.GetPlacenameVisibility());
				}
			}
			World.Settings.SetIsEnableSunShading(map.IsDayNightLighting());
			this.MenuItem_DirectorView.Checked = map.IsGodsEyeView();
			this.MapBoxResize();
			Application.DoEvents();
		}

		// Token: 0x0600718F RID: 29071 RVA: 0x0040C8F8 File Offset: 0x0040AAF8
		public void method_254(Subject class137_0, ref ReadOnlyCollection<Unit> readOnlyCollection_0, ref Collection<ActiveUnit> collection_1, bool bool_13)
		{
			DoctrineForm doctrineForm = new DoctrineForm();
			doctrineForm.bool_0 = bool_13;
			if (!Information.IsNothing(collection_1))
			{
				if (collection_1.Count == 1)
				{
					if (!collection_1[0].IsContact() && collection_1[0].GetSide(false) == Client.GetClientSide())
					{
						doctrineForm.subject = collection_1[0];
						doctrineForm.ActiveUnitCollection = null;
					}
				}
				else
				{
					doctrineForm.ActiveUnitCollection = new Collection<ActiveUnit>();
					doctrineForm.bool_3 = true;
					foreach (ActiveUnit current in collection_1)
					{
						if (!current.IsContact() && current.GetSide(false) == Client.GetClientSide())
						{
							doctrineForm.ActiveUnitCollection.Add(current);
						}
					}
					doctrineForm.subject = null;
				}
			}
			else if (!Information.IsNothing(readOnlyCollection_0) && readOnlyCollection_0.Count > 1)
			{
				doctrineForm.ActiveUnitCollection = new Collection<ActiveUnit>();
				foreach (Unit current2 in readOnlyCollection_0)
				{
					if (!current2.IsContact() && current2.GetSide(false) == Client.GetClientSide() && !current2.IsWeapon)
					{
						ActiveUnit item = (ActiveUnit)current2;
						doctrineForm.ActiveUnitCollection.Add(item);
					}
				}
				doctrineForm.subject = null;
			}
			else if (!Information.IsNothing(class137_0))
			{
				if (class137_0.IsActiveUnit())
				{
					ActiveUnit activeUnit = (ActiveUnit)class137_0;
					if (!activeUnit.IsContact() && activeUnit.GetSide(false) == Client.GetClientSide())
					{
						doctrineForm.subject = class137_0;
					}
				}
				else if (class137_0.GetType() == typeof(Side))
				{
					doctrineForm.subject = class137_0;
				}
				else if (class137_0.GetType() == typeof(Waypoint))
				{
					doctrineForm.subject = class137_0;
				}
			}
			if (!Information.IsNothing(doctrineForm.subject) || (!Information.IsNothing(doctrineForm.ActiveUnitCollection) && doctrineForm.ActiveUnitCollection.Count != 0) || Information.IsNothing(class137_0) || class137_0.GetType() == typeof(Side))
			{
				if (!Information.IsNothing(doctrineForm.subject))
				{
					if (doctrineForm.subject.GetType() == typeof(Group))
					{
						Group group = (Group)doctrineForm.subject;
						if (!Information.IsNothing(group.GetGroupLead()))
						{
							doctrineForm.bool_5 = group.GetGroupLead().GetAI().IsEscort;
						}
						else
						{
							doctrineForm.bool_5 = false;
						}
					}
					else if (doctrineForm.subject.GetType() == typeof(ActiveUnit))
					{
						doctrineForm.bool_5 = ((ActiveUnit)doctrineForm.subject).GetAI().IsEscort;
					}
				}
				doctrineForm.Show();
			}
		}

		// Token: 0x06007190 RID: 29072 RVA: 0x0040CC20 File Offset: 0x0040AE20
		private void Click_Unit_Doctrine_RoE_EMCON(object sender, EventArgs e)
		{
			Subject hookedUnit = Client.GetHookedUnit();
			ReadOnlyCollection<Unit> unitReadOnlyCollection = Client.GetClientSide().GetUnitReadOnlyCollection();
			Collection<ActiveUnit> collection = null;
			this.method_254(hookedUnit, ref unitReadOnlyCollection, ref collection, true);
		}

		// Token: 0x06007191 RID: 29073 RVA: 0x0040CC4C File Offset: 0x0040AE4C
		private void Click_Unit_SE_SetBearing(object sender, EventArgs e)
		{
			new FixedFacilityOrientation
			{
				activeUnit_0 = (ActiveUnit)Client.GetHookedUnit()
			}.Show();
		}

		// Token: 0x06007192 RID: 29074 RVA: 0x0040CC78 File Offset: 0x0040AE78
		private void method_257()
		{
			this.method_261();
			this.method_161();
			string string_;
			if (string.IsNullOrEmpty(Client.GetClientScenario().CampaignID))
			{
				string_ = Client.GetClientScenario().GetScenarioTitle();
			}
			else if (Client.GetClientScenario().IsCampaignSession())
			{
				string_ = Client.GetClientScenario().GetScenarioTitle() + " (Campaign Play)";
			}
			else
			{
				string_ = Client.GetClientScenario().GetScenarioTitle() + " (Standalone Play)";
			}
			this.method_352(Client.GetClientScenario(), string_);
			this.MapBoxResize();
		}

		// Token: 0x06007193 RID: 29075 RVA: 0x0040CD08 File Offset: 0x0040AF08
		public void method_258()
		{
			IEnumerator enumerator = this.MenuItem_DB_ChangeDB.DropDownItems.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					ToolStripMenuItem toolStripMenuItem = (ToolStripMenuItem)enumerator.Current;
					if (Operators.CompareString(Conversions.ToString(toolStripMenuItem.Tag), Client.GetDBRecord().Hash, false) == 0)
					{
						toolStripMenuItem.Checked = true;
					}
					else
					{
						toolStripMenuItem.Checked = false;
					}
				}
			}
			finally
			{
				if (enumerator is IDisposable)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		// Token: 0x06007194 RID: 29076 RVA: 0x0040CD9C File Offset: 0x0040AF9C
		private void method_259(object sender, EventArgs e)
		{
			new DoctrineForm
			{
				subject = Client.GetWayPointSelected()
			}.Show();
		}

		// Token: 0x06007195 RID: 29077 RVA: 0x0040CDC0 File Offset: 0x0040AFC0
		private void AddDBRecordsDropDownItems()
		{
			this.MenuItem_DB_ChangeDB.DropDownItems.Clear();
			foreach (DBRecord current in DBOps.GetUnregisteredDBRecords())
			{
				if (current.ExistsDBFile())
				{
					new ToolStripMenuItem();
					((ToolStripMenuItem)this.MenuItem_DB_ChangeDB.DropDownItems.Add(current.DBName, null, new EventHandler(this.method_144))).Tag = current.Hash;
				}
			}
			foreach (DBRecord current2 in DBOps.GetOfficialDBRecords())
			{
				if ((current2.ExistsDBFile() ? current2.IsSupported : new bool?(false)).GetValueOrDefault())
				{
					new ToolStripMenuItem();
					((ToolStripMenuItem)this.MenuItem_DB_ChangeDB.DropDownItems.Add(current2.DBName, null, new EventHandler(this.method_144))).Tag = current2.Hash;
				}
			}
			this.method_258();
			this.bool_3 = true;
		}

		// Token: 0x06007196 RID: 29078 RVA: 0x0040CF00 File Offset: 0x0040B100
		public void method_261()
		{
			this.MenuItem_SwitchToRole.DropDownItems.Clear();
			foreach (Side current in Client.GetClientScenario().GetSides().OrderBy(MainForm.SideFunc30))
			{
				ToolStripMenuItem toolStripMenuItem = (ToolStripMenuItem)this.MenuItem_SwitchToRole.DropDownItems.Add(current.GetSideName(), null, new EventHandler(this.SwitchToRole));
				if (current == Client.GetClientSide())
				{
					toolStripMenuItem.Checked = true;
				}
			}
			this.MenuItem_SwitchToRole.Enabled = (this.MenuItem_SwitchToRole.DropDownItems.Count > 0);
		}

		// Token: 0x06007197 RID: 29079 RVA: 0x0040CFC4 File Offset: 0x0040B1C4
		public void method_262()
		{
			this.MenuItem_QuickJump.DropDownItems.Clear();
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				IEnumerable<KeyValuePair<byte, QuickJumpSlot>> enumerable = Client.GetClientSide().QuickJumpSlots.OrderBy(MainForm.KeyValuePairFunc31);
				foreach (KeyValuePair<byte, QuickJumpSlot> current in enumerable)
				{
					QuickJumpSlot value = current.Value;
					string text = "";
					string left = value.LS.Split(new char[]
					{
						'_'
					})[0];
					if (Operators.CompareString(left, "AU", false) != 0)
					{
						if (Operators.CompareString(left, "Con", false) == 0)
						{
							Contact contact = null;
							Client.GetClientSide().GetContactObservableDictionary().TryGetValue(value.LS.Split(new char[]
							{
								'_'
							})[1], ref contact);
							if (!Information.IsNothing(contact))
							{
								text = "目标: " + contact.Name;
							}
							else
							{
								text = "目标: [已经失效]";
							}
						}
					}
					else
					{
						ActiveUnit activeUnit = null;
						Client.GetClientScenario().GetActiveUnits().TryGetValue(value.LS.Split(new char[]
						{
							'_'
						})[1], ref activeUnit);
						if (!Information.IsNothing(activeUnit))
						{
							text = "作战单元: " + activeUnit.Name;
						}
						else
						{
							text = "作战单元: [已经失效]";
						}
					}
					ToolStripMenuItem toolStripMenuItem = (ToolStripMenuItem)this.MenuItem_QuickJump.DropDownItems.Add(text, null, new EventHandler(this.method_263));
					toolStripMenuItem.Tag = value;
					toolStripMenuItem.ShortcutKeyDisplayString = value.I.ToString();
				}
			}
			this.MenuItem_QuickJump.Enabled = (this.MenuItem_QuickJump.DropDownItems.Count > 0);
		}

		// Token: 0x06007198 RID: 29080 RVA: 0x0040D1B8 File Offset: 0x0040B3B8
		private void method_263(object sender, EventArgs e)
		{
			QuickJumpSlot quickJumpSlot = (QuickJumpSlot)(sender as ToolStripMenuItem).Tag;
			this.method_463(quickJumpSlot.I);
		}

		// Token: 0x06007199 RID: 29081 RVA: 0x0040D1E4 File Offset: 0x0040B3E4
		public void method_264()
		{
			Class681 @class = Class739.smethod_1(this.toolStripComboBox_0.ComboBox);
			int timeCompression = Client.GetClientScenario().GetTimeCompression();
			if (timeCompression <= 30)
			{
				switch (timeCompression)
				{
				case 1:
					@class.method_6(0);
					break;
				case 2:
					@class.method_6(1);
					break;
				case 3:
				case 4:
					break;
				case 5:
					@class.method_6(2);
					break;
				default:
					if (timeCompression == 15)
					{
						@class.method_6(3);
					}
					else if (timeCompression == 30)
					{
						@class.method_6(4);
					}
					break;
				}
			}
			else if (timeCompression <= 300)
			{
				if (timeCompression == 60)
				{
					@class.method_6(5);
				}
				else if (timeCompression == 300)
				{
					@class.method_6(6);
				}
			}
			else if (timeCompression == 900)
			{
				@class.method_6(7);
			}
			else if (timeCompression == 1800)
			{
				@class.method_6(8);
			}
		}

		// Token: 0x0600719A RID: 29082 RVA: 0x0002F67B File Offset: 0x0002D87B
		private void Click_LossesAndExpenditures(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				CommandFactory.GetCommandMain().GetLosses().Show();
			}
		}

		// Token: 0x0600719B RID: 29083 RVA: 0x0002F698 File Offset: 0x0002D898
		private void Click_ScenarioTime(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetTimesAndDuration().Show();
		}

		// Token: 0x0600719C RID: 29084 RVA: 0x0002F6A9 File Offset: 0x0002D8A9
		private void Click_Score(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				CommandFactory.GetCommandMain().GetEvaluation().Show();
			}
		}

		// Token: 0x0600719D RID: 29085 RVA: 0x0040D2CC File Offset: 0x0040B4CC
		private void Click_TSMI_Recorder(object sender, EventArgs e)
		{
			if (!LicenseChecker.HoldLicense(LicenseChecker.License.CMANOBase) && !GameGeneral.bProfessionEdition)
			{
				CommandFactory.GetCommandMain().GetInsufficientLicenseWindow().license = LicenseChecker.License.CMANOBase;
				CommandFactory.GetCommandMain().GetInsufficientLicenseWindow().Show();
			}
			else
			{
				Client.StartRecord(false);
				Client.recorderForm = new RecorderForm();
				Client.recorderForm.Show();
			}
		}

		// Token: 0x0600719E RID: 29086 RVA: 0x0002F6C6 File Offset: 0x0002D8C6
		private void BtnClick_VideoRecord(object sender, EventArgs e)
		{
			if (Client.IsRecorderStarted())
			{
				Client.StartRecord(false);
			}
			else
			{
				Client.m_ScenarioSnapshots = Recorder.GetScenarioSnapshots(null, null);
				Client.StartRecord(true);
			}
		}

		// Token: 0x0600719F RID: 29087 RVA: 0x0040D328 File Offset: 0x0040B528
		private void Click_SA_CreateTemplate(object sender, EventArgs e)
		{
			this.saveFileDialog_2.InitialDirectory = Application.StartupPath;
			this.saveFileDialog_2.FileName = Client.GetClientScenario().GetScenarioTitle() + ".ini";
			if (this.saveFileDialog_2.ShowDialog() == DialogResult.OK)
			{
				FileStream fileStream = File.Create(this.saveFileDialog_2.FileName);
				Stream1 stream = new Stream1();
				ScenarioUnits.Save(Client.GetClientScenario(), stream);
				fileStream.Write(stream.ToArray(), 0, (int)stream.Position);
				fileStream.Close();
				Interaction.MsgBox("特殊行为模板文件生成完毕!", MsgBoxStyle.OkOnly, null);
			}
		}

		// Token: 0x060071A0 RID: 29088 RVA: 0x0040D3C0 File Offset: 0x0040B5C0
		private void Click_SA_UseSpecialEventScript(object sender, EventArgs e)
		{
			this.openFileDialog_2.InitialDirectory = Application.StartupPath;
			if (this.openFileDialog_2.ShowDialog() == DialogResult.OK)
			{
				ScenarioUnits.smethod_8(Client.GetClientScenario(), this.openFileDialog_2.FileName, false, null);
				Scenario clientScenario = Client.GetClientScenario();
				ScenarioUnits.smethod_10(ref clientScenario);
				Interaction.MsgBox("特殊行为脚本已应用于当前想定.", MsgBoxStyle.OkOnly, null);
			}
		}

		// Token: 0x060071A1 RID: 29089 RVA: 0x0040D424 File Offset: 0x0040B624
		private void Click_TA_DesignatedAreaMine(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetRefPointSelList()) && Client.GetRefPointSelList().Count >= 3)
			{
				MinefieldForm minefieldForm = new MinefieldForm();
				minefieldForm.list_0.AddRange(Client.GetRefPointSelList());
				minefieldForm.Show();
			}
			else
			{
				Interaction.MsgBox("您至少需要选择三个参考点才能定义雷区.", MsgBoxStyle.OkOnly, "没有选择足够多的参考点!");
			}
		}

		// Token: 0x060071A2 RID: 29090 RVA: 0x0040D480 File Offset: 0x0040B680
		private void Click_TA_DesignatedAreaMineClearance(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetRefPointSelList()) && Client.GetRefPointSelList().Count >= 3)
			{
				List<ReferencePoint> list = new List<ReferencePoint>();
				List<UnguidedWeapon> list2 = new List<UnguidedWeapon>();
				foreach (UnguidedWeapon current in Client.GetClientScenario().GetUnguidedWeapons().Values)
				{
					list.AddRange(Client.GetRefPointSelList());
					if (current.IsMine() && current.vmethod_40(list, Client.GetClientScenario(), false))
					{
						list2.Add(current);
					}
				}
				foreach (UnguidedWeapon current2 in list2)
				{
					Scenario clientScenario = Client.GetClientScenario();
					current2.ExportUnitDestroyed(ref clientScenario);
				}
				Client.b_Completed = true;
			}
			else
			{
				Interaction.MsgBox("您至少需要选择三个参考点才能定义雷区.", MsgBoxStyle.OkOnly, "没有选择足够多的参考点!");
			}
		}

		// Token: 0x060071A3 RID: 29091 RVA: 0x0040D590 File Offset: 0x0040B790
		public void DrawRangeSymbols(Graphics graphics_0)
		{
			if (!Information.IsNothing(Client.m_Mount))
			{
				try
				{
					ActiveUnit parentPlatform = Client.m_Mount.GetParentPlatform();
					if (!Information.IsNothing(parentPlatform) && this.method_289(5f))
					{
						Color color_ = Color.FromArgb(32, Color.White);
						GeoPoint geoPoint_ = new GeoPoint(parentPlatform.GetLongitude(null), parentPlatform.GetLatitude(null));
						if (Client.m_Mount.coverageArc.Is360Coverage())
						{
							this.method_291(geoPoint_, 5f, color_, 1, true, graphics_0, true);
						}
						else
						{
							List<RangeSymbol> list = this.method_285(ref geoPoint_, Client.m_Mount, 5f);
							foreach (RangeSymbol current in list)
							{
								this.method_293(geoPoint_, parentPlatform.GetCurrentHeading(), 5f, current.LeftArc, current.RightArc, color_, 1, true, graphics_0, true);
							}
						}
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200535", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060071A4 RID: 29092 RVA: 0x0040D6F4 File Offset: 0x0040B8F4
		public void DrawSensorAndWeaponsCoverageGraphics(Graphics graphics_0, ref Side side_0)
		{
			this.SetGraphicsParameters(graphics_0);
			try
			{
				if (this.UnitList.Count > 0)
				{
					GraphicsPath graphicsPath = new GraphicsPath();
					GraphicsPath graphicsPath2 = new GraphicsPath();
					GraphicsPath graphicsPath3 = new GraphicsPath();
					GraphicsPath graphicsPath4 = new GraphicsPath();
					GraphicsPath graphicsPath5 = new GraphicsPath();
					GraphicsPath graphicsPath6 = new GraphicsPath();
					GraphicsPath graphicsPath7 = new GraphicsPath();
					int num = 0;
					int num2 = 0;
					int num3 = 0;
					int num4 = 0;
					int num5 = 0;
					int num6 = 0;
					int num7 = 0;
					GraphicsPath graphicsPath8 = new GraphicsPath();
					GraphicsPath graphicsPath9 = new GraphicsPath();
					GraphicsPath graphicsPath10 = new GraphicsPath();
					GraphicsPath graphicsPath11 = new GraphicsPath();
					GraphicsPath graphicsPath12 = new GraphicsPath();
					GraphicsPath graphicsPath13 = new GraphicsPath();
					GraphicsPath graphicsPath14 = new GraphicsPath();
					int num8 = 0;
					int num9 = 0;
					int num10 = 0;
					int num11 = 0;
					int num12 = 0;
					int num13 = 0;
					int num14 = 0;
					GraphicsPath graphicsPath15 = new GraphicsPath();
					GraphicsPath graphicsPath16 = new GraphicsPath();
					GraphicsPath graphicsPath17 = new GraphicsPath();
					GraphicsPath graphicsPath18 = new GraphicsPath();
					GraphicsPath graphicsPath19 = new GraphicsPath();
					GraphicsPath graphicsPath20 = new GraphicsPath();
					GraphicsPath graphicsPath21 = new GraphicsPath();
					int num15 = 0;
					int num16 = 0;
					int num17 = 0;
					int num18 = 0;
					int num19 = 0;
					int num20 = 0;
					int num21 = 0;
					GraphicsPath graphicsPath22 = new GraphicsPath();
					GraphicsPath graphicsPath23 = new GraphicsPath();
					GraphicsPath graphicsPath24 = new GraphicsPath();
					GraphicsPath graphicsPath25 = new GraphicsPath();
					GraphicsPath graphicsPath26 = new GraphicsPath();
					GraphicsPath graphicsPath27 = new GraphicsPath();
					GraphicsPath graphicsPath28 = new GraphicsPath();
					int num22 = 0;
					int num23 = 0;
					int num24 = 0;
					int num25 = 0;
					int num26 = 0;
					int num27 = 0;
					int num28 = 0;
					GraphicsPath graphicsPath29 = new GraphicsPath();
					GraphicsPath graphicsPath30 = new GraphicsPath();
					GraphicsPath graphicsPath31 = new GraphicsPath();
					GraphicsPath graphicsPath32 = new GraphicsPath();
					GraphicsPath graphicsPath33 = new GraphicsPath();
					GraphicsPath graphicsPath34 = new GraphicsPath();
					GraphicsPath graphicsPath35 = new GraphicsPath();
					int num29 = 0;
					int num30 = 0;
					int num31 = 0;
					int num32 = 0;
					int num33 = 0;
					int num34 = 0;
					int num35 = 0;
					GraphicsPath graphicsPath36 = new GraphicsPath();
					GraphicsPath graphicsPath37 = new GraphicsPath();
					GraphicsPath graphicsPath38 = new GraphicsPath();
					GraphicsPath graphicsPath39 = new GraphicsPath();
					GraphicsPath graphicsPath40 = new GraphicsPath();
					GraphicsPath graphicsPath41 = new GraphicsPath();
					GraphicsPath graphicsPath42 = new GraphicsPath();
					int num36 = 0;
					int num37 = 0;
					int num38 = 0;
					int num39 = 0;
					int num40 = 0;
					int num41 = 0;
					int int_ = 0;
					MapProfile map = Client.GetMap();
					foreach (Unit current in this.UnitList)
					{
						if (current.IsActiveUnit())
						{
							ActiveUnit activeUnit = (ActiveUnit)current;
							if ((!activeUnit.IsWeapon || ((Weapon)activeUnit).GetWeaponType() != Weapon._WeaponType.Sonobuoy || SimConfiguration.gameOptions.GetSonobuoyVisibility() != Configuration.GameOptions._SonobuoyVisibility.const_2) && !Information.IsNothing(activeUnit.GetSide(false)) && Client.IsVisible(activeUnit))
							{
								MapProfile._UnitCoverage showRangeSymbols = map.GetShowRangeSymbols();
								if (showRangeSymbols != MapProfile._UnitCoverage.const_1)
								{
									if (showRangeSymbols == MapProfile._UnitCoverage.const_2)
									{
										continue;
									}
								}
								else if (Information.IsNothing(Client.GetHookedUnit()) || activeUnit != Client.GetHookedUnit())
								{
									continue;
								}
								if (!activeUnit.IsGroup)
								{
									if (activeUnit.IsOperating())
									{
										Contact contact = null;
										if (Client.smethod_73(ref activeUnit, true, ref contact))
										{
											GeoPoint geoPoint = new GeoPoint(activeUnit.GetLongitude(null), activeUnit.GetLatitude(null));
											Client.GetAlpha(ref this.float_6, ref this.int_13, ref activeUnit);
											byte b = 0;
											if (activeUnit == Client.GetHookedUnit())
											{
												if (map.GetShowRangeSymbols() == MapProfile._UnitCoverage.const_1)
												{
													b = 1;
												}
												else
												{
													b = 2;
												}
											}
											else
											{
												b = 1;
											}
											if (!Client.GetMap().IsMergeRangesymbols())
											{
												graphicsPath = new GraphicsPath();
												graphicsPath2 = new GraphicsPath();
												graphicsPath3 = new GraphicsPath();
												graphicsPath4 = new GraphicsPath();
												graphicsPath5 = new GraphicsPath();
												graphicsPath6 = new GraphicsPath();
												graphicsPath7 = new GraphicsPath();
												num = 0;
												num2 = 0;
												num3 = 0;
												num4 = 0;
												num5 = 0;
												num6 = 0;
												num7 = 0;
											}
											if (Client.GetMap().GetRSVisible_ASSensor() != MapProfile._UnitCoverage.const_2)
											{
												ActiveUnit_Sensory sensory = activeUnit.GetSensory();
												Sensor[] array = null;
												List<Sensor> list = sensory.GetMaxRangeCoverageSurfaceAndLandSensorList(true, true, false, false, ref array);
												foreach (Sensor current2 in list)
												{
													float num42;
													if (current2.IsOTH())
													{
														num42 = current2.MaxRange;
													}
													else
													{
														Unit unit_ = activeUnit;
														float num43 = 40f;
														if (Class363.smethod_0(unit_, ref num43) >= current2.MaxRange)
														{
															num42 = current2.MaxRange;
														}
														else
														{
															Unit unit_2 = activeUnit;
															num43 = 40f;
															num42 = Class363.smethod_0(unit_2, ref num43);
														}
													}
													if (activeUnit.IsSubmarine)
													{
														if (current2.IsEmmitting() && activeUnit.GetCurrentAltitude_ASL(false) < -20f)
														{
															num42 = 0f;
														}
													}
													else if (current2.IsEmmitting() && activeUnit.GetCurrentAltitude_ASL(false) + (float)activeUnit.GetMastHeight() < 0f)
													{
														num42 = 0f;
													}
													if (num42 > 0f)
													{
														if (current2.coverageArc.Is360Coverage() && !current2.IsCapableOfDetect(GlobalVariables.ActiveUnitType.Aircraft))
														{
															if (!activeUnit.IsGuidedWeapon() && !activeUnit.IsTorpedo() && Client.GetMap().IsMergeRangesymbols() && activeUnit != Client.GetHookedUnit())
															{
																if (this.method_289(num42))
																{
																	GraphicsPath graphicsPath43 = this.method_290(geoPoint, num42);
																	if (graphicsPath43.PointCount > 0)
																	{
																		graphicsPath2.AddPath(graphicsPath43, true);
																		num2++;
																	}
																}
															}
															else if (this.method_289(num42))
															{
																this.method_291(geoPoint, num42, this.color_1, b, true, graphics_0, false);
															}
														}
														else
														{
															if (activeUnit == Client.GetHookedUnit() && !activeUnit.IsGuidedWeapon() && !activeUnit.IsTorpedo())
															{
																List<Sensor> list2 = new List<Sensor>();
																ActiveUnit_Sensory sensory2 = activeUnit.GetSensory();
																array = null;
																list2 = sensory2.GetSurfaceAndLandSensorList(true, true, false, false, ref array, false);
																using (List<Sensor>.Enumerator enumerator3 = list2.GetEnumerator())
																{
																	while (enumerator3.MoveNext())
																	{
																		Sensor current3 = enumerator3.Current;
																		if (current3.MaxRange > 0f)
																		{
																			float num44;
																			if (current3.IsOTH())
																			{
																				num44 = current3.MaxRange;
																			}
																			else
																			{
																				Unit unit_3 = activeUnit;
																				float num43 = 40f;
																				if (Class363.smethod_0(unit_3, ref num43) >= current3.MaxRange)
																				{
																					num44 = current3.MaxRange;
																				}
																				else
																				{
																					Unit unit_4 = activeUnit;
																					num43 = 40f;
																					num44 = Class363.smethod_0(unit_4, ref num43);
																				}
																			}
																			if (this.method_289(num44))
																			{
																				GraphicsPath graphicsPath44 = this.method_286(geoPoint, current3, activeUnit, num44);
																				if (graphicsPath44.PointCount > 0)
																				{
																					graphicsPath9.AddPath(graphicsPath44, true);
																					num9++;
																				}
																			}
																		}
																	}
																	continue;
																}
															}
															if (!activeUnit.IsGuidedWeapon() && !activeUnit.IsTorpedo())
															{
																List<Sensor> list3 = new List<Sensor>();
																ActiveUnit_Sensory sensory3 = activeUnit.GetSensory();
																array = null;
																list3 = sensory3.GetSurfaceAndLandSensorList(true, true, false, false, ref array, false);
																using (List<Sensor>.Enumerator enumerator4 = list3.GetEnumerator())
																{
																	while (enumerator4.MoveNext())
																	{
																		Sensor current4 = enumerator4.Current;
																		if (current4.MaxRange > 0f)
																		{
																			float num45;
																			if (current4.IsOTH())
																			{
																				num45 = current4.MaxRange;
																			}
																			else
																			{
																				Unit unit_5 = activeUnit;
																				float num43 = 40f;
																				if (Class363.smethod_0(unit_5, ref num43) >= current4.MaxRange)
																				{
																					num45 = current4.MaxRange;
																				}
																				else
																				{
																					Unit unit_6 = activeUnit;
																					num43 = 40f;
																					num45 = Class363.smethod_0(unit_6, ref num43);
																				}
																			}
																			if (this.method_289(num45))
																			{
																				GraphicsPath graphicsPath45 = this.method_286(geoPoint, current4, activeUnit, num45);
																				if (graphicsPath45.PointCount > 0)
																				{
																					graphicsPath2.AddPath(graphicsPath45, true);
																					num2++;
																				}
																			}
																		}
																	}
																	continue;
																}
															}
															if (this.method_289(current2.MaxRange))
															{
																this.method_287(geoPoint, current2, activeUnit, this.color_1, b, true, graphics_0, 0f);
															}
														}
													}
												}
											}
											if (Client.GetMap().GetRSVisible_AASensor() != MapProfile._UnitCoverage.const_2)
											{
												ActiveUnit_Sensory sensory4 = activeUnit.GetSensory();
												Sensor[] array = null;
												List<Sensor> list = sensory4.GetMaxRangeCoverageAirSpaceSensorList(true, true, false, false, ref array);
												foreach (Sensor current2 in list)
												{
													if (current2.MaxRange > 0f && current2.IsEmmitting() && current2.IsOperating())
													{
														if (current2.coverageArc.Is360Coverage())
														{
															if (!activeUnit.IsGuidedWeapon() && !activeUnit.IsTorpedo() && Client.GetMap().IsMergeRangesymbols() && activeUnit != Client.GetHookedUnit())
															{
																if (this.method_289(current2.MaxRange))
																{
																	GraphicsPath graphicsPath46 = this.method_290(geoPoint, current2.MaxRange);
																	if (graphicsPath46.PointCount > 0)
																	{
																		graphicsPath.AddPath(graphicsPath46, true);
																		num++;
																	}
																}
															}
															else if (this.method_289(current2.MaxRange))
															{
																this.method_291(geoPoint, current2.MaxRange, this.color_0, b, true, graphics_0, false);
															}
														}
														else
														{
															if (activeUnit == Client.GetHookedUnit() && !activeUnit.IsGuidedWeapon() && !activeUnit.IsTorpedo())
															{
																List<Sensor> list4 = new List<Sensor>();
																ActiveUnit_Sensory sensory5 = activeUnit.GetSensory();
																array = null;
																list4 = sensory5.GetAirSpaceSensorList(true, true, false, false, ref array, false);
																using (List<Sensor>.Enumerator enumerator6 = list4.GetEnumerator())
																{
																	while (enumerator6.MoveNext())
																	{
																		Sensor current5 = enumerator6.Current;
																		if (current5.MaxRange > 0f && this.method_289(current5.MaxRange))
																		{
																			GraphicsPath graphicsPath47 = this.method_286(geoPoint, current5, activeUnit, current5.MaxRange);
																			if (graphicsPath47.PointCount > 0)
																			{
																				graphicsPath8.AddPath(graphicsPath47, true);
																				num8++;
																			}
																		}
																	}
																	continue;
																}
															}
															if (!activeUnit.IsGuidedWeapon() && !activeUnit.IsTorpedo())
															{
																List<Sensor> list5 = new List<Sensor>();
																ActiveUnit_Sensory sensory6 = activeUnit.GetSensory();
																array = null;
																list5 = sensory6.GetAirSpaceSensorList(true, true, false, false, ref array, false);
																using (List<Sensor>.Enumerator enumerator7 = list5.GetEnumerator())
																{
																	while (enumerator7.MoveNext())
																	{
																		Sensor current6 = enumerator7.Current;
																		if (current6.MaxRange > 0f && this.method_289(current6.MaxRange))
																		{
																			GraphicsPath graphicsPath48 = this.method_286(geoPoint, current6, activeUnit, current6.MaxRange);
																			if (graphicsPath48.PointCount > 0)
																			{
																				graphicsPath.AddPath(graphicsPath48, true);
																				num++;
																			}
																		}
																	}
																	continue;
																}
															}
															if (this.method_289(current2.MaxRange))
															{
																this.method_287(geoPoint, current2, activeUnit, this.color_0, b, true, graphics_0, 0f);
															}
														}
													}
												}
											}
											if (Client.GetMap().GetRSVisible_ASWSensor() != MapProfile._UnitCoverage.const_2)
											{
												ActiveUnit_Sensory sensory7 = activeUnit.GetSensory();
												Sensor[] array = null;
												List<Sensor> list = sensory7.GetMaxRangeCoverageSubsurfaceSensorList(false, false, true, false, ref array, true);
												foreach (Sensor current2 in list)
												{
													if (current2.MaxRange > 0f && current2.IsOperating())
													{
														if (current2.coverageArc.Is360Coverage())
														{
															if (!activeUnit.IsGuidedWeapon() && !activeUnit.IsTorpedo() && Client.GetMap().IsMergeRangesymbols() && activeUnit != Client.GetHookedUnit())
															{
																if (this.method_289(current2.MaxRange))
																{
																	GraphicsPath graphicsPath49 = this.method_290(geoPoint, current2.MaxRange);
																	if (graphicsPath49.PointCount > 0)
																	{
																		graphicsPath3.AddPath(graphicsPath49, true);
																		num3++;
																	}
																}
															}
															else if (this.method_289(current2.MaxRange))
															{
																this.method_291(geoPoint, current2.MaxRange, this.color_2, b, true, graphics_0, false);
															}
														}
														else
														{
															if (activeUnit == Client.GetHookedUnit() && !activeUnit.IsGuidedWeapon() && !activeUnit.IsTorpedo())
															{
																List<Sensor> list6 = new List<Sensor>();
																ActiveUnit_Sensory sensory8 = activeUnit.GetSensory();
																array = null;
																list6 = sensory8.GetSubsurfaceSensorList(false, false, true, false, ref array, true);
																using (List<Sensor>.Enumerator enumerator9 = list6.GetEnumerator())
																{
																	while (enumerator9.MoveNext())
																	{
																		Sensor current7 = enumerator9.Current;
																		if (current7.MaxRange > 0f && this.method_289(current7.MaxRange))
																		{
																			GraphicsPath graphicsPath50 = this.method_286(geoPoint, current7, activeUnit, current7.MaxRange);
																			if (graphicsPath50.PointCount > 0)
																			{
																				graphicsPath10.AddPath(graphicsPath50, true);
																				num10++;
																			}
																		}
																	}
																	continue;
																}
															}
															if (!activeUnit.IsGuidedWeapon() && !activeUnit.IsTorpedo())
															{
																List<Sensor> list7 = new List<Sensor>();
																ActiveUnit_Sensory sensory = activeUnit.GetSensory();
																array = null;
																list7 = sensory.GetSubsurfaceSensorList(false, false, true, false, ref array, true);
																using (List<Sensor>.Enumerator enumerator10 = list7.GetEnumerator())
																{
																	while (enumerator10.MoveNext())
																	{
																		Sensor current8 = enumerator10.Current;
																		if (current8.MaxRange > 0f && this.method_289(current8.MaxRange))
																		{
																			GraphicsPath graphicsPath51 = this.method_286(geoPoint, current8, activeUnit, current8.MaxRange);
																			if (graphicsPath51.PointCount > 0)
																			{
																				graphicsPath3.AddPath(graphicsPath51, true);
																				num3++;
																			}
																		}
																	}
																	continue;
																}
															}
															if (this.method_289(current2.MaxRange))
															{
																this.method_287(geoPoint, current2, activeUnit, this.color_2, b, true, graphics_0, 0f);
															}
														}
													}
												}
												if (activeUnit == Client.GetHookedUnit() && (activeUnit.IsShip || activeUnit.IsSubmarine) && activeUnit.GetTerrainElevation(false, true, false) < -200)
												{
													ActiveUnit_Sensory sensory = activeUnit.GetSensory();
													array = null;
													List<Sensor> maxRangeCoverageSubsurfaceSensorList = sensory.GetMaxRangeCoverageSubsurfaceSensorList(false, false, true, false, ref array, true);
													if (maxRangeCoverageSubsurfaceSensorList.Count > 0)
													{
														int num46 = (int)Math.Round((double)maxRangeCoverageSubsurfaceSensorList[0].MaxRange);
														this.DrawSonarDetectionRing(activeUnit.GetLatitude(null), activeUnit.GetLongitude(null), (float)num46, Color.FromArgb(30, this.color_2), graphics_0);
													}
												}
											}
											if (Client.GetMap().GetRSVisible_AAWeapon() != MapProfile._UnitCoverage.const_2)
											{
												Weapon weapon = activeUnit.GetWeaponry().GetAAWWeapon_RangeMax();
												if (!Information.IsNothing(weapon))
												{
													if (Client.GetMap().IsMergeRangesymbols() && activeUnit != Client.GetHookedUnit())
													{
														if (this.method_289(weapon.RangeAAWMax))
														{
															GraphicsPath graphicsPath52 = this.method_290(geoPoint, weapon.RangeAAWMax);
															if (graphicsPath52.PointCount > 0)
															{
																graphicsPath4.AddPath(graphicsPath52, true);
																num4++;
															}
														}
													}
													else if (this.method_289(weapon.RangeAAWMax))
													{
														this.method_291(geoPoint, weapon.RangeAAWMax, this.color_3, b, true, graphics_0, false);
													}
												}
											}
											if (Client.GetMap().GetRSVisible_ASWeapon() != MapProfile._UnitCoverage.const_2)
											{
												Weapon aSUWWeapon_RangeMax = activeUnit.GetWeaponry().GetASUWWeapon_RangeMax(true);
												if (!Information.IsNothing(aSUWWeapon_RangeMax))
												{
													float float_;
													if (activeUnit.IsAircraft && aSUWWeapon_RangeMax.method_138())
													{
														float_ = aSUWWeapon_RangeMax.method_140(activeUnit.GetCurrentAltitude_ASL(false), Contact_Base.ContactType.Surface);
													}
													else
													{
														float_ = aSUWWeapon_RangeMax.RangeASUWMax;
													}
													if (Client.GetMap().IsMergeRangesymbols() && activeUnit != Client.GetHookedUnit())
													{
														if (this.method_289(float_))
														{
															GraphicsPath graphicsPath53 = this.method_290(geoPoint, float_);
															if (graphicsPath53.PointCount > 0)
															{
																graphicsPath5.AddPath(graphicsPath53, true);
																num5++;
															}
														}
													}
													else if (this.method_289(aSUWWeapon_RangeMax.RangeASUWMax))
													{
														this.method_291(geoPoint, float_, this.color_4, b, true, graphics_0, false);
													}
												}
											}
											if (Client.GetMap().GetRSVisible_AGWeapon() != MapProfile._UnitCoverage.const_2)
											{
												Weapon landWeapon_RangeMax = activeUnit.GetWeaponry().GetLandWeapon_RangeMax(true);
												if (!Information.IsNothing(landWeapon_RangeMax))
												{
													float float_2;
													if (activeUnit.IsAircraft && landWeapon_RangeMax.method_138())
													{
														float_2 = landWeapon_RangeMax.method_140(activeUnit.GetCurrentAltitude_ASL(false), Contact_Base.ContactType.Facility_Fixed);
													}
													else
													{
														float_2 = landWeapon_RangeMax.RangeLandMax;
													}
													if (Client.GetMap().IsMergeRangesymbols() && activeUnit != Client.GetHookedUnit())
													{
														if (this.method_289(float_2))
														{
															GraphicsPath graphicsPath54 = this.method_290(geoPoint, float_2);
															if (graphicsPath54.PointCount > 0)
															{
																graphicsPath6.AddPath(graphicsPath54, true);
																num6++;
															}
														}
													}
													else if (this.method_289(landWeapon_RangeMax.RangeLandMax))
													{
														this.method_291(geoPoint, float_2, this.color_5, b, true, graphics_0, false);
													}
												}
											}
											if (Client.GetMap().GetRSVisible_ASWWeapon() != MapProfile._UnitCoverage.const_2)
											{
												Weapon aSWWeapon_RangeMax = activeUnit.GetWeaponry().GetASWWeapon_RangeMax();
												if (!Information.IsNothing(aSWWeapon_RangeMax))
												{
													if (Client.GetMap().IsMergeRangesymbols() && activeUnit != Client.GetHookedUnit())
													{
														if (this.method_289(aSWWeapon_RangeMax.RangeASWMax))
														{
															GraphicsPath graphicsPath55 = this.method_290(geoPoint, aSWWeapon_RangeMax.RangeASWMax);
															if (graphicsPath55.PointCount > 0)
															{
																graphicsPath7.AddPath(graphicsPath55, true);
																num7++;
															}
														}
													}
													else if (this.method_289(aSWWeapon_RangeMax.RangeASWMax))
													{
														this.method_291(geoPoint, aSWWeapon_RangeMax.RangeASWMax, this.color_6, b, true, graphics_0, false);
													}
												}
											}
											if (!Client.GetMap().IsMergeRangesymbols())
											{
												this.method_281(graphicsPath2, num2, graphicsPath, num, graphicsPath3, num3, graphicsPath4, num4, graphicsPath5, num5, graphicsPath6, num6, graphicsPath7, num7, graphics_0);
												graphicsPath.Dispose();
												graphicsPath2.Dispose();
												graphicsPath3.Dispose();
												graphicsPath4.Dispose();
												graphicsPath5.Dispose();
												graphicsPath6.Dispose();
												graphicsPath7.Dispose();
											}
										}
									}
								}
								else if (Client.GetMap().ViewMode != MapProfile._ViewMode.UnitMode)
								{
									if (!Client.GetMap().IsMergeRangesymbols())
									{
										graphicsPath36 = new GraphicsPath();
										graphicsPath37 = new GraphicsPath();
										graphicsPath38 = new GraphicsPath();
										graphicsPath39 = new GraphicsPath();
										graphicsPath40 = new GraphicsPath();
										graphicsPath41 = new GraphicsPath();
										graphicsPath42 = new GraphicsPath();
										num36 = 0;
										num37 = 0;
										num38 = 0;
										num39 = 0;
										num40 = 0;
										num41 = 0;
										int_ = 0;
									}
									List<ActiveUnit> list8 = ((Group)activeUnit).GetUnitsInGroup().Values.ToList<ActiveUnit>();
									foreach (ActiveUnit current9 in list8)
									{
										GeoPoint geoPoint2 = new GeoPoint(current9.GetLongitude(null), current9.GetLatitude(null));
										if (Client.GetMap().GetRSVisible_ASSensor() != MapProfile._UnitCoverage.const_2)
										{
											ActiveUnit_Sensory sensory9 = current9.GetSensory();
											Sensor[] array = null;
											List<Sensor> list = sensory9.GetMaxRangeCoverageSurfaceAndLandSensorList(true, true, false, false, ref array);
											foreach (Sensor current2 in list)
											{
												if (current2.IsOTH())
												{
													goto IL_131E;
												}
												Unit unit_7 = current9;
												float num43 = 40f;
												if (Class363.smethod_0(unit_7, ref num43) >= current2.MaxRange)
												{
													goto IL_131E;
												}
												Unit unit_8 = current9;
												num43 = 40f;
												float num47 = Class363.smethod_0(unit_8, ref num43);
												IL_133F:
												if (current9.IsSubmarine)
												{
													if (current2.IsEmmitting() && current9.GetCurrentAltitude_ASL(false) < -20f)
													{
														num47 = 0f;
													}
												}
												else if (current2.IsEmmitting() && current9.GetCurrentAltitude_ASL(false) + (float)current9.GetMastHeight() < 0f)
												{
													num47 = 0f;
												}
												if (num47 <= 0f)
												{
													continue;
												}
												if (!current2.coverageArc.Is360Coverage() || current2.IsCapableOfDetect(GlobalVariables.ActiveUnitType.Aircraft))
												{
													if (activeUnit == Client.GetHookedUnit())
													{
														List<Sensor> list9 = new List<Sensor>();
														ActiveUnit_Sensory sensory10 = current9.GetSensory();
														array = null;
														list9 = sensory10.GetSurfaceAndLandSensorList(true, true, false, false, ref array, false);
														using (List<Sensor>.Enumerator enumerator13 = list9.GetEnumerator())
														{
															while (enumerator13.MoveNext())
															{
																Sensor current10 = enumerator13.Current;
																if (current10.MaxRange > 0f)
																{
																	if (current10.IsOTH())
																	{
																		goto IL_1460;
																	}
																	Unit unit_9 = current9;
																	num43 = 40f;
																	if (Class363.smethod_0(unit_9, ref num43) >= current10.MaxRange)
																	{
																		goto IL_1460;
																	}
																	Unit unit_10 = current9;
																	num43 = 40f;
																	float num48 = Class363.smethod_0(unit_10, ref num43);
																	IL_1481:
																	if (!this.method_289(num48))
																	{
																		continue;
																	}
																	GraphicsPath graphicsPath56 = this.method_286(geoPoint2, current10, current9, num48);
																	if (graphicsPath56.PointCount > 0)
																	{
																		graphicsPath9.AddPath(graphicsPath56, true);
																		num9++;
																		continue;
																	}
																	continue;
																	IL_1460:
																	num48 = current10.MaxRange;
																	goto IL_1481;
																}
															}
															continue;
														}
													}
													List<Sensor> list10 = new List<Sensor>();
													ActiveUnit_Sensory sensory11 = current9.GetSensory();
													array = null;
													list10 = sensory11.GetSurfaceAndLandSensorList(true, true, false, false, ref array, false);
													using (List<Sensor>.Enumerator enumerator14 = list10.GetEnumerator())
													{
														while (enumerator14.MoveNext())
														{
															Sensor current11 = enumerator14.Current;
															if (current11.MaxRange > 0f)
															{
																if (current11.IsOTH())
																{
																	goto IL_1554;
																}
																Unit unit_11 = current9;
																num43 = 40f;
																if (Class363.smethod_0(unit_11, ref num43) >= current11.MaxRange)
																{
																	goto IL_1554;
																}
																Unit unit_12 = current9;
																num43 = 40f;
																float num49 = Class363.smethod_0(unit_12, ref num43);
																IL_1575:
																if (!this.method_289(num49))
																{
																	continue;
																}
																GraphicsPath graphicsPath57 = this.method_286(geoPoint2, current11, current9, num49);
																if (Client.GetMap().IsMergeRangesymbols())
																{
																	if (graphicsPath57.PointCount > 0)
																	{
																		graphicsPath2.AddPath(graphicsPath57, true);
																		num2++;
																		continue;
																	}
																	continue;
																}
																else
																{
																	if (graphicsPath57.PointCount > 0)
																	{
																		graphicsPath37.AddPath(graphicsPath57, true);
																		num37++;
																		continue;
																	}
																	continue;
																}
																IL_1554:
																num49 = current11.MaxRange;
																goto IL_1575;
															}
														}
														continue;
													}
												}
												if (activeUnit == Client.GetHookedUnit())
												{
													if (!this.method_289(num47))
													{
														continue;
													}
													GraphicsPath graphicsPath58 = this.method_290(geoPoint2, num47);
													if (graphicsPath58.PointCount > 0)
													{
														graphicsPath9.AddPath(graphicsPath58, true);
														num9++;
														continue;
													}
													continue;
												}
												else
												{
													if (!this.method_289(num47))
													{
														continue;
													}
													GraphicsPath graphicsPath59 = this.method_290(geoPoint2, num47);
													if (Client.GetMap().IsMergeRangesymbols())
													{
														if (graphicsPath59.PointCount > 0)
														{
															graphicsPath2.AddPath(graphicsPath59, true);
															num2++;
															continue;
														}
														continue;
													}
													else
													{
														if (graphicsPath59.PointCount > 0)
														{
															graphicsPath37.AddPath(graphicsPath59, true);
															num37++;
															continue;
														}
														continue;
													}
												}
												IL_131E:
												num47 = current2.MaxRange;
												goto IL_133F;
											}
										}
										if (Client.GetMap().GetRSVisible_AASensor() != MapProfile._UnitCoverage.const_2)
										{
											ActiveUnit_Sensory sensory12 = current9.GetSensory();
											Sensor[] array = null;
											List<Sensor> list = sensory12.GetMaxRangeCoverageAirSpaceSensorList(true, true, false, false, ref array);
											foreach (Sensor current2 in list)
											{
												if (current2.MaxRange > 0f && current2.IsEmmitting() && current2.IsOperating())
												{
													if (current2.coverageArc.Is360Coverage())
													{
														if (activeUnit == Client.GetHookedUnit())
														{
															if (this.method_289(current2.MaxRange))
															{
																GraphicsPath graphicsPath60 = this.method_290(geoPoint2, current2.MaxRange);
																if (graphicsPath60.PointCount > 0)
																{
																	graphicsPath8.AddPath(graphicsPath60, true);
																	num8++;
																}
															}
														}
														else if (this.method_289(current2.MaxRange))
														{
															GraphicsPath graphicsPath61 = this.method_290(geoPoint2, current2.MaxRange);
															if (Client.GetMap().IsMergeRangesymbols())
															{
																if (graphicsPath61.PointCount > 0)
																{
																	graphicsPath.AddPath(graphicsPath61, true);
																	num++;
																}
															}
															else if (graphicsPath61.PointCount > 0)
															{
																graphicsPath36.AddPath(graphicsPath61, true);
																num36++;
															}
														}
													}
													else
													{
														if (activeUnit == Client.GetHookedUnit())
														{
															List<Sensor> list11 = new List<Sensor>();
															ActiveUnit_Sensory sensory13 = current9.GetSensory();
															array = null;
															list11 = sensory13.GetAirSpaceSensorList(true, true, false, false, ref array, false);
															using (List<Sensor>.Enumerator enumerator16 = list11.GetEnumerator())
															{
																while (enumerator16.MoveNext())
																{
																	Sensor current12 = enumerator16.Current;
																	if (current12.MaxRange > 0f && this.method_289(current12.MaxRange))
																	{
																		GraphicsPath graphicsPath62 = this.method_286(geoPoint2, current12, current9, current12.MaxRange);
																		if (graphicsPath62.PointCount > 0)
																		{
																			graphicsPath8.AddPath(graphicsPath62, true);
																			num8++;
																		}
																	}
																}
																continue;
															}
														}
														List<Sensor> list12 = new List<Sensor>();
														ActiveUnit_Sensory sensory14 = current9.GetSensory();
														array = null;
														list12 = sensory14.GetAirSpaceSensorList(true, true, false, false, ref array, false);
														foreach (Sensor current13 in list12)
														{
															if (current13.MaxRange > 0f && this.method_289(current13.MaxRange))
															{
																GraphicsPath graphicsPath63 = this.method_286(geoPoint2, current13, current9, current13.MaxRange);
																if (Client.GetMap().IsMergeRangesymbols())
																{
																	if (graphicsPath63.PointCount > 0)
																	{
																		graphicsPath.AddPath(graphicsPath63, true);
																		num++;
																	}
																}
																else if (graphicsPath63.PointCount > 0)
																{
																	graphicsPath36.AddPath(graphicsPath63, true);
																	num36++;
																}
															}
														}
													}
												}
											}
										}
										if (Client.GetMap().GetRSVisible_ASWSensor() != MapProfile._UnitCoverage.const_2)
										{
											ActiveUnit_Sensory sensory15 = current9.GetSensory();
											Sensor[] array = null;
											List<Sensor> list = sensory15.GetMaxRangeCoverageSubsurfaceSensorList(false, false, true, false, ref array, true);
											foreach (Sensor current2 in list)
											{
												if (current2.MaxRange > 0f && current2.IsOperating())
												{
													if (current2.coverageArc.Is360Coverage())
													{
														if (activeUnit == Client.GetHookedUnit())
														{
															if (this.method_289(current2.MaxRange))
															{
																GraphicsPath graphicsPath64 = this.method_290(geoPoint2, current2.MaxRange);
																if (graphicsPath64.PointCount > 0)
																{
																	graphicsPath10.AddPath(graphicsPath64, true);
																	num10++;
																}
															}
														}
														else if (this.method_289(current2.MaxRange))
														{
															GraphicsPath graphicsPath65 = this.method_290(geoPoint2, current2.MaxRange);
															if (Client.GetMap().IsMergeRangesymbols())
															{
																if (graphicsPath65.PointCount > 0)
																{
																	graphicsPath3.AddPath(graphicsPath65, true);
																	num3++;
																}
															}
															else if (graphicsPath65.PointCount > 0)
															{
																graphicsPath38.AddPath(graphicsPath65, true);
																num38++;
															}
														}
													}
													else
													{
														if (activeUnit == Client.GetHookedUnit())
														{
															List<Sensor> list13 = new List<Sensor>();
															ActiveUnit_Sensory sensory16 = current9.GetSensory();
															array = null;
															list13 = sensory16.GetSubsurfaceSensorList(false, false, true, false, ref array, true);
															using (List<Sensor>.Enumerator enumerator19 = list13.GetEnumerator())
															{
																while (enumerator19.MoveNext())
																{
																	Sensor current14 = enumerator19.Current;
																	if (current14.MaxRange > 0f && this.method_289(current14.MaxRange))
																	{
																		GraphicsPath graphicsPath66 = this.method_286(geoPoint2, current14, current9, current14.MaxRange);
																		if (graphicsPath66.PointCount > 0)
																		{
																			graphicsPath10.AddPath(graphicsPath66, true);
																			num10++;
																		}
																	}
																}
																continue;
															}
														}
														List<Sensor> list14 = new List<Sensor>();
														ActiveUnit_Sensory sensory17 = current9.GetSensory();
														array = null;
														list14 = sensory17.GetSubsurfaceSensorList(false, false, true, false, ref array, true);
														foreach (Sensor current15 in list14)
														{
															if (current15.MaxRange > 0f && this.method_289(current15.MaxRange))
															{
																GraphicsPath graphicsPath67 = this.method_286(geoPoint2, current15, current9, current15.MaxRange);
																if (Client.GetMap().IsMergeRangesymbols())
																{
																	if (graphicsPath67.PointCount > 0)
																	{
																		graphicsPath3.AddPath(graphicsPath67, true);
																		num3++;
																	}
																}
																else if (graphicsPath67.PointCount > 0)
																{
																	graphicsPath38.AddPath(graphicsPath67, true);
																	num38++;
																}
															}
														}
													}
												}
											}
										}
										if (Client.GetMap().GetRSVisible_AAWeapon() != MapProfile._UnitCoverage.const_2)
										{
											Weapon weapon = current9.GetWeaponry().GetAAWWeapon_RangeMax();
											if (!Information.IsNothing(weapon))
											{
												if (activeUnit == Client.GetHookedUnit())
												{
													if (this.method_289(weapon.RangeAAWMax))
													{
														GraphicsPath graphicsPath68 = this.method_290(geoPoint2, weapon.RangeAAWMax);
														if (graphicsPath68.PointCount > 0)
														{
															graphicsPath11.AddPath(graphicsPath68, true);
															num11++;
														}
													}
												}
												else if (this.method_289(weapon.RangeAAWMax))
												{
													GraphicsPath graphicsPath69 = this.method_290(geoPoint2, weapon.RangeAAWMax);
													if (Client.GetMap().IsMergeRangesymbols())
													{
														if (graphicsPath69.PointCount > 0)
														{
															graphicsPath4.AddPath(graphicsPath69, true);
															num4++;
														}
													}
													else if (graphicsPath69.PointCount > 0)
													{
														graphicsPath39.AddPath(graphicsPath69, true);
														num39++;
													}
												}
											}
										}
										if (Client.GetMap().GetRSVisible_ASWeapon() != MapProfile._UnitCoverage.const_2)
										{
											Weapon weapon = current9.GetWeaponry().GetASUWWeapon_RangeMax(true);
											if (!Information.IsNothing(weapon))
											{
												float float_3;
												if (current9.IsAircraft && weapon.method_138())
												{
													float_3 = weapon.method_140(current9.GetCurrentAltitude_ASL(false), Contact_Base.ContactType.Surface);
												}
												else
												{
													float_3 = weapon.RangeASUWMax;
												}
												if (activeUnit == Client.GetHookedUnit())
												{
													if (this.method_289(float_3))
													{
														GraphicsPath graphicsPath70 = this.method_290(geoPoint2, float_3);
														if (graphicsPath70.PointCount > 0)
														{
															graphicsPath12.AddPath(graphicsPath70, true);
															num12++;
														}
													}
												}
												else if (this.method_289(float_3))
												{
													GraphicsPath graphicsPath71 = this.method_290(geoPoint2, float_3);
													if (Client.GetMap().IsMergeRangesymbols())
													{
														if (graphicsPath71.PointCount > 0)
														{
															graphicsPath5.AddPath(graphicsPath71, true);
															num5++;
														}
													}
													else if (graphicsPath71.PointCount > 0)
													{
														graphicsPath40.AddPath(graphicsPath71, true);
														num40++;
													}
												}
											}
										}
										if (Client.GetMap().GetRSVisible_AGWeapon() != MapProfile._UnitCoverage.const_2)
										{
											Weapon weapon = current9.GetWeaponry().GetLandWeapon_RangeMax(true);
											if (!Information.IsNothing(weapon))
											{
												float float_4;
												if (current9.IsAircraft && weapon.method_138())
												{
													float_4 = weapon.method_140(current9.GetCurrentAltitude_ASL(false), Contact_Base.ContactType.Facility_Fixed);
												}
												else
												{
													float_4 = weapon.RangeLandMax;
												}
												if (activeUnit == Client.GetHookedUnit())
												{
													if (this.method_289(float_4))
													{
														GraphicsPath graphicsPath72 = this.method_290(geoPoint2, float_4);
														if (graphicsPath72.PointCount > 0)
														{
															graphicsPath13.AddPath(graphicsPath72, true);
															num13++;
														}
													}
												}
												else if (this.method_289(float_4))
												{
													GraphicsPath graphicsPath73 = this.method_290(geoPoint2, float_4);
													if (Client.GetMap().IsMergeRangesymbols())
													{
														if (graphicsPath73.PointCount > 0)
														{
															graphicsPath6.AddPath(graphicsPath73, true);
															num6++;
														}
													}
													else if (graphicsPath73.PointCount > 0)
													{
														graphicsPath41.AddPath(graphicsPath73, true);
														num41++;
													}
												}
											}
										}
										if (Client.GetMap().GetRSVisible_ASWWeapon() != MapProfile._UnitCoverage.const_2)
										{
											Weapon weapon = current9.GetWeaponry().GetASWWeapon_RangeMax();
											if (!Information.IsNothing(weapon))
											{
												if (activeUnit == Client.GetHookedUnit())
												{
													if (this.method_289(weapon.RangeASWMax))
													{
														GraphicsPath graphicsPath74 = this.method_290(geoPoint2, weapon.RangeASWMax);
														if (graphicsPath74.PointCount > 0)
														{
															graphicsPath14.AddPath(graphicsPath74, true);
															num14++;
														}
													}
												}
												else if (this.method_289(weapon.RangeASWMax))
												{
													GraphicsPath graphicsPath75 = this.method_290(geoPoint2, weapon.RangeASWMax);
													if (Client.GetMap().IsMergeRangesymbols())
													{
														if (graphicsPath75.PointCount > 0)
														{
															graphicsPath7.AddPath(graphicsPath75, true);
															num41++;
														}
													}
													else if (graphicsPath75.PointCount > 0)
													{
														graphicsPath42.AddPath(graphicsPath75, true);
														num41++;
													}
												}
											}
										}
									}
									if (!Client.GetMap().IsMergeRangesymbols())
									{
										this.method_283(graphicsPath37, num37, graphicsPath36, num36, graphicsPath38, num38, graphicsPath39, num39, graphicsPath40, num40, graphicsPath41, num41, graphicsPath42, int_, graphics_0);
										graphicsPath36.Dispose();
										graphicsPath37.Dispose();
										graphicsPath38.Dispose();
										graphicsPath39.Dispose();
										graphicsPath40.Dispose();
										graphicsPath41.Dispose();
										graphicsPath42.Dispose();
									}
								}
							}
						}
						else if (current.IsContact() && (!((Contact)current).IsFilterOut || (!Information.IsNothing(Client.smethod_33()) && current == Client.smethod_33()) || (!Information.IsNothing(Client.GetHookedUnit()) && current == Client.GetHookedUnit())) && Client.GetMap().IsShowNonFriendly())
						{
							Contact contact2 = (Contact)current;
							if (!Information.IsNothing(contact2.ActualUnit))
							{
								MapProfile._UnitCoverage showRangeSymbols2 = map.GetShowRangeSymbols();
								if (showRangeSymbols2 != MapProfile._UnitCoverage.const_1)
								{
									if (showRangeSymbols2 == MapProfile._UnitCoverage.const_2)
									{
										continue;
									}
								}
								else if (Information.IsNothing(Client.GetHookedUnit()) || contact2 != Client.GetHookedUnit())
								{
									continue;
								}
								if (!contact2.ActualUnit.IsGroup)
								{
									byte b = 0;
									if (contact2 == Client.GetHookedUnit())
									{
										if (map.GetShowRangeSymbols() == MapProfile._UnitCoverage.const_1)
										{
											b = 1;
										}
										else
										{
											b = 2;
										}
									}
									else
									{
										b = 1;
									}
									GeoPoint geoPoint3 = new GeoPoint(contact2.GetLongitude(null), contact2.GetLatitude(null));
									if (!Client.GetMap().IsMergeRangesymbols())
									{
										graphicsPath15 = new GraphicsPath();
										graphicsPath16 = new GraphicsPath();
										graphicsPath17 = new GraphicsPath();
										graphicsPath18 = new GraphicsPath();
										graphicsPath19 = new GraphicsPath();
										graphicsPath20 = new GraphicsPath();
										graphicsPath21 = new GraphicsPath();
										num15 = 0;
										num16 = 0;
										num17 = 0;
										num18 = 0;
										num19 = 0;
										num20 = 0;
										num21 = 0;
									}
									if (Client.GetMap().GetRSVisible_ASSensor() != MapProfile._UnitCoverage.const_2)
									{
										if (contact2.GetIdentificationStatus() >= Contact_Base.IdentificationStatus.KnownClass)
										{
											ActiveUnit_Sensory sensory18 = contact2.ActualUnit.GetSensory();
											Sensor[] array = null;
											List<Sensor> list = sensory18.GetMaxRangeCoverageSurfaceAndLandSensorList(true, false, false, false, ref array);
											using (List<Sensor>.Enumerator enumerator21 = list.GetEnumerator())
											{
												while (enumerator21.MoveNext())
												{
													Sensor current2 = enumerator21.Current;
													if (current2.IsOTH())
													{
														goto IL_2364;
													}
													Unit unit_13 = contact2;
													float num43 = 40f;
													if (Class363.smethod_0(unit_13, ref num43) >= current2.MaxRange)
													{
														goto IL_2364;
													}
													Unit unit_14 = contact2;
													num43 = 40f;
													float num50 = Class363.smethod_0(unit_14, ref num43);
													IL_2385:
													if (contact2.IsSubmarine)
													{
														if (current2.IsEmmitting() && contact2.GetCurrentAltitude_ASL(false) < -20f)
														{
															num50 = 0f;
														}
													}
													else if (current2.IsEmmitting() && contact2.GetCurrentAltitude_ASL(false) + (float)contact2.GetMastHeight() < 0f)
													{
														num50 = 0f;
													}
													if (num50 <= 0f)
													{
														continue;
													}
													if ((current2.coverageArc.Is360Coverage() || !contact2.Heading_Known) && !current2.IsCapableOfDetect(GlobalVariables.ActiveUnitType.Aircraft))
													{
														if (!contact2.ActualUnit.IsWeapon && Client.GetMap().IsMergeRangesymbols() && contact2 != Client.GetHookedUnit())
														{
															if (!this.method_289(num50))
															{
																continue;
															}
															GraphicsPath graphicsPath76 = this.method_290(geoPoint3, num50);
															if (graphicsPath76.PointCount > 0)
															{
																graphicsPath16.AddPath(graphicsPath76, true);
																num16++;
																continue;
															}
															continue;
														}
														else
														{
															if (this.method_289(num50))
															{
																this.method_291(geoPoint3, num50, this.color_1, b, false, graphics_0, false);
																continue;
															}
															continue;
														}
													}
													else
													{
														if (contact2 == Client.GetHookedUnit() && !contact2.IsGuidedWeapon() && !contact2.IsTorpedo())
														{
															List<Sensor> list15 = new List<Sensor>();
															ActiveUnit_Sensory sensory19 = contact2.ActualUnit.GetSensory();
															array = null;
															list15 = sensory19.GetSurfaceAndLandSensorList(true, false, false, false, ref array, false);
															using (List<Sensor>.Enumerator enumerator22 = list15.GetEnumerator())
															{
																while (enumerator22.MoveNext())
																{
																	Sensor current16 = enumerator22.Current;
																	if (current16.MaxRange > 0f)
																	{
																		if (current16.IsOTH())
																		{
																			goto IL_2556;
																		}
																		Unit unit_15 = contact2;
																		num43 = 40f;
																		if (Class363.smethod_0(unit_15, ref num43) >= current16.MaxRange)
																		{
																			goto IL_2556;
																		}
																		Unit unit_16 = contact2;
																		num43 = 40f;
																		float num51 = Class363.smethod_0(unit_16, ref num43);
																		IL_2577:
																		if (!this.method_289(num51))
																		{
																			continue;
																		}
																		GraphicsPath graphicsPath77 = this.method_286(geoPoint3, current16, contact2, num51);
																		if (graphicsPath77.PointCount > 0)
																		{
																			graphicsPath23.AddPath(graphicsPath77, true);
																			num23++;
																			continue;
																		}
																		continue;
																		IL_2556:
																		num51 = current16.MaxRange;
																		goto IL_2577;
																	}
																}
																continue;
															}
														}
														if (!contact2.IsGuidedWeapon() && !contact2.IsTorpedo())
														{
															List<Sensor> list16 = new List<Sensor>();
															ActiveUnit_Sensory sensory20 = contact2.ActualUnit.GetSensory();
															array = null;
															list16 = sensory20.GetSurfaceAndLandSensorList(true, false, false, false, ref array, false);
															using (List<Sensor>.Enumerator enumerator23 = list16.GetEnumerator())
															{
																while (enumerator23.MoveNext())
																{
																	Sensor current17 = enumerator23.Current;
																	if (current17.MaxRange > 0f)
																	{
																		if (current17.IsOTH())
																		{
																			goto IL_2667;
																		}
																		Unit unit_17 = contact2;
																		num43 = 40f;
																		if (Class363.smethod_0(unit_17, ref num43) >= current17.MaxRange)
																		{
																			goto IL_2667;
																		}
																		Unit unit_18 = contact2;
																		num43 = 40f;
																		float num52 = Class363.smethod_0(unit_18, ref num43);
																		IL_2688:
																		if (!this.method_289(num52))
																		{
																			continue;
																		}
																		GraphicsPath graphicsPath78 = this.method_286(geoPoint3, current17, contact2, num52);
																		if (graphicsPath78.PointCount > 0)
																		{
																			graphicsPath16.AddPath(graphicsPath78, true);
																			num16++;
																			continue;
																		}
																		continue;
																		IL_2667:
																		num52 = current17.MaxRange;
																		goto IL_2688;
																	}
																}
																continue;
															}
														}
														if (this.method_289(current2.MaxRange))
														{
															this.method_287(geoPoint3, current2, contact2, this.color_4, b, true, graphics_0, 0f);
															continue;
														}
														continue;
													}
													IL_2364:
													num50 = current2.MaxRange;
													goto IL_2385;
												}
												goto IL_27D5;
											}
										}
										if (contact2.method_78().HasValue)
										{
											float value = contact2.method_78().Value;
											if (!contact2.ActualUnit.IsWeapon && Client.GetMap().IsMergeRangesymbols() && contact2 != Client.GetHookedUnit())
											{
												if (this.method_289(value))
												{
													GraphicsPath graphicsPath79 = this.method_290(geoPoint3, value);
													if (graphicsPath79.PointCount > 0)
													{
														graphicsPath16.AddPath(graphicsPath79, true);
														num16++;
													}
												}
											}
											else if (this.method_289(value))
											{
												this.method_291(geoPoint3, value, this.color_1, b, false, graphics_0, false);
											}
										}
									}
									IL_27D5:
									if (Client.GetMap().GetRSVisible_AASensor() != MapProfile._UnitCoverage.const_2)
									{
										if (contact2.GetIdentificationStatus() >= Contact_Base.IdentificationStatus.KnownClass)
										{
											ActiveUnit_Sensory sensory18 = contact2.ActualUnit.GetSensory();
											Sensor[] array = null;
											List<Sensor> list = sensory18.GetMaxRangeCoverageAirSpaceSensorList(true, false, false, false, ref array);
											using (List<Sensor>.Enumerator enumerator24 = list.GetEnumerator())
											{
												while (enumerator24.MoveNext())
												{
													Sensor current2 = enumerator24.Current;
													if (current2.MaxRange > 0f)
													{
														if (!current2.coverageArc.Is360Coverage() && contact2.Heading_Known)
														{
															if (contact2 == Client.GetHookedUnit() && !contact2.IsGuidedWeapon() && !contact2.IsTorpedo())
															{
																List<Sensor> list17 = new List<Sensor>();
																ActiveUnit_Sensory sensory21 = contact2.ActualUnit.GetSensory();
																array = null;
																list17 = sensory21.GetAirSpaceSensorList(true, false, false, false, ref array, false);
																using (List<Sensor>.Enumerator enumerator25 = list17.GetEnumerator())
																{
																	while (enumerator25.MoveNext())
																	{
																		Sensor current18 = enumerator25.Current;
																		if (current18.MaxRange > 0f && this.method_289(current18.MaxRange))
																		{
																			GraphicsPath graphicsPath80 = this.method_290(geoPoint3, current18.MaxRange);
																			if (graphicsPath80.PointCount > 0)
																			{
																				graphicsPath22.AddPath(graphicsPath80, true);
																				num22++;
																			}
																		}
																	}
																	continue;
																}
															}
															if (!contact2.IsGuidedWeapon() && !contact2.IsTorpedo())
															{
																List<Sensor> list18 = new List<Sensor>();
																ActiveUnit_Sensory sensory22 = contact2.ActualUnit.GetSensory();
																array = null;
																list18 = sensory22.GetAirSpaceSensorList(true, false, false, false, ref array, false);
																using (List<Sensor>.Enumerator enumerator26 = list18.GetEnumerator())
																{
																	while (enumerator26.MoveNext())
																	{
																		Sensor current19 = enumerator26.Current;
																		if (current19.MaxRange > 0f && this.method_289(current19.MaxRange))
																		{
																			GraphicsPath graphicsPath81 = this.method_290(geoPoint3, current19.MaxRange);
																			if (graphicsPath81.PointCount > 0)
																			{
																				graphicsPath15.AddPath(graphicsPath81, true);
																				num15++;
																			}
																		}
																	}
																	continue;
																}
															}
															if (this.method_289(current2.MaxRange))
															{
																this.method_287(geoPoint3, current2, contact2, this.color_0, b, true, graphics_0, 0f);
															}
														}
														else if (!contact2.ActualUnit.IsWeapon && Client.GetMap().IsMergeRangesymbols() && contact2 != Client.GetHookedUnit())
														{
															if (this.method_289(current2.MaxRange))
															{
																GraphicsPath graphicsPath82 = this.method_290(geoPoint3, current2.MaxRange);
																if (graphicsPath82.PointCount > 0)
																{
																	graphicsPath15.AddPath(graphicsPath82, true);
																	num15++;
																}
															}
														}
														else if (this.method_289(current2.MaxRange))
														{
															this.method_291(geoPoint3, current2.MaxRange, this.color_0, b, false, graphics_0, false);
														}
													}
												}
												goto IL_2BBC;
											}
										}
										if (contact2.GetMaxRange().HasValue)
										{
											float value2 = contact2.GetMaxRange().Value;
											if (!contact2.ActualUnit.IsWeapon && Client.GetMap().IsMergeRangesymbols() && contact2 != Client.GetHookedUnit())
											{
												if (this.method_289(value2))
												{
													GraphicsPath graphicsPath83 = this.method_290(geoPoint3, value2);
													if (graphicsPath83.PointCount > 0)
													{
														graphicsPath15.AddPath(graphicsPath83, true);
														num15++;
													}
												}
											}
											else if (this.method_289(value2))
											{
												this.method_291(geoPoint3, value2, this.color_0, b, false, graphics_0, false);
											}
										}
									}
									IL_2BBC:
									if (Client.GetMap().GetRSVisible_ASWSensor() != MapProfile._UnitCoverage.const_2)
									{
										if (contact2.GetIdentificationStatus() >= Contact_Base.IdentificationStatus.KnownClass)
										{
											ActiveUnit_Sensory sensory23 = contact2.ActualUnit.GetSensory();
											Sensor[] array = null;
											List<Sensor> list = sensory23.GetMaxRangeCoverageSubsurfaceSensorList(false, false, true, false, ref array, true);
											using (List<Sensor>.Enumerator enumerator27 = list.GetEnumerator())
											{
												while (enumerator27.MoveNext())
												{
													Sensor current2 = enumerator27.Current;
													if (current2.MaxRange > 0f)
													{
														if (!current2.coverageArc.Is360Coverage() && contact2.Heading_Known)
														{
															if (contact2 == Client.GetHookedUnit() && !contact2.IsGuidedWeapon() && !contact2.IsTorpedo())
															{
																List<Sensor> list19 = new List<Sensor>();
																ActiveUnit_Sensory sensory24 = contact2.ActualUnit.GetSensory();
																array = null;
																list19 = sensory24.GetSubsurfaceSensorList(false, false, true, false, ref array, true);
																using (List<Sensor>.Enumerator enumerator28 = list19.GetEnumerator())
																{
																	while (enumerator28.MoveNext())
																	{
																		Sensor current20 = enumerator28.Current;
																		if (current20.MaxRange > 0f && this.method_289(current20.MaxRange))
																		{
																			GraphicsPath graphicsPath84 = this.method_290(geoPoint3, current20.MaxRange);
																			if (graphicsPath84.PointCount > 0)
																			{
																				graphicsPath24.AddPath(graphicsPath84, true);
																				num24++;
																			}
																		}
																	}
																	continue;
																}
															}
															if (!contact2.IsGuidedWeapon() && !contact2.IsTorpedo())
															{
																List<Sensor> list20 = new List<Sensor>();
																ActiveUnit_Sensory sensory25 = contact2.ActualUnit.GetSensory();
																array = null;
																list20 = sensory25.GetSubsurfaceSensorList(false, false, true, false, ref array, true);
																using (List<Sensor>.Enumerator enumerator29 = list20.GetEnumerator())
																{
																	while (enumerator29.MoveNext())
																	{
																		Sensor current21 = enumerator29.Current;
																		if (current21.MaxRange > 0f && this.method_289(current21.MaxRange))
																		{
																			GraphicsPath graphicsPath85 = this.method_290(geoPoint3, current21.MaxRange);
																			if (graphicsPath85.PointCount > 0)
																			{
																				graphicsPath17.AddPath(graphicsPath85, true);
																				num17++;
																			}
																		}
																	}
																	continue;
																}
															}
															if (this.method_289(current2.MaxRange))
															{
																this.method_287(geoPoint3, current2, contact2, this.color_2, b, true, graphics_0, 0f);
															}
														}
														else if (!contact2.ActualUnit.IsWeapon && Client.GetMap().IsMergeRangesymbols() && contact2 != Client.GetHookedUnit())
														{
															if (this.method_289(current2.MaxRange))
															{
																GraphicsPath graphicsPath86 = this.method_290(geoPoint3, current2.MaxRange);
																if (graphicsPath86.PointCount > 0)
																{
																	graphicsPath17.AddPath(graphicsPath86, true);
																	num17++;
																}
															}
														}
														else if (this.method_289(current2.MaxRange))
														{
															this.method_291(geoPoint3, current2.MaxRange, this.color_2, b, false, graphics_0, false);
														}
													}
												}
												goto IL_2FD6;
											}
										}
										if (contact2.method_79().HasValue)
										{
											float value3 = contact2.method_79().Value;
											if (!contact2.ActualUnit.IsWeapon && Client.GetMap().IsMergeRangesymbols() && contact2 != Client.GetHookedUnit())
											{
												if (this.method_289(value3))
												{
													GraphicsPath graphicsPath87 = this.method_290(geoPoint3, value3);
													if (graphicsPath87.PointCount > 0)
													{
														graphicsPath17.AddPath(graphicsPath87, true);
														num17++;
													}
												}
											}
											else if (this.method_289(value3))
											{
												this.method_291(geoPoint3, value3, this.color_2, b, false, graphics_0, false);
											}
										}
									}
									IL_2FD6:
									if (contact2.GetIdentificationStatus() >= Contact_Base.IdentificationStatus.KnownClass)
									{
										if (Client.GetMap().GetRSVisible_AAWeapon() != MapProfile._UnitCoverage.const_2)
										{
											float value4 = contact2.GetAirRangeMax().Value;
											if (contact2 == Client.GetHookedUnit())
											{
												if (this.method_289(value4))
												{
													this.method_291(geoPoint3, value4, this.color_3, b, false, graphics_0, false);
												}
											}
											else if (Client.GetMap().IsMergeRangesymbols())
											{
												if (this.method_289(value4))
												{
													GraphicsPath graphicsPath88 = this.method_290(geoPoint3, value4);
													if (graphicsPath88.PointCount > 0)
													{
														graphicsPath18.AddPath(graphicsPath88, true);
														num18++;
													}
												}
											}
											else if (this.method_289(value4))
											{
												this.method_291(geoPoint3, value4, this.color_3, b, false, graphics_0, false);
											}
										}
										if (Client.GetMap().GetRSVisible_ASWeapon() != MapProfile._UnitCoverage.const_2 && contact2.GetSurfaceRangeMax().HasValue)
										{
											float value5 = contact2.GetSurfaceRangeMax().Value;
											if (contact2 == Client.GetHookedUnit())
											{
												if (this.method_289(value5))
												{
													this.method_291(geoPoint3, value5, this.color_4, b, false, graphics_0, false);
												}
											}
											else if (Client.GetMap().IsMergeRangesymbols())
											{
												if (this.method_289(value5))
												{
													GraphicsPath graphicsPath89 = this.method_290(geoPoint3, value5);
													if (graphicsPath89.PointCount > 0)
													{
														graphicsPath19.AddPath(graphicsPath89, true);
														num19++;
													}
												}
											}
											else if (this.method_289(value5))
											{
												this.method_291(geoPoint3, value5, this.color_4, b, false, graphics_0, false);
											}
										}
										if (Client.GetMap().GetRSVisible_AGWeapon() != MapProfile._UnitCoverage.const_2 && contact2.GetLandRangeMax().HasValue)
										{
											float value6 = contact2.GetLandRangeMax().Value;
											if (contact2 == Client.GetHookedUnit())
											{
												if (this.method_289(value6))
												{
													this.method_291(geoPoint3, value6, this.color_5, b, false, graphics_0, false);
												}
											}
											else if (Client.GetMap().IsMergeRangesymbols())
											{
												if (this.method_289(value6))
												{
													GraphicsPath graphicsPath90 = this.method_290(geoPoint3, value6);
													if (graphicsPath90.PointCount > 0)
													{
														graphicsPath20.AddPath(graphicsPath90, true);
														num20++;
													}
												}
											}
											else if (this.method_289(value6))
											{
												this.method_291(geoPoint3, value6, this.color_5, b, false, graphics_0, false);
											}
										}
										if (Client.GetMap().GetRSVisible_ASWWeapon() != MapProfile._UnitCoverage.const_2)
										{
											float value7 = contact2.GetSubsurfaceRangeMax().Value;
											if (contact2 == Client.GetHookedUnit())
											{
												if (this.method_289(value7))
												{
													this.method_291(geoPoint3, value7, this.color_6, b, false, graphics_0, false);
												}
											}
											else if (Client.GetMap().IsMergeRangesymbols())
											{
												if (this.method_289(value7))
												{
													GraphicsPath graphicsPath91 = this.method_290(geoPoint3, value7);
													if (graphicsPath91.PointCount > 0)
													{
														graphicsPath17.AddPath(graphicsPath91, true);
														num17++;
													}
												}
											}
											else if (this.method_289(value7))
											{
												this.method_291(geoPoint3, value7, this.color_6, b, false, graphics_0, false);
											}
										}
									}
									if (!Client.GetMap().IsMergeRangesymbols())
									{
										this.method_282(graphicsPath16, num16, graphicsPath15, num15, graphicsPath17, num17, graphicsPath18, num18, graphicsPath19, num19, graphicsPath20, num20, graphicsPath21, num21, graphics_0);
										graphicsPath15.Dispose();
										graphicsPath16.Dispose();
										graphicsPath17.Dispose();
										graphicsPath18.Dispose();
										graphicsPath19.Dispose();
										graphicsPath20.Dispose();
										graphicsPath21.Dispose();
									}
								}
								else
								{
									if (!Client.GetMap().IsMergeRangesymbols())
									{
										graphicsPath29 = new GraphicsPath();
										graphicsPath30 = new GraphicsPath();
										graphicsPath31 = new GraphicsPath();
										graphicsPath32 = new GraphicsPath();
										graphicsPath33 = new GraphicsPath();
										graphicsPath34 = new GraphicsPath();
										graphicsPath35 = new GraphicsPath();
										num29 = 0;
										num30 = 0;
										num31 = 0;
										num32 = 0;
										num33 = 0;
										num34 = 0;
										num35 = 0;
									}
									foreach (ActiveUnit current22 in ((Group)contact2.ActualUnit).GetUnitsInGroup().Values)
									{
										Contact contact3 = null;
										side_0.GetContactObservableDictionary().TryGetValue(current22.GetGuid(), ref contact3);
										if (!Information.IsNothing(contact3))
										{
											GeoPoint geoPoint4 = new GeoPoint(current22.GetLongitude(null), current22.GetLatitude(null));
											if (Client.GetMap().GetRSVisible_ASSensor() != MapProfile._UnitCoverage.const_2)
											{
												if (contact3.GetIdentificationStatus() >= Contact_Base.IdentificationStatus.KnownClass)
												{
													ActiveUnit_Sensory sensory26 = current22.GetSensory();
													Sensor[] array = null;
													List<Sensor> list = sensory26.GetMaxRangeCoverageSurfaceAndLandSensorList(true, false, false, false, ref array);
													using (List<Sensor>.Enumerator enumerator31 = list.GetEnumerator())
													{
														while (enumerator31.MoveNext())
														{
															Sensor current2 = enumerator31.Current;
															if (current2.IsOTH())
															{
																goto IL_354A;
															}
															Unit unit_19 = current22;
															float num43 = 40f;
															if (Class363.smethod_0(unit_19, ref num43) >= current2.MaxRange)
															{
																goto IL_354A;
															}
															Unit unit_20 = current22;
															num43 = 40f;
															float num53 = Class363.smethod_0(unit_20, ref num43);
															IL_3575:
															if (current22.IsSubmarine)
															{
																if (current2.IsEmmitting() && current22.GetCurrentAltitude_ASL(false) < -20f)
																{
																	num53 = 0f;
																}
															}
															else if (current2.IsEmmitting() && current22.GetCurrentAltitude_ASL(false) + (float)current22.GetMastHeight() < 0f)
															{
																num53 = 0f;
															}
															if (num53 <= 0f)
															{
																continue;
															}
															if ((!current2.coverageArc.Is360Coverage() && contact3.Heading_Known) || current2.IsCapableOfDetect(GlobalVariables.ActiveUnitType.Aircraft))
															{
																if (contact2 == Client.GetHookedUnit())
																{
																	List<Sensor> list21 = new List<Sensor>();
																	ActiveUnit_Sensory sensory27 = current22.GetSensory();
																	array = null;
																	list21 = sensory27.GetSurfaceAndLandSensorList(true, true, false, false, ref array, false);
																	using (List<Sensor>.Enumerator enumerator32 = list21.GetEnumerator())
																	{
																		while (enumerator32.MoveNext())
																		{
																			Sensor current23 = enumerator32.Current;
																			if (current23.MaxRange > 0f)
																			{
																				if (current23.IsOTH())
																				{
																					goto IL_36CD;
																				}
																				Unit unit_21 = current22;
																				num43 = 40f;
																				if (Class363.smethod_0(unit_21, ref num43) >= current23.MaxRange)
																				{
																					goto IL_36CD;
																				}
																				Unit unit_22 = current22;
																				num43 = 40f;
																				float num54 = Class363.smethod_0(unit_22, ref num43);
																				IL_36FA:
																				if (!this.method_289(num54))
																				{
																					continue;
																				}
																				GraphicsPath graphicsPath92 = this.method_286(geoPoint4, current23, current22, num54);
																				if (graphicsPath92.PointCount > 0)
																				{
																					graphicsPath23.AddPath(graphicsPath92, true);
																					num23++;
																					continue;
																				}
																				continue;
																				IL_36CD:
																				num54 = current23.MaxRange;
																				goto IL_36FA;
																			}
																		}
																		continue;
																	}
																}
																List<Sensor> list22 = new List<Sensor>();
																ActiveUnit_Sensory sensory28 = current22.GetSensory();
																array = null;
																list22 = sensory28.GetSurfaceAndLandSensorList(true, true, false, false, ref array, false);
																using (List<Sensor>.Enumerator enumerator33 = list22.GetEnumerator())
																{
																	while (enumerator33.MoveNext())
																	{
																		Sensor current24 = enumerator33.Current;
																		if (current24.MaxRange > 0f)
																		{
																			if (current24.IsOTH())
																			{
																				goto IL_37FF;
																			}
																			Unit unit_23 = current22;
																			num43 = 40f;
																			if (Class363.smethod_0(unit_23, ref num43) >= current24.MaxRange)
																			{
																				goto IL_37FF;
																			}
																			Unit unit_24 = current22;
																			num43 = 40f;
																			float num55 = Class363.smethod_0(unit_24, ref num43);
																			IL_382C:
																			if (!this.method_289(num55))
																			{
																				continue;
																			}
																			GraphicsPath graphicsPath93 = this.method_286(geoPoint4, current24, current22, num55);
																			if (Client.GetMap().IsMergeRangesymbols())
																			{
																				if (graphicsPath93.PointCount > 0)
																				{
																					graphicsPath16.AddPath(graphicsPath93, true);
																					num16++;
																					continue;
																				}
																				continue;
																			}
																			else
																			{
																				if (graphicsPath93.PointCount > 0)
																				{
																					graphicsPath30.AddPath(graphicsPath93, true);
																					num30++;
																					continue;
																				}
																				continue;
																			}
																			IL_37FF:
																			num55 = current24.MaxRange;
																			goto IL_382C;
																		}
																	}
																	continue;
																}
															}
															if (Client.GetMap().IsMergeRangesymbols() && contact2 != Client.GetHookedUnit())
															{
																if (!this.method_289(num53))
																{
																	continue;
																}
																GraphicsPath graphicsPath94 = this.method_290(geoPoint4, num53);
																if (Client.GetMap().IsMergeRangesymbols())
																{
																	if (graphicsPath94.PointCount > 0)
																	{
																		graphicsPath16.AddPath(graphicsPath94, true);
																		num16++;
																		continue;
																	}
																	continue;
																}
																else
																{
																	if (graphicsPath94.PointCount > 0)
																	{
																		graphicsPath30.AddPath(graphicsPath94, true);
																		num30++;
																		continue;
																	}
																	continue;
																}
															}
															else
															{
																if (!this.method_289(num53))
																{
																	continue;
																}
																GraphicsPath graphicsPath95 = this.method_290(geoPoint4, num53);
																if (graphicsPath95.PointCount > 0)
																{
																	graphicsPath23.AddPath(graphicsPath95, true);
																	num23++;
																	continue;
																}
																continue;
															}
															IL_354A:
															num53 = current2.MaxRange;
															goto IL_3575;
														}
														goto IL_3A36;
													}
												}
												if (contact3.method_78().HasValue)
												{
													float value8 = contact3.method_78().Value;
													if (this.method_289(value8))
													{
														GraphicsPath graphicsPath96 = this.method_290(geoPoint4, value8);
														if (graphicsPath96.PointCount > 0)
														{
															graphicsPath16.AddPath(graphicsPath96, true);
															num16++;
														}
													}
												}
											}
											IL_3A36:
											if (Client.GetMap().GetRSVisible_AASensor() != MapProfile._UnitCoverage.const_2 && contact3.GetIdentificationStatus() >= Contact_Base.IdentificationStatus.KnownClass)
											{
												if (!Information.IsNothing(contact3.ActualUnit))
												{
													ActiveUnit_Sensory sensory29 = contact3.ActualUnit.GetSensory();
													Sensor[] array = null;
													List<Sensor> list = sensory29.GetMaxRangeCoverageAirSpaceSensorList(true, false, false, false, ref array);
													using (List<Sensor>.Enumerator enumerator34 = list.GetEnumerator())
													{
														while (enumerator34.MoveNext())
														{
															Sensor current2 = enumerator34.Current;
															if (current2.MaxRange > 0f)
															{
																if (!current2.coverageArc.Is360Coverage() && contact3.Heading_Known)
																{
																	if (contact2 == Client.GetHookedUnit() && !current22.IsGuidedWeapon() && !current22.IsTorpedo())
																	{
																		List<Sensor> list23 = new List<Sensor>();
																		ActiveUnit_Sensory sensory30 = current22.GetSensory();
																		array = null;
																		list23 = sensory30.GetAirSpaceSensorList(true, true, false, false, ref array, false);
																		using (List<Sensor>.Enumerator enumerator35 = list23.GetEnumerator())
																		{
																			while (enumerator35.MoveNext())
																			{
																				Sensor current25 = enumerator35.Current;
																				if (current25.MaxRange > 0f && this.method_289(current25.MaxRange))
																				{
																					GraphicsPath graphicsPath97 = this.method_286(geoPoint4, current25, current22, current25.MaxRange);
																					if (graphicsPath97.PointCount > 0)
																					{
																						graphicsPath22.AddPath(graphicsPath97, true);
																						num22++;
																					}
																				}
																			}
																			continue;
																		}
																	}
																	List<Sensor> list24 = new List<Sensor>();
																	ActiveUnit_Sensory sensory31 = current22.GetSensory();
																	array = null;
																	list24 = sensory31.GetAirSpaceSensorList(true, true, false, false, ref array, false);
																	using (List<Sensor>.Enumerator enumerator36 = list24.GetEnumerator())
																	{
																		while (enumerator36.MoveNext())
																		{
																			Sensor current26 = enumerator36.Current;
																			if (current26.MaxRange > 0f && this.method_289(current26.MaxRange))
																			{
																				GraphicsPath graphicsPath98 = this.method_286(geoPoint4, current26, current22, current26.MaxRange);
																				if (Client.GetMap().IsMergeRangesymbols())
																				{
																					if (graphicsPath98.PointCount > 0)
																					{
																						graphicsPath15.AddPath(graphicsPath98, true);
																						num15++;
																					}
																				}
																				else if (graphicsPath98.PointCount > 0)
																				{
																					graphicsPath29.AddPath(graphicsPath98, true);
																					num29++;
																				}
																			}
																		}
																		continue;
																	}
																}
																if (Client.GetMap().IsMergeRangesymbols() && contact2 != Client.GetHookedUnit())
																{
																	if (this.method_289(current2.MaxRange))
																	{
																		GraphicsPath graphicsPath99 = this.method_290(geoPoint4, current2.MaxRange);
																		if (Client.GetMap().IsMergeRangesymbols())
																		{
																			if (graphicsPath99.PointCount > 0)
																			{
																				graphicsPath15.AddPath(graphicsPath99, true);
																				num15++;
																			}
																		}
																		else if (graphicsPath99.PointCount > 0)
																		{
																			graphicsPath29.AddPath(graphicsPath99, true);
																			num29++;
																		}
																	}
																}
																else if (this.method_289(current2.MaxRange))
																{
																	GraphicsPath graphicsPath100 = this.method_290(geoPoint4, current2.MaxRange);
																	if (graphicsPath100.PointCount > 0)
																	{
																		graphicsPath22.AddPath(graphicsPath100, true);
																		num22++;
																	}
																}
															}
														}
														goto IL_3E6A;
													}
												}
												if (contact3.GetMaxRange().HasValue)
												{
													float value9 = contact3.GetMaxRange().Value;
													if (this.method_289(value9))
													{
														GraphicsPath graphicsPath101 = this.method_290(geoPoint4, value9);
														if (graphicsPath101.PointCount > 0)
														{
															graphicsPath15.AddPath(graphicsPath101, true);
															num15++;
														}
													}
												}
											}
											IL_3E6A:
											if (Client.GetMap().GetRSVisible_ASWSensor() != MapProfile._UnitCoverage.const_2)
											{
												if (contact3.GetIdentificationStatus() >= Contact_Base.IdentificationStatus.KnownClass)
												{
													ActiveUnit_Sensory sensory32 = current22.GetSensory();
													Sensor[] array = null;
													List<Sensor> list = sensory32.GetMaxRangeCoverageSubsurfaceSensorList(false, false, true, false, ref array, true);
													using (List<Sensor>.Enumerator enumerator37 = list.GetEnumerator())
													{
														while (enumerator37.MoveNext())
														{
															Sensor current2 = enumerator37.Current;
															if (current2.MaxRange > 0f)
															{
																if (!current2.coverageArc.Is360Coverage() && contact3.Heading_Known)
																{
																	if (contact2 == Client.GetHookedUnit())
																	{
																		List<Sensor> list25 = new List<Sensor>();
																		ActiveUnit_Sensory sensory33 = current22.GetSensory();
																		array = null;
																		list25 = sensory33.GetSubsurfaceSensorList(false, false, true, false, ref array, true);
																		using (List<Sensor>.Enumerator enumerator38 = list25.GetEnumerator())
																		{
																			while (enumerator38.MoveNext())
																			{
																				Sensor current27 = enumerator38.Current;
																				if (current27.MaxRange > 0f && this.method_289(current27.MaxRange))
																				{
																					GraphicsPath graphicsPath102 = this.method_286(geoPoint4, current27, current22, current27.MaxRange);
																					if (graphicsPath102.PointCount > 0)
																					{
																						graphicsPath24.AddPath(graphicsPath102, true);
																						num24++;
																					}
																				}
																			}
																			continue;
																		}
																	}
																	List<Sensor> list26 = new List<Sensor>();
																	ActiveUnit_Sensory sensory34 = current22.GetSensory();
																	array = null;
																	list26 = sensory34.GetSubsurfaceSensorList(false, false, true, false, ref array, true);
																	using (List<Sensor>.Enumerator enumerator39 = list26.GetEnumerator())
																	{
																		while (enumerator39.MoveNext())
																		{
																			Sensor current28 = enumerator39.Current;
																			if (current28.MaxRange > 0f && this.method_289(current28.MaxRange))
																			{
																				GraphicsPath graphicsPath103 = this.method_286(geoPoint4, current28, current22, current28.MaxRange);
																				if (Client.GetMap().IsMergeRangesymbols())
																				{
																					if (graphicsPath103.PointCount > 0)
																					{
																						graphicsPath17.AddPath(graphicsPath103, true);
																						num17++;
																					}
																				}
																				else if (graphicsPath103.PointCount > 0)
																				{
																					graphicsPath31.AddPath(graphicsPath103, true);
																					num31++;
																				}
																			}
																		}
																		continue;
																	}
																}
																if (Client.GetMap().IsMergeRangesymbols() && contact2 != Client.GetHookedUnit())
																{
																	if (this.method_289(current2.MaxRange))
																	{
																		GraphicsPath graphicsPath104 = this.method_290(geoPoint4, current2.MaxRange);
																		if (Client.GetMap().IsMergeRangesymbols())
																		{
																			if (graphicsPath104.PointCount > 0)
																			{
																				graphicsPath17.AddPath(graphicsPath104, true);
																				num17++;
																			}
																		}
																		else if (graphicsPath104.PointCount > 0)
																		{
																			graphicsPath31.AddPath(graphicsPath104, true);
																			num31++;
																		}
																	}
																}
																else if (this.method_289(current2.MaxRange))
																{
																	GraphicsPath graphicsPath105 = this.method_290(geoPoint4, current2.MaxRange);
																	if (graphicsPath105.PointCount > 0)
																	{
																		graphicsPath24.AddPath(graphicsPath105, true);
																		num24++;
																	}
																}
															}
														}
														goto IL_4275;
													}
												}
												if (contact3.method_79().HasValue)
												{
													float value10 = contact3.method_79().Value;
													if (this.method_289(value10))
													{
														GraphicsPath graphicsPath106 = this.method_290(geoPoint4, value10);
														if (graphicsPath106.PointCount > 0)
														{
															graphicsPath17.AddPath(graphicsPath106, true);
															num17++;
														}
													}
												}
											}
											IL_4275:
											if (contact3.GetIdentificationStatus() >= Contact_Base.IdentificationStatus.KnownClass)
											{
												if (Client.GetMap().GetRSVisible_AAWeapon() != MapProfile._UnitCoverage.const_2 && contact3.GetAirRangeMax().HasValue)
												{
													float value11 = contact3.GetAirRangeMax().Value;
													if (contact2 == Client.GetHookedUnit())
													{
														if (this.method_289(value11))
														{
															GraphicsPath graphicsPath107 = this.method_290(geoPoint4, value11);
															if (graphicsPath107.PointCount > 0)
															{
																graphicsPath25.AddPath(graphicsPath107, true);
																num25++;
															}
														}
													}
													else if (this.method_289(value11))
													{
														GraphicsPath graphicsPath108 = this.method_290(geoPoint4, value11);
														if (Client.GetMap().IsMergeRangesymbols())
														{
															if (graphicsPath108.PointCount > 0)
															{
																graphicsPath18.AddPath(graphicsPath108, true);
																num18++;
															}
														}
														else if (graphicsPath108.PointCount > 0)
														{
															graphicsPath32.AddPath(graphicsPath108, true);
															num32++;
														}
													}
												}
												if (Client.GetMap().GetRSVisible_ASWeapon() != MapProfile._UnitCoverage.const_2 && contact3.GetSurfaceRangeMax().HasValue)
												{
													float value12 = contact3.GetSurfaceRangeMax().Value;
													if (contact2 == Client.GetHookedUnit())
													{
														if (this.method_289(value12))
														{
															GraphicsPath graphicsPath109 = this.method_290(geoPoint4, value12);
															if (graphicsPath109.PointCount > 0)
															{
																graphicsPath26.AddPath(graphicsPath109, true);
																num26++;
															}
														}
													}
													else if (this.method_289(value12))
													{
														GraphicsPath graphicsPath110 = this.method_290(geoPoint4, value12);
														if (Client.GetMap().IsMergeRangesymbols())
														{
															if (graphicsPath110.PointCount > 0)
															{
																graphicsPath19.AddPath(graphicsPath110, true);
																num19++;
															}
														}
														else if (graphicsPath110.PointCount > 0)
														{
															graphicsPath33.AddPath(graphicsPath110, true);
															num33++;
														}
													}
												}
												if (Client.GetMap().GetRSVisible_AGWeapon() != MapProfile._UnitCoverage.const_2 && contact3.GetLandRangeMax().HasValue)
												{
													float value13 = contact3.GetLandRangeMax().Value;
													if (contact2 == Client.GetHookedUnit())
													{
														if (this.method_289(value13))
														{
															GraphicsPath graphicsPath111 = this.method_290(geoPoint4, value13);
															if (graphicsPath111.PointCount > 0)
															{
																graphicsPath27.AddPath(graphicsPath111, true);
																num27++;
															}
														}
													}
													else if (this.method_289(value13))
													{
														GraphicsPath graphicsPath112 = this.method_290(geoPoint4, value13);
														if (Client.GetMap().IsMergeRangesymbols())
														{
															if (graphicsPath112.PointCount > 0)
															{
																graphicsPath20.AddPath(graphicsPath112, true);
																num20++;
															}
														}
														else if (graphicsPath112.PointCount > 0)
														{
															graphicsPath34.AddPath(graphicsPath112, true);
															num34++;
														}
													}
												}
												if (Client.GetMap().GetRSVisible_ASWWeapon() != MapProfile._UnitCoverage.const_2 && contact3.GetSubsurfaceRangeMax().HasValue)
												{
													float value14 = contact3.GetSubsurfaceRangeMax().Value;
													if (contact2 == Client.GetHookedUnit())
													{
														if (this.method_289(value14))
														{
															GraphicsPath graphicsPath113 = this.method_290(geoPoint4, value14);
															if (graphicsPath113.PointCount > 0)
															{
																graphicsPath28.AddPath(graphicsPath113, true);
																num28++;
															}
														}
													}
													else if (this.method_289(value14))
													{
														GraphicsPath graphicsPath114 = this.method_290(geoPoint4, value14);
														if (Client.GetMap().IsMergeRangesymbols())
														{
															if (graphicsPath114.PointCount > 0)
															{
																graphicsPath21.AddPath(graphicsPath114, true);
																num21++;
															}
														}
														else if (graphicsPath114.PointCount > 0)
														{
															graphicsPath35.AddPath(graphicsPath114, true);
															num35++;
														}
													}
												}
											}
										}
									}
									if (!Client.GetMap().IsMergeRangesymbols())
									{
										this.method_284(graphicsPath30, num30, graphicsPath29, num29, graphicsPath31, num31, graphicsPath32, num32, graphicsPath33, num33, graphicsPath34, num34, graphicsPath35, num35, graphics_0);
										graphicsPath29.Dispose();
										graphicsPath30.Dispose();
										graphicsPath31.Dispose();
										graphicsPath32.Dispose();
										graphicsPath33.Dispose();
										graphicsPath34.Dispose();
										graphicsPath35.Dispose();
									}
								}
							}
						}
					}
					this.SetGraphicsParameters(graphics_0);
					if (Client.GetMap().IsMergeRangesymbols())
					{
						this.method_278(graphicsPath2, num2, graphicsPath, num, graphicsPath3, num3, graphicsPath4, num4, graphicsPath5, num5, graphicsPath6, num6, graphicsPath7, num7, graphics_0);
					}
					this.method_279(graphicsPath9, num9, graphicsPath8, num8, graphicsPath10, num10, graphicsPath11, num11, graphicsPath12, num12, graphicsPath13, num13, graphicsPath14, num14, graphics_0);
					if (Client.GetMap().IsMergeRangesymbols())
					{
						this.method_282(graphicsPath16, num16, graphicsPath15, num15, graphicsPath17, num17, graphicsPath18, num18, graphicsPath19, num19, graphicsPath20, num20, graphicsPath21, num21, graphics_0);
					}
					this.method_280(graphicsPath23, num23, graphicsPath22, num22, graphicsPath24, num24, graphicsPath25, num25, graphicsPath26, num26, graphicsPath27, num27, graphicsPath28, num28, graphics_0);
					graphicsPath.Dispose();
					graphicsPath2.Dispose();
					graphicsPath3.Dispose();
					graphicsPath4.Dispose();
					graphicsPath5.Dispose();
					graphicsPath6.Dispose();
					graphicsPath7.Dispose();
					graphicsPath8.Dispose();
					graphicsPath9.Dispose();
					graphicsPath10.Dispose();
					graphicsPath11.Dispose();
					graphicsPath12.Dispose();
					graphicsPath13.Dispose();
					graphicsPath14.Dispose();
					graphicsPath15.Dispose();
					graphicsPath16.Dispose();
					graphicsPath17.Dispose();
					graphicsPath18.Dispose();
					graphicsPath19.Dispose();
					graphicsPath20.Dispose();
					graphicsPath21.Dispose();
					graphicsPath22.Dispose();
					graphicsPath23.Dispose();
					graphicsPath24.Dispose();
					graphicsPath25.Dispose();
					graphicsPath26.Dispose();
					graphicsPath27.Dispose();
					graphicsPath28.Dispose();
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200207", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060071A5 RID: 29093 RVA: 0x0002F6EC File Offset: 0x0002D8EC
		private bool method_276(float float_7, float float_8)
		{
			return float_7 > 0f && float_8 > 0f && float_7 < (float)this.WorldMapBox.Width && float_8 < (float)this.WorldMapBox.Height;
		}

		// Token: 0x060071A6 RID: 29094 RVA: 0x004123F0 File Offset: 0x004105F0
		private void DrawPath(Pen pen_1, GraphicsPath graphicsPath_, Graphics graphics_)
		{
			checked
			{
				try
				{
					bool flag = false;
					PointF[] pathPoints = graphicsPath_.PathPoints;
					for (int i = 0; i < pathPoints.Length; i++)
					{
						PointF pointF = pathPoints[i];
						if (this.method_276(pointF.X, pointF.Y))
						{
							graphics_.DrawPath(pen_1, graphicsPath_);
							return;
						}
					}
					if (flag)
					{
						graphics_.DrawPath(pen_1, graphicsPath_);
					}
				}
				catch (Exception projectError)
				{
					ProjectData.SetProjectError(projectError);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060071A7 RID: 29095 RVA: 0x00412484 File Offset: 0x00410684
		private void method_278(GraphicsPath graphicsPath_1, int int_14, GraphicsPath graphicsPath_2, int int_15, GraphicsPath graphicsPath_3, int int_16, GraphicsPath graphicsPath_4, int int_17, GraphicsPath graphicsPath_5, int int_18, GraphicsPath graphicsPath_6, int int_19, GraphicsPath graphicsPath_7, int int_20, Graphics graphics_0)
		{
			if (graphicsPath_1.PointCount > 0)
			{
				if (int_14 > 1)
				{
					graphicsPath_1 = this.method_75(graphicsPath_1);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_1), 1f), graphicsPath_1, graphics_0);
			}
			if (graphicsPath_2.PointCount > 0)
			{
				if (int_15 > 1)
				{
					graphicsPath_2 = this.method_75(graphicsPath_2);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_0), 1f), graphicsPath_2, graphics_0);
			}
			if (graphicsPath_3.PointCount > 0)
			{
				if (int_16 > 1)
				{
					graphicsPath_3 = this.method_75(graphicsPath_3);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_2), 1f), graphicsPath_3, graphics_0);
			}
			if (graphicsPath_4.PointCount > 0)
			{
				if (int_17 > 1)
				{
					graphicsPath_4 = this.method_75(graphicsPath_4);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_3), 1f), graphicsPath_4, graphics_0);
			}
			if (graphicsPath_5.PointCount > 0)
			{
				if (int_18 > 1)
				{
					graphicsPath_5 = this.method_75(graphicsPath_5);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_4), 1f), graphicsPath_5, graphics_0);
			}
			if (graphicsPath_6.PointCount > 0)
			{
				if (int_19 > 1)
				{
					graphicsPath_6 = this.method_75(graphicsPath_6);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_5), 1f), graphicsPath_6, graphics_0);
			}
			if (graphicsPath_7.PointCount > 0)
			{
				if (int_20 > 1)
				{
					graphicsPath_7 = this.method_75(graphicsPath_7);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_6), 1f), graphicsPath_7, graphics_0);
			}
		}

		// Token: 0x060071A8 RID: 29096 RVA: 0x0041267C File Offset: 0x0041087C
		private void method_279(GraphicsPath graphicsPath_1, int int_14, GraphicsPath graphicsPath_2, int int_15, GraphicsPath graphicsPath_3, int int_16, GraphicsPath graphicsPath_4, int int_17, GraphicsPath graphicsPath_5, int int_18, GraphicsPath graphicsPath_6, int int_19, GraphicsPath graphicsPath_7, int int_20, Graphics graphics_0)
		{
			byte b;
			if (Client.GetMap().GetShowRangeSymbols() == MapProfile._UnitCoverage.const_1)
			{
				b = 1;
			}
			else
			{
				b = 2;
			}
			if (graphicsPath_1.PointCount > 0)
			{
				if (int_14 > 1)
				{
					graphicsPath_1 = this.method_75(graphicsPath_1);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_1), (float)b), graphicsPath_1, graphics_0);
			}
			if (graphicsPath_2.PointCount > 0)
			{
				if (int_15 > 1)
				{
					graphicsPath_2 = this.method_75(graphicsPath_2);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_0), (float)b), graphicsPath_2, graphics_0);
			}
			if (graphicsPath_3.PointCount > 0)
			{
				if (int_16 > 1)
				{
					graphicsPath_3 = this.method_75(graphicsPath_3);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_2), (float)b), graphicsPath_3, graphics_0);
			}
			if (graphicsPath_4.PointCount > 0)
			{
				if (int_17 > 1)
				{
					graphicsPath_4 = this.method_75(graphicsPath_4);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_3), (float)b), graphicsPath_4, graphics_0);
			}
			if (graphicsPath_5.PointCount > 0)
			{
				if (int_18 > 1)
				{
					graphicsPath_5 = this.method_75(graphicsPath_5);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_4), (float)b), graphicsPath_5, graphics_0);
			}
			if (graphicsPath_6.PointCount > 0)
			{
				if (int_19 > 1)
				{
					graphicsPath_6 = this.method_75(graphicsPath_6);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_5), (float)b), graphicsPath_6, graphics_0);
			}
			if (graphicsPath_7.PointCount > 0)
			{
				if (int_20 > 1)
				{
					graphicsPath_7 = this.method_75(graphicsPath_7);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_6), (float)b), graphicsPath_7, graphics_0);
			}
		}

		// Token: 0x060071A9 RID: 29097 RVA: 0x00412878 File Offset: 0x00410A78
		private void method_280(GraphicsPath graphicsPath_1, int int_14, GraphicsPath graphicsPath_2, int int_15, GraphicsPath graphicsPath_3, int int_16, GraphicsPath graphicsPath_4, int int_17, GraphicsPath graphicsPath_5, int int_18, GraphicsPath graphicsPath_6, int int_19, GraphicsPath graphicsPath_7, int int_20, Graphics graphics_0)
		{
			byte b;
			if (Client.GetMap().GetShowRangeSymbols() == MapProfile._UnitCoverage.const_1)
			{
				b = 1;
			}
			else
			{
				b = 2;
			}
			if (graphicsPath_1.PointCount > 0)
			{
				if (int_14 > 1)
				{
					graphicsPath_1 = this.method_75(graphicsPath_1);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_1), (float)b)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_1, graphics_0);
			}
			if (graphicsPath_2.PointCount > 0)
			{
				if (int_15 > 1)
				{
					graphicsPath_2 = this.method_75(graphicsPath_2);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_0), (float)b)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_2, graphics_0);
			}
			if (graphicsPath_3.PointCount > 0)
			{
				if (int_16 > 1)
				{
					graphicsPath_3 = this.method_75(graphicsPath_3);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_2), (float)b)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_3, graphics_0);
			}
			if (graphicsPath_4.PointCount > 0)
			{
				if (int_17 > 1)
				{
					graphicsPath_4 = this.method_75(graphicsPath_4);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_3), (float)b)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_4, graphics_0);
			}
			if (graphicsPath_5.PointCount > 0)
			{
				if (int_18 > 1)
				{
					graphicsPath_5 = this.method_75(graphicsPath_5);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_4), (float)b)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_5, graphics_0);
			}
			if (graphicsPath_6.PointCount > 0)
			{
				if (int_19 > 1)
				{
					graphicsPath_6 = this.method_75(graphicsPath_6);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_5), (float)b)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_6, graphics_0);
			}
			if (graphicsPath_7.PointCount > 0)
			{
				if (int_20 > 1)
				{
					graphicsPath_7 = this.method_75(graphicsPath_7);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_6), (float)b)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_7, graphics_0);
			}
		}

		// Token: 0x060071AA RID: 29098 RVA: 0x00412AC0 File Offset: 0x00410CC0
		private void method_281(GraphicsPath graphicsPath_1, int int_14, GraphicsPath graphicsPath_2, int int_15, GraphicsPath graphicsPath_3, int int_16, GraphicsPath graphicsPath_4, int int_17, GraphicsPath graphicsPath_5, int int_18, GraphicsPath graphicsPath_6, int int_19, GraphicsPath graphicsPath_7, int int_20, Graphics graphics_0)
		{
			if (graphicsPath_1.PointCount > 0)
			{
				if (int_14 > 1)
				{
					graphicsPath_1 = this.method_75(graphicsPath_1);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_1), 1f), graphicsPath_1, graphics_0);
			}
			if (graphicsPath_2.PointCount > 0)
			{
				graphicsPath_2 = this.method_75(graphicsPath_2);
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_0), 1f), graphicsPath_2, graphics_0);
			}
			if (graphicsPath_3.PointCount > 0)
			{
				if (int_16 > 1)
				{
					graphicsPath_3 = this.method_75(graphicsPath_3);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_2), 1f), graphicsPath_3, graphics_0);
			}
			if (graphicsPath_4.PointCount > 0)
			{
				if (int_17 > 1)
				{
					graphicsPath_4 = this.method_75(graphicsPath_4);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_3), 1f), graphicsPath_4, graphics_0);
			}
			if (graphicsPath_5.PointCount > 0)
			{
				if (int_18 > 1)
				{
					graphicsPath_5 = this.method_75(graphicsPath_5);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_4), 1f), graphicsPath_5, graphics_0);
			}
			if (graphicsPath_6.PointCount > 0)
			{
				if (int_19 > 1)
				{
					graphicsPath_6 = this.method_75(graphicsPath_6);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_5), 1f), graphicsPath_6, graphics_0);
			}
			if (graphicsPath_7.PointCount > 0)
			{
				if (int_20 > 1)
				{
					graphicsPath_7 = this.method_75(graphicsPath_7);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_6), 1f), graphicsPath_7, graphics_0);
			}
		}

		// Token: 0x060071AB RID: 29099 RVA: 0x00412CB0 File Offset: 0x00410EB0
		private void method_282(GraphicsPath graphicsPath_1, int int_14, GraphicsPath graphicsPath_2, int int_15, GraphicsPath graphicsPath_3, int int_16, GraphicsPath graphicsPath_4, int int_17, GraphicsPath graphicsPath_5, int int_18, GraphicsPath graphicsPath_6, int int_19, GraphicsPath graphicsPath_7, int int_20, Graphics graphics_0)
		{
			if (graphicsPath_1.PointCount > 0)
			{
				if (int_14 > 1)
				{
					graphicsPath_1 = this.method_75(graphicsPath_1);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_1), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_1, graphics_0);
			}
			if (graphicsPath_2.PointCount > 0)
			{
				if (int_15 > 1)
				{
					graphicsPath_2 = this.method_75(graphicsPath_2);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_0), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_2, graphics_0);
			}
			if (graphicsPath_3.PointCount > 0)
			{
				if (int_16 > 1)
				{
					graphicsPath_3 = this.method_75(graphicsPath_3);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_2), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_3, graphics_0);
			}
			if (graphicsPath_4.PointCount > 0)
			{
				if (int_17 > 1)
				{
					graphicsPath_4 = this.method_75(graphicsPath_4);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_3), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_4, graphics_0);
			}
			if (graphicsPath_5.PointCount > 0)
			{
				if (int_18 > 1)
				{
					graphicsPath_5 = this.method_75(graphicsPath_5);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_4), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_5, graphics_0);
			}
			if (graphicsPath_6.PointCount > 0)
			{
				if (int_19 > 1)
				{
					graphicsPath_6 = this.method_75(graphicsPath_6);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_5), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_6, graphics_0);
			}
			if (graphicsPath_7.PointCount > 0)
			{
				if (int_20 > 1)
				{
					graphicsPath_7 = this.method_75(graphicsPath_7);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_6), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_7, graphics_0);
			}
		}

		// Token: 0x060071AC RID: 29100 RVA: 0x00412484 File Offset: 0x00410684
		private void method_283(GraphicsPath graphicsPath_1, int int_14, GraphicsPath graphicsPath_2, int int_15, GraphicsPath graphicsPath_3, int int_16, GraphicsPath graphicsPath_4, int int_17, GraphicsPath graphicsPath_5, int int_18, GraphicsPath graphicsPath_6, int int_19, GraphicsPath graphicsPath_7, int int_20, Graphics graphics_0)
		{
			if (graphicsPath_1.PointCount > 0)
			{
				if (int_14 > 1)
				{
					graphicsPath_1 = this.method_75(graphicsPath_1);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_1), 1f), graphicsPath_1, graphics_0);
			}
			if (graphicsPath_2.PointCount > 0)
			{
				if (int_15 > 1)
				{
					graphicsPath_2 = this.method_75(graphicsPath_2);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_0), 1f), graphicsPath_2, graphics_0);
			}
			if (graphicsPath_3.PointCount > 0)
			{
				if (int_16 > 1)
				{
					graphicsPath_3 = this.method_75(graphicsPath_3);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_2), 1f), graphicsPath_3, graphics_0);
			}
			if (graphicsPath_4.PointCount > 0)
			{
				if (int_17 > 1)
				{
					graphicsPath_4 = this.method_75(graphicsPath_4);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_3), 1f), graphicsPath_4, graphics_0);
			}
			if (graphicsPath_5.PointCount > 0)
			{
				if (int_18 > 1)
				{
					graphicsPath_5 = this.method_75(graphicsPath_5);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_4), 1f), graphicsPath_5, graphics_0);
			}
			if (graphicsPath_6.PointCount > 0)
			{
				if (int_19 > 1)
				{
					graphicsPath_6 = this.method_75(graphicsPath_6);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_5), 1f), graphicsPath_6, graphics_0);
			}
			if (graphicsPath_7.PointCount > 0)
			{
				if (int_20 > 1)
				{
					graphicsPath_7 = this.method_75(graphicsPath_7);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_6), 1f), graphicsPath_7, graphics_0);
			}
		}

		// Token: 0x060071AD RID: 29101 RVA: 0x00412CB0 File Offset: 0x00410EB0
		private void method_284(GraphicsPath graphicsPath_1, int int_14, GraphicsPath graphicsPath_2, int int_15, GraphicsPath graphicsPath_3, int int_16, GraphicsPath graphicsPath_4, int int_17, GraphicsPath graphicsPath_5, int int_18, GraphicsPath graphicsPath_6, int int_19, GraphicsPath graphicsPath_7, int int_20, Graphics graphics_0)
		{
			if (graphicsPath_1.PointCount > 0)
			{
				if (int_14 > 1)
				{
					graphicsPath_1 = this.method_75(graphicsPath_1);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_1), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_1, graphics_0);
			}
			if (graphicsPath_2.PointCount > 0)
			{
				if (int_15 > 1)
				{
					graphicsPath_2 = this.method_75(graphicsPath_2);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_0), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_2, graphics_0);
			}
			if (graphicsPath_3.PointCount > 0)
			{
				if (int_16 > 1)
				{
					graphicsPath_3 = this.method_75(graphicsPath_3);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_2), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_3, graphics_0);
			}
			if (graphicsPath_4.PointCount > 0)
			{
				if (int_17 > 1)
				{
					graphicsPath_4 = this.method_75(graphicsPath_4);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_3), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_4, graphics_0);
			}
			if (graphicsPath_5.PointCount > 0)
			{
				if (int_18 > 1)
				{
					graphicsPath_5 = this.method_75(graphicsPath_5);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_4), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_5, graphics_0);
			}
			if (graphicsPath_6.PointCount > 0)
			{
				if (int_19 > 1)
				{
					graphicsPath_6 = this.method_75(graphicsPath_6);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_5), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_6, graphics_0);
			}
			if (graphicsPath_7.PointCount > 0)
			{
				if (int_20 > 1)
				{
					graphicsPath_7 = this.method_75(graphicsPath_7);
				}
				this.DrawPath(new Pen(Color.FromArgb(255, this.color_6), 1f)
				{
					DashStyle = DashStyle.Dash
				}, graphicsPath_7, graphics_0);
			}
		}

		// Token: 0x060071AE RID: 29102 RVA: 0x00412EF0 File Offset: 0x004110F0
		private List<RangeSymbol> method_285(ref GeoPoint geoPoint_5, PlatformComponent platformComponent_0, float float_7)
		{
			List<RangeSymbol> list = new List<RangeSymbol>();
			bool flag = false;
			RangeSymbol rangeSymbol = new RangeSymbol();
			Color color = default(Color);
			if (platformComponent_0.coverageArc.SB1)
			{
				flag = true;
				rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 0f, 22.5f, color);
			}
			if (platformComponent_0.coverageArc.SB2)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 45f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 22.5f, 45f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.SMF1)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 67.5f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 45f, 67.5f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.SMF2)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 90f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 67.5f, 90f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.SMA1)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 112.5f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 90f, 112.5f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.SMA2)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 135f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 112.5f, 135f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.SS1)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 157.5f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 135f, 157.5f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.SS2)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 180f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 157.5f, 180f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.PS1)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 202.5f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 180f, 202.5f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.PS2)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 225f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 202.5f, 225f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.PMA1)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 247.5f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 225f, 247.5f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.PMA2)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 270f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 247.5f, 270f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.PMF1)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 292.5f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 270f, 292.5f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.PMF2)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 315f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 292.5f, 315f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.PB1)
			{
				if (flag)
				{
					rangeSymbol.RightArc = 337.5f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 315f, 337.5f, color);
					flag = true;
				}
			}
			else if (flag)
			{
				list.Add(rangeSymbol);
				flag = false;
			}
			if (platformComponent_0.coverageArc.PB2)
			{
				if (flag)
				{
					if (platformComponent_0.coverageArc.SB1)
					{
						if (list.Count > 0)
						{
							list[0].LeftArc = rangeSymbol.LeftArc;
							flag = false;
						}
						else
						{
							list.Add(rangeSymbol);
							list[0].RightArc = 360f;
							flag = false;
						}
					}
					else
					{
						rangeSymbol.RightArc = 0f;
					}
				}
				else if (platformComponent_0.coverageArc.SB1)
				{
					list[0].LeftArc = 337.5f;
				}
				else
				{
					rangeSymbol = new RangeSymbol(RangeSymbol.SymbolType.Wedge, "", (double)float_7, 337.5f, 0f, color);
					flag = true;
				}
			}
			if (flag)
			{
				list.Add(rangeSymbol);
			}
			return list;
		}

		// Token: 0x060071AF RID: 29103 RVA: 0x00413458 File Offset: 0x00411658
		private GraphicsPath method_286(GeoPoint thePoint, Sensor theSensor, Unit theUnit, float theSensorRange = 0f)
		{
			GraphicsPath graphicsPath = new GraphicsPath();
			List<RangeSymbol> list = this.method_285(ref thePoint, theSensor, theSensorRange);
			foreach (RangeSymbol current in list)
			{
				graphicsPath.AddPath(this.method_292(thePoint, theUnit.GetCurrentHeading(), (float)current.RangeNM, current.LeftArc, current.RightArc), true);
			}
			return graphicsPath;
		}

		// Token: 0x060071B0 RID: 29104 RVA: 0x004134DC File Offset: 0x004116DC
		private void method_287(GeoPoint thePoint, Sensor theSensor, Unit theUnit, Color theColor, byte LineThickness, bool IsFriendlySymbol, Graphics theGraphObj, float theSensorRange = 0f)
		{
			List<RangeSymbol> list = this.method_285(ref thePoint, theSensor, theSensorRange);
			foreach (RangeSymbol current in list)
			{
				if (theSensorRange == 0f)
				{
					try
					{
						this.method_293(thePoint, theUnit.GetCurrentHeading(), theSensor.MaxRange, current.LeftArc, current.RightArc, theColor, LineThickness, IsFriendlySymbol, theGraphObj, false);
						continue;
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 200208", ex2.Message);
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
						continue;
					}
				}
				try
				{
					this.method_293(thePoint, theUnit.GetCurrentHeading(), theSensorRange, current.LeftArc, current.RightArc, theColor, LineThickness, IsFriendlySymbol, theGraphObj, false);
				}
				catch (Exception ex3)
				{
					ProjectData.SetProjectError(ex3);
					Exception ex4 = ex3;
					ex4.Data.Add("Error at 200209", ex4.Message);
					GameGeneral.LogException(ref ex4);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060071B1 RID: 29105 RVA: 0x00413630 File Offset: 0x00411830
		private void DrawSonarDetectionRing(double latitude, double longitude, float MaxRange, Color color_8, Graphics graphics_0)
		{
			try
			{
				Class258.Location[] array = new Class258.Location[91];
				Class258.Location[] array2 = new Class258.Location[91];
				Point[] array3 = new Point[91];
				Point[] array4 = new Point[91];
				this.bool_11 = false;
				float convergenceZoneIncrement = SonarEnvironment.GetConvergenceZoneIncrement(latitude);
				this.CZIncrementIndex = 0;
				while (!this.bool_11)
				{
					this.CZIncrementIndex++;
					this.CZInnerRange = (float)((double)((float)this.CZIncrementIndex * convergenceZoneIncrement) - 2.5);
					this.CZOuterRange = (float)((double)((float)this.CZIncrementIndex * convergenceZoneIncrement) + 2.5);
					if (this.CZInnerRange > MaxRange)
					{
						this.bool_11 = true;
						break;
					}
					if (this.CZOuterRange > MaxRange)
					{
						this.CZOuterRange = MaxRange;
					}
					GeoPointGenerator.GetOtherPointsAroundAGeoPoint(latitude, longitude, (double)this.CZInnerRange, 90, ref array);
					this.int_3 = 0;
					do
					{
						array3[this.int_3] = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, array[this.int_3].latitude, array[this.int_3].longitude);
						this.int_3++;
					}
					while (this.int_3 <= 89);
					array3[90] = array3[0];
					GeoPointGenerator.GetOtherPointsAroundAGeoPoint(latitude, longitude, (double)this.CZOuterRange, 90, ref array2);
					this.int_3 = 0;
					do
					{
						array4[this.int_3] = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, array2[this.int_3].latitude, array2[this.int_3].longitude);
						this.int_3++;
					}
					while (this.int_3 <= 89);
					array4[90] = array4[0];
					GraphicsPath graphicsPath = new GraphicsPath();
					graphicsPath.AddPolygon(array3);
					graphicsPath.AddPolygon(array4);
					PathGradientBrush pathGradientBrush = new PathGradientBrush(graphicsPath);
					pathGradientBrush.Blend = new System.Drawing.Drawing2D.Blend
					{
						Factors = new float[]
						{
							0f,
							1f,
							1f
						},
						Positions = new float[]
						{
							0f,
							0.5f,
							1f
						}
					};
					pathGradientBrush.CenterColor = color_8;
					pathGradientBrush.SurroundColors = new Color[]
					{
						color_8
					};
					graphics_0.FillPath(pathGradientBrush, graphicsPath);
					pathGradientBrush.Dispose();
					graphicsPath.Dispose();
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200210", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060071B2 RID: 29106 RVA: 0x0041392C File Offset: 0x00411B2C
		private bool method_289(float float_7)
		{
			bool result;
			if (float_7 >= 30f)
			{
				result = true;
			}
			else if (float_7 == 0f)
			{
				result = false;
			}
			else
			{
				GeoPoint geoPoint = new GeoPoint(this.method_13(true).GetLongitude(), this.method_13(true).GetLatitude());
				GeoPoint geoPoint2 = new GeoPoint();
				double longitude = geoPoint.GetLongitude();
				double latitude = geoPoint.GetLatitude();
				GeoPoint geoPoint3;
				double longitude2 = (geoPoint3 = geoPoint2).GetLongitude();
				GeoPoint geoPoint4;
				double latitude2 = (geoPoint4 = geoPoint2).GetLatitude();
				GeoPointGenerator.GetOtherGeoPoint(longitude, latitude, ref longitude2, ref latitude2, (double)float_7, 0.0);
				geoPoint4.SetLatitude(latitude2);
				geoPoint3.SetLongitude(longitude2);
				Point point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, geoPoint.GetLatitude(), geoPoint.GetLongitude());
				Point point2 = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, geoPoint2.GetLatitude(), geoPoint2.GetLongitude());
				result = (point.Y - point2.Y > 2);
			}
			return result;
		}

		// Token: 0x060071B3 RID: 29107 RVA: 0x00413A18 File Offset: 0x00411C18
		private GraphicsPath method_290(GeoPoint geoPoint_5, float float_7)
		{
			Class258.Location[] array = new Class258.Location[91];
			Point[] array2 = new Point[91];
			double latitude = geoPoint_5.GetLatitude();
			double longitude = geoPoint_5.GetLongitude();
			GeoPointGenerator.GetOtherPointsAroundAGeoPoint(latitude, longitude, (double)float_7, 90, ref array);
			int num = 0;
			do
			{
				array2[num] = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, array[num].latitude, array[num].longitude);
				num++;
			}
			while (num <= 89);
			array2[90] = array2[0];
			GraphicsPath graphicsPath = new GraphicsPath();
			graphicsPath.AddPolygon(array2);
			return graphicsPath;
		}

		// Token: 0x060071B4 RID: 29108 RVA: 0x00413AC4 File Offset: 0x00411CC4
		private void method_291(GeoPoint geoPoint_5, float float_7, Color color_8, byte byte_0, bool bool_13, Graphics graphics_0, bool bool_14)
		{
			GraphicsPath graphicsPath = this.method_290(geoPoint_5, float_7);
			using (graphicsPath)
			{
				Pen pen = new Pen(color_8, (float)byte_0);
				if (!bool_13)
				{
					pen.DashStyle = DashStyle.Dash;
				}
				using (pen)
				{
					try
					{
						this.SetGraphicsParameters(graphics_0);
						if (bool_14)
						{
							graphics_0.FillPath(new SolidBrush(color_8), graphicsPath);
						}
						else
						{
							this.DrawPath(pen, graphicsPath, graphics_0);
						}
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 200211", ex2.Message);
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		// Token: 0x060071B5 RID: 29109 RVA: 0x00413BA8 File Offset: 0x00411DA8
		private GraphicsPath method_292(GeoPoint geoPoint_5, float float_7, float float_8, float float_9, float float_10)
		{
			MainForm.Class2494 @class = new MainForm.Class2494(null);
			@class.float_0 = float_8;
			GraphicsPath result;
			try
			{
				MainForm.Class2493 class2 = new MainForm.Class2493(null);
				class2.class2494_0 = @class;
				int num = 720;
				Point item = default(Point);
				Collection<Point> collection = new Collection<Point>();
				class2.double_0 = geoPoint_5.GetLongitude();
				class2.double_1 = geoPoint_5.GetLatitude();
				float num2 = 4f;
				bool flag = false;
				float num3 = 0f;
				if (!(flag = (float_9 == 0f && float_10 == 360f)))
				{
					item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, geoPoint_5.GetLatitude(), geoPoint_5.GetLongitude());
					collection.Add(item);
					num3 = 0.25f;
				}
				else
				{
					num3 = 0f;
				}
				float_9 = Math2.Normalize(float_9 + float_7);
				float_10 = Math2.Normalize(float_10 + float_7);
				float_9 = (float)((int)Math.Round((double)float_9));
				float_10 = (float)((int)Math.Round((double)float_10));
				float num4 = float_9;
				class2.dictionary_0 = new Dictionary<float, Point>();
				List<float> list = new List<float>();
				int num5 = 0;
				int num6 = (int)Math.Round((double)(360f / num2));
				while (num4 < (float)num)
				{
					num5++;
					float num7 = Math2.Normalize(num4);
					if ((int)Math.Round((double)num7) == (int)Math.Round((double)float_9))
					{
						list.Add(num7 - num3);
						try
						{
							class2.dictionary_0.Add(num7 - num3, default(Point));
							goto IL_1A3;
						}
						catch (Exception projectError)
						{
							ProjectData.SetProjectError(projectError);
							ProjectData.ClearProjectError();
							goto IL_1A3;
						}
						goto IL_166;
					}
					goto IL_166;
					IL_1A3:
					num4 += num2;
					continue;
					IL_166:
					list.Add(num7);
					try
					{
						class2.dictionary_0.Add(num7, default(Point));
						goto IL_1AF;
					}
					catch (Exception projectError2)
					{
						ProjectData.SetProjectError(projectError2);
						ProjectData.ClearProjectError();
						goto IL_1AF;
					}
					goto IL_198;
					IL_1CC:
					list.Add(float_10 + num3);
					if (!class2.dictionary_0.ContainsKey(float_10 + num3))
					{
						try
						{
							class2.dictionary_0.Add(float_10 + num3, default(Point));
						}
						catch (Exception projectError3)
						{
							ProjectData.SetProjectError(projectError3);
							ProjectData.ClearProjectError();
						}
						break;
					}
					break;
					IL_198:
					if (num5 != num6)
					{
						goto IL_1A3;
					}
					goto IL_1CC;
					IL_1AF:
					if (Math.Abs((int)Math.Round((double)num7) - (int)Math.Round((double)float_10)) < 4)
					{
						goto IL_1CC;
					}
					goto IL_198;
				}
				Parallel.ForEach<float>(list, new Action<float>(class2.method_0));
				foreach (Point current in class2.dictionary_0.Values)
				{
					collection.Add(current);
				}
				if (!flag)
				{
					double lng = 0.0;
					double lat = 0.0;
					GeoPointGenerator.GetOtherGeoPoint(class2.double_0, class2.double_1, ref lng, ref lat, (double)class2.class2494_0.float_0, (double)(float_10 + num3));
					item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, lat, lng);
					collection.Add(item);
					item = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, geoPoint_5.GetLatitude(), geoPoint_5.GetLongitude());
					collection.Add(item);
				}
				Point[] array = new Point[collection.Count - 1 + 1];
				int count = collection.Count;
				for (int i = 1; i <= count; i++)
				{
					array[i - 1] = collection[i - 1];
				}
				collection = null;
				GraphicsPath graphicsPath = new GraphicsPath();
				graphicsPath.AddPolygon(array);
				result = graphicsPath;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200389", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				this.collection_0 = null;
				result = new GraphicsPath();
				ProjectData.ClearProjectError();
			}
			return result;
		}

		// Token: 0x060071B6 RID: 29110 RVA: 0x00413FD0 File Offset: 0x004121D0
		private void method_293(GeoPoint geoPoint_5, float float_7, float float_8, float float_9, float float_10, Color color_8, byte byte_0, bool bool_13, Graphics graphics_0, bool bool_14)
		{
			GraphicsPath graphicsPath = this.method_292(geoPoint_5, float_7, float_8, float_9, float_10);
			using (graphicsPath)
			{
				Pen pen = new Pen(color_8, (float)byte_0);
				if (!bool_13)
				{
					pen.DashStyle = DashStyle.Dash;
				}
				using (pen)
				{
					try
					{
						this.SetGraphicsParameters(graphics_0);
						if (bool_14)
						{
							graphics_0.FillPath(new SolidBrush(color_8), graphicsPath);
						}
						else
						{
							this.DrawPath(pen, graphicsPath, graphics_0);
						}
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception ex2 = ex;
						ex2.Data.Add("Error at 200212", ex2.Message);
						GameGeneral.LogException(ref ex2);
						if (Debugger.IsAttached)
						{
							Debugger.Break();
						}
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		// Token: 0x060071B7 RID: 29111 RVA: 0x004140BC File Offset: 0x004122BC
		private void method_294(object sender, EventArgs e)
		{
			try
			{
				Interaction.MsgBox(Class232.GetFuelForPitchEnabledWeapons(51, Client.GetClientScenario()), MsgBoxStyle.OkOnly, null);
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200390", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060071B8 RID: 29112 RVA: 0x00414134 File Offset: 0x00412334
		public void RefreshMap()
		{
            if (this.IsRefreshed && this.refreshTimes < 10)
            {
                this.refreshTimes++;
            }
            else
            {
                this.IsRefreshed = true;
                if (World.Settings.IsEnableSunShading() && (Client.GetClientScenario().GetCurrentTime(false) - this.dateTime_0).TotalMinutes > 15.0)
                {
                    this.MapBoxResize();
                }
                else
                {
                    try
                    {
                        this.method_140();
                        this.method_141();
                        if (!Information.IsNothing(this.bitmap_0))
                        {
                            this.bitmap_0.Dispose();
                            this.bitmap_0 = null;
                        }
                        try
                        {
                            this.bitmap_0 = new Bitmap(this.graphicsStream_0);
                        }
                        catch (Exception ex)
                        {
                            ProjectData.SetProjectError(ex);
                            Exception ex2 = ex;
                            GC.Collect();
                            ex2.Data.Add("Error at 200391", ex2.Message);
                            GameGeneral.LogException(ref ex2);
                            if (Debugger.IsAttached)
                            {
                                Debugger.Break();
                            }
                            try
                            {
                                this.bitmap_0 = new Bitmap(this.graphicsStream_0);
                            }
                            catch (Exception projectError)
                            {
                                ProjectData.SetProjectError(projectError);
                                ex2.Data.Add("Error at 200213", ex2.Message);
                                GameGeneral.LogException(ref ex2);
                                if (Debugger.IsAttached)
                                {
                                    Debugger.Break();
                                }
                                GameGeneral.ForceGarbageCollection();
                                this.bitmap_0 = new Bitmap(this.graphicsStream_0);
                                ProjectData.ClearProjectError();
                            }
                            ProjectData.ClearProjectError();
                        }
                        Graphics graphics = Graphics.FromImage(this.bitmap_0);
                        if (this.checkBox_0.Checked)
                        {
                            this.method_116(graphics);
                        }
                        this.method_97(graphics);
                        if (!Information.IsNothing(Client.GetClientSide()))
                        {
                            this.DrawDockingOpsGraphics(graphics);
                            this.DrawExclusionZones(graphics);
                            this.DrawAllNoNavZone(graphics);
                            this.DrawThisNoNavZone(graphics);
                            this.DrawMissionAreaGraphics(graphics);
                            this.DrawEventsGraphics(graphics);
                            this.DrawReferencePoints(graphics);
                            this.DrawUnguidedWeapons(graphics);
                            this.DrawWaterSplashs(graphics);
                            this.DrawGroundImpacts(graphics);
                            this.DrawMineCounterMeasuresGraphics(graphics);
                            this.DrawRangeSymbols(graphics);
                            Graphics graphics_ = graphics;
                            Side clientSide = Client.GetClientSide();
                            this.DrawSensorAndWeaponsCoverageGraphics(graphics_, ref clientSide);
                            Client.SetClientSide(clientSide);
                            this.DrawSatelliteGraphics(graphics);
                            this.DrawUnitContactsGraphics(graphics);
                            this.DrawGroupGraphics(Client.GetClientScenario().Groups, graphics);
                            this.DrawCommunciationGraphics(graphics);
                            this.DrawSensorContactsx(ref this.float_6, graphics);
                            this.DrawSensorContacts(graphics);
                            this.DrawDamageGraphics(graphics);
                            this.DrawSonybuoysGraphics(graphics);
                            this.list_6.Clear();
                            this.list_8.Clear();
                            this.list_7.Clear();
                            this.list_9.Clear();
                            if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit())
                            {
                                ActiveUnit activeUnit = (ActiveUnit)Client.GetHookedUnit();
                                if (activeUnit.GetNavigator().HasPlottedCourse() && SimConfiguration.gameOptions.GetShowPlottedPaths() != Configuration.GameOptions.Enum45.const_2)
                                {
                                    this.method_119(activeUnit, graphics);
                                }
                                activeUnit.GetNavigator().HasFlightCourse();
                                this.method_110(activeUnit, graphics);
                            }
                            this.method_108(graphics);
                            this.method_109(graphics);
                            this.DrawSensorContactsx(ref this.float_6, graphics);
                            this.method_105(graphics);
                            this.method_107(graphics);
                            this.method_118(graphics);
                            this.method_115(graphics);
                            this.method_112(graphics);
                            this.method_95(graphics);
                            if (!SimConfiguration.gameOptions.IsMessageLogInWindow())
                            {
                                this.method_77(graphics);
                            }
                        }
                        if (!Information.IsNothing(graphics))
                        {
                            graphics.Dispose();
                        }
                        if (SimConfiguration.gameOptions.UseMemoryProtection())
                        {
                            try
                            {
                                int sizeInMegabytes = (int)Math.Round(100.0 * ((double)(this.WorldMapBox.Height * this.WorldMapBox.Width) / 1595322.0));
                                new MemoryFailPoint(sizeInMegabytes).Dispose();
                            }
                            catch (InsufficientMemoryException ex3)
                            {
                                ProjectData.SetProjectError(ex3);
                                InsufficientMemoryException ex4 = ex3;
                                ex4.Data.Add("Error at 200214", ex4.Message);
                                Exception ex5 = ex4;
                                GameGeneral.LogException(ref ex5);
                                if (Debugger.IsAttached)
                                {
                                    Debugger.Break();
                                }
                                GameGeneral.ForceGarbageCollection();
                                ProjectData.ClearProjectError();
                            }
                        }
                        Bitmap backgroundImage = (Bitmap)this.bitmap_0.Clone();
                        int num = 0;
                        bool flag = false;
                        Exception ex6 = null;
                        if (!Information.IsNothing(this.WorldMapBox.BackgroundImage))
                        {
                            this.WorldMapBox.BackgroundImage.Dispose();
                            this.WorldMapBox.BackgroundImage = null;
                        }
                        while (true)
                        {
                            if (num < 3)
                            {
                                goto IL_4CD;
                            }
                            bool arg_461_0 = false;
                        IL_461:
                            if (!arg_461_0)
                            {
                                break;
                            }
                            try
                            {
                                this.WorldMapBox.BackgroundImage = backgroundImage;
                                flag = true;
                                continue;
                            }
                            catch (Exception ex7)
                            {
                                ProjectData.SetProjectError(ex7);
                                Exception ex8 = ex7;
                                ex8.Data.Add("Error at 200215", ex8.Message);
                                GameGeneral.LogException(ref ex8);
                                if (Debugger.IsAttached)
                                {
                                    Debugger.Break();
                                }
                                ex6 = ex8;
                                num++;
                                GameGeneral.ForceGarbageCollection();
                                this.ResetMapBox();
                                ProjectData.ClearProjectError();
                                continue;
                            }
                        IL_4CD:
                            arg_461_0 = !flag;
                            goto IL_461;
                        }
                        if (num >= 3)
                        {
                            if (Debugger.IsAttached)
                            {
                                Debugger.Break();
                            }
                            this.IsRefreshed = false;
                            throw ex6;
                        }
                    }
                    catch (Exception ex9)
                    {
                        ProjectData.SetProjectError(ex9);
                        Exception ex10 = ex9;
                        ex10.Data.Add("Error at 200323", ex10.Message);
                        GameGeneral.LogException(ref ex10);
                        if (Debugger.IsAttached)
                        {
                            Debugger.Break();
                        }
                        ProjectData.ClearProjectError();
                    }
                    finally
                    {
                        this.refreshTimes = 0;
                        this.IsRefreshed = false;
                    }
                    this.refreshTimes = 0;
                    this.IsRefreshed = false;
                }
            }
        }

        // Token: 0x060071B9 RID: 29113 RVA: 0x00414734 File Offset: 0x00412934
        private void method_296(ref ActiveUnit activeUnit_0, ref Mission mission_0)
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0)
			{
				List<Mission> list = null;
				if (!Information.IsNothing(mission_0))
				{
					list = new List<Mission>();
					list.Add(mission_0);
				}
				if (!Information.IsNothing(activeUnit_0) && activeUnit_0.IsGroup)
				{
					Group group = (Group)activeUnit_0;
					if (Information.IsNothing(group.GetGroupLead()))
					{
						return;
					}
					activeUnit_0 = group.GetGroupLead();
				}
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					string text = "";
					if (current.IsAircraft)
					{
						Aircraft aircraft = (Aircraft)current;
						Aircraft_AirOps aircraftAirOps = aircraft.GetAircraftAirOps();
						GeoPoint intermediateTargetPoint = aircraft.GetAircraftAI().GetIntermediateTargetPoint();
						bool flag = true;
						bool flag2 = false;
						if (!aircraftAirOps.method_78(intermediateTargetPoint, Doctrine._RefuelSelection.const_0, ref flag, ref activeUnit_0, ref list, ref text, ref flag2) && Operators.CompareString(text, "", false) != 0)
						{
							string text2 = "";
							if (Operators.CompareString(aircraft.Name, aircraft.UnitClass, false) != 0)
							{
								text2 = " (" + aircraft.UnitClass + ")";
							}
							Client.GetClientScenario().LogMessage(string.Concat(new string[]
							{
								"飞机 ",
								aircraft.Name,
								text2,
								"不能加油. 原因: ",
								text
							}), LoggedMessage.MessageType.AirOps, 5, aircraft.GetGuid(), Client.GetClientSide(), new GeoPoint(aircraft.GetLongitude(null), aircraft.GetLatitude(null)));
						}
						aircraft.GetAircraftAI().UpdateUnitStatus(0f, false, false);
					}
					else if (current.IsGroup)
					{
						Group group2 = (Group)current;
						if (group2.GetGroupType() == Group.GroupType.AirGroup && !Information.IsNothing(((Group)current).GetGroupLead()))
						{
							Aircraft aircraft2 = (Aircraft)((Group)current).GetGroupLead();
							Aircraft_AirOps aircraftAirOps2 = aircraft2.GetAircraftAirOps();
							GeoPoint intermediateTargetPoint2 = aircraft2.GetAircraftAI().GetIntermediateTargetPoint();
							bool flag2 = true;
							bool flag = false;
							if (aircraftAirOps2.method_78(intermediateTargetPoint2, Doctrine._RefuelSelection.const_0, ref flag2, ref activeUnit_0, ref list, ref text, ref flag))
							{
								Aircraft a2ARefuelingDestinationAircraft = aircraft2.GetAircraftAirOps().GetA2ARefuelingDestinationAircraft();
								if (Information.IsNothing(a2ARefuelingDestinationAircraft))
								{
									goto IL_34E;
								}
								using (IEnumerator<ActiveUnit> enumerator2 = group2.GetUnitsInGroup().Values.GetEnumerator())
								{
									while (enumerator2.MoveNext())
									{
										ActiveUnit current2 = enumerator2.Current;
										if (current2 != aircraft2 && current2.GetUnitStatus() != ActiveUnit._ActiveUnitStatus.Refuelling && current2.IsOperating())
										{
											Aircraft_AirOps aircraft_AirOps = (Aircraft_AirOps)current2.GetAirOps();
											current2.SetUnitStatus(ActiveUnit._ActiveUnitStatus.HeadingToRefuelPoint);
											aircraft_AirOps.SetAirOpsCondition(Aircraft_AirOps._AirOpsCondition.ManoeuveringToRefuel);
											aircraft_AirOps.method_27(a2ARefuelingDestinationAircraft);
										}
									}
									goto IL_34E;
								}
							}
							if (Operators.CompareString(text, "", false) != 0)
							{
								Client.GetClientScenario().LogMessage("编组" + group2.Name + "中的飞机不能进行加油。原因: " + text, LoggedMessage.MessageType.AirOps, 5, aircraft2.GetGuid(), Client.GetClientSide(), new GeoPoint(aircraft2.GetLongitude(null), aircraft2.GetLatitude(null)));
							}
						}
						IL_34E:
						group2.GetAI().UpdateUnitStatus(0f, false, false);
					}
					Ship ship = null;
					if (current.IsShip)
					{
						ship = (Ship)current;
					}
					if (!Information.IsNothing(ship))
					{
						if (!ship.GetDockingOps().method_51(ship.GetShipAI().GetIntermediateTargetPoint(), activeUnit_0, list, text, new int?(100)) && Operators.CompareString(text, "", false) != 0)
						{
							Client.GetClientScenario().LogMessage("水面舰艇：" + ship.Name + "不能进行补给. 原因: " + text, LoggedMessage.MessageType.AirOps, 5, ship.GetGuid(), Client.GetClientSide(), new GeoPoint(ship.GetLongitude(null), ship.GetLatitude(null)));
						}
						ship.GetShipAI().UpdateUnitStatus(0f, false, false);
					}
					if (current.IsGroup)
					{
						Group group3 = (Group)current;
						foreach (ActiveUnit current3 in group3.GetUnitsInGroup().Values)
						{
							text = "";
							if ((current3.IsShip || current3.IsSubmarine) && !current3.GetDockingOps().method_51(current3.GetAI().GetIntermediateTargetPoint(), activeUnit_0, list, text, new int?(100)) && Operators.CompareString(text, "", false) != 0)
							{
								Client.GetClientScenario().LogMessage("作战单元 " + current3.Name + " 不能进行补给. 原因: " + text, LoggedMessage.MessageType.AirOps, 5, current3.GetGuid(), Client.GetClientSide(), new GeoPoint(current3.GetLongitude(null), current3.GetLatitude(null)));
							}
						}
						group3.GetAI().UpdateUnitStatus(0f, false, false);
					}
				}
				Client.b_Completed = true;
				this.method_3().method_2(Client.GetClientScenario(), Client.GetClientSide(), Client.GetHookedUnit(), false);
			}
		}

		// Token: 0x060071BA RID: 29114 RVA: 0x0002F71F File Offset: 0x0002D91F
		private void Click_ThrottleAltOrDeep(object sender, EventArgs e)
		{
			this.method_26();
		}

		// Token: 0x060071BB RID: 29115 RVA: 0x0002F727 File Offset: 0x0002D927
		private void Click_PlotCourse(object sender, EventArgs e)
		{
			this.method_27();
		}

		// Token: 0x060071BC RID: 29116 RVA: 0x0002F72F File Offset: 0x0002D92F
		private void Click_SystemDamageStatus(object sender, EventArgs e)
		{
			this.method_162();
		}

		// Token: 0x060071BD RID: 29117 RVA: 0x0002F737 File Offset: 0x0002D937
		private void Click_SensorsStatus(object sender, EventArgs e)
		{
			this.method_21();
		}

		// Token: 0x060071BE RID: 29118 RVA: 0x0002F73F File Offset: 0x0002D93F
		private void Click_WeaponStatus(object sender, EventArgs e)
		{
			this.method_146();
		}

		// Token: 0x060071BF RID: 29119 RVA: 0x0002F747 File Offset: 0x0002D947
		private void Click_GO_GroupEditor(object sender, EventArgs e)
		{
			this.method_24();
		}

		// Token: 0x060071C0 RID: 29120 RVA: 0x00414D04 File Offset: 0x00412F04
		private void Click_OnlineGeographyData(object sender, EventArgs e)
		{
			this.MenuItem_OnlineGeographyData.Checked = !this.MenuItem_OnlineGeographyData.Checked;
			if (Information.IsNothing(this.class1994_0))
			{
				this.method_205();
			}
			this.class1994_0.SetIsOn(this.MenuItem_OnlineGeographyData.Checked);
			this.MapBoxResize();
		}

		// Token: 0x060071C1 RID: 29121 RVA: 0x0002AEA0 File Offset: 0x000290A0
		private void Click_EE_Trigger(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetListTriggers().Show();
		}

		// Token: 0x060071C2 RID: 29122 RVA: 0x00414D5C File Offset: 0x00412F5C
		private void Click_EE_Event(object sender, EventArgs e)
		{
			try
			{
				CommandFactory.GetCommandMain().GetListEvents().Show();
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200217", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				CommandFactory.GetCommandMain().GetListEvents().Show();
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060071C3 RID: 29123 RVA: 0x0002AEB1 File Offset: 0x000290B1
		private void Click_EE_Action(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetListActions().Show();
		}

		// Token: 0x060071C4 RID: 29124 RVA: 0x0002F74F File Offset: 0x0002D94F
		private void Click_Weather(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetEditWeather().Show();
		}

		// Token: 0x060071C5 RID: 29125 RVA: 0x0002F760 File Offset: 0x0002D960
		private void Click_UO_EditBerthedBoats(object sender, EventArgs e)
		{
			this.method_309();
		}

		// Token: 0x060071C6 RID: 29126 RVA: 0x00414DD8 File Offset: 0x00412FD8
		private void method_309()
		{
			if (Information.IsNothing(Client.GetHookedUnit()))
			{
				Interaction.MsgBox("没有选择作战单元!", MsgBoxStyle.OkOnly, null);
			}
			else if (Client.GetHookedUnit().IsActiveUnit() && ((ActiveUnit)Client.GetHookedUnit()).GetDockFacilities().Length > 0)
			{
				CommandFactory.GetCommandMain().GetEditBoats().activeUnit_0 = (ActiveUnit)Client.GetHookedUnit();
				CommandFactory.GetCommandMain().GetEditBoats().Show();
			}
		}

		// Token: 0x060071C7 RID: 29127 RVA: 0x0002F768 File Offset: 0x0002D968
		private void Click_MergeShowRange(object sender, EventArgs e)
		{
			Client.GetMap().SetIsMergeRangesymbols(!Client.GetMap().IsMergeRangesymbols());
			this.RenderMap();
		}

		// Token: 0x060071C8 RID: 29128 RVA: 0x0002F787 File Offset: 0x0002D987
		private void Click_AirOperations(object sender, EventArgs e)
		{
			this.OnAirOps();
		}

		// Token: 0x060071C9 RID: 29129 RVA: 0x0002F244 File Offset: 0x0002D444
		private void Click_Magazines(object sender, EventArgs e)
		{
			this.method_166();
		}

		// Token: 0x060071CA RID: 29130 RVA: 0x0002F78F File Offset: 0x0002D98F
		private void Click_BoatDockingOperations(object sender, EventArgs e)
		{
			this.OnDockOps();
		}

		// Token: 0x060071CB RID: 29131 RVA: 0x00414E54 File Offset: 0x00413054
		private void Click_MissileBriefReport(object sender, EventArgs e)
		{
			if (Information.IsNothing(Client.GetClientSide()))
			{
				Interaction.MsgBox("请先选择一个推演方再查看作战简报", MsgBoxStyle.OkOnly, "没选推演方!");
			}
			else
			{
				try
				{
					CommandFactory.GetCommandMain().GetEditBriefing().Show();
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					ex2.Data.Add("Error at 200218", ex2.Message);
					GameGeneral.LogException(ref ex2);
					if (Debugger.IsAttached)
					{
						Debugger.Break();
					}
					ProjectData.ClearProjectError();
				}
			}
		}

		// Token: 0x060071CC RID: 29132 RVA: 0x0002F797 File Offset: 0x0002D997
		private void Click_AU_DefineArea(object sender, EventArgs e)
		{
			Client.IssueOrdersToUnit(Client._CommandOrder.DefineArea);
		}

		// Token: 0x060071CD RID: 29133 RVA: 0x0002F7A0 File Offset: 0x0002D9A0
		private void Click_UO_AddSatellite(object sender, EventArgs e)
		{
			if (Information.IsNothing(Client.GetClientSide()))
			{
				Interaction.MsgBox("请先选择一个推演方后再添加卫星.", MsgBoxStyle.OkOnly, "没选推演方!");
			}
			else
			{
				new AddSatellite().Show();
			}
		}

		// Token: 0x060071CE RID: 29134 RVA: 0x00414EE0 File Offset: 0x004130E0
		private void method_317(Control control_0)
		{
			object[] args = new object[]
			{
				4194304,
				false
			};
			typeof(Control).InvokeMember("SetState", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.InvokeMethod, null, control_0, args);
		}

		// Token: 0x060071CF RID: 29135 RVA: 0x0002F7CE File Offset: 0x0002D9CE
		private void MainForm_Resize(object sender, EventArgs e)
		{
			this.method_318();
		}

		// Token: 0x060071D0 RID: 29136 RVA: 0x00004BC2 File Offset: 0x00002DC2
		private void method_318()
		{
		}

		// Token: 0x060071D1 RID: 29137 RVA: 0x00414F2C File Offset: 0x0041312C
		public void UpdateScenarioFeatureVisibility()
		{
			this.MenuItem_Unit_SE_UnitLoseCommunication.Visible = Client.GetClientScenario().DeclaredFeatures.Contains(Scenario.ScenarioFeatureOption.CommsDisruption);
			this.MenuItem_Unit_IsolationView.Visible = Client.GetClientScenario().DeclaredFeatures.Contains(Scenario.ScenarioFeatureOption.CommsDisruption);
			this.MenuItem_IsolatedUnitView.Visible = Client.GetClientScenario().DeclaredFeatures.Contains(Scenario.ScenarioFeatureOption.CommsDisruption);
			this.MenuItem_UO_EditCargo.Visible = Client.GetClientScenario().DeclaredFeatures.Contains(Scenario.ScenarioFeatureOption.CargoOps);
			this.MenuItem_Unit_DischargeCargo.Visible = Client.GetClientScenario().DeclaredFeatures.Contains(Scenario.ScenarioFeatureOption.CargoOps);
		}

		// Token: 0x060071D2 RID: 29138 RVA: 0x00414FC0 File Offset: 0x004131C0
		private void MainForm_Shown(object sender, EventArgs e)
		{
			try
			{
				if (SimConfiguration.gameOptions.GetDPIScalingMethod() == Configuration.GameOptions._DPIScalingMethod.const_0 && Client.float_0 != 1f)
				{
					CommandFactory.GetCommandMain().GetCampaignPlayWindow().Show();
					CommandFactory.GetCommandMain().GetCampaignPlayWindow().Close();
				}
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Calling MainForm_Shown.";
					GameGeneral.Log(ref text);
				}
				base.Hide();
				base.Enabled = false;
				this.label_1.Text = "";
				this.label_0.Text = "";
				this.list_4.Add(Class380.smethod_0());
				this.list_4.Add(Class380.smethod_1());
				this.list_4.Add(Class380.smethod_2());
				this.list_4.Add(Class380.smethod_3());
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Populated CanalList.";
					GameGeneral.Log(ref text);
				}
				Client.smethod_13(new Client.Delegate49(this.method_257));
				Scenario.AddTitleChangedEvent(new Scenario.TitleChangedEventHandler(this.method_352));
				Scenario.AddTimeCompressionChangedEvent(new Scenario.TimeCompressionChangedEventHandler(this.method_264));
				Configuration.smethod_1(new Configuration.Delegate12(this.method_30));
				Configuration.smethod_0(new Configuration.Delegate11(this.method_8));
				UnitStatus_WPF.smethod_3(new UnitStatus_WPF.Delegate63(this.method_21));
				UnitStatus_WPF.smethod_1(new UnitStatus_WPF.Delegate61(this.method_166));
				UnitStatus_WPF.smethod_0(new UnitStatus_WPF.Delegate60(this.method_162));
				UnitStatus_WPF.smethod_2(new UnitStatus_WPF.Delegate62(this.method_146));
				EmconControl.smethod_0(new EmconControl.Delegate58(this.method_21));
				UnitEMCONViewModel.SensorsFormRequested += new UnitEMCONViewModel.Delegate56(this.method_21);
				DBOps.smethod_2(new DBOps.Delegate26(this.StartAddDBRecordsDropDownItems));
				Client.m_WorldWindow.SetCache(null);
				Client.m_WorldWindow.method_4("");
				Client.m_WorldWindow.method_0(false);
				Client.m_WorldWindow.method_3(GameGeneral.world);
				Client.m_WorldWindow.Dock = DockStyle.Fill;
				Client.m_WorldWindow.method_9(false);
				Client.m_WorldWindow.Location = new Point(0, 0);
				Client.m_WorldWindow.Name = "WorldWindow1";
				Client.m_WorldWindow.Text = "WorldWindow1";
				this.panel_0.Controls.Add(Client.m_WorldWindow);
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Added World Window panel.";
					GameGeneral.Log(ref text);
				}
				base.WindowState = FormWindowState.Maximized;
				if (GameGeneral.bProfessionEdition)
				{
                    //ZSP License this.Text = GameGeneral.strVersion + "专业版 - 授权用户: " + LicenseFile.CustomerName;
                    this.Text = GameGeneral.strVersion;
                }
                else
				{
					this.Text = GameGeneral.strVersion;
				}
				this.CB_TimeCompression = this.toolStripComboBox_0.ComboBox;this.CB_TimeCompression.MouseWheel += new MouseEventHandler(this.CB_TimeCompression_MouseWheel);this.CB_TimeCompression.SelectionChangeCommitted += new EventHandler(this.CB_TimeCompression_SelectionChangeCommitted);
				this.CB_TimeCompression.SelectedIndex = 0;
				this.comboBox_2 = this.toolStripComboBox_1.ComboBox;this.comboBox_2.SelectionChangeCommitted += new EventHandler(this.method_373);
				if (SimConfiguration.gameOptions.NoPulseMapUpdate())
				{
					this.comboBox_2.SelectedIndex = 1;
				}
				else
				{
					this.comboBox_2.SelectedIndex = 0;
				}
				if (DBOps.bool_0 && !this.bool_3)
				{
					this.AddDBRecordsDropDownItems();
				}
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Built database list.";
					GameGeneral.Log(ref text);
				}
				this.PrepareWoldWindow();
				this.method_14(true, new GeoPoint(0.0, 0.0));
				this.method_6(8000000);
				Client.b_Completed = true;
				this.method_32();
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Prepared Wold Window.";
					GameGeneral.Log(ref text);
				}
				this.MenuItem_OnlineGeographyData.Visible = LicenseFile.ProFeatures.Contains(LicenseFile.ProFeature.CommercialOverlay);
				this.MenuItem_ScenarioMigration.Visible = LicenseFile.ProFeatures.Contains(LicenseFile.ProFeature.XMLImportExport);
				this.MenuItem_TestScript.Visible = LicenseFile.ProFeatures.Contains(LicenseFile.ProFeature.TestScripts);
				this.toolStripMenuItem_61.Visible = LicenseFile.ProFeatures.Contains(LicenseFile.ProFeature.TestScripts);
				this.button_0.Visible = LicenseFile.ProFeatures.Contains(LicenseFile.ProFeature.TestScripts);
				this.MenuItem_DB_SecnarioDataBandingToCustomDB.Visible = LicenseFile.ProFeatures.Contains(LicenseFile.ProFeature.CreateSlimDB);
				this.MenuItem_MonteCarloSimulation.Visible = LicenseFile.ProFeatures.Contains(LicenseFile.ProFeature.MonteCarlo);
				this.MenuItem_Unit_SE_UnitLoseCommunication.Visible = false;
				this.MenuItem_Unit_IsolationView.Visible = false;
				this.MenuItem_IsolatedUnitView.Visible = false;
				this.MenuItem_UO_EditCargo.Visible = false;
				this.MenuItem_Unit_DischargeCargo.Visible = false;
				SteamWorkshop.smethod_2();
				base.Enabled = true;
				Client.b_MainForm_Shown = true;
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Calling MainForm_Shown: Show window.";
					GameGeneral.Log(ref text);
				}
				base.Show();
				CommandFactory.GetCommandMain().GetMainSplash().Close();
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Closed splash screen.";
					GameGeneral.Log(ref text);
				}
				if (SimConfiguration.gameOptions.IsMessageLogInWindow())
				{
					CommandFactory.GetCommandMain().GetMessageLogWindow().Show();
				}
				this.timer_0.Interval = 250;
				this.timer_0.Start();
				this.timer_2.Start();
				this.timer_5.Interval = 60000;
				this.timer_5.Start();
				this.timer_6.Interval = 100;
				this.timer_6.Start();
				CommandFactory.GetCommandMain().GetStartGame().Show();
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "启动推演窗口显示完毕.";
					GameGeneral.Log(ref text);
				}
				this.MenuItem_PublishScenarioToSimulationServer.Visible = SteamSession.bool_0;
				if (SimConfiguration.gameOptions.LogDebugInfoToFile())
				{
					string text = "Finished MainForm_Shown.";
					GameGeneral.Log(ref text);
				}
				Client.bool_7 = true;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception ex2 = ex;
				ex2.Data.Add("Error at 200580", ex2.Message);
				GameGeneral.LogException(ref ex2);
				if (Debugger.IsAttached)
				{
					Debugger.Break();
				}
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060071D3 RID: 29139 RVA: 0x0002F7D6 File Offset: 0x0002D9D6
		private void StartAddDBRecordsDropDownItems()
		{
			base.Invoke(new MethodInvoker(this.AddDBRecordsDropDownItems));
		}

		// Token: 0x060071D4 RID: 29140 RVA: 0x004155A4 File Offset: 0x004137A4
		private void ResetMapBox()
		{
			this.WorldMapBox = new PictureBox();
            this.WorldMapBox.MouseEnter += new EventHandler(this.WorldMapBox_MouseEnter);
            this.WorldMapBox.Paint += new PaintEventHandler(this.WorldMapBox_Paint);
            this.WorldMapBox.PreviewKeyDown += new PreviewKeyDownEventHandler(this.WorldMapBox_PreviewKeyDown);
            this.WorldMapBox.MouseLeave += new EventHandler(this.WorldMapBox_MouseLeave);
            this.WorldMapBox.MouseUp += new MouseEventHandler(this.WorldMapBox_MouseUp);
            this.WorldMapBox.MouseDown += new MouseEventHandler(this.WorldMapBox_MouseDown);
            this.WorldMapBox.MouseMove += new MouseEventHandler(this.WorldMapBox_MouseMove);
            this.WorldMapBox.MouseWheel += new MouseEventHandler(this.WorldMapBox_MouseWheel);
            this.WorldMapBox.Dock = DockStyle.Fill;
			this.WorldMapBox.Location = new Point(0, 0);
			this.WorldMapBox.Name = "MapBox";
			this.WorldMapBox.TabIndex = 10;
			this.WorldMapBox.TabStop = false;
		}

		// Token: 0x060071D5 RID: 29141 RVA: 0x0002F7EB File Offset: 0x0002D9EB
		private void Click_Unit_SensorsStatus(object sender, EventArgs e)
		{
			this.method_20();
		}

		// Token: 0x060071D6 RID: 29142 RVA: 0x0002F737 File Offset: 0x0002D937
		private void method_321(object sender, EventArgs e)
		{
			this.method_21();
		}

		// Token: 0x060071D7 RID: 29143 RVA: 0x0002F73F File Offset: 0x0002D93F
		private void Click_Unit_WeaponStatus(object sender, EventArgs e)
		{
			this.method_146();
		}

		// Token: 0x060071D8 RID: 29144 RVA: 0x0002F727 File Offset: 0x0002D927
		private void Click_Unit_PlotCourse(object sender, EventArgs e)
		{
			this.method_27();
		}

		// Token: 0x060071D9 RID: 29145 RVA: 0x0002F7F3 File Offset: 0x0002D9F3
		private void Click_Unit_DirectionRangeMeasure(object sender, EventArgs e)
		{
			this.MeasureRangeBearing();
		}

		// Token: 0x060071DA RID: 29146 RVA: 0x0002F7FB File Offset: 0x0002D9FB
		private void MeasureRangeBearing()
		{
			this.referencePoint_0 = null;
			if (Client.GetCommandOrder() == Client._CommandOrder.ViewRangeBearing)
			{
				this.geoPoint_1 = null;
				Client.IssueOrdersToUnit(Client._CommandOrder.None);
			}
			else
			{
				this.geoPoint_1 = null;
				Client.IssueOrdersToUnit(Client._CommandOrder.ViewRangeBearing);
			}
		}

		// Token: 0x060071DB RID: 29147 RVA: 0x0002F82D File Offset: 0x0002DA2D
		private void method_326()
		{
			this.WorldMapBox.Cursor = Cursors.Cross;
			this.toolStripStatusLabel_0.Text = "选择要放弃的目标 - 按下SHIFT键放弃多个目标";
			Client.IssueOrdersToUnit(Client._CommandOrder.DropTarget);
		}

		// Token: 0x060071DC RID: 29148 RVA: 0x00415604 File Offset: 0x00413804
		private void method_327()
		{
			if (!Information.IsNothing(Client.GetClientSide()) && Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0)
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsActiveUnit() && current.GetSide(false) == Client.GetClientSide() && !current.IsWeapon)
					{
						if (current.IsGroup)
						{
							using (IEnumerator<ActiveUnit> enumerator2 = ((Group)current).GetUnitsInGroup().Values.GetEnumerator())
							{
								while (enumerator2.MoveNext())
								{
									ActiveUnit current2 = enumerator2.Current;
									current2.GetAI().ClearPrimaryTarget(ref current2);
								}
								continue;
							}
						}
						ActiveUnit activeUnit = (ActiveUnit)current;
						activeUnit.GetAI().ClearPrimaryTarget(ref activeUnit);
					}
				}
				Client.b_Completed = true;
			}
		}

		// Token: 0x060071DD RID: 29149 RVA: 0x0002F856 File Offset: 0x0002DA56
		private void Click_Unit_OA_AutoEngageTarget(object sender, EventArgs e)
		{
			this.method_22();
		}

		// Token: 0x060071DE RID: 29150 RVA: 0x0002F85E File Offset: 0x0002DA5E
		private void Click_Unit_OA_ManualEngageTarget(object sender, EventArgs e)
		{
			this.method_23();
		}

		// Token: 0x060071DF RID: 29151 RVA: 0x0002F866 File Offset: 0x0002DA66
		private void Click_Unit_OA_LaunchOnlyBearing(object sender, EventArgs e)
		{
			this.method_25();
		}

		// Token: 0x060071E0 RID: 29152 RVA: 0x0002F86E File Offset: 0x0002DA6E
		private void Click_Unit_AO_DropTarget(object sender, EventArgs e)
		{
			this.method_326();
		}

		// Token: 0x060071E1 RID: 29153 RVA: 0x0002F876 File Offset: 0x0002DA76
		private void Click_Unit_AO_DropAllTarget(object sender, EventArgs e)
		{
			this.method_327();
		}

		// Token: 0x060071E2 RID: 29154 RVA: 0x0002F71F File Offset: 0x0002D91F
		private void Click_Unit_ThrottleAltOrDeep(object sender, EventArgs e)
		{
			this.method_26();
		}

		// Token: 0x060071E3 RID: 29155 RVA: 0x0002F747 File Offset: 0x0002D947
		private void Click_Unit_GO_GroupEditor(object sender, EventArgs e)
		{
			this.method_24();
		}

		// Token: 0x060071E4 RID: 29156 RVA: 0x0002F244 File Offset: 0x0002D444
		private void Click_Unit_Magazines(object sender, EventArgs e)
		{
			this.method_166();
		}

		// Token: 0x060071E5 RID: 29157 RVA: 0x0002F787 File Offset: 0x0002D987
		private void Click_Unit_AirOperations(object sender, EventArgs e)
		{
			this.OnAirOps();
		}

		// Token: 0x060071E6 RID: 29158 RVA: 0x0002F78F File Offset: 0x0002D98F
		private void Click_Unit_BoatDockingOperations(object sender, EventArgs e)
		{
			this.OnDockOps();
		}

		// Token: 0x060071E7 RID: 29159 RVA: 0x0002F72F File Offset: 0x0002D92F
		private void Click_Unit_SystemDamageStatus(object sender, EventArgs e)
		{
			this.method_162();
		}

		// Token: 0x060071E8 RID: 29160 RVA: 0x0002F87E File Offset: 0x0002DA7E
		private void Click_DataBaseViewer(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetDBViewer().Show();
		}

		// Token: 0x060071E9 RID: 29161 RVA: 0x0002F88F File Offset: 0x0002DA8F
		private void Click_BrowseScenarioPlatforms(object sender, EventArgs e)
		{
			if (Information.IsNothing(Client.GetClientSide()))
			{
				Interaction.MsgBox("您至少有一个推演方才能显示可用平台", MsgBoxStyle.OkOnly, "没有推演方!");
			}
			else
			{
				CommandFactory.GetCommandMain().GetBrowseScenarioPlatforms().Show();
			}
		}

		// Token: 0x060071EA RID: 29162 RVA: 0x0002F8C2 File Offset: 0x0002DAC2
		private void Click_OrderOfBattle(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				CommandFactory.GetCommandMain().GetORBAT().Show();
			}
		}

		// Token: 0x060071EB RID: 29163 RVA: 0x00415718 File Offset: 0x00413918
		private void Click_LockSelectedRefPoint(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetRefPointSelList()))
			{
				using (List<ReferencePoint>.Enumerator enumerator = Client.GetRefPointSelList().GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						enumerator.Current.IsLocked = true;
					}
				}
				this.RefreshMap();
			}
		}

		// Token: 0x060071EC RID: 29164 RVA: 0x0041577C File Offset: 0x0041397C
		private void Click_UnlockSelectedRefPoint(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetRefPointSelList()))
			{
				using (List<ReferencePoint>.Enumerator enumerator = Client.GetRefPointSelList().GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						enumerator.Current.IsLocked = false;
					}
				}
				this.RefreshMap();
			}
		}

		// Token: 0x060071ED RID: 29165 RVA: 0x0002F8DF File Offset: 0x0002DADF
		private void Click_SimulationRealismSettings(object sender, EventArgs e)
		{
			Client.scenarioFeatures = new ScenarioFeatures();
			Client.scenarioFeatures.Show();
		}

		// Token: 0x060071EE RID: 29166 RVA: 0x0002F8F5 File Offset: 0x0002DAF5
		private void Click_ScenarioDescription(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetScenarioTitle().Show();
		}

		// Token: 0x060071EF RID: 29167 RVA: 0x0002F906 File Offset: 0x0002DB06
		private void Click_ShowNonfriendlyRange(object sender, EventArgs e)
		{
			Client.GetMap().SetIsShowNonFriendly(!Client.GetMap().IsShowNonFriendly());
			this.RenderMap();
		}

		// Token: 0x060071F0 RID: 29168 RVA: 0x0002F925 File Offset: 0x0002DB25
		private void Click_EditScoreRules(object sender, EventArgs e)
		{
			if (Information.IsNothing(Client.GetClientSide()))
			{
				Interaction.MsgBox("您至少有一个推演方才能编辑评分规则.", MsgBoxStyle.OkOnly, "没有推演方!");
			}
			else
			{
				CommandFactory.GetCommandMain().GetScoringWindow().Show();
			}
		}

		// Token: 0x060071F1 RID: 29169 RVA: 0x0002F958 File Offset: 0x0002DB58
		private void Click_RelativeSelectedRefPoint_RotatingBearing(object sender, EventArgs e)
		{
			Client.orientationType_0 = ReferencePoint.OrientationType.Rotating;
			Client.IssueOrdersToUnit(Client._CommandOrder.SelectRelativeObject);
		}

		// Token: 0x060071F2 RID: 29170 RVA: 0x004157E0 File Offset: 0x004139E0
		private void Click_SelectedRefPointChangeBearingToFixed(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (ReferencePoint current in Client.GetClientSide().GetReferencePoints())
				{
					if (current.IsSelected())
					{
						current.BearingType = ReferencePoint.OrientationType.Fixed;
						current.RelativeCalculate();
					}
				}
			}
		}

		// Token: 0x060071F3 RID: 29171 RVA: 0x00415854 File Offset: 0x00413A54
		private void Click_SelectedRefPointChangeBearingToRotating(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (ReferencePoint current in Client.GetClientSide().GetReferencePoints())
				{
					if (current.IsSelected())
					{
						current.BearingType = ReferencePoint.OrientationType.Rotating;
						current.RelativeCalculate();
					}
				}
			}
		}

		// Token: 0x060071F4 RID: 29172 RVA: 0x004158C8 File Offset: 0x00413AC8
		private void Click_SelectedRefPointRemoveRelativity(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (ReferencePoint current in Client.GetClientSide().GetReferencePoints())
				{
					if (current.IsSelected())
					{
						current.IsLocked = false;
						current.BearingType = ReferencePoint.OrientationType.Fixed;
						current.IsRelativeToUnit = null;
						current.RelativeDistance = 0f;
						current.RelativeBearing = 0f;
					}
				}
			}
		}

		// Token: 0x060071F5 RID: 29173 RVA: 0x00415958 File Offset: 0x00413B58
		public void method_352(Scenario scenario_0, string string_5)
		{
			if (Client.GetClientScenario() == scenario_0)
			{
				if (string.IsNullOrEmpty(string_5))
				{
					if (GameGeneral.bProfessionEdition)
					{
                        //ZSP License  this.Text = GameGeneral.strVersion + "专业版 - 授权用户: " + LicenseFile.CustomerName;
                        this.Text = GameGeneral.strVersion;
                    }
                    else
					{
						this.Text = GameGeneral.strVersion;
					}
				}
				else if (GameGeneral.bProfessionEdition)
				{
                    //ZSP License
                    //this.Text = string.Concat(new string[]
                    //{
                    //	string_5,
                    //	" - ",
                    //	GameGeneral.strVersion,
                    //	"专业版 - 授权用户: ",
                    //	LicenseFile.CustomerName
                    //});
                    this.Text = GameGeneral.strVersion;
                }
				else
				{
					this.Text = string_5 + " - " + GameGeneral.strVersion;
				}
			}
		}

		// Token: 0x060071F6 RID: 29174 RVA: 0x00415A0C File Offset: 0x00413C0C
		private void Click_SideDoctrineAndEMCONAndWRA(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				new DoctrineForm
				{
					subject = Client.GetClientSide()
				}.Show();
			}
		}

		// Token: 0x060071F7 RID: 29175 RVA: 0x00415A3C File Offset: 0x00413C3C
		private void Click_SA_CreateDeltaTemplate(object sender, EventArgs e)
		{
			this.saveFileDialog_2.InitialDirectory = Application.StartupPath;
			this.saveFileDialog_2.FileName = Client.GetClientScenario().GetScenarioTitle() + ".ini";
			if (this.saveFileDialog_2.ShowDialog() == DialogResult.OK)
			{
				FileStream fileStream = File.Create(this.saveFileDialog_2.FileName);
				Stream1 stream = new Stream1();
				ScenarioUnits.smethod_3(Client.GetClientScenario(), stream, this.saveFileDialog_2.FileName, null);
				fileStream.Write(stream.ToArray(), 0, (int)stream.Position);
				fileStream.Close();
			}
		}

		// Token: 0x060071F8 RID: 29176 RVA: 0x00415AD4 File Offset: 0x00413CD4
		private void Click_SaveScenario(object sender, EventArgs e)
		{
			if (Client.GetClientScenario().IsCampaignSession())
			{
				List<string> list = new List<string>();
				Campaign.smethod_3(GameGeneral.strScenariosDir, list);
				foreach (string current in list)
				{
					Campaign campaign = Campaign.GetCampaign(current);
					if (Operators.CompareString(campaign.ID, Client.GetClientScenario().CampaignID, false) == 0)
					{
						Client.string_3 = Path.Combine(Path.GetDirectoryName(current), Guid.NewGuid().ToString() + ".save");
						break;
					}
				}
			}
			if (Operators.CompareString(Client.string_3, null, false) == 0)
			{
				this.Click_SaveAs(RuntimeHelpers.GetObjectValue(sender), e);
			}
			else
			{
				bool flag;
				if (flag = (Client.GetConfiguration().GetSimStatus() == Configuration.EnumRunStop.const_Run))
				{
					Client.GetConfiguration().SetSimStopMode();
				}
				base.Enabled = false;
				Client.SaveTempScenarioFile(false, Client.string_3, false);
				base.Enabled = true;
				Client.IssueOrdersToUnit(Client._CommandOrder.None);
				if (flag)
				{
					Client.GetConfiguration().SetSimRunMode();
				}
			}
		}

		// Token: 0x060071F9 RID: 29177 RVA: 0x0002F967 File Offset: 0x0002DB67
		private void method_356(object sender, MouseEventArgs e)
		{
			((HandledMouseEventArgs)e).Handled = true;
		}

		// Token: 0x060071FA RID: 29178 RVA: 0x0002F975 File Offset: 0x0002DB75
		private void Click_CE_SelectedTarget(object sender, EventArgs e)
		{
			if (!this.MenuItem_CE_SelectedTarget.Checked)
			{
				Client.GetMap().SetShowContactEmissions(MapProfile._UnitCoverage.const_1);
				this.RenderMap();
			}
		}

		// Token: 0x060071FB RID: 29179 RVA: 0x0002F995 File Offset: 0x0002DB95
		private void Click_CE_AllTarget(object sender, EventArgs e)
		{
			if (!this.MenuItem_CE_AllTarget.Checked)
			{
				Client.GetMap().SetShowContactEmissions(MapProfile._UnitCoverage.const_0);
				this.RenderMap();
			}
		}

		// Token: 0x060071FC RID: 29180 RVA: 0x0002F9B5 File Offset: 0x0002DBB5
		private void Click_CE_NotShow(object sender, EventArgs e)
		{
			if (!this.MenuItem_CE_NotShow.Checked)
			{
				Client.GetMap().SetShowContactEmissions(MapProfile._UnitCoverage.const_2);
				this.RenderMap();
			}
		}

		// Token: 0x060071FD RID: 29181 RVA: 0x0002F370 File Offset: 0x0002D570
		private void Click_CustomLayer(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetCustomLayersForm().Show();
		}

		// Token: 0x060071FE RID: 29182 RVA: 0x00415C08 File Offset: 0x00413E08
		private void Click_DeselectAllRefPoint(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				Client.GetClientSide().GetReferencePoints();
				using (List<ReferencePoint>.Enumerator enumerator = Client.GetRefPointSelList().GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						enumerator.Current.SetIsSelected(false);
					}
				}
				this.RefreshMap();
			}
		}

		// Token: 0x060071FF RID: 29183 RVA: 0x0002AEC2 File Offset: 0x000290C2
		private void Click_EE_Condition(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetListConditions().Show();
		}

		// Token: 0x06007200 RID: 29184 RVA: 0x0002F9D5 File Offset: 0x0002DBD5
		private void Click_Unit_UnassignMissionUnit(object sender, EventArgs e)
		{
			this.method_364();
			this.method_3().method_2(Client.GetClientScenario(), Client.GetClientSide(), Client.GetHookedUnit(), false);
		}

		// Token: 0x06007201 RID: 29185 RVA: 0x00415C74 File Offset: 0x00413E74
		private void method_364()
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0)
			{
				List<ActiveUnit> list = new List<ActiveUnit>();
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsActiveUnit() && current.GetSide(false) == Client.GetClientSide())
					{
						list.Add((ActiveUnit)current);
					}
				}
				if (list.Count > 0)
				{
					this.method_365(ref list);
				}
				this.method_327();
			}
		}

		// Token: 0x06007202 RID: 29186 RVA: 0x00415D34 File Offset: 0x00413F34
		private void method_365(ref List<ActiveUnit> list_10)
		{
			foreach (ActiveUnit current in list_10)
			{
				if (current.IsActiveUnit() && current.GetSide(false) == Client.GetClientSide() && !current.IsWeapon)
				{
					ActiveUnit activeUnit = current;
					if (current.IsAircraft)
					{
						Aircraft aircraft = (Aircraft)current;
						Aircraft_AirOps aircraftAirOps = aircraft.GetAircraftAirOps();
						aircraftAirOps.SetAirOpsCondition(Aircraft_AirOps._AirOpsCondition.Airborne);
						if (aircraft.GetAircraftNavigator().GetPlottedCourse().Count<Waypoint>() > 0 && aircraft.GetUnitStatus() == ActiveUnit._ActiveUnitStatus.OnPlottedCourse)
						{
							aircraft.SetUnitStatus(ActiveUnit._ActiveUnitStatus.OnPlottedCourse);
						}
						else if (aircraft.GetUnitStatus() == ActiveUnit._ActiveUnitStatus.Tasked)
						{
							aircraft.SetUnitStatus(ActiveUnit._ActiveUnitStatus.Tasked);
						}
						else
						{
							aircraft.SetUnitStatus(ActiveUnit._ActiveUnitStatus.Unassigned);
						}
						if (aircraft.GetFuelState() != ActiveUnit._ActiveUnitFuelState.None)
						{
							aircraft.SetFuelState(ActiveUnit._ActiveUnitFuelState.IgnoreBingoAndJoker);
						}
						if (aircraft.GetWeaponState() != ActiveUnit._ActiveUnitWeaponState.None)
						{
							aircraft.SetWeaponState(ActiveUnit._ActiveUnitWeaponState.IgnoreWinchesterAndShotgun);
						}
						if (!Information.IsNothing(aircraftAirOps.GetA2ARefuelingDestinationAircraft()))
						{
							aircraftAirOps.A2ARefueling();
						}
					}
					else if (current.IsShip)
					{
						Ship ship = (Ship)current;
						ActiveUnit_DockingOps dockingOps = ship.GetDockingOps();
						dockingOps.SetDockingOpsCondition(ActiveUnit_DockingOps._DockingOpsCondition.Underway);
						if (ship.GetShipNavigator().GetPlottedCourse().Count<Waypoint>() > 0)
						{
							ship.SetUnitStatus(ActiveUnit._ActiveUnitStatus.OnPlottedCourse);
						}
						else
						{
							ship.SetUnitStatus(ActiveUnit._ActiveUnitStatus.Unassigned);
						}
						if (!Information.IsNothing(dockingOps.GetUNREPDestinationUnit()))
						{
							dockingOps.FinishUNREP();
						}
					}
					else if (current.IsSubmarine)
					{
						Submarine submarine = (Submarine)current;
						ActiveUnit_DockingOps dockingOps2 = submarine.GetDockingOps();
						dockingOps2.SetDockingOpsCondition(ActiveUnit_DockingOps._DockingOpsCondition.Underway);
						if (submarine.GetSubmarineNavigator().GetPlottedCourse().Count<Waypoint>() > 0)
						{
							submarine.SetUnitStatus(ActiveUnit._ActiveUnitStatus.OnPlottedCourse);
						}
						else
						{
							submarine.SetUnitStatus(ActiveUnit._ActiveUnitStatus.Unassigned);
						}
						if (!Information.IsNothing(dockingOps2.GetUNREPDestinationUnit()))
						{
							dockingOps2.FinishUNREP();
						}
					}
					else if (current.IsGroup)
					{
						this.method_366(ref activeUnit);
						activeUnit.m_Doctrine.Init();
						List<ActiveUnit> list = new List<ActiveUnit>();
						foreach (ActiveUnit current2 in ((Group)current).GetUnitsInGroup().Values)
						{
							if (current2.IsOperating())
							{
								list.Add(current2);
							}
						}
						if (list.Count > 0)
						{
							this.method_365(ref list);
						}
					}
					else
					{
						activeUnit.SetUnitStatus(ActiveUnit._ActiveUnitStatus.Unassigned);
					}
					this.method_366(ref activeUnit);
					activeUnit.m_Doctrine.Init();
					activeUnit.GetSensory().ScheduleEMCONEvent(activeUnit.GetAllNoneMCMSensors());
				}
			}
			Client.b_Completed = true;
		}

		// Token: 0x06007203 RID: 29187 RVA: 0x00416018 File Offset: 0x00414218
		public void method_366(ref ActiveUnit activeUnit_)
		{
			string str = "";
			if (activeUnit_.IsAircraft && Operators.CompareString(activeUnit_.Name, activeUnit_.UnitClass, false) != 0)
			{
				str = " (" + activeUnit_.UnitClass + ")";
			}
			if (!Information.IsNothing(activeUnit_.GetAssignedMission(false)))
			{
				string name = activeUnit_.GetAssignedMission(false).Name;
				if (activeUnit_.GetAI().IsEscort)
				{
					activeUnit_.GetAI().IsEscort = false;
				}
				activeUnit_.DeleteMission(false, null);
				activeUnit_.SetAssignedTaskPool(null);
				Client.GetClientScenario().LogMessage(activeUnit_.Name + str + "已经被移出作战任务: " + name, LoggedMessage.MessageType.UnitAI, 5, activeUnit_.GetGuid(), Client.GetClientSide(), new GeoPoint(activeUnit_.GetLongitude(null), activeUnit_.GetLatitude(null)));
			}
			else if (!Information.IsNothing(activeUnit_.GetAssignedTaskPool()))
			{
				string name2 = activeUnit_.GetAssignedTaskPool().Name;
				activeUnit_.DeleteMission(false, null);
				activeUnit_.SetAssignedTaskPool(null);
				Client.GetClientScenario().LogMessage(activeUnit_.Name + str + "已被移出任务（Task）池: " + name2, LoggedMessage.MessageType.UnitAI, 5, activeUnit_.GetGuid(), Client.GetClientSide(), new GeoPoint(activeUnit_.GetLongitude(null), activeUnit_.GetLatitude(null)));
			}
			else
			{
				Client.GetClientScenario().LogMessage(activeUnit_.Name + str + "没有命令(未分配任务)", LoggedMessage.MessageType.UnitAI, 5, activeUnit_.GetGuid(), Client.GetClientSide(), new GeoPoint(activeUnit_.GetLongitude(null), activeUnit_.GetLatitude(null)));
			}
		}

		// Token: 0x06007204 RID: 29188 RVA: 0x0002F71F File Offset: 0x0002D91F
		private void method_367(object sender, EventArgs e)
		{
			this.method_26();
		}

		// Token: 0x06007205 RID: 29189 RVA: 0x004161DC File Offset: 0x004143DC
		private void method_368()
		{
			Collection<Unit> collection = new Collection<Unit>();
			Unit unit_ = null;
			GeoPoint geoPoint = WorldWindUtil.ScreenToWorldCoordinate(ref Client.m_WorldWindow, this.point_1.X, this.point_1.Y);
			if (!double.IsNaN(geoPoint.GetLatitude()) && !double.IsNaN(geoPoint.GetLongitude()))
			{
				short num = (short)(this.point_1.Y - 9);
				short num2 = (short)(this.point_1.Y + 9);
				short num3 = (short)(this.point_1.X - 9);
				short num4 = (short)(this.point_1.X + 9);
				int num5 = this.list_3.Count - 1;
				for (int i = 0; i <= num5; i++)
				{
					Unit unit = this.list_3[i];
					Tuple<int, int> tuple = null;
					this.dictionary_2.TryGetValue(unit, out tuple);
					Point point;
					if (!Information.IsNothing(tuple))
					{
						int item = tuple.Item1;
						int item2 = tuple.Item2;
						point = new Point(item, item2);
					}
					else
					{
						point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, unit.GetLatitude(null), unit.GetLongitude(null));
					}
					if (unit.IsActiveUnit() && !((ActiveUnit)unit).GetCommStuff().IsNotOutOfComms() && !Client.GetMap().IsGodsEyeView() && !Class2529.IsIsolatedPOVObject((ActiveUnit)unit))
					{
						point = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, ((ActiveUnit)unit).GetLatitudeLR().Value, ((ActiveUnit)unit).GetLongitudeLR().Value);
					}
					if ((int)num < point.Y && point.Y < (int)num2 && (int)num3 < point.X && point.X < (int)num4)
					{
						MapProfile._ViewMode viewMode = Client.GetMap().ViewMode;
						if (viewMode != MapProfile._ViewMode.GroupMode)
						{
							if (viewMode == MapProfile._ViewMode.UnitMode)
							{
								collection.Add(unit);
							}
						}
						else if (!unit.IsActiveUnit() || !((ActiveUnit)unit).HasParentGroup())
						{
							collection.Add(unit);
						}
					}
				}
				int count = collection.Count;
				if (count != 0)
				{
					if (count != 1)
					{
						float num6 = float.PositiveInfinity;
						using (IEnumerator<Unit> enumerator = collection.GetEnumerator())
						{
							while (enumerator.MoveNext())
							{
								Unit current = enumerator.Current;
								float num7 = (float)current.GetApproxAngularDistanceInDegrees(geoPoint);
								if (num7 < num6)
								{
									num6 = num7;
									unit_ = current;
								}
							}
							goto IL_28E;
						}
					}
					unit_ = collection[0];
				}
				else
				{
					unit_ = null;
				}
				IL_28E:
				Unit unit2 = Client.smethod_33();
				Client.ClientRefreshMap(unit_);
				if (unit2 != Client.smethod_33())
				{
					this.WorldMapBox.Invalidate();
				}
			}
		}

		// Token: 0x06007206 RID: 29190 RVA: 0x004164AC File Offset: 0x004146AC
		private void Click_Unit_HoldPositon_SelectedUnit(object sender, EventArgs e)
		{
			ToolStripMenuItem toolStripMenuItem;
			bool @checked = (toolStripMenuItem = this.MenuItem_Unit_HoldPositon_SelectedUnit).Checked;
			this.method_371(ref @checked);
			toolStripMenuItem.Checked = @checked;
		}

		// Token: 0x06007207 RID: 29191 RVA: 0x004164D8 File Offset: 0x004146D8
		private void Click_Unit_HoldPositon_AllUnit(object sender, EventArgs e)
		{
			ToolStripMenuItem toolStripMenuItem;
			bool @checked = (toolStripMenuItem = this.MenuItem_Unit_HoldPositon_SelectedUnit).Checked;
			this.method_372(ref @checked);
			toolStripMenuItem.Checked = @checked;
		}

		// Token: 0x06007208 RID: 29192 RVA: 0x00416504 File Offset: 0x00414704
		private void method_371(ref bool bool_13)
		{
			if (!Information.IsNothing(Client.GetClientSide()) && !Information.IsNothing(Client.GetHookedUnit()) && Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0)
			{
				bool_13 = !bool_13;
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsActiveUnit() && current.GetSide(false) == Client.GetClientSide() && current.IsFacility && !current.IsFixedFacility())
					{
						((Facility)current).GetFacilityAI().HoldPosition = bool_13;
					}
				}
			}
		}

		// Token: 0x06007209 RID: 29193 RVA: 0x004165C4 File Offset: 0x004147C4
		private void method_372(ref bool bool_13)
		{
			checked
			{
				if (!Information.IsNothing(Client.GetClientSide()) && Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0)
				{
					bool_13 = !bool_13;
					ActiveUnit[] activeUnitArray = Client.GetClientSide().ActiveUnitArray;
					for (int i = 0; i < activeUnitArray.Length; i++)
					{
						Unit unit = activeUnitArray[i];
						if (unit.IsActiveUnit() && unit.GetSide(false) == Client.GetClientSide() && unit.IsFacility && !unit.IsFixedFacility())
						{
							((Facility)unit).GetFacilityAI().HoldPosition = bool_13;
						}
					}
				}
			}
		}

		// Token: 0x0600720A RID: 29194 RVA: 0x0002F9F8 File Offset: 0x0002DBF8
		private void method_373(object sender, EventArgs e)
		{
			if (this.comboBox_2.SelectedIndex == 0)
			{
				SimConfiguration.gameOptions.SetNoPulseMapUpdate(false);
			}
			else
			{
				SimConfiguration.gameOptions.SetNoPulseMapUpdate(true);
			}
			SimConfiguration.SaveConfig();
		}

		// Token: 0x0600720B RID: 29195 RVA: 0x0002FA2A File Offset: 0x0002DC2A
		private void Click_ScriptEditor(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetLuaConsoleWindow().Show();
		}

		// Token: 0x0600720C RID: 29196 RVA: 0x0002FA3B File Offset: 0x0002DC3B
		private void Click_SR_SelectedUnit(object sender, EventArgs e)
		{
			if (!this.MenuItem_SR_SelectedUnit.Checked)
			{
				Client.GetMap().SetShowRangeSymbols(MapProfile._UnitCoverage.const_1);
				this.RenderMap();
			}
		}

		// Token: 0x0600720D RID: 29197 RVA: 0x0002FA5B File Offset: 0x0002DC5B
		private void Click_SR_AllUnit(object sender, EventArgs e)
		{
			if (!this.MenuItem_SR_AllUnit.Checked)
			{
				Client.GetMap().SetShowRangeSymbols(MapProfile._UnitCoverage.const_0);
				this.RenderMap();
			}
		}

		// Token: 0x0600720E RID: 29198 RVA: 0x0002FA7B File Offset: 0x0002DC7B
		private void Click_SR_RangeNotShow(object sender, EventArgs e)
		{
			if (!this.MenuItem_SR_NotShow.Checked)
			{
				Client.GetMap().SetShowRangeSymbols(MapProfile._UnitCoverage.const_2);
				this.RenderMap();
			}
		}

		// Token: 0x0600720F RID: 29199 RVA: 0x0002FA9B File Offset: 0x0002DC9B
		private void Click_SwitchToUnitView(object sender, EventArgs e)
		{
			this.method_31();
		}

		// Token: 0x06007210 RID: 29200 RVA: 0x003F486C File Offset: 0x003F2A6C
		private void Click_StartOrRecover(object sender, EventArgs e)
		{
			Configuration.EnumRunStop @enum = Client.GetConfiguration().GetSimStatus();
			if (@enum == Configuration.EnumRunStop.const_Stop)
			{
				Client.GetConfiguration().SetSimRunMode();
			}
			else if (@enum == Configuration.EnumRunStop.const_Run)
			{
				Client.GetConfiguration().SetSimStopMode();
			}
		}

		// Token: 0x06007211 RID: 29201 RVA: 0x0002FAA3 File Offset: 0x0002DCA3
		private void Click_TrackSelectedUnit(object sender, EventArgs e)
		{
			this.method_35();
		}

		// Token: 0x06007212 RID: 29202 RVA: 0x0002F7F3 File Offset: 0x0002D9F3
		private void Click_DirectionRangeMeasure(object sender, EventArgs e)
		{
			this.MeasureRangeBearing();
		}

		// Token: 0x06007213 RID: 29203 RVA: 0x0002F9D5 File Offset: 0x0002DBD5
		private void Click_UnassignMissionUnit(object sender, EventArgs e)
		{
			this.method_364();
			this.method_3().method_2(Client.GetClientScenario(), Client.GetClientSide(), Client.GetHookedUnit(), false);
		}

		// Token: 0x06007214 RID: 29204 RVA: 0x0002FAAB File Offset: 0x0002DCAB
		private void Click_DropTarget(object sender, EventArgs e)
		{
			this.method_36();
		}

		// Token: 0x06007215 RID: 29205 RVA: 0x0002FAB3 File Offset: 0x0002DCB3
		private void Click_ASW_DPS_Shallow(object sender, EventArgs e)
		{
			ActiveUnit_Weaponry.smethod_1(Client.GetHookedUnit(), true);
		}

		// Token: 0x06007216 RID: 29206 RVA: 0x0002FAC0 File Offset: 0x0002DCC0
		private void Click_ASW_DPS_Deep(object sender, EventArgs e)
		{
			ActiveUnit_Weaponry.smethod_1(Client.GetHookedUnit(), false);
		}

		// Token: 0x06007217 RID: 29207 RVA: 0x0002FACD File Offset: 0x0002DCCD
		private void Click_ASW_DAS_Shallow(object sender, EventArgs e)
		{
			ActiveUnit_Weaponry.smethod_2(Client.GetHookedUnit(), true);
		}

		// Token: 0x06007218 RID: 29208 RVA: 0x0002FADA File Offset: 0x0002DCDA
		private void Click_ASW_DAS_Deep(object sender, EventArgs e)
		{
			ActiveUnit_Weaponry.smethod_2(Client.GetHookedUnit(), false);
		}

		// Token: 0x06007219 RID: 29209 RVA: 0x0002FAE7 File Offset: 0x0002DCE7
		private void Click_ZoomIn(object sender, EventArgs e)
		{
			this.method_33();
		}

		// Token: 0x0600721A RID: 29210 RVA: 0x0002FAEF File Offset: 0x0002DCEF
		private void Click_ZoomOut(object sender, EventArgs e)
		{
			this.method_34();
		}

		// Token: 0x0600721B RID: 29211 RVA: 0x0002FAF7 File Offset: 0x0002DCF7
		private void Click_UpMove(object sender, EventArgs e)
		{
			this.method_39();
		}

		// Token: 0x0600721C RID: 29212 RVA: 0x0002FAFF File Offset: 0x0002DCFF
		private void Click_RightMove(object sender, EventArgs e)
		{
			this.method_40();
		}

		// Token: 0x0600721D RID: 29213 RVA: 0x0002FB07 File Offset: 0x0002DD07
		private void Click_LeftMove(object sender, EventArgs e)
		{
			this.method_38();
		}

		// Token: 0x0600721E RID: 29214 RVA: 0x0002FB0F File Offset: 0x0002DD0F
		private void Click_DownMove(object sender, EventArgs e)
		{
			this.method_41();
		}

		// Token: 0x0600721F RID: 29215 RVA: 0x0002FB17 File Offset: 0x0002DD17
		private void Click_GO_GroupBySelectedUnit(object sender, EventArgs e)
		{
			this.method_42();
		}

		// Token: 0x06007220 RID: 29216 RVA: 0x0002FB1F File Offset: 0x0002DD1F
		private void Click_GO_SelectedUnitRemoveGroup(object sender, EventArgs e)
		{
			this.method_43();
		}

		// Token: 0x06007221 RID: 29217 RVA: 0x0002FB27 File Offset: 0x0002DD27
		private void Click_DeployDippingSonar(object sender, EventArgs e)
		{
			this.method_37();
		}

		// Token: 0x06007222 RID: 29218 RVA: 0x0002FB2F File Offset: 0x0002DD2F
		private void Click_RealTimeSim(object sender, EventArgs e)
		{
			Client.GetClientScenario().SetTimeCompression(0);
			this.toolStripComboBox_0.SelectedIndex = 0;
		}

		// Token: 0x06007223 RID: 29219 RVA: 0x0002FB48 File Offset: 0x0002DD48
		private void Click_Rename(object sender, EventArgs e)
		{
			this.RenameObject();
		}

		// Token: 0x06007224 RID: 29220 RVA: 0x0002FB50 File Offset: 0x0002DD50
		private void Click_UO_CopyUnit(object sender, EventArgs e)
		{
			this.method_49();
		}

		// Token: 0x06007225 RID: 29221 RVA: 0x0002FB58 File Offset: 0x0002DD58
		private void Click_UO_MoveUnit(object sender, EventArgs e)
		{
			this.method_50();
		}

		// Token: 0x06007226 RID: 29222 RVA: 0x0002FB60 File Offset: 0x0002DD60
		private void Click_MarkHostile(object sender, EventArgs e)
		{
			this.method_53();
		}

		// Token: 0x06007227 RID: 29223 RVA: 0x0002FB68 File Offset: 0x0002DD68
		private void Click_MarkNeutral(object sender, EventArgs e)
		{
			this.method_55();
		}

		// Token: 0x06007228 RID: 29224 RVA: 0x0002FB70 File Offset: 0x0002DD70
		private void Click_MarkFriendly(object sender, EventArgs e)
		{
			this.method_56();
		}

		// Token: 0x06007229 RID: 29225 RVA: 0x0002FB78 File Offset: 0x0002DD78
		private void Click_UO_DeleteUnit(object sender, EventArgs e)
		{
			this.DeleteUnit();
		}

		// Token: 0x0600722A RID: 29226 RVA: 0x0002FB80 File Offset: 0x0002DD80
		private void Click_SituationControl(object sender, EventArgs e)
		{
			this.method_62();
		}

		// Token: 0x0600722B RID: 29227 RVA: 0x0002FB88 File Offset: 0x0002DD88
		private void DropDownOpening_UnitOrder(object sender, EventArgs e)
		{
			this.method_60();
		}

		// Token: 0x0600722C RID: 29228 RVA: 0x0002FB90 File Offset: 0x0002DD90
		private void DropDownOpening_ScenarioEditor(object sender, EventArgs e)
		{
			this.method_61();
		}

		// Token: 0x0600722D RID: 29229 RVA: 0x0002FB98 File Offset: 0x0002DD98
		private void Click_SimulationControl(object sender, EventArgs e)
		{
			this.method_64();
		}

		// Token: 0x0600722E RID: 29230 RVA: 0x0002FBA0 File Offset: 0x0002DDA0
		private void Click_MapSeting(object sender, EventArgs e)
		{
			this.method_63();
		}

		// Token: 0x0600722F RID: 29231 RVA: 0x0002FBA8 File Offset: 0x0002DDA8
		private void DropDownOpening_ContactTarget(object sender, EventArgs e)
		{
			this.method_65();
		}

		// Token: 0x06007230 RID: 29232 RVA: 0x0002FBB0 File Offset: 0x0002DDB0
		private void Click_SimIncreaseCompression(object sender, EventArgs e)
		{
			Client.GetClientScenario().IncreaseTimeCompression();
		}

		// Token: 0x06007231 RID: 29233 RVA: 0x0002FBBC File Offset: 0x0002DDBC
		private void Click_SimDecreaseCompression(object sender, EventArgs e)
		{
			Client.GetClientScenario().DecreaseTimeCompression();
		}

		// Token: 0x06007232 RID: 29234 RVA: 0x0002FBC8 File Offset: 0x0002DDC8
		private void Click_ChooseNextUnit(object sender, EventArgs e)
		{
			this.method_44();
		}

		// Token: 0x06007233 RID: 29235 RVA: 0x0002FBD0 File Offset: 0x0002DDD0
		private void Click_ChoosePrevUnit(object sender, EventArgs e)
		{
			this.method_45();
		}

		// Token: 0x06007234 RID: 29236 RVA: 0x0002FBD8 File Offset: 0x0002DDD8
		private void Click_SV_Common(object sender, EventArgs e)
		{
			if (!this.MenuItem_SV_Common.Checked)
			{
				SimConfiguration.gameOptions.SetSonobuoyVisibility(Configuration.GameOptions._SonobuoyVisibility.const_0);
				this.RenderMap();
			}
		}

		// Token: 0x06007235 RID: 29237 RVA: 0x0002FBF8 File Offset: 0x0002DDF8
		private void Click_SV_Virtual(object sender, EventArgs e)
		{
			if (!this.MenuItem_SV_Virtual.Checked)
			{
				SimConfiguration.gameOptions.SetSonobuoyVisibility(Configuration.GameOptions._SonobuoyVisibility.const_1);
				this.RenderMap();
			}
		}

		// Token: 0x06007236 RID: 29238 RVA: 0x0002FC18 File Offset: 0x0002DE18
		private void Click_SV_NotShow(object sender, EventArgs e)
		{
			if (!this.MenuItem_SV_NotShow.Checked)
			{
				SimConfiguration.gameOptions.SetSonobuoyVisibility(Configuration.GameOptions._SonobuoyVisibility.const_2);
				this.RenderMap();
			}
		}

		// Token: 0x06007237 RID: 29239 RVA: 0x0002FC38 File Offset: 0x0002DE38
		private void Click_RPV_Common(object sender, EventArgs e)
		{
			if (!this.MenuItem_RPV_Common.Checked)
			{
				SimConfiguration.gameOptions.SetRefPointVisibility(Configuration.GameOptions._RefPointVisibility.const_0);
				this.RenderMap();
			}
		}

		// Token: 0x06007238 RID: 29240 RVA: 0x0002FC58 File Offset: 0x0002DE58
		private void Click_RPV_Small(object sender, EventArgs e)
		{
			if (!this.MenuItem_RPV_Small.Checked)
			{
				SimConfiguration.gameOptions.SetRefPointVisibility(Configuration.GameOptions._RefPointVisibility.const_1);
				this.RenderMap();
			}
		}

		// Token: 0x06007239 RID: 29241 RVA: 0x0002FC78 File Offset: 0x0002DE78
		private void Click_RPV_NotShow(object sender, EventArgs e)
		{
			if (!this.MenuItem_RPV_NotShow.Checked)
			{
				SimConfiguration.gameOptions.SetRefPointVisibility(Configuration.GameOptions._RefPointVisibility.const_2);
				this.RenderMap();
			}
		}

		// Token: 0x0600723A RID: 29242 RVA: 0x0002FC98 File Offset: 0x0002DE98
		private void Click_GM_SelectedGroup(object sender, EventArgs e)
		{
			if (!this.MenuItem_GM_SelectedGroup.Checked)
			{
				SimConfiguration.gameOptions.method_33(Configuration.GameOptions._ShowGhostedGroupMembers.SEL);
				this.RenderMap();
			}
		}

		// Token: 0x0600723B RID: 29243 RVA: 0x0002FCB8 File Offset: 0x0002DEB8
		private void Click_GM_AllGroup(object sender, EventArgs e)
		{
			if (!this.MenuItem_GM_AllGroup.Checked)
			{
				SimConfiguration.gameOptions.method_33(Configuration.GameOptions._ShowGhostedGroupMembers.ALL);
				this.RenderMap();
			}
		}

		// Token: 0x0600723C RID: 29244 RVA: 0x0002FCD8 File Offset: 0x0002DED8
		private void Click_GM_NotShow(object sender, EventArgs e)
		{
			if (!this.MenuItem_GM_NotShow.Checked)
			{
				SimConfiguration.gameOptions.method_33(Configuration.GameOptions._ShowGhostedGroupMembers.NONE);
				this.RenderMap();
			}
		}

		// Token: 0x0600723D RID: 29245 RVA: 0x0002FB48 File Offset: 0x0002DD48
		private void Click_UO_RenameUnit(object sender, EventArgs e)
		{
			this.RenameObject();
		}

		// Token: 0x0600723E RID: 29246 RVA: 0x0002FCF8 File Offset: 0x0002DEF8
		private void Click_RenameSelectedRefName(object sender, EventArgs e)
		{
			this.RenameMultipleObjects();
		}

		// Token: 0x0600723F RID: 29247 RVA: 0x0002F856 File Offset: 0x0002DA56
		private void Click_AO_AutoEngageTarget(object sender, EventArgs e)
		{
			this.method_22();
		}

		// Token: 0x06007240 RID: 29248 RVA: 0x0002F85E File Offset: 0x0002DA5E
		private void Click_AO_ManualEngageTarget(object sender, EventArgs e)
		{
			this.method_23();
		}

		// Token: 0x06007241 RID: 29249 RVA: 0x0002F866 File Offset: 0x0002DA66
		private void Click_AO_LaunchOnlyBearing(object sender, EventArgs e)
		{
			this.method_25();
		}

		// Token: 0x06007242 RID: 29250 RVA: 0x0002F86E File Offset: 0x0002DA6E
		private void Click_AO_DropTarget(object sender, EventArgs e)
		{
			this.method_326();
		}

		// Token: 0x06007243 RID: 29251 RVA: 0x0002F876 File Offset: 0x0002DA76
		private void Click_AO_DropAllTarget(object sender, EventArgs e)
		{
			this.method_327();
		}

		// Token: 0x06007244 RID: 29252 RVA: 0x0002FD00 File Offset: 0x0002DF00
		private void Click_NNZ_EditExisting(object sender, EventArgs e)
		{
			this.m_NoNavZonesWindow = new NoNavZonesWindow();
			this.m_NoNavZonesWindow.Show();
		}

		// Token: 0x06007245 RID: 29253 RVA: 0x00416658 File Offset: 0x00414858
		private void Click_NNZ_CreateBySelectedRefPoint(object sender, EventArgs e)
		{
			IEnumerable<ReferencePoint> enumerable = Client.GetClientSide().GetReferencePoints().Where(MainForm.ReferencePointFunc32);
			if (enumerable.Count<ReferencePoint>() < 3)
			{
				Interaction.MsgBox("要想创建一个导航区您至少选择三个参考点.", MsgBoxStyle.OkOnly, "没有选择足够多的参考点!");
			}
			else
			{
				List<ReferencePoint> list = new List<ReferencePoint>();
				list.AddRange(enumerable);
				NoNavZone noNavZone = new NoNavZone("Zone " + Conversions.ToString(Client.GetClientSide().NoNavZoneList.Count + 1), list, Client.GetClientScenario(), Client.GetClientSide(), null);
				Client.GetClientSide().NoNavZoneList.Add(noNavZone);
				this.m_NoNavZonesWindow = new NoNavZonesWindow();
				this.m_NoNavZonesWindow.Show();
				this.m_NoNavZonesWindow.method_2(noNavZone);
			}
		}

		// Token: 0x06007246 RID: 29254 RVA: 0x0002FD18 File Offset: 0x0002DF18
		private void Click_EZ_EditExisting(object sender, EventArgs e)
		{
			this.m_ExclusionZonesWindow = new ExclusionZonesWindow();
			this.m_ExclusionZonesWindow.Show();
		}

		// Token: 0x06007247 RID: 29255 RVA: 0x0041670C File Offset: 0x0041490C
		private void Click_EZ_CreateBySelectedRefPoint(object sender, EventArgs e)
		{
			IEnumerable<ReferencePoint> enumerable = Client.GetClientSide().GetReferencePoints().Where(MainForm.ReferencePointFunc33);
			if (enumerable.Count<ReferencePoint>() < 3)
			{
				Interaction.MsgBox("您必须至少选择三个参考点才能创建一个封锁区.", MsgBoxStyle.OkOnly, "没有选择足够数量的参考点!");
			}
			else
			{
				List<ReferencePoint> list = new List<ReferencePoint>();
				list.AddRange(enumerable);
				ExclusionZone exclusionZone = new ExclusionZone("Zone " + Conversions.ToString(Client.GetClientSide().ExclusionZoneList.Count + 1), list, Misc.PostureStance.Unfriendly, null);
				Client.GetClientSide().ExclusionZoneList.Add(exclusionZone);
				this.m_ExclusionZonesWindow = new ExclusionZonesWindow();
				this.m_ExclusionZonesWindow.Show();
				this.m_ExclusionZonesWindow.method_2(exclusionZone);
			}
		}

		// Token: 0x06007248 RID: 29256 RVA: 0x0002FB17 File Offset: 0x0002DD17
		private void Click_Unit_GO_GroupBySelectedUnit(object sender, EventArgs e)
		{
			this.method_42();
		}

		// Token: 0x06007249 RID: 29257 RVA: 0x0002FB1F File Offset: 0x0002DD1F
		private void Click_Unit_GO_SelectedUnitRemoveGroup(object sender, EventArgs e)
		{
			this.method_43();
		}

		// Token: 0x0600724A RID: 29258 RVA: 0x0002F23C File Offset: 0x0002D43C
		private void Click_ReturnToBase(object sender, EventArgs e)
		{
			this.method_163();
		}

		// Token: 0x0600724B RID: 29259 RVA: 0x0002F62C File Offset: 0x0002D82C
		private void Click_SelectNewBase(object sender, EventArgs e)
		{
			Client.IssueOrdersToUnit(Client._CommandOrder.SetBaseForUnit);
		}

		// Token: 0x0600724C RID: 29260 RVA: 0x0002FAB3 File Offset: 0x0002DCB3
		private void Click_Unit_ASW_DPS_Shallow(object sender, EventArgs e)
		{
			ActiveUnit_Weaponry.smethod_1(Client.GetHookedUnit(), true);
		}

		// Token: 0x0600724D RID: 29261 RVA: 0x0002FAC0 File Offset: 0x0002DCC0
		private void Click_Unit_ASW_DPS_Deep(object sender, EventArgs e)
		{
			ActiveUnit_Weaponry.smethod_1(Client.GetHookedUnit(), false);
		}

		// Token: 0x0600724E RID: 29262 RVA: 0x0002FACD File Offset: 0x0002DCCD
		private void Click_Unit_ASW_DAS_Shallow(object sender, EventArgs e)
		{
			ActiveUnit_Weaponry.smethod_2(Client.GetHookedUnit(), true);
		}

		// Token: 0x0600724F RID: 29263 RVA: 0x0002FADA File Offset: 0x0002DCDA
		private void Click_Unit_ASW_DAS_Deep(object sender, EventArgs e)
		{
			ActiveUnit_Weaponry.smethod_2(Client.GetHookedUnit(), false);
		}

		// Token: 0x06007250 RID: 29264 RVA: 0x0002FB27 File Offset: 0x0002DD27
		private void Click_Unit_DeployDippingSonar(object sender, EventArgs e)
		{
			this.method_37();
		}

		// Token: 0x06007251 RID: 29265 RVA: 0x004167B8 File Offset: 0x004149B8
		private void Click_UO_UnitAutoDetected(object sender, EventArgs e)
		{
			ToolStripMenuItem unitIsAutodetectableToolStripMenuItem;
			bool @checked = (unitIsAutodetectableToolStripMenuItem = this.MenuItem_UO_UnitAutoDetected).Checked;
			this.method_445(ref @checked);
			unitIsAutodetectableToolStripMenuItem.Checked = @checked;
		}

		// Token: 0x06007252 RID: 29266 RVA: 0x004167E4 File Offset: 0x004149E4
		private void method_445(ref bool bool_13)
		{
			bool_13 = !bool_13;
			if (!Information.IsNothing(Client.GetClientSide()) && Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0)
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsActiveUnit() && !current.IsWeapon)
					{
						((ActiveUnit)current).SetIsAutoDetectable(null, bool_13);
					}
				}
			}
		}

		// Token: 0x06007253 RID: 29267 RVA: 0x00416880 File Offset: 0x00414A80
		private void method_446(ref bool bool_13)
		{
			bool_13 = !bool_13;
			if (!Information.IsNothing(Client.GetClientSide()) && Client.GetClientSide().GetUnitReadOnlyCollection().Count != 0)
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsActiveUnit())
					{
						ActiveUnit activeUnit = (ActiveUnit)current;
						if (bool_13)
						{
							activeUnit.GetCommStuff().SetIsNotOutOfComms(ActiveUnit_CommStuff._OOCReason.NetworkAttackOrActOfGod, false);
						}
						else
						{
							activeUnit.GetCommStuff().SetIsNotOutOfComms(ActiveUnit_CommStuff._OOCReason.const_0, true);
						}
					}
				}
				Client.b_Completed = true;
			}
		}

		// Token: 0x06007254 RID: 29268 RVA: 0x00416934 File Offset: 0x00414B34
		private void Click_UO_SettingBearing(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()) && !Information.IsNothing(Client.GetHookedUnit()))
			{
				new FixedFacilityOrientation
				{
					activeUnit_0 = (ActiveUnit)Client.GetHookedUnit()
				}.Show();
			}
		}

		// Token: 0x06007255 RID: 29269 RVA: 0x00416978 File Offset: 0x00414B78
		private void Click_UO_HoldPositon(object sender, EventArgs e)
		{
			ToolStripMenuItem holdPositionToolStripMenuItem;
			bool @checked = (holdPositionToolStripMenuItem = this.MenuItem_UO_HoldPositon).Checked;
			this.method_371(ref @checked);
			holdPositionToolStripMenuItem.Checked = @checked;
		}

		// Token: 0x06007256 RID: 29270 RVA: 0x004169A4 File Offset: 0x00414BA4
		public void AssignToMission(object object_3, ref Collection<ActiveUnit> collection_1, ref Mission mission_0, ref bool bool_13)
		{
            ActiveUnit currentX;
            foreach (ActiveUnit current in collection_1)
			{
                currentX = current;
                ActiveUnit activeUnit = current;
				Scenario clientScenario = Client.GetClientScenario();
				activeUnit.AssignToMission(ref clientScenario, ref currentX, ref mission_0, ref bool_13);
			}
			mission_0.int_0 = 1;
			Client.b_Completed = true;
		}

		// Token: 0x06007257 RID: 29271 RVA: 0x00416A10 File Offset: 0x00414C10
		private void Click_HoldPositon_SelectedUnit(object sender, EventArgs e)
		{
			ToolStripMenuItem holdPositionToolStripMenuItem;
			bool @checked = (holdPositionToolStripMenuItem = this.MenuItem_HoldPositon_SelectedUnit).Checked;
			this.method_371(ref @checked);
			holdPositionToolStripMenuItem.Checked = @checked;
		}

		// Token: 0x06007258 RID: 29272 RVA: 0x00416A3C File Offset: 0x00414C3C
		private void Click_HoldPositon_AllUnit(object sender, EventArgs e)
		{
			ToolStripMenuItem holdPositionToolStripMenuItem;
			bool @checked = (holdPositionToolStripMenuItem = this.MenuItem_HoldPositon_SelectedUnit).Checked;
			this.method_372(ref @checked);
			holdPositionToolStripMenuItem.Checked = @checked;
		}

		// Token: 0x06007259 RID: 29273 RVA: 0x0040CC20 File Offset: 0x0040AE20
		private void Click_Doctrine_RoE_EMCON_WRA(object sender, EventArgs e)
		{
			Subject hookedUnit = Client.GetHookedUnit();
			ReadOnlyCollection<Unit> unitReadOnlyCollection = Client.GetClientSide().GetUnitReadOnlyCollection();
			Collection<ActiveUnit> collection = null;
			this.method_254(hookedUnit, ref unitReadOnlyCollection, ref collection, true);
		}

		// Token: 0x0600725A RID: 29274 RVA: 0x0002FD30 File Offset: 0x0002DF30
		private void Click_HotKey(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetHotkeys().Show();
		}

		// Token: 0x0600725B RID: 29275 RVA: 0x0002FD41 File Offset: 0x0002DF41
		private void Click_PC_SelectedUnit(object sender, EventArgs e)
		{
			if (!this.MenuItem_AU_AddUnit54.Checked)
			{
				SimConfiguration.gameOptions.SetShowPlottedPaths(Configuration.GameOptions.Enum45.const_1);
				this.RenderMap();
			}
		}

		// Token: 0x0600725C RID: 29276 RVA: 0x0002FD61 File Offset: 0x0002DF61
		private void Click_PC_AllUnit(object sender, EventArgs e)
		{
			if (!this.MenuItem_PC_AllUnit.Checked)
			{
				SimConfiguration.gameOptions.SetShowPlottedPaths(Configuration.GameOptions.Enum45.const_0);
				this.RenderMap();
			}
		}

		// Token: 0x0600725D RID: 29277 RVA: 0x0002FD81 File Offset: 0x0002DF81
		private void Click_PC_NotShow(object sender, EventArgs e)
		{
			if (!this.MenuItem_PC_NotShow.Checked)
			{
				SimConfiguration.gameOptions.SetShowPlottedPaths(Configuration.GameOptions.Enum45.const_2);
				this.RenderMap();
			}
		}

		// Token: 0x0600725E RID: 29278 RVA: 0x00416A68 File Offset: 0x00414C68
		private void method_457()
		{
			IEnumerator enumerator = CommandFactory.GetCommandApp().OpenForms.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					Form form = (Form)enumerator.Current;
					if (form != this && form != CommandFactory.GetCommandMain().messageLogWindow_0 && form.Visible)
					{
						form.Hide();
					}
				}
			}
			finally
			{
				if (enumerator is IDisposable)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		// Token: 0x0600725F RID: 29279 RVA: 0x00416AF0 File Offset: 0x00414CF0
		private void method_458(ref Doctrine._WeaponControlStatus? nullable_0)
		{
			checked
			{
				if (Client.GetClientSide().ActiveUnitArray.Count<ActiveUnit>() != 0)
				{
					ActiveUnit[] activeUnitArray = Client.GetClientSide().ActiveUnitArray;
					for (int i = 0; i < activeUnitArray.Length; i++)
					{
						Unit unit = activeUnitArray[i];
						if (unit.IsActiveUnit() && unit.GetSide(false) == Client.GetClientSide() && !unit.IsWeapon)
						{
							bool? nullable_ = new bool?(false);
							if (!Information.IsNothing(Client.GetHookedUnit()) && unit == Client.GetHookedUnit())
							{
								nullable_ = new bool?(true);
							}
							Doctrine doctrine = ((ActiveUnit)unit).m_Doctrine;
							if (doctrine.IsWCS_Air_PlayerEditable(Client.GetClientScenario()))
							{
								doctrine.method_63(Client.GetClientScenario(), false, nullable_, false, false, nullable_0);
							}
							if (doctrine.IsWCS_Surface_PlayerEditable(Client.GetClientScenario()))
							{
								doctrine.SetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable_, false, false, nullable_0);
							}
							if (doctrine.IsWCS_Submarine_PlayerEditable(Client.GetClientScenario()))
							{
								doctrine.SetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable_, false, false, nullable_0);
							}
							if (doctrine.IsWCSLand_PlayerEditable(Client.GetClientScenario()))
							{
								doctrine.SetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable_, false, false, nullable_0);
							}
						}
					}
				}
			}
		}

		// Token: 0x06007260 RID: 29280 RVA: 0x00416C34 File Offset: 0x00414E34
		private void method_459(ref Doctrine._WeaponControlStatus? nullable_0)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				if (Client.GetClientSide().GetUnitReadOnlyCollection().Count > 0)
				{
					using (IEnumerator<Unit> enumerator = Client.GetClientSide().GetUnitReadOnlyCollection().GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							Unit current = enumerator.Current;
							if (current.IsActiveUnit() && current.GetSide(false) == Client.GetClientSide() && !current.IsWeapon)
							{
								bool? nullable_ = new bool?(false);
								if (!Information.IsNothing(Client.GetHookedUnit()) && current == Client.GetHookedUnit())
								{
									nullable_ = new bool?(true);
								}
								Doctrine doctrine = ((ActiveUnit)current).m_Doctrine;
								if (doctrine.IsWCS_Air_PlayerEditable(Client.GetClientScenario()))
								{
									doctrine.method_63(Client.GetClientScenario(), false, nullable_, false, false, nullable_0);
								}
								if (doctrine.IsWCS_Surface_PlayerEditable(Client.GetClientScenario()))
								{
									doctrine.SetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, nullable_, false, false, nullable_0);
								}
								if (doctrine.IsWCS_Submarine_PlayerEditable(Client.GetClientScenario()))
								{
									doctrine.SetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, nullable_, false, false, nullable_0);
								}
								if (doctrine.IsWCSLand_PlayerEditable(Client.GetClientScenario()))
								{
									doctrine.SetWCS_LandDoctrine(Client.GetClientScenario(), false, nullable_, false, false, nullable_0);
								}
							}
						}
						return;
					}
				}
				if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit() && Client.GetHookedUnit().GetSide(false) == Client.GetClientSide() && !Client.GetHookedUnit().IsWeapon)
				{
					Doctrine doctrine2 = ((ActiveUnit)Client.GetHookedUnit()).m_Doctrine;
					if (doctrine2.IsWCS_Air_PlayerEditable(Client.GetClientScenario()))
					{
						doctrine2.method_63(Client.GetClientScenario(), false, new bool?(true), false, false, nullable_0);
					}
					if (doctrine2.IsWCS_Surface_PlayerEditable(Client.GetClientScenario()))
					{
						doctrine2.SetWCS_SurfaceDoctrine(Client.GetClientScenario(), false, new bool?(true), false, false, nullable_0);
					}
					if (doctrine2.IsWCS_Submarine_PlayerEditable(Client.GetClientScenario()))
					{
						doctrine2.SetWCS_SubmarineDoctrine(Client.GetClientScenario(), false, new bool?(true), false, false, nullable_0);
					}
					if (doctrine2.IsWCSLand_PlayerEditable(Client.GetClientScenario()))
					{
						doctrine2.SetWCS_LandDoctrine(Client.GetClientScenario(), false, new bool?(true), false, false, nullable_0);
					}
				}
			}
		}

		// Token: 0x06007261 RID: 29281 RVA: 0x00416EB0 File Offset: 0x004150B0
		private void method_460(ref Doctrine._IgnorePlottedCourseWhenAttacking? nullable_0)
		{
			if (Client.GetClientSide().GetUnitReadOnlyCollection().Count > 0)
			{
				using (IEnumerator<Unit> enumerator = Client.GetClientSide().GetUnitReadOnlyCollection().GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						Unit current = enumerator.Current;
						if (current.IsActiveUnit() && current.GetSide(false) == Client.GetClientSide() && !current.IsWeapon)
						{
							Doctrine doctrine = ((ActiveUnit)current).m_Doctrine;
							if (doctrine.IsIgnorePlottedCourseWhenAttackingPlayerEditable(Client.GetClientScenario()))
							{
								bool? nullable_ = new bool?(false);
								if (!Information.IsNothing(Client.GetHookedUnit()) && current == Client.GetHookedUnit())
								{
									nullable_ = new bool?(true);
								}
								doctrine.SetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable_, false, false, nullable_0);
							}
						}
					}
					return;
				}
			}
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsActiveUnit() && Client.GetHookedUnit().GetSide(false) == Client.GetClientSide() && !Client.GetHookedUnit().IsWeapon)
			{
				Doctrine doctrine2 = ((ActiveUnit)Client.GetHookedUnit()).m_Doctrine;
				if (doctrine2.IsIgnorePlottedCourseWhenAttackingPlayerEditable(Client.GetClientScenario()))
				{
					doctrine2.SetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, new bool?(true), false, false, nullable_0);
				}
			}
		}

		// Token: 0x06007262 RID: 29282 RVA: 0x00417018 File Offset: 0x00415218
		private void method_461(ref Doctrine._IgnorePlottedCourseWhenAttacking? nullable_0)
		{
			checked
			{
				if (!Information.IsNothing(Client.GetClientSide()))
				{
					ActiveUnit[] activeUnitArray = Client.GetClientSide().ActiveUnitArray;
					for (int i = 0; i < activeUnitArray.Length; i++)
					{
						Unit unit = activeUnitArray[i];
						if (unit.IsActiveUnit() && unit.GetSide(false) == Client.GetClientSide() && !unit.IsWeapon)
						{
							Doctrine doctrine = ((ActiveUnit)unit).m_Doctrine;
							if (doctrine.IsIgnorePlottedCourseWhenAttackingPlayerEditable(Client.GetClientScenario()))
							{
								bool? nullable_ = new bool?(false);
								if (!Information.IsNothing(Client.GetHookedUnit()) && unit == Client.GetHookedUnit())
								{
									nullable_ = new bool?(true);
								}
								doctrine.SetIgnorePlottedCourseWhenAttackingDoctrine(Client.GetClientScenario(), false, nullable_, false, false, nullable_0);
							}
						}
					}
				}
			}
		}

		// Token: 0x06007263 RID: 29283 RVA: 0x0002F797 File Offset: 0x0002D997
		private void Click_DefineArea(object sender, EventArgs e)
		{
			Client.IssueOrdersToUnit(Client._CommandOrder.DefineArea);
		}

		// Token: 0x06007264 RID: 29284 RVA: 0x004170D8 File Offset: 0x004152D8
		private void method_463(byte byte_0)
		{
			if (Client.GetClientSide().QuickJumpSlots.ContainsKey(byte_0))
			{
				QuickJumpSlot quickJumpSlot;
				Client.GetClientSide().QuickJumpSlots.TryGetValue(byte_0, out quickJumpSlot);
				if (Information.IsNothing(quickJumpSlot))
				{
					Interaction.MsgBox("不存在当前编号的位置!", MsgBoxStyle.OkOnly, "不正确的快速跳转位置!");
				}
				else
				{
					string left = quickJumpSlot.LS.Split(new char[]
					{
						'_'
					})[0];
					if (Operators.CompareString(left, "AU", false) != 0)
					{
						if (Operators.CompareString(left, "Con", false) == 0)
						{
							Contact contact = null;
							Client.GetClientSide().GetContactObservableDictionary().TryGetValue(quickJumpSlot.LS.Split(new char[]
							{
								'_'
							})[1], ref contact);
							if (!Information.IsNothing(contact))
							{
								this.method_14(true, new GeoPoint(contact.GetLongitude(null), contact.GetLatitude(null)));
								this.method_6(quickJumpSlot.CA);
								this.bool_5 = quickJumpSlot.TR;
								this.toolStripStatusLabel_0.Text = "跳转到位置#" + Conversions.ToString(byte_0);
							}
						}
					}
					else
					{
						ActiveUnit activeUnit = null;
						Client.GetClientScenario().GetActiveUnits().TryGetValue(quickJumpSlot.LS.Split(new char[]
						{
							'_'
						})[1], ref activeUnit);
						if (!Information.IsNothing(activeUnit))
						{
							this.method_14(true, new GeoPoint(activeUnit.GetLongitude(null), activeUnit.GetLatitude(null)));
							this.method_6(quickJumpSlot.CA);
							this.bool_5 = quickJumpSlot.TR;
							this.toolStripStatusLabel_0.Text = "跳转到位置#" + Conversions.ToString(byte_0);
						}
					}
				}
			}
		}

		// Token: 0x06007265 RID: 29285 RVA: 0x004172AC File Offset: 0x004154AC
		private void Click_MessageOutputWindow(object sender, EventArgs e)
		{
			this.MenuItem_MessageOutputWindow.Checked = !this.MenuItem_MessageOutputWindow.Checked;
			SimConfiguration.gameOptions.SetMessageLogInWindow(this.MenuItem_MessageOutputWindow.Checked);
			SimConfiguration.SaveConfig();
			if (SimConfiguration.gameOptions.IsMessageLogInWindow())
			{
				CommandFactory.GetCommandMain().GetMessageLogWindow().Show();
			}
			else
			{
				CommandFactory.GetCommandMain().GetMessageLogWindow().Close();
			}
		}

		// Token: 0x06007266 RID: 29286 RVA: 0x0002FDA1 File Offset: 0x0002DFA1
		private void Click_SatellitePassPredictions(object sender, EventArgs e)
		{
			Client.IssueOrdersToUnit(Client._CommandOrder.SatellitePassPredication);
		}

		// Token: 0x06007267 RID: 29287 RVA: 0x0041731C File Offset: 0x0041551C
		private void Click_Unit_SE_SUTL_NewPlayer(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsActiveUnit())
					{
						((ActiveUnit)current).SetProficiencyLevel(new GlobalVariables.ProficiencyLevel?(GlobalVariables.ProficiencyLevel.Novice));
					}
				}
			}
		}

		// Token: 0x06007268 RID: 29288 RVA: 0x00417394 File Offset: 0x00415594
		private void Click_Unit_SE_SUTL_Trainee(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsActiveUnit())
					{
						((ActiveUnit)current).SetProficiencyLevel(new GlobalVariables.ProficiencyLevel?(GlobalVariables.ProficiencyLevel.Cadet));
					}
				}
			}
		}

		// Token: 0x06007269 RID: 29289 RVA: 0x0041740C File Offset: 0x0041560C
		private void Click_Unit_SE_SUTL_Common(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsActiveUnit())
					{
						((ActiveUnit)current).SetProficiencyLevel(new GlobalVariables.ProficiencyLevel?(GlobalVariables.ProficiencyLevel.Regular));
					}
				}
			}
		}

		// Token: 0x0600726A RID: 29290 RVA: 0x00417484 File Offset: 0x00415684
		private void Click_Unit_SE_SUTL_OldStager(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsActiveUnit())
					{
						((ActiveUnit)current).SetProficiencyLevel(new GlobalVariables.ProficiencyLevel?(GlobalVariables.ProficiencyLevel.Veteran));
					}
				}
			}
		}

		// Token: 0x0600726B RID: 29291 RVA: 0x004174FC File Offset: 0x004156FC
		private void Click_Unit_SE_SUTL_TopLevel(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsActiveUnit())
					{
						((ActiveUnit)current).SetProficiencyLevel(new GlobalVariables.ProficiencyLevel?(GlobalVariables.ProficiencyLevel.Ace));
					}
				}
			}
		}

		// Token: 0x0600726C RID: 29292 RVA: 0x00417574 File Offset: 0x00415774
		private void method_471(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
				{
					if (current.IsActiveUnit())
					{
						((ActiveUnit)current).SetProficiencyLevel(null);
					}
				}
			}
		}

		// Token: 0x0600726D RID: 29293 RVA: 0x0002FDAA File Offset: 0x0002DFAA
		private void Click_QuickTumaround(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetForm_QuickTurnaround().Show();
		}

		// Token: 0x0600726E RID: 29294 RVA: 0x0002FDAA File Offset: 0x0002DFAA
		private void Click_Unit_QuickTumaround(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetForm_QuickTurnaround().Show();
		}

		// Token: 0x0600726F RID: 29295 RVA: 0x0002FDBB File Offset: 0x0002DFBB
		private void Click_UO_SetOilAndHangTime(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetForm_SetFuelAndAirborneTime().Show();
		}

		// Token: 0x06007270 RID: 29296 RVA: 0x0002FDCC File Offset: 0x0002DFCC
		private void Click_UO_CloneUnit(object sender, EventArgs e)
		{
			this.method_48();
		}

		// Token: 0x06007271 RID: 29297 RVA: 0x0002FDD4 File Offset: 0x0002DFD4
		private void Click_ScenarioAttachment(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetScenAttachmentsWindow().Show();
		}

		// Token: 0x06007272 RID: 29298 RVA: 0x004175F0 File Offset: 0x004157F0
		private void Click_ScenarioPackingPublish(object sender, EventArgs e)
		{
			if (Information.IsNothing(Client.GetClientSide()))
			{
				Interaction.MsgBox("在打包想定之前您至少需要一个推演方.", MsgBoxStyle.OkOnly, "没有推演方!");
			}
			else
			{
				this.saveFileDialog_0.Title = "想定打包发布";
				base.Enabled = false;
				if (!Information.IsNothing(Client.GetClientScenario().FileName))
				{
					this.saveFileDialog_0.InitialDirectory = GameGeneral.strScenariosDir;
					this.saveFileDialog_0.FileName = Class2529.smethod_1(Client.GetClientScenario().FileName);
					bool flag;
					if (flag = (Client.GetConfiguration().GetSimStatus() == Configuration.EnumRunStop.const_Run))
					{
						Client.GetConfiguration().SetSimStopMode();
					}
					this.saveFileDialog_0.AddExtension = true;
					this.saveFileDialog_0.Filter = "想定打包文件(*.zip)|*.zip";
					if (string.IsNullOrEmpty(this.saveFileDialog_0.InitialDirectory))
					{
						this.saveFileDialog_0.InitialDirectory = GameGeneral.strScenariosDir;
					}
					switch (this.saveFileDialog_0.ShowDialog())
					{
					case DialogResult.OK:
						ScenarioCompressor.smethod_0(Client.GetClientScenario(), Client.GetClientSide(), this.saveFileDialog_0.FileName);
						base.Enabled = true;
						Client.string_3 = this.saveFileDialog_0.FileName;
						break;
					case DialogResult.Cancel:
						base.Enabled = true;
						break;
					case DialogResult.Abort:
						base.Enabled = true;
						break;
					case DialogResult.No:
						base.Enabled = true;
						break;
					}
					Client.IssueOrdersToUnit(Client._CommandOrder.None);
					if (flag)
					{
						Client.GetConfiguration().SetSimRunMode();
					}
				}
				else
				{
					Client.IssueOrdersToUnit(Client._CommandOrder.EditBriefing);
				}
			}
		}

		// Token: 0x06007273 RID: 29299 RVA: 0x00417778 File Offset: 0x00415978
		private void Click_AO_IPCSU_Yes(object sender, EventArgs e)
		{
			Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_1);
			this.method_460(ref ignorePlottedCourseWhenAttacking);
		}

		// Token: 0x06007274 RID: 29300 RVA: 0x0041779C File Offset: 0x0041599C
		private void Click_AO_IPCSU_No(object sender, EventArgs e)
		{
			Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_0);
			this.method_460(ref ignorePlottedCourseWhenAttacking);
		}

		// Token: 0x06007275 RID: 29301 RVA: 0x004177C0 File Offset: 0x004159C0
		private void Click_AO_IPCSU_SameAsSuperior(object sender, EventArgs e)
		{
			Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = null;
			this.method_460(ref ignorePlottedCourseWhenAttacking);
		}

		// Token: 0x06007276 RID: 29302 RVA: 0x004177E0 File Offset: 0x004159E0
		private void Click_AO_IPCAU_Yes(object sender, EventArgs e)
		{
			Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_1);
			this.method_461(ref ignorePlottedCourseWhenAttacking);
		}

		// Token: 0x06007277 RID: 29303 RVA: 0x00417804 File Offset: 0x00415A04
		private void Click_AO_IPCAU_No(object sender, EventArgs e)
		{
			Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_0);
			this.method_461(ref ignorePlottedCourseWhenAttacking);
		}

		// Token: 0x06007278 RID: 29304 RVA: 0x00417828 File Offset: 0x00415A28
		private void Click_AO_IPCAU_SameAsSuperior(object sender, EventArgs e)
		{
			Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = null;
			this.method_461(ref ignorePlottedCourseWhenAttacking);
		}

		// Token: 0x06007279 RID: 29305 RVA: 0x00417848 File Offset: 0x00415A48
		private void Click_AO_WCSFATSU_ForbidFire(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Hold);
			this.method_459(ref weaponControlStatus);
		}

		// Token: 0x0600727A RID: 29306 RVA: 0x0041786C File Offset: 0x00415A6C
		private void Click_AO_WCSFATSU_LimitFire(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Tight);
			this.method_459(ref weaponControlStatus);
		}

		// Token: 0x0600727B RID: 29307 RVA: 0x00417890 File Offset: 0x00415A90
		private void Click_AO_WCSFATSU_FreeFire(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Free);
			this.method_459(ref weaponControlStatus);
		}

		// Token: 0x0600727C RID: 29308 RVA: 0x004178B4 File Offset: 0x00415AB4
		private void Click_AO_WCSFATSU_SameAsSuperior(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = null;
			this.method_459(ref weaponControlStatus);
		}

		// Token: 0x0600727D RID: 29309 RVA: 0x004178D4 File Offset: 0x00415AD4
		private void Click_AO_WCSFATAU_ForbidFire(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Hold);
			this.method_458(ref weaponControlStatus);
		}

		// Token: 0x0600727E RID: 29310 RVA: 0x004178F8 File Offset: 0x00415AF8
		private void Click_AO_WCSFATAU_LimitFire(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Tight);
			this.method_458(ref weaponControlStatus);
		}

		// Token: 0x0600727F RID: 29311 RVA: 0x0041791C File Offset: 0x00415B1C
		private void Click_AO_WCSFATAU_FreeFire(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Free);
			this.method_458(ref weaponControlStatus);
		}

		// Token: 0x06007280 RID: 29312 RVA: 0x00417940 File Offset: 0x00415B40
		private void Click_AO_WCSFATAU_SameAsSuperior(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = null;
			this.method_458(ref weaponControlStatus);
		}

		// Token: 0x06007281 RID: 29313 RVA: 0x00417778 File Offset: 0x00415978
		private void Click_Unit_AO_IPCSU_Yes(object sender, EventArgs e)
		{
			Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_1);
			this.method_460(ref ignorePlottedCourseWhenAttacking);
		}

		// Token: 0x06007282 RID: 29314 RVA: 0x0041779C File Offset: 0x0041599C
		private void Click_Unit_AO_IPCSU_No(object sender, EventArgs e)
		{
			Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_0);
			this.method_460(ref ignorePlottedCourseWhenAttacking);
		}

		// Token: 0x06007283 RID: 29315 RVA: 0x004177C0 File Offset: 0x004159C0
		private void Click_Unit_AO_IPCSU_SameAsSuperior(object sender, EventArgs e)
		{
			Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = null;
			this.method_460(ref ignorePlottedCourseWhenAttacking);
		}

		// Token: 0x06007284 RID: 29316 RVA: 0x004177E0 File Offset: 0x004159E0
		private void Click_Unit_AO_IPCAU_Yes(object sender, EventArgs e)
		{
			Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_1);
			this.method_461(ref ignorePlottedCourseWhenAttacking);
		}

		// Token: 0x06007285 RID: 29317 RVA: 0x00417804 File Offset: 0x00415A04
		private void Click_Unit_AO_IPCAU_No(object sender, EventArgs e)
		{
			Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = new Doctrine._IgnorePlottedCourseWhenAttacking?(Doctrine._IgnorePlottedCourseWhenAttacking.const_0);
			this.method_461(ref ignorePlottedCourseWhenAttacking);
		}

		// Token: 0x06007286 RID: 29318 RVA: 0x00417828 File Offset: 0x00415A28
		private void Click_Unit_AO_IPCAU_SameAsSuperior(object sender, EventArgs e)
		{
			Doctrine._IgnorePlottedCourseWhenAttacking? ignorePlottedCourseWhenAttacking = null;
			this.method_461(ref ignorePlottedCourseWhenAttacking);
		}

		// Token: 0x06007287 RID: 29319 RVA: 0x00417848 File Offset: 0x00415A48
		private void Click_Unit_AO_WCSFATSU_ForbidFire(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Hold);
			this.method_459(ref weaponControlStatus);
		}

		// Token: 0x06007288 RID: 29320 RVA: 0x0041786C File Offset: 0x00415A6C
		private void Click_Unit_AO_WCSFATSU_LimitFire(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Tight);
			this.method_459(ref weaponControlStatus);
		}

		// Token: 0x06007289 RID: 29321 RVA: 0x00417890 File Offset: 0x00415A90
		private void Click_Unit_AO_WCSFATSU_FreeFire(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Free);
			this.method_459(ref weaponControlStatus);
		}

		// Token: 0x0600728A RID: 29322 RVA: 0x004178B4 File Offset: 0x00415AB4
		private void Click_Unit_AO_WCSFATSU_SameAsSuperior(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = null;
			this.method_459(ref weaponControlStatus);
		}

		// Token: 0x0600728B RID: 29323 RVA: 0x004178D4 File Offset: 0x00415AD4
		private void Click_Unit_AO_WCSFATAU_ForbidFire(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Hold);
			this.method_458(ref weaponControlStatus);
		}

		// Token: 0x0600728C RID: 29324 RVA: 0x004178F8 File Offset: 0x00415AF8
		private void Click_Unit_AO_WCSFATAU_LimitFire(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Tight);
			this.method_458(ref weaponControlStatus);
		}

		// Token: 0x0600728D RID: 29325 RVA: 0x0041791C File Offset: 0x00415B1C
		private void Click_Unit_AO_WCSFATAU_FreeFire(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = new Doctrine._WeaponControlStatus?(Doctrine._WeaponControlStatus.Free);
			this.method_458(ref weaponControlStatus);
		}

		// Token: 0x0600728E RID: 29326 RVA: 0x00417940 File Offset: 0x00415B40
		private void Click_Unit_AO_WCSFATAU_SameAsSuperior(object sender, EventArgs e)
		{
			Doctrine._WeaponControlStatus? weaponControlStatus = null;
			this.method_458(ref weaponControlStatus);
		}

		// Token: 0x0600728F RID: 29327 RVA: 0x0002FDE5 File Offset: 0x0002DFE5
		private void method_506(Unit unit_0, int int_14, int int_15)
		{
			this.method_18(unit_0, false);
			this.method_507((Contact)unit_0);
			this.contextMenuStrip_4.Show(Client.m_WorldWindow, int_14, int_15);
		}

		// Token: 0x06007290 RID: 29328 RVA: 0x00417960 File Offset: 0x00415B60
		private void method_507(Contact contact_0)
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsContact() && !Information.IsNothing(Client.GetClientSide()))
			{
				this.toolStripMenuItem_351.Enabled = true;
				this.toolStripMenuItem_350.Enabled = true;
				this.toolStripMenuItem_349.Enabled = true;
				this.toolStripMenuItem_348.Enabled = true;
				switch (((Contact)Client.GetHookedUnit()).GetPostureStance(Client.GetClientSide()))
				{
				case Misc.PostureStance.Neutral:
					this.toolStripMenuItem_350.Enabled = false;
					break;
				case Misc.PostureStance.Friendly:
					this.toolStripMenuItem_351.Enabled = false;
					break;
				case Misc.PostureStance.Unfriendly:
					this.toolStripMenuItem_349.Enabled = false;
					break;
				case Misc.PostureStance.Hostile:
					this.toolStripMenuItem_348.Enabled = false;
					break;
				}
				if (((Contact)Client.GetHookedUnit()).IsFilterOut)
				{
					this.toolStripMenuItem_311.Text = "取消过滤";
				}
				else
				{
					this.toolStripMenuItem_311.Text = "过滤";
				}
			}
		}

		// Token: 0x06007291 RID: 29329 RVA: 0x0002FE0D File Offset: 0x0002E00D
		private void method_508(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsContact())
			{
				this.method_56();
			}
		}

		// Token: 0x06007292 RID: 29330 RVA: 0x0002FE33 File Offset: 0x0002E033
		private void method_509(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsContact())
			{
				this.method_55();
			}
		}

		// Token: 0x06007293 RID: 29331 RVA: 0x0002FE59 File Offset: 0x0002E059
		private void method_510(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsContact())
			{
				this.method_54();
			}
		}

		// Token: 0x06007294 RID: 29332 RVA: 0x0002FE7F File Offset: 0x0002E07F
		private void method_511(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsContact())
			{
				this.method_53();
			}
		}

		// Token: 0x06007295 RID: 29333 RVA: 0x00417A60 File Offset: 0x00415C60
		private void method_512(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsContact())
			{
				Contact contact = (Contact)Client.GetHookedUnit();
				contact.IsFilterOut = !contact.IsFilterOut;
				this.RefreshMap();
			}
		}

		// Token: 0x06007296 RID: 29334 RVA: 0x00417AAC File Offset: 0x00415CAC
		private void method_513(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientScenario()) && !Information.IsNothing(Client.GetClientSide()) && Client.GetClientSide().GetUnitReadOnlyCollection().Count <= 1 && Client.GetConfiguration().GetSimStatus() == Configuration.EnumRunStop.const_Run && (this.method_3().method_0() || (!Information.IsNothing(Client.GetHookedUnit()) && (Client.GetHookedUnit().IsWeapon || Client.GetHookedUnit().IsContact()))))
			{
				this.method_3().method_2(Client.GetClientScenario(), Client.GetClientSide(), Client.GetHookedUnit(), false);
			}
			if (this.int_1 <= 0)
			{
				this.method_7();
			}
			else
			{
				this.int_1--;
			}
		}

		// Token: 0x06007297 RID: 29335 RVA: 0x00417B6C File Offset: 0x00415D6C
		private void Click_FilteroutAllTarget(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				using (List<Contact>.Enumerator enumerator = Client.GetClientSide().GetContactList().GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						enumerator.Current.IsFilterOut = true;
					}
				}
				this.RefreshMap();
			}
		}

		// Token: 0x06007298 RID: 29336 RVA: 0x00417BD4 File Offset: 0x00415DD4
		private void Click_CancelFilteroutAllContacts(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				using (List<Contact>.Enumerator enumerator = Client.GetClientSide().GetContactList().GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						enumerator.Current.IsFilterOut = false;
					}
				}
				this.RefreshMap();
			}
		}

		// Token: 0x06007299 RID: 29337 RVA: 0x00417C3C File Offset: 0x00415E3C
		private void Click_DB_SecnarioDataUpdateToLatestVersion(object sender, EventArgs e)
		{
			if (Client.GetDBRecord().method_4())
			{
				if (Interaction.MsgBox("您将使用当前数据库的最新版本，继续？", MsgBoxStyle.OkCancel, null) == MsgBoxResult.Ok)
				{
					CommandFactory.GetCommandMain().GetMigration().Show();
				}
			}
			else
			{
				CommandFactory.GetCommandMain().GetMigration().Show();
			}
		}

		// Token: 0x0600729A RID: 29338 RVA: 0x00417C8C File Offset: 0x00415E8C
		private void Click_DB_SecnarioDataBandingToCustomDB(object sender, EventArgs e)
		{
			if (Interaction.MsgBox("您确定吗? 此操作将会创建一个当前数据库的定制副本，并将当前想定绑定到这个定制数据库上", MsgBoxStyle.OkCancel, null) == MsgBoxResult.Ok)
			{
				if (string.IsNullOrEmpty(this.saveFileDialog_0.InitialDirectory))
				{
					this.saveFileDialog_0.InitialDirectory = GameGeneral.strScenariosDir;
				}
				if (this.saveFileDialog_0.ShowDialog() == DialogResult.OK)
				{
					string str = "";
					DBID_HarshSet.smethod_0(Client.GetClientScenario(), ref str);
					Class260.SaveTempScenarioFile(Client.GetClientScenario(), Client.GetClientSide(), this.saveFileDialog_0.FileName, false, false);
					Interaction.MsgBox("完成!当前想定的定制数据库为: " + str, MsgBoxStyle.OkOnly, null);
				}
			}
		}

		// Token: 0x0600729B RID: 29339 RVA: 0x0002FEA5 File Offset: 0x0002E0A5
		private void Click_Battle_New(object sender, EventArgs e)
		{
			Client.campaignEditorWindow.class111_0 = new Campaign();
			Client.campaignEditorWindow.Show();
		}

		// Token: 0x0600729C RID: 29340 RVA: 0x00417D28 File Offset: 0x00415F28
		private void Click_Battle_LoadForFile(object sender, EventArgs e)
		{
			this.openFileDialog_3.InitialDirectory = GameGeneral.strScenariosDir;
			this.openFileDialog_3.FileName = "*.campaign";
			this.openFileDialog_3.Filter = "CommandX战役文件(*.campaign)|*.campaign";
			if (this.openFileDialog_3.ShowDialog() == DialogResult.OK)
			{
				Campaign campaign = Campaign.GetCampaign(this.openFileDialog_3.FileName);
				Client.campaignEditorWindow.class111_0 = campaign;
				Client.campaignEditorWindow.Show();
			}
		}

		// Token: 0x0600729D RID: 29341 RVA: 0x0002FEC0 File Offset: 0x0002E0C0
		private void SetSaveAsEnable(object sender, EventArgs e)
		{
			if (Client.GetClientScenario().IsCampaignSession())
			{
				this.MenuItem_SaveAs.Enabled = false;
			}
			else
			{
				this.MenuItem_SaveAs.Enabled = true;
			}
		}

		// Token: 0x0600729E RID: 29342 RVA: 0x0002FEEB File Offset: 0x0002E0EB
		private void Click_DayNightLight(object sender, EventArgs e)
		{
			Client.GetMap().SetIsDayNightLighting(!Client.GetMap().IsDayNightLighting());
			this.RenderMap();
		}

		// Token: 0x0600729F RID: 29343 RVA: 0x0002F0E4 File Offset: 0x0002D2E4
		private void Click_UO_AddUnit(object sender, EventArgs e)
		{
			Client.IssueOrdersToUnit(Client._CommandOrder.AddUnit);
		}

		// Token: 0x060072A0 RID: 29344 RVA: 0x0002FF0A File Offset: 0x0002E10A
		private void Click_EE_SpecialEvent(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetClientSide()))
			{
				CommandFactory.GetCommandMain().GetListSpecialActions().Show();
			}
		}

		// Token: 0x060072A1 RID: 29345 RVA: 0x0002FF27 File Offset: 0x0002E127
		private void Click_SpecialAction(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetSpecialActionsForm().Show();
		}

		// Token: 0x060072A2 RID: 29346 RVA: 0x0002FF38 File Offset: 0x0002E138
		private void Click_MAOC_SelectedMission(object sender, EventArgs e)
		{
			SimConfiguration.gameOptions.method_35(Configuration.GameOptions._ShowMissionArea.const_1);
			this.RenderMap();
		}

		// Token: 0x060072A3 RID: 29347 RVA: 0x0002FF4B File Offset: 0x0002E14B
		private void Click_MAOC_AllMission(object sender, EventArgs e)
		{
			SimConfiguration.gameOptions.method_35(Configuration.GameOptions._ShowMissionArea.const_0);
			this.RenderMap();
		}

		// Token: 0x060072A4 RID: 29348 RVA: 0x0002FF5E File Offset: 0x0002E15E
		private void Click_MAOC_NotShow(object sender, EventArgs e)
		{
			SimConfiguration.gameOptions.method_35(Configuration.GameOptions._ShowMissionArea.const_2);
			this.RenderMap();
		}

		// Token: 0x060072A5 RID: 29349 RVA: 0x00417DA0 File Offset: 0x00415FA0
		private void Click_Unit_SE_CopyUnitID(object sender, EventArgs e)
		{
			StringBuilder stringBuilder = new StringBuilder();
			bool flag = false;
			foreach (Unit current in Client.GetClientSide().GetUnitReadOnlyCollection())
			{
				if (!Information.IsNothing(current))
				{
					if (flag)
					{
						stringBuilder.Append(" , ");
					}
					stringBuilder.Append(string.Concat(new string[]
					{
						"{name='",
						current.Name.ToString(),
						"', guid='",
						current.GetGuid(),
						"'}"
					}));
					flag = true;
				}
			}
			Clipboard.SetText(stringBuilder.ToString());
		}

		// Token: 0x060072A6 RID: 29350 RVA: 0x0002FF71 File Offset: 0x0002E171
		private void Click_IsolatedUnitView(object sender, EventArgs e)
		{
			this.SetIsolatedPOVObject();
		}

		// Token: 0x060072A7 RID: 29351 RVA: 0x00417E68 File Offset: 0x00416068
		private void SetIsolatedPOVObject()
		{
			if (Client.GetClientScenario().DeclaredFeatures.Contains(Scenario.ScenarioFeatureOption.CommsDisruption))
			{
				if (string.IsNullOrEmpty(Client.GetMap().GetIsolatedPOVObjectID()))
				{
					if (Information.IsNothing(Client.GetHookedUnit()) || !Client.GetHookedUnit().IsActiveUnit())
					{
						return;
					}
					Client.GetMap().SetIsolatedPOVObjectID(Client.GetHookedUnit().GetGuid());
				}
				else
				{
					Client.GetMap().SetIsolatedPOVObjectID(null);
				}
				Client.b_Completed = true;
			}
		}

		// Token: 0x060072A8 RID: 29352 RVA: 0x0002FF79 File Offset: 0x0002E179
		private void Click_Tutorials(object sender, EventArgs e)
		{
			Process.Start(SimConfiguration.smethod_3("General", "VideoTutorials"));
		}

		// Token: 0x060072A9 RID: 29353 RVA: 0x0002FF90 File Offset: 0x0002E190
		private void Click_PublishScenarioToSimulationServer(object sender, EventArgs e)
		{
			if (!SteamSession.bool_0)
			{
				throw new NotSupportedException();
			}
			CommandFactory.GetCommandMain().GetSteamPublishScenarioForm().Show();
		}

		// Token: 0x060072AA RID: 29354 RVA: 0x0002FFAE File Offset: 0x0002E1AE
		private void Click_CE_AllEmissions(object sender, EventArgs e)
		{
			if (!this.MenuItem_CE_AllEmissions.Checked)
			{
				Client.GetMap().SetShowContactEmissions_Details(MapProfile.Enum56.const_0);
				this.RenderMap();
			}
		}

		// Token: 0x060072AB RID: 29355 RVA: 0x0002FFCE File Offset: 0x0002E1CE
		private void Click_CE_OnlyFCR(object sender, EventArgs e)
		{
			if (!this.MenuItem_CE_OnlyFCR.Checked)
			{
				Client.GetMap().SetShowContactEmissions_Details(MapProfile.Enum56.const_1);
				this.RenderMap();
			}
		}

		// Token: 0x060072AC RID: 29356 RVA: 0x0002FFEE File Offset: 0x0002E1EE
		private void Click_CE_SelectedShowAllRestOnlyFCR(object sender, EventArgs e)
		{
			if (!this.MenuItem_CE_SelectedShowAllRestOnlyFCR.Checked)
			{
				Client.GetMap().SetShowContactEmissions_Details(MapProfile.Enum56.const_2);
				this.RenderMap();
			}
		}

		// Token: 0x060072AD RID: 29357 RVA: 0x00417EE0 File Offset: 0x004160E0
		private void Click_AR_AutoSelectAerialTanker(object sender, EventArgs e)
		{
			ActiveUnit activeUnit = null;
			Mission mission = null;
			this.method_296(ref activeUnit, ref mission);
		}

		// Token: 0x060072AE RID: 29358 RVA: 0x0003000E File Offset: 0x0002E20E
		private void Click_MarkUnfriendly(object sender, EventArgs e)
		{
			this.method_54();
		}

		// Token: 0x060072AF RID: 29359 RVA: 0x00030016 File Offset: 0x0002E216
		private void method_538(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsContact())
			{
				this.RenameObject();
			}
		}

		// Token: 0x060072B0 RID: 29360 RVA: 0x0003003C File Offset: 0x0002E23C
		private void method_539(object sender, EventArgs e)
		{
			if (!Information.IsNothing(Client.GetHookedUnit()) && Client.GetHookedUnit().IsContact())
			{
				this.method_36();
			}
		}

		// Token: 0x060072B1 RID: 29361 RVA: 0x00030062 File Offset: 0x0002E262
		private void Click_AR_ManualSelectAerialTanker(object sender, EventArgs e)
		{
			Client.IssueOrdersToUnit(Client._CommandOrder.SelectTankerToRefuelFrom);
		}

		// Token: 0x060072B2 RID: 29362 RVA: 0x0003006B File Offset: 0x0002E26B
		private void method_541(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetMonteCarloForm().Show();
		}

		// Token: 0x060072B3 RID: 29363 RVA: 0x00417EFC File Offset: 0x004160FC
		private void method_542(object sender, EventArgs e)
		{
			object obj = this.object_2;
			ObjectFlowControl.CheckForSyncLockOnValueType(obj);
			lock (obj)
			{
				Task.Factory.StartNew(MainForm.ActionFunc34);
			}
		}

		// Token: 0x060072B4 RID: 29364 RVA: 0x0003007C File Offset: 0x0002E27C
		private void method_543(object sender, EventArgs e)
		{
			this.rightColumnWPF_0.method_4();
		}

		// Token: 0x060072B5 RID: 29365 RVA: 0x00417F54 File Offset: 0x00416154
		private void method_544(object sender, EventArgs e)
		{
			Mission mission = (Mission)(sender as ToolStripMenuItem).Tag;
			ActiveUnit activeUnit = null;
			this.method_296(ref activeUnit, ref mission);
			this.RefreshMap();
		}

		// Token: 0x060072B6 RID: 29366 RVA: 0x0002FF71 File Offset: 0x0002E171
		private void Click_Unit_IsolationView(object sender, EventArgs e)
		{
			this.SetIsolatedPOVObject();
		}

		// Token: 0x060072B7 RID: 29367 RVA: 0x0003006B File Offset: 0x0002E26B
		private void Click_MonteCarloSimulation(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetMonteCarloForm().Show();
		}

		// Token: 0x060072B8 RID: 29368 RVA: 0x00417EE0 File Offset: 0x004160E0
		private void Click_Unit_AR_AutoSelectAerialTanker(object sender, EventArgs e)
		{
			ActiveUnit activeUnit = null;
			Mission mission = null;
			this.method_296(ref activeUnit, ref mission);
		}

		// Token: 0x060072B9 RID: 29369 RVA: 0x00030062 File Offset: 0x0002E262
		private void Click_Unit_AR_ManualSelectAerialTanker(object sender, EventArgs e)
		{
			Client.IssueOrdersToUnit(Client._CommandOrder.SelectTankerToRefuelFrom);
		}

		// Token: 0x060072BA RID: 29370 RVA: 0x00030089 File Offset: 0x0002E289
		private void BtnClick_GameSpeed(object sender, EventArgs e)
		{
			CommandFactory.GetCommandMain().GetOptions().Show();
			CommandFactory.GetCommandMain().GetOptions().vmethod_10().SelectedIndex = 4;
		}

		// Token: 0x060072BB RID: 29371 RVA: 0x00417F84 File Offset: 0x00416184
		private void Click_Unit_SE_UnitLoseCommunication(object sender, EventArgs e)
		{
			ToolStripMenuItem tSMI_UnitIsOutOfComms;
			bool @checked = (tSMI_UnitIsOutOfComms = this.MenuItem_Unit_SE_UnitLoseCommunication).Checked;
			this.method_446(ref @checked);
			tSMI_UnitIsOutOfComms.Checked = @checked;
		}

		// Token: 0x060072BC RID: 29372 RVA: 0x000300AF File Offset: 0x0002E2AF
		private void method_551(object sender, EventArgs e)
		{
			if (!this.toolStripMenuItem_362.Checked)
			{
				SimConfiguration.gameOptions.SetShowFlightPlans_Airborne(Configuration.GameOptions._ShowFlightPlans_Airborne.const_1);
				this.RenderMap();
			}
		}

		// Token: 0x060072BD RID: 29373 RVA: 0x000300CF File Offset: 0x0002E2CF
		private void method_552(object sender, EventArgs e)
		{
			if (!this.toolStripMenuItem_363.Checked)
			{
				SimConfiguration.gameOptions.SetShowFlightPlans_Airborne(Configuration.GameOptions._ShowFlightPlans_Airborne.const_0);
				this.RenderMap();
			}
		}

		// Token: 0x060072BE RID: 29374 RVA: 0x000300EF File Offset: 0x0002E2EF
		private void method_553(object sender, EventArgs e)
		{
			if (!this.toolStripMenuItem_364.Checked)
			{
				SimConfiguration.gameOptions.SetShowFlightPlans_Airborne(Configuration.GameOptions._ShowFlightPlans_Airborne.const_2);
				this.RenderMap();
			}
		}

		// Token: 0x060072BF RID: 29375 RVA: 0x00417FB0 File Offset: 0x004161B0
		[CompilerGenerated]
		private float method_554(ReferencePoint referencePoint_2)
		{
			return referencePoint_2.GetDistance(this.geoPoint_0.GetLongitude(), this.geoPoint_0.GetLatitude());
		}

		// Token: 0x060072C0 RID: 29376 RVA: 0x00417FDC File Offset: 0x004161DC
		[CompilerGenerated]
		private double method_555(Waypoint waypoint_0)
		{
			return waypoint_0.GetApproxAngularDistance(this.geoPoint_0.GetLongitude(), this.geoPoint_0.GetLatitude());
		}

		// Token: 0x060072C1 RID: 29377 RVA: 0x00417FB0 File Offset: 0x004161B0
		[CompilerGenerated]
		private float method_556(ReferencePoint referencePoint_2)
		{
			return referencePoint_2.GetDistance(this.geoPoint_0.GetLongitude(), this.geoPoint_0.GetLatitude());
		}

		// Token: 0x04003EDC RID: 16092
		public static Func<ActiveUnit, bool> ActiveUnitFunc0 = (ActiveUnit activeUnit_0) => activeUnit_0.IsGroup;

		// Token: 0x04003EDD RID: 16093
		public static Func<ActiveUnit, bool> ActiveUnitFunc1 = (ActiveUnit activeUnit_0) => !activeUnit_0.IsGroup;

		// Token: 0x04003EDE RID: 16094
		public static Func<Mission, string> MissionFunc2 = (Mission mission_0) => mission_0.Name;

		// Token: 0x04003EDF RID: 16095
		public static Func<Mission, string> MissionFunc3 = (Mission mission_0) => mission_0.Name;

		// Token: 0x04003EE0 RID: 16096
		public static Func<Mission, string> MissionFunc4 = (Mission mission_0) => mission_0.Name;

		// Token: 0x04003EE1 RID: 16097
		public static Func<PointF, IntPoint> PointFFunc5 = (PointF pointF_0) => new IntPoint((long)((int)Math.Round((double)pointF_0.X)), (long)((int)Math.Round((double)pointF_0.Y)));

		// Token: 0x04003EE2 RID: 16098
		public static Func<IntPoint, PointF> IntPointFunc6 = (IntPoint intPoint_0) => new PointF((float)intPoint_0.long_0, (float)intPoint_0.long_1);

		// Token: 0x04003EE3 RID: 16099
		public static Func<LoggedMessage, long> LoggedMessageFunc7 = (LoggedMessage loggedMessage_0) => loggedMessage_0.Increment;

		// Token: 0x04003EE4 RID: 16100
		public static Func<UnguidedWeapon, bool> UnguidedWeaponFunc8 = (UnguidedWeapon unguidedWeapon_0) => unguidedWeapon_0.IsMineOrDepthCharge() && WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, unguidedWeapon_0);

		// Token: 0x04003EE5 RID: 16101
		public static Func<UnguidedWeapon, bool> UnguidedWeaponFunc9 = (UnguidedWeapon unguidedWeapon_0) => !unguidedWeapon_0.IsMineOrDepthCharge() && WorldWindUtil.IsInFOV(ref Client.m_WorldWindow, unguidedWeapon_0);

		// Token: 0x04003EE6 RID: 16102
		public static Func<GeoPoint, double> GeoPointFunc10 = (GeoPoint geoPoint_0) => geoPoint_0.GetLatitude();

		// Token: 0x04003EE7 RID: 16103
		public static Func<GeoPoint, double> GeoPointFunc11 = (GeoPoint geoPoint_0) => geoPoint_0.GetLatitude();

		// Token: 0x04003EE8 RID: 16104
		public static Func<GeoPoint, double> GeoPointFunc12 = (GeoPoint geoPoint_0) => geoPoint_0.GetLongitude();

		// Token: 0x04003EE9 RID: 16105
		public static Func<GeoPoint, double> GeoPointFunc13 = (GeoPoint geoPoint_0) => geoPoint_0.GetLongitude();

		// Token: 0x04003EEA RID: 16106
		public static Func<Mount, Mount> MountFunc14 = (Mount mount_0) => mount_0;

		// Token: 0x04003EEB RID: 16107
		public static Func<Mount, bool> MountFunc15 = (Mount mount_0) => mount_0.GetComponentStatus() != PlatformComponent._ComponentStatus.Destroyed;

		// Token: 0x04003EEC RID: 16108
		public static Func<KeyValuePair<int, EmissionContainer>, KeyValuePair<int, EmissionContainer>> KeyValuePairFunc16 = (KeyValuePair<int, EmissionContainer> keyValuePair_0) => keyValuePair_0;

		// Token: 0x04003EED RID: 16109
		public static Func<KeyValuePair<int, EmissionContainer>, bool> KeyValuePairFunc17 = (KeyValuePair<int, EmissionContainer> keyValuePair_0) => keyValuePair_0.Value.elapsedTime <= 10f && keyValuePair_0.Value.bool_0;

		// Token: 0x04003EEE RID: 16110
		public static Func<KeyValuePair<int, EmissionContainer>, float> KeyValuePairFunc18 = (KeyValuePair<int, EmissionContainer> keyValuePair_0) => keyValuePair_0.Value.elapsedTime;

		// Token: 0x04003EEF RID: 16111
		public static Func<KeyValuePair<int, EmissionContainer>, KeyValuePair<int, EmissionContainer>> KeyValuePairFunc19 = (KeyValuePair<int, EmissionContainer> keyValuePair_0) => keyValuePair_0;

		// Token: 0x04003EF0 RID: 16112
		public static Func<KeyValuePair<int, EmissionContainer>, bool> KeyValuePairFunc20 = (KeyValuePair<int, EmissionContainer> keyValuePair_0) => keyValuePair_0.Value.elapsedTime <= 10f;

		// Token: 0x04003EF1 RID: 16113
		public static Func<KeyValuePair<int, EmissionContainer>, float> KeyValuePairFunc21 = (KeyValuePair<int, EmissionContainer> keyValuePair_0) => keyValuePair_0.Value.elapsedTime;

		// Token: 0x04003EF2 RID: 16114
		public static Func<KeyValuePair<int, EmissionContainer>, KeyValuePair<int, EmissionContainer>> KeyValuePairFunc22 = (KeyValuePair<int, EmissionContainer> keyValuePair_0) => keyValuePair_0;

		// Token: 0x04003EF3 RID: 16115
		public static Func<KeyValuePair<int, EmissionContainer>, bool> KeyValuePairFunc23 = (KeyValuePair<int, EmissionContainer> keyValuePair_0) => keyValuePair_0.Value.elapsedTime <= 10f && keyValuePair_0.Value.bool_0;

		// Token: 0x04003EF4 RID: 16116
		public static Func<KeyValuePair<int, EmissionContainer>, float> KeyValuePairFunc24 = (KeyValuePair<int, EmissionContainer> keyValuePair_0) => keyValuePair_0.Value.elapsedTime;

		// Token: 0x04003EF5 RID: 16117
		public static Func<KeyValuePair<int, EmissionContainer>, KeyValuePair<int, EmissionContainer>> KeyValuePairFunc25 = (KeyValuePair<int, EmissionContainer> keyValuePair_0) => keyValuePair_0;

		// Token: 0x04003EF6 RID: 16118
		public static Func<KeyValuePair<int, EmissionContainer>, bool> KeyValuePairFunc26 = (KeyValuePair<int, EmissionContainer> keyValuePair_0) => keyValuePair_0.Value.elapsedTime <= 10f;

		// Token: 0x04003EF7 RID: 16119
		public static Func<KeyValuePair<int, EmissionContainer>, float> KeyValuePairFunc27 = (KeyValuePair<int, EmissionContainer> keyValuePair_0) => keyValuePair_0.Value.elapsedTime;

		// Token: 0x04003EF8 RID: 16120
		public static Func<ActiveUnit, bool> ActiveUnitFunc28 = (ActiveUnit activeUnit_0) => MainForm.imethod_28(activeUnit_0);

		// Token: 0x04003EF9 RID: 16121
		public static Func<Unit, float> UnitFunc29 = (Unit unit_0) => unit_0.GetCurrentAltitude_ASL(false);

		// Token: 0x04003EFA RID: 16122
		public static Func<Side, string> SideFunc30 = (Side side_0) => side_0.GetSideName();

		// Token: 0x04003EFB RID: 16123
		public static Func<KeyValuePair<byte, QuickJumpSlot>, byte> KeyValuePairFunc31 = (KeyValuePair<byte, QuickJumpSlot> keyValuePair_0) => keyValuePair_0.Key;

		// Token: 0x04003EFC RID: 16124
		public static Func<ReferencePoint, bool> ReferencePointFunc32 = (ReferencePoint referencePoint_0) => referencePoint_0.IsSelected();

		// Token: 0x04003EFD RID: 16125
		public static Func<ReferencePoint, bool> ReferencePointFunc33 = (ReferencePoint referencePoint_0) => referencePoint_0.IsSelected();

		// Token: 0x04003EFE RID: 16126
		public static Action ActionFunc34 = delegate
		{
			SteamWorkshop.smethod_5();
		};

		// Token: 0x04003F00 RID: 16128
		[CompilerGenerated]
		private MenuStrip menuStrip_0;

		// Token: 0x04003F01 RID: 16129
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_FileControl;

		// Token: 0x04003F02 RID: 16130
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_1;

		// Token: 0x04003F03 RID: 16131
		[CompilerGenerated]
		private ToolStripLabel Label_GameRunSpeed;

		// Token: 0x04003F04 RID: 16132
		[CompilerGenerated]
		private ToolStripComboBox toolStripComboBox_0;

		// Token: 0x04003F05 RID: 16133
		[CompilerGenerated]
		private ContextMenuStrip contextMenuStrip_0;

		// Token: 0x04003F06 RID: 16134
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AU_AddUnit;

		// Token: 0x04003F07 RID: 16135
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_NewScenario;

		// Token: 0x04003F08 RID: 16136
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_LoadScenario;

		// Token: 0x04003F09 RID: 16137
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ScenarioEditor;

		// Token: 0x04003F0A RID: 16138
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_AddUnit;

		// Token: 0x04003F0B RID: 16139
		[CompilerGenerated]
		private ToolStripButton Button_StartOrRecover;

		// Token: 0x04003F0C RID: 16140
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SaveAs;

		// Token: 0x04003F0D RID: 16141
		[CompilerGenerated]
		private SaveFileDialog saveFileDialog_0;

		// Token: 0x04003F0E RID: 16142
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ScenarioDescribe;

		// Token: 0x04003F0F RID: 16143
		[CompilerGenerated]
		private Timer timer_0;

		// Token: 0x04003F10 RID: 16144
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ReturnTo;

		// Token: 0x04003F11 RID: 16145
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_NewOrEditRole;

		// Token: 0x04003F12 RID: 16146
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Exit;

		// Token: 0x04003F13 RID: 16147
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SwitchToRole;

		// Token: 0x04003F14 RID: 16148
		[CompilerGenerated]
		private ToolStripStatusLabel toolStripStatusLabel_0;

		// Token: 0x04003F15 RID: 16149
		[CompilerGenerated]
		private StatusStrip statusStrip_0;

		// Token: 0x04003F16 RID: 16150
		[CompilerGenerated]
		private ContextMenuStrip contextMenuStrip_1;

		// Token: 0x04003F17 RID: 16151
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_TestScript;

		// Token: 0x04003F18 RID: 16152
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_EditUnitProp;

		// Token: 0x04003F19 RID: 16153
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_EUP_Magazine;

		// Token: 0x04003F1A RID: 16154
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_EUP_AmmunitionReserve;

		// Token: 0x04003F1B RID: 16155
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_EUP_Airplane;

		// Token: 0x04003F1C RID: 16156
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_ReturnToBase;

		// Token: 0x04003F1D RID: 16157
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_19;

		// Token: 0x04003F1E RID: 16158
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AU_AddUnit0;

		// Token: 0x04003F1F RID: 16159
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AU_AddUnit1;

		// Token: 0x04003F20 RID: 16160
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AU_AddUnit2;

		// Token: 0x04003F21 RID: 16161
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AU_AddUnit3;

		// Token: 0x04003F22 RID: 16162
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AU_AddUnit4;

		// Token: 0x04003F23 RID: 16163
		[CompilerGenerated]
		private Timer timer_1;

		// Token: 0x04003F24 RID: 16164
		[CompilerGenerated]
		private BackgroundWorker backgroundWorker_0;

		// Token: 0x04003F25 RID: 16165
		[CompilerGenerated]
		private Timer timer_2;

		// Token: 0x04003F26 RID: 16166
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_StartUpWindow;

		// Token: 0x04003F27 RID: 16167
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UnitImportAndExport;

		// Token: 0x04003F28 RID: 16168
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UIAE_SelectedUnitOrGroupSaveAsFile;

		// Token: 0x04003F29 RID: 16169
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UIAE_LoadUnitOrGroupForFile;

		// Token: 0x04003F2A RID: 16170
		[CompilerGenerated]
		private ImageList imageList_0;

		// Token: 0x04003F2B RID: 16171
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_0;

		// Token: 0x04003F2C RID: 16172
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_1;

		// Token: 0x04003F2D RID: 16173
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_EditMissionBriefReport;

		// Token: 0x04003F2E RID: 16174
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SimulationControl;

		// Token: 0x04003F2F RID: 16175
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Options;

		// Token: 0x04003F30 RID: 16176
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_32;

		// Token: 0x04003F31 RID: 16177
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_EditWarplane;

		// Token: 0x04003F32 RID: 16178
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DirectorView;

		// Token: 0x04003F33 RID: 16179
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_35;

		// Token: 0x04003F34 RID: 16180
		[CompilerGenerated]
		private Timer timer_3;

		// Token: 0x04003F35 RID: 16181
		[CompilerGenerated]
		private ToolStripButton Button_CustomLayer;

		// Token: 0x04003F36 RID: 16182
		[CompilerGenerated]
		private OpenFileDialog openFileDialog_0;

		// “关于”菜单
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_About;

		// Token: 0x04003F38 RID: 16184
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SituationControl;

		// Token: 0x04003F39 RID: 16185
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ToAirDetectRange;

		// Token: 0x04003F3A RID: 16186
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ToSurfaceDetectRange;

		// Token: 0x04003F3B RID: 16187
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ToUnderWaterDetectRange;

		// Token: 0x04003F3C RID: 16188
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ToAirAttackRange;

		// Token: 0x04003F3D RID: 16189
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ToSurfaceAttackRange;

		// Token: 0x04003F3E RID: 16190
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ToUnderwaterAttackRange;

		// Token: 0x04003F3F RID: 16191
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_2;

		// Token: 0x04003F40 RID: 16192
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_LlluminationVectors;

		// Token: 0x04003F41 RID: 16193
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_LV_SelectedUnit;

		// Token: 0x04003F42 RID: 16194
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_LV_AllUnit;

		// Token: 0x04003F43 RID: 16195
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_LV_NotShow;

		// Token: 0x04003F44 RID: 16196
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_TargetingVectors;

		// Token: 0x04003F45 RID: 16197
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_TV_SelectedUnit;

		// Token: 0x04003F46 RID: 16198
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_TV_AllUnit;

		// Token: 0x04003F47 RID: 16199
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_TV_NotShow;

		// Token: 0x04003F48 RID: 16200
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UnitPropVisibility;

		// Token: 0x04003F49 RID: 16201
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DataLink;

		// Token: 0x04003F4A RID: 16202
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UPV_SelectedUnit;

		// Token: 0x04003F4B RID: 16203
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UPV_AllUnit;

		// Token: 0x04003F4C RID: 16204
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UPV_NotShow;

		// Token: 0x04003F4D RID: 16205
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DL_SelectedUnit;

		// Token: 0x04003F4E RID: 16206
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DL_AllUnit;

		// Token: 0x04003F4F RID: 16207
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DL_NotShow;

		// Token: 0x04003F50 RID: 16208
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_TSMI_Recorder;

		// Token: 0x04003F51 RID: 16209
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_61;

		// Token: 0x04003F52 RID: 16210
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_62;

		// Token: 0x04003F53 RID: 16211
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_63;

		// Token: 0x04003F54 RID: 16212
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ScenarioMigration;

		// Token: 0x04003F55 RID: 16213
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SM_ExportToFile;

		// Token: 0x04003F56 RID: 16214
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SM_ImportForFile;

		// Token: 0x04003F57 RID: 16215
		[CompilerGenerated]
		private OpenFileDialog openFileDialog_1;

		// Token: 0x04003F58 RID: 16216
		[CompilerGenerated]
		private SaveFileDialog saveFileDialog_1;

		// Token: 0x04003F59 RID: 16217
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_3;

		// Token: 0x04003F5A RID: 16218
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MissionAndReferencePoint;

		// Token: 0x04003F5B RID: 16219
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_NewMission;

		// Token: 0x04003F5C RID: 16220
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MissionEditor;

		// Token: 0x04003F5D RID: 16221
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_4;

		// Token: 0x04003F5E RID: 16222
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DeleteOurSideAllUnit;

		// Token: 0x04003F5F RID: 16223
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_EditScoreRules;

		// Token: 0x04003F60 RID: 16224
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SelectNewBase;

		// Token: 0x04003F61 RID: 16225
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SM_TransformToXML;

		// Token: 0x04003F62 RID: 16226
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AddReferencePoint;

		// Token: 0x04003F63 RID: 16227
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DeleteSelectedRefPoint;

		// Token: 0x04003F64 RID: 16228
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MessageOutput;

		// Token: 0x04003F65 RID: 16229
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ClearMessageLog;

		// Token: 0x04003F66 RID: 16230
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_PrintToFile;

		// Token: 0x04003F67 RID: 16231
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AU_AddRefPoint;

		// Token: 0x04003F68 RID: 16232
		[CompilerGenerated]
		private ContextMenuStrip contextMenuStrip_2;

		// Token: 0x04003F69 RID: 16233
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ScenarioDescribe0;

		// Token: 0x04003F6A RID: 16234
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ScenarioDescribe1;

		// Token: 0x04003F6B RID: 16235
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_RelativeSelectedRefPoint_FixedBearing;

		// Token: 0x04003F6C RID: 16236
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_AutoDetectedUnit;

		// Token: 0x04003F6D RID: 16237
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_5;

		// Token: 0x04003F6E RID: 16238
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_Doctrine_RoE_EMCON;

		// Token: 0x04003F6F RID: 16239
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_SetBearing;

		// Token: 0x04003F70 RID: 16240
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_6;

		// Token: 0x04003F71 RID: 16241
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_LossesAndExpenditures;

		// Token: 0x04003F72 RID: 16242
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ScenarioTime;

		// Token: 0x04003F73 RID: 16243
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Score;

		// Token: 0x04003F74 RID: 16244
		[CompilerGenerated]
		private ToolStripButton Button_VideoRecord;

		// Token: 0x04003F75 RID: 16245
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_7;

		// Token: 0x04003F76 RID: 16246
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_8;

		// Token: 0x04003F77 RID: 16247
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SpecialAction;

		// Token: 0x04003F78 RID: 16248
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SA_CreateTemplate;

		// Token: 0x04003F79 RID: 16249
		[CompilerGenerated]
		private SaveFileDialog saveFileDialog_2;

		// Token: 0x04003F7A RID: 16250
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SA_UseSpecialEventScript;

		// Token: 0x04003F7B RID: 16251
		[CompilerGenerated]
		private OpenFileDialog openFileDialog_2;

		// Token: 0x04003F7C RID: 16252
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_TorpedoArea;

		// Token: 0x04003F7D RID: 16253
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_TA_DesignatedAreaMine;

		// Token: 0x04003F7E RID: 16254
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_TA_DesignatedAreaMineClearance;

		// Token: 0x04003F7F RID: 16255
		[CompilerGenerated]
		private Button button_0;

		// Token: 0x04003F80 RID: 16256
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AirRefuel;

		// Token: 0x04003F81 RID: 16257
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UnitOrder;

		// Token: 0x04003F82 RID: 16258
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ThrottleAltOrDeep;

		// Token: 0x04003F83 RID: 16259
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_PlotCourse;

		// Token: 0x04003F84 RID: 16260
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AirOperations;

		// Token: 0x04003F85 RID: 16261
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_WeaponStatus;

		// Token: 0x04003F86 RID: 16262
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Magazines;

		// Token: 0x04003F87 RID: 16263
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SensorsStatus;

		// Token: 0x04003F88 RID: 16264
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SystemDamageStatus;

		// Token: 0x04003F89 RID: 16265
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_GO_GroupEditor;

		// Token: 0x04003F8A RID: 16266
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_EventEditor;

		// Token: 0x04003F8B RID: 16267
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_EE_Event;

		// Token: 0x04003F8C RID: 16268
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_EE_Trigger;

		// Token: 0x04003F8D RID: 16269
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_EE_Action;

		// Token: 0x04003F8E RID: 16270
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_EE_Condition;

		// Token: 0x04003F8F RID: 16271
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_9;

		// Token: 0x04003F90 RID: 16272
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Weather;

		// Token: 0x04003F91 RID: 16273
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_EditBerthedBoats;

		// Token: 0x04003F92 RID: 16274
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MergeShowRange;

		// Token: 0x04003F93 RID: 16275
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_10;

		// Token: 0x04003F94 RID: 16276
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_BoatDockingOperations;

		// Token: 0x04003F95 RID: 16277
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MissileBriefReport;

		// Token: 0x04003F96 RID: 16278
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AssignMissionToUnit;

		// Token: 0x04003F97 RID: 16279
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AU_DefineArea;

		// Token: 0x04003F98 RID: 16280
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_AddSatellite;

		// Token: 0x04003F99 RID: 16281
		[CompilerGenerated]
		private CheckBox checkBox_0;

		// Token: 0x04003F9A RID: 16282
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AttackOptions;

		// Token: 0x04003F9B RID: 16283
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_DropTarget;

		// Token: 0x04003F9C RID: 16284
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_DropAllTarget;

		// Token: 0x04003F9D RID: 16285
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_ThrottleAltOrDeep;

		// Token: 0x04003F9E RID: 16286
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_PlotCourse;

		// Token: 0x04003F9F RID: 16287
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_GO_GroupEditor;

		// Token: 0x04003FA0 RID: 16288
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AirOperations;

		// Token: 0x04003FA1 RID: 16289
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_BoatDockingOperations;

		// Token: 0x04003FA2 RID: 16290
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_OA_AutoEngageTarget;

		// Token: 0x04003FA3 RID: 16291
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_OA_ManualEngageTarget;

		// Token: 0x04003FA4 RID: 16292
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_OA_LaunchOnlyBearing;

		// Token: 0x04003FA5 RID: 16293
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_Magazines;

		// Token: 0x04003FA6 RID: 16294
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_WeaponStatus;

		// Token: 0x04003FA7 RID: 16295
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SensorsStatus;

		// Token: 0x04003FA8 RID: 16296
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SystemDamageStatus;

		// Token: 0x04003FA9 RID: 16297
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_IgnorePlottedCourse_SelectedUnit;

		// Token: 0x04003FAA RID: 16298
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_DirectionRangeMeasure;

		// Token: 0x04003FAB RID: 16299
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_135;

		// Token: 0x04003FAC RID: 16300
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_BrowseScenarioPlatforms;

		// Token: 0x04003FAD RID: 16301
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_OrderOfBattle;

		// Token: 0x04003FAE RID: 16302
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_LockSelectedRefPoint;

		// Token: 0x04003FAF RID: 16303
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UnlockSelectedRefPoint;

		// Token: 0x04003FB0 RID: 16304
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SimulationRealismSettings;

		// Token: 0x04003FB1 RID: 16305
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ScenarioDescription;

		// Token: 0x04003FB2 RID: 16306
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ShowNonfriendlyRange;

		// Token: 0x04003FB3 RID: 16307
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_11;

		// Token: 0x04003FB4 RID: 16308
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_RelativeSelectedRefPoint_RotatingBearing;

		// Token: 0x04003FB5 RID: 16309
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_12;

		// Token: 0x04003FB6 RID: 16310
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SelectedRefPointChangeBearingToFixed;

		// Token: 0x04003FB7 RID: 16311
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SelectedRefPointChangeBearingToRotating;

		// Token: 0x04003FB8 RID: 16312
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_13;

		// Token: 0x04003FB9 RID: 16313
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SideDoctrineAndEMCONAndWRA;

		// Token: 0x04003FBA RID: 16314
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SA_CreateDeltaTemplate;

		// Token: 0x04003FBB RID: 16315
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SaveScenario;

		// Token: 0x04003FBC RID: 16316
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ContactEmissions;

		// Token: 0x04003FBD RID: 16317
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_CE_SelectedTarget;

		// Token: 0x04003FBE RID: 16318
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_CE_AllTarget;

		// Token: 0x04003FBF RID: 16319
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_CE_NotShow;

		// Token: 0x04003FC0 RID: 16320
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_WeaponContorlStatusForAllType_SelectUnit;

		// Token: 0x04003FC1 RID: 16321
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DeselectAllRefPoint;

		// Token: 0x04003FC2 RID: 16322
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_UnassignMissionUnit;

		// Token: 0x04003FC3 RID: 16323
		[CompilerGenerated]
		private ContextMenuStrip contextMenuStrip_3;

		// Token: 0x04003FC4 RID: 16324
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_156;

		// Token: 0x04003FC5 RID: 16325
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_157;

		// Token: 0x04003FC6 RID: 16326
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_158;

		// Token: 0x04003FC7 RID: 16327
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_HoldPositon_SelectedUnit;

		// Token: 0x04003FC8 RID: 16328
		[CompilerGenerated]
		private ToolStripLabel Label_GameRunMode;

		// Token: 0x04003FC9 RID: 16329
		[CompilerGenerated]
		private ToolStripComboBox toolStripComboBox_1;

		// Token: 0x04003FCA RID: 16330
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_14;

		// Token: 0x04003FCB RID: 16331
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ScriptEditor;

		// Token: 0x04003FCC RID: 16332
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ShowRange;

		// Token: 0x04003FCD RID: 16333
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SR_SelectedUnit;

		// Token: 0x04003FCE RID: 16334
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SR_AllUnit;

		// Token: 0x04003FCF RID: 16335
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SR_NotShow;

		// Token: 0x04003FD0 RID: 16336
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SwitchToUnitView;

		// Token: 0x04003FD1 RID: 16337
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_15;

		// Token: 0x04003FD2 RID: 16338
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MapSeting;

		// Token: 0x04003FD3 RID: 16339
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_LonLatGrid;

		// Token: 0x04003FD4 RID: 16340
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_BMNG;

		// Token: 0x04003FD5 RID: 16341
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ColorTopographic;

		// Token: 0x04003FD6 RID: 16342
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ShowBorders;

		// Token: 0x04003FD7 RID: 16343
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_OnlineGeographyData;

		// Token: 0x04003FD8 RID: 16344
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_CustomLayer;

		// Token: 0x04003FD9 RID: 16345
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_StartOrRecover;

		// Token: 0x04003FDA RID: 16346
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SimIncreaseCompression;

		// Token: 0x04003FDB RID: 16347
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SimDecreaseCompression;

		// Token: 0x04003FDC RID: 16348
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_16;

		// Token: 0x04003FDD RID: 16349
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_17;

		// Token: 0x04003FDE RID: 16350
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_18;

		// Token: 0x04003FDF RID: 16351
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_TrackSelectedUnit;

		// Token: 0x04003FE0 RID: 16352
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DirectionRangeMeasure;

		// Token: 0x04003FE1 RID: 16353
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_19;

		// Token: 0x04003FE2 RID: 16354
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_20;

		// Token: 0x04003FE3 RID: 16355
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UnassignMissionUnit;

		// Token: 0x04003FE4 RID: 16356
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ContactTarget;

		// Token: 0x04003FE5 RID: 16357
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DropTarget;

		// Token: 0x04003FE6 RID: 16358
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DropActiveSonobuoy;

		// Token: 0x04003FE7 RID: 16359
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ASW_DropPassiveSonobuoy;

		// Token: 0x04003FE8 RID: 16360
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ASW_DPS_Shallow;

		// Token: 0x04003FE9 RID: 16361
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ASW_DPS_Deep;

		// Token: 0x04003FEA RID: 16362
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ASW_DAS_Shallow;

		// Token: 0x04003FEB RID: 16363
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ASW_DAS_Deep;

		// Token: 0x04003FEC RID: 16364
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ZoomIn;

		// Token: 0x04003FED RID: 16365
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ZoomOut;

		// Token: 0x04003FEE RID: 16366
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_21;

		// Token: 0x04003FEF RID: 16367
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Tranlation;

		// Token: 0x04003FF0 RID: 16368
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UpMove;

		// Token: 0x04003FF1 RID: 16369
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_RightMove;

		// Token: 0x04003FF2 RID: 16370
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_LeftMove;

		// Token: 0x04003FF3 RID: 16371
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DownMove;

		// Token: 0x04003FF4 RID: 16372
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_GO_GroupBySelectedUnit;

		// Token: 0x04003FF5 RID: 16373
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_GO_SelectedUnitRemoveGroup;

		// Token: 0x04003FF6 RID: 16374
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DeployDippingSonar;

		// Token: 0x04003FF7 RID: 16375
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_RealTimeSim;

		// Token: 0x04003FF8 RID: 16376
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_22;

		// Token: 0x04003FF9 RID: 16377
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ChooseNextUnit;

		// Token: 0x04003FFA RID: 16378
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ChoosePrevUnit;

		// Token: 0x04003FFB RID: 16379
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Rename;

		// Token: 0x04003FFC RID: 16380
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_CopyUnit;

		// Token: 0x04003FFD RID: 16381
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_MoveUnit;

		// Token: 0x04003FFE RID: 16382
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MarkHostile;

		// Token: 0x04003FFF RID: 16383
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_23;

		// Token: 0x04004000 RID: 16384
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MarkNeutral;

		// Token: 0x04004001 RID: 16385
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MarkFriendly;

		// Token: 0x04004002 RID: 16386
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_24;

		// Token: 0x04004003 RID: 16387
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_DeleteUnit;

		// Token: 0x04004004 RID: 16388
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SonobuoyVisbility;

		// Token: 0x04004005 RID: 16389
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ReferencePointVisibility;

		// Token: 0x04004006 RID: 16390
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_25;

		// Token: 0x04004007 RID: 16391
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SV_Common;

		// Token: 0x04004008 RID: 16392
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SV_Virtual;

		// Token: 0x04004009 RID: 16393
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SV_NotShow;

		// Token: 0x0400400A RID: 16394
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_RPV_Common;

		// Token: 0x0400400B RID: 16395
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_RPV_Small;

		// Token: 0x0400400C RID: 16396
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_RPV_NotShow;

		// Token: 0x0400400D RID: 16397
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ShowGroupMember;

		// Token: 0x0400400E RID: 16398
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_GM_SelectedGroup;

		// Token: 0x0400400F RID: 16399
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_GM_AllGroup;

		// Token: 0x04004010 RID: 16400
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_GM_NotShow;

		// Token: 0x04004011 RID: 16401
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_RenameSelectedRefName;

		// Token: 0x04004012 RID: 16402
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_RenameUnit;

		// Token: 0x04004013 RID: 16403
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AttackOptions;

		// Token: 0x04004014 RID: 16404
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_AutoEngageTarget;

		// Token: 0x04004015 RID: 16405
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_ManualEngageTarget;

		// Token: 0x04004016 RID: 16406
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_LaunchOnlyBearing;

		// Token: 0x04004017 RID: 16407
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_DropTarget;

		// Token: 0x04004018 RID: 16408
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_DropAllTarget;

		// Token: 0x04004019 RID: 16409
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_WeaponContorlStatusForAllType_SelectUnit;

		// Token: 0x0400401A RID: 16410
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_26;

		// Token: 0x0400401B RID: 16411
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_NoNavigationZones;

		// Token: 0x0400401C RID: 16412
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_NNZ_EditExisting;

		// Token: 0x0400401D RID: 16413
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_NNZ_CreateBySelectedRefPoint;

		// Token: 0x0400401E RID: 16414
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ExclusionZones;

		// Token: 0x0400401F RID: 16415
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_EZ_EditExisting;

		// Token: 0x04004020 RID: 16416
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_EZ_CreateBySelectedRefPoint;

		// Token: 0x04004021 RID: 16417
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_GO_GroupBySelectedUnit;

		// Token: 0x04004022 RID: 16418
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_GO_SelectedUnitRemoveGroup;

		// Token: 0x04004023 RID: 16419
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_27;

		// Token: 0x04004024 RID: 16420
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ReturnToBase;

		// Token: 0x04004025 RID: 16421
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SelectNewBase;

		// Token: 0x04004026 RID: 16422
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AirRefuel;

		// Token: 0x04004027 RID: 16423
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AssignMissionToUnit;

		// Token: 0x04004028 RID: 16424
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Doctrine_RoE_EMCON_WRA;

		// Token: 0x04004029 RID: 16425
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_ASW_DropPassiveSonobuoy;

		// Token: 0x0400402A RID: 16426
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_28;

		// Token: 0x0400402B RID: 16427
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_DeployDippingSonar;

		// Token: 0x0400402C RID: 16428
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_ASW_DPS_Shallow;

		// Token: 0x0400402D RID: 16429
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_DropActiveSonobuoy;

		// Token: 0x0400402E RID: 16430
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_ASW_DPS_Deep;

		// Token: 0x0400402F RID: 16431
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_ASW_DAS_Shallow;

		// Token: 0x04004030 RID: 16432
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_ASW_DAS_Deep;

		// Token: 0x04004031 RID: 16433
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_UnitAutoDetected;

		// Token: 0x04004032 RID: 16434
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_SettingBearing;

		// Token: 0x04004033 RID: 16435
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_HoldPositon;

		// Token: 0x04004034 RID: 16436
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_HoldPositon_SelectedUnit;

		// Token: 0x04004035 RID: 16437
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_29;

		// Token: 0x04004036 RID: 16438
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_HotKey;

		// Token: 0x04004037 RID: 16439
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_PlottedCourses;

		// Token: 0x04004038 RID: 16440
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AU_AddUnit54;

		// Token: 0x04004039 RID: 16441
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_PC_AllUnit;

		// Token: 0x0400403A RID: 16442
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_PC_NotShow;

		// Token: 0x0400403B RID: 16443
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SelectedRefPointRemoveRelativity;

		// Token: 0x0400403C RID: 16444
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_WeaponContorlStatusForAllType_AllUnit;

		// Token: 0x0400403D RID: 16445
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_WeaponContorlStatusForAllType_AllUnit;

		// Token: 0x0400403E RID: 16446
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_IgnorePlottedCourse_AllUnit;

		// Token: 0x0400403F RID: 16447
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_IgnorePlottedCourse_AllUnit;

		// Token: 0x04004040 RID: 16448
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DefineArea;

		// Token: 0x04004041 RID: 16449
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_QuickJump;

		// Token: 0x04004042 RID: 16450
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MessageOutputWindow;

		// Token: 0x04004043 RID: 16451
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_30;

		// Token: 0x04004044 RID: 16452
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_HoldPositon_AllUnit;

		// Token: 0x04004045 RID: 16453
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_HoldPositon_AllUnit;

		// Token: 0x04004046 RID: 16454
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_SatellitePassPredictions;

		// Token: 0x04004047 RID: 16455
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_SetUnitTrainingLevel;

		// Token: 0x04004048 RID: 16456
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_SUTL_NewPlayer;

		// Token: 0x04004049 RID: 16457
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_SUTL_Trainee;

		// Token: 0x0400404A RID: 16458
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_SUTL_Common;

		// Token: 0x0400404B RID: 16459
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_SUTL_OldStager;

		// Token: 0x0400404C RID: 16460
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_SUTL_TopLevel;

		// Token: 0x0400404D RID: 16461
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_SUTL_SameAsCamp;

		// Token: 0x0400404E RID: 16462
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_CloneUnit;

		// Token: 0x0400404F RID: 16463
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ToLandAttackRange;

		// Token: 0x04004050 RID: 16464
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_QuickTumaround;

		// Token: 0x04004051 RID: 16465
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_QuickTumaround;

		// Token: 0x04004052 RID: 16466
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_SetOilAndHangTime;

		// Token: 0x04004053 RID: 16467
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ScenarioAttachment;

		// Token: 0x04004054 RID: 16468
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_ScenarioPackingPublish;

		// Token: 0x04004055 RID: 16469
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_IPCSU_Yes;

		// Token: 0x04004056 RID: 16470
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_IPCSU_No;

		// Token: 0x04004057 RID: 16471
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_IPCSU_SameAsSuperior;

		// Token: 0x04004058 RID: 16472
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_IPCAU_Yes;

		// Token: 0x04004059 RID: 16473
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_IPCAU_No;

		// Token: 0x0400405A RID: 16474
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_IPCAU_SameAsSuperior;

		// Token: 0x0400405B RID: 16475
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_WCSFATSU_ForbidFire;

		// Token: 0x0400405C RID: 16476
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_WCSFATSU_LimitFire;

		// Token: 0x0400405D RID: 16477
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_WCSFATSU_FreeFire;

		// Token: 0x0400405E RID: 16478
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_WCSFATSU_SameAsSuperior;

		// Token: 0x0400405F RID: 16479
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_WCSFATAU_ForbidFire;

		// Token: 0x04004060 RID: 16480
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_WCSFATAU_LimitFire;

		// Token: 0x04004061 RID: 16481
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_WCSFATAU_FreeFire;

		// Token: 0x04004062 RID: 16482
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_WCSFATAU_SameAsSuperior;

		// Token: 0x04004063 RID: 16483
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_IPCSU_Yes;

		// Token: 0x04004064 RID: 16484
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_IPCSU_No;

		// Token: 0x04004065 RID: 16485
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_IPCSU_SameAsSuperior;

		// Token: 0x04004066 RID: 16486
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_IPCAU_Yes;

		// Token: 0x04004067 RID: 16487
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_IPCAU_No;

		// Token: 0x04004068 RID: 16488
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_IPCAU_SameAsSuperior;

		// Token: 0x04004069 RID: 16489
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_WCSFATSU_ForbidFire;

		// Token: 0x0400406A RID: 16490
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_WCSFATSU_LimitFire;

		// Token: 0x0400406B RID: 16491
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_WCSFATSU_FreeFire;

		// Token: 0x0400406C RID: 16492
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_WCSFATSU_SameAsSuperior;

		// Token: 0x0400406D RID: 16493
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_WCSFATAU_ForbidFire;

		// Token: 0x0400406E RID: 16494
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_WCSFATAU_LimitFire;

		// Token: 0x0400406F RID: 16495
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_WCSFATAU_FreeFire;

		// Token: 0x04004070 RID: 16496
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AO_WCSFATAU_SameAsSuperior;

		// Token: 0x04004071 RID: 16497
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AO_IgnorePlottedCourse_SelectedUnit;

		// Token: 0x04004072 RID: 16498
		[CompilerGenerated]
		private ContextMenuStrip contextMenuStrip_4;

		// Token: 0x04004073 RID: 16499
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_311;

		// Token: 0x04004074 RID: 16500
		[CompilerGenerated]
		private Timer timer_4;

		// Token: 0x04004075 RID: 16501
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_FilteroutAllTarget;

		// Token: 0x04004076 RID: 16502
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_CancelFilteroutAllContacts;

		// Token: 0x04004077 RID: 16503
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DataBase;

		// Token: 0x04004078 RID: 16504
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DB_SecnarioDataBandingToCustomDB;

		// Token: 0x04004079 RID: 16505
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DB_ChangeDB;

		// Token: 0x0400407A RID: 16506
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DB_SecnarioDataUpdateToLatestVersion;

		// Token: 0x0400407B RID: 16507
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Battle;

		// Token: 0x0400407C RID: 16508
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_31;

		// Token: 0x0400407D RID: 16509
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Battle_New;

		// Token: 0x0400407E RID: 16510
		[CompilerGenerated]
		private OpenFileDialog openFileDialog_3;

		// Token: 0x0400407F RID: 16511
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Battle_LoadForFile;

		// Token: 0x04004080 RID: 16512
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DB_CDB_Waiting;

		// Token: 0x04004081 RID: 16513
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Tutorials;

		// Token: 0x04004082 RID: 16514
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_PublishScenarioToSimulationServer;

		// Token: 0x04004083 RID: 16515
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_32;

		// Token: 0x04004084 RID: 16516
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_CE_AllEmissions;

		// Token: 0x04004085 RID: 16517
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_CE_OnlyFCR;

		// Token: 0x04004086 RID: 16518
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_PlacenameLayer;

		// Token: 0x04004087 RID: 16519
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_DayNightLight;

		// Token: 0x04004088 RID: 16520
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_CE_SelectedShowAllRestOnlyFCR;

		// Token: 0x04004089 RID: 16521
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_EE_SpecialEvent;

		// Token: 0x0400408A RID: 16522
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MenuItem_SpecialAction;

		// Token: 0x0400408B RID: 16523
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AR_AutoSelectAerialTanker;

		// Token: 0x0400408C RID: 16524
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AR_ManualSelectAerialTanker;

		// Token: 0x0400408D RID: 16525
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AR_SelectForMission;

		// Token: 0x0400408E RID: 16526
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AR_AutoSelectAerialTanker;

		// Token: 0x0400408F RID: 16527
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AR_ManualSelectAerialTanker;

		// Token: 0x04004090 RID: 16528
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AR_SelectForMission;

		// Token: 0x04004091 RID: 16529
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MissionAreaOrCourse;

		// Token: 0x04004092 RID: 16530
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MAOC_SelectedMission;

		// Token: 0x04004093 RID: 16531
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MAOC_AllMission;

		// Token: 0x04004094 RID: 16532
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MAOC_NotShow;

		// Token: 0x04004095 RID: 16533
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_ScenarioEdit;

		// Token: 0x04004096 RID: 16534
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_GroupOperations;

		// Token: 0x04004097 RID: 16535
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_AntiSubmarineWar;

		// Token: 0x04004098 RID: 16536
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_AntiSubmarineWar;

		// Token: 0x04004099 RID: 16537
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_GroupOperations;

		// Token: 0x0400409A RID: 16538
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_33;

		// Token: 0x0400409B RID: 16539
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_CopyUnitID;

		// Token: 0x0400409C RID: 16540
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MarkUnfriendly;

		// Token: 0x0400409D RID: 16541
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_348;

		// Token: 0x0400409E RID: 16542
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_349;

		// Token: 0x0400409F RID: 16543
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_350;

		// Token: 0x040040A0 RID: 16544
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_351;

		// Token: 0x040040A1 RID: 16545
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_352;

		// Token: 0x040040A2 RID: 16546
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_34;

		// Token: 0x040040A3 RID: 16547
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_35;

		// Token: 0x040040A4 RID: 16548
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_353;

		// Token: 0x040040A5 RID: 16549
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UnitOperation;

		// Token: 0x040040A6 RID: 16550
		[CompilerGenerated]
		private ToolStripSeparator toolStripSeparator_36;

		// Token: 0x040040A7 RID: 16551
		[CompilerGenerated]
		private ToolStripButton Button_GameSpeed;

		// Token: 0x040040A8 RID: 16552
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_UO_EditCargo;

		// Token: 0x040040A9 RID: 16553
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_DischargeCargo;

		// Token: 0x040040AA RID: 16554
		[CompilerGenerated]
		private Timer timer_5;

		// Token: 0x040040AB RID: 16555
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_IsolatedUnitView;

		// Token: 0x040040AC RID: 16556
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_SE_UnitLoseCommunication;

		// Token: 0x040040AD RID: 16557
		[CompilerGenerated]
		private ElementHost elementHost_0;

		// Token: 0x040040AF RID: 16559
		[CompilerGenerated]
		private Timer timer_6;

		// Token: 0x040040B0 RID: 16560
		[CompilerGenerated]
		private Timer timer_7;

		// Token: 0x040040B1 RID: 16561
		[CompilerGenerated]
		private Label label_0;

		// Token: 0x040040B2 RID: 16562
		[CompilerGenerated]
		private Label label_1;

		// Token: 0x040040B3 RID: 16563
		[CompilerGenerated]
		private PictureBox WorldMapBox;

		// Token: 0x040040B4 RID: 16564
		[CompilerGenerated]
		private Panel panel_0;

		// Token: 0x040040B5 RID: 16565
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_Unit_IsolationView;

		// Token: 0x040040B6 RID: 16566
		[CompilerGenerated]
		private ToolStripMenuItem MenuItem_MonteCarloSimulation;

		// Token: 0x040040B7 RID: 16567
		[CompilerGenerated]
		private ToolStrip toolStrip_0;

		// Token: 0x040040B8 RID: 16568
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_361;

		// Token: 0x040040B9 RID: 16569
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_362;

		// Token: 0x040040BA RID: 16570
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_363;

		// Token: 0x040040BB RID: 16571
		[CompilerGenerated]
		private ToolStripMenuItem toolStripMenuItem_364;

		// Token: 0x040040BC RID: 16572
		[CompilerGenerated]
		private ComboBox comboBox_0;

		// Token: 0x040040BD RID: 16573
		private Point point_0;

		// Token: 0x040040BE RID: 16574
		internal GeoPoint geoPoint_0;

		// Token: 0x040040BF RID: 16575
		private GeoPoint geoPoint_1;

		// Token: 0x040040C0 RID: 16576
		private Point point_1;

		// Token: 0x040040C1 RID: 16577
		private Point point_2;

		// Token: 0x040040C2 RID: 16578
		private Point point_3;

		// Token: 0x040040C3 RID: 16579
		private Point point_4;

		// Token: 0x040040C4 RID: 16580
		private bool bool_0;

		// Token: 0x040040C5 RID: 16581
		private bool bool_1;

		// Token: 0x040040C6 RID: 16582
		private Rectangle SelectionRectangle;

		// Token: 0x040040C7 RID: 16583
		private string string_0;

		// Token: 0x040040C8 RID: 16584
		private string string_1;

		// Token: 0x040040C9 RID: 16585
		private string string_2 = "";

		// Token: 0x040040CA RID: 16586
		[CompilerGenerated]
		private ComboBox CB_TimeCompression;

		// Token: 0x040040CB RID: 16587
		[CompilerGenerated]
		private ComboBox comboBox_2;

		// Token: 0x040040CC RID: 16588
		private List<Unit> list_0;

		// Token: 0x040040CD RID: 16589
		private GeoPoint geoPoint_2;

		// Token: 0x040040CE RID: 16590
		private GraphicsStream graphicsStream_0;

		// Token: 0x040040CF RID: 16591
		private Bitmap bitmap_0;

		// Token: 0x040040D0 RID: 16592
		private float float_0;

		// Token: 0x040040D1 RID: 16593
		private Dictionary<Side, List<Side>> dictionary_0;

		// Token: 0x040040D2 RID: 16594
		private bool bool_2 = false;

		// Token: 0x040040D3 RID: 16595
		private double double_0;

		// Token: 0x040040D4 RID: 16596
		private float float_1;

		// Token: 0x040040D5 RID: 16597
		private bool bool_3;

		// Token: 0x040040D6 RID: 16598
		private ExclusionZonesWindow m_ExclusionZonesWindow;

		// Token: 0x040040D7 RID: 16599
		private NoNavZonesWindow m_NoNavZonesWindow;

		// Token: 0x040040D8 RID: 16600
		private Class1970 class1970_0;

		// Token: 0x040040D9 RID: 16601
		private Class2537.Class2001 class2001_0;

		// Token: 0x040040DA RID: 16602
		private Class2537.Class2001 class2001_1;

		// Token: 0x040040DB RID: 16603
		private Class2537.Class2001 class2001_2;

		// Token: 0x040040DC RID: 16604
		private Class1994 class1994_0;

		// Token: 0x040040DD RID: 16605
		private List<TiledPlacenameSet> m_TiledPlacenameSets;

		// Token: 0x040040DE RID: 16606
		private DateTime dateTime_0;

		// Token: 0x040040DF RID: 16607
		private Dictionary<string, Bitmap> dictionary_1;

		// Token: 0x040040E0 RID: 16608
		private bool IsRefreshed;

		// Token: 0x040040E1 RID: 16609
		private int refreshTimes;

		// Token: 0x040040E2 RID: 16610
		private object object_0;

		// Token: 0x040040E3 RID: 16611
		private int int_1;

		// Token: 0x040040E4 RID: 16612
		private object object_1;

		// Token: 0x040040E5 RID: 16613
		private bool bool_5;

		// Token: 0x040040E6 RID: 16614
		private ReferencePoint referencePoint_0;

		// Token: 0x040040E7 RID: 16615
		private Color color_0;

		// Token: 0x040040E8 RID: 16616
		private Color color_1;

		// Token: 0x040040E9 RID: 16617
		private Color color_2;

		// Token: 0x040040EA RID: 16618
		private Color color_3;

		// Token: 0x040040EB RID: 16619
		private Color color_4;

		// Token: 0x040040EC RID: 16620
		private Color color_5;

		// Token: 0x040040ED RID: 16621
		private Color color_6;

		// Token: 0x040040EE RID: 16622
		private List<Unit> UnitList;

		// Token: 0x040040EF RID: 16623
		private Dictionary<Unit, Tuple<int, int>> dictionary_2;

		// Token: 0x040040F0 RID: 16624
		private List<Unit> list_3;

		// Token: 0x040040F1 RID: 16625
		public Device device_0;

		// Token: 0x040040F2 RID: 16626
		private Surface surface_0;

		// Token: 0x040040F3 RID: 16627
		private Surface surface_1;

		// Token: 0x040040F4 RID: 16628
		private GraphicsStream graphicsStream_1;

		// Token: 0x040040F5 RID: 16629
		private bool bool_6;

		// Token: 0x040040F6 RID: 16630
		private bool bool_7;

		// Token: 0x040040F7 RID: 16631
		private bool bool_8;

		// Token: 0x040040F8 RID: 16632
		private int int_2 = 0;

		// Token: 0x040040F9 RID: 16633
		private Rectangle rectangle_1;

		// Token: 0x040040FA RID: 16634
		private MouseEventArgs mouseEventArgs_0;

		// Token: 0x040040FB RID: 16635
		[CompilerGenerated]
		private Timer timer_8;

		// Token: 0x040040FC RID: 16636
		private bool bool_9;

		// Token: 0x040040FD RID: 16637
		private bool bool_10;

		// Token: 0x040040FE RID: 16638
		private ReferencePoint referencePoint_1;

		// Token: 0x040040FF RID: 16639
		private Point point_5;

		// Token: 0x04004100 RID: 16640
		private Bitmap UnitSymbol;

		// Token: 0x04004101 RID: 16641
		internal Bitmap bitmap_2;

		// Token: 0x04004102 RID: 16642
		private string string_3 = "";

		// Token: 0x04004103 RID: 16643
		private string string_4 = "";

		// Token: 0x04004104 RID: 16644
		private Color color_7;

		// Token: 0x04004105 RID: 16645
		private Collection<Point> collection_0;

		// Token: 0x04004106 RID: 16646
		private GraphicsPath graphicsPath_0;

		// Token: 0x04004107 RID: 16647
		private Pen pen_0;

		// Token: 0x04004108 RID: 16648
		private int int_3 = 0;

		// Token: 0x04004109 RID: 16649
		private int CZIncrementIndex;

		// Token: 0x0400410A RID: 16650
		private int int_5;

		// Token: 0x0400410B RID: 16651
		private int int_6;

		// Token: 0x0400410C RID: 16652
		private List<FixedGeoPolygon> list_4;

		// Token: 0x0400410D RID: 16653
		private int ScreenX;

		// Token: 0x0400410E RID: 16654
		private int ScreenY;

		// Token: 0x0400410F RID: 16655
		private int int_9;

		// Token: 0x04004110 RID: 16656
		private int int_10;

		// Token: 0x04004111 RID: 16657
		private int int_11;

		// Token: 0x04004112 RID: 16658
		private int int_12;

		// Token: 0x04004113 RID: 16659
		private SolidBrush solidBrush_0;

		// Token: 0x04004114 RID: 16660
		private GeoPoint geoPoint_3;

		// Token: 0x04004115 RID: 16661
		private Point point_6;

		// Token: 0x04004116 RID: 16662
		private float float_2 = 0f;

		// Token: 0x04004117 RID: 16663
		private float float_3;

		// Token: 0x04004118 RID: 16664
		private GeoPoint geoPoint_4;

		// Token: 0x04004119 RID: 16665
		private bool bool_11;

		// Token: 0x0400411A RID: 16666
		private float CZInnerRange = 0f;

		// Token: 0x0400411B RID: 16667
		private float CZOuterRange = 0f;

		// Token: 0x0400411C RID: 16668
		private int int_13;

		// Token: 0x0400411D RID: 16669
		private System.Drawing.Font font_0;

		// Token: 0x0400411E RID: 16670
		private System.Drawing.Font font_1;

		// Token: 0x0400411F RID: 16671
		private System.Drawing.Font font_2;

		// Token: 0x04004120 RID: 16672
		private System.Drawing.Font font_3;

		// Token: 0x04004121 RID: 16673
		private System.Drawing.Font font_4;

		// Token: 0x04004122 RID: 16674
		private System.Drawing.Font font_5;

		// Token: 0x04004123 RID: 16675
		private System.Drawing.Font font_6;

		// Token: 0x04004124 RID: 16676
		private System.Drawing.Font font_7;

		// Token: 0x04004125 RID: 16677
		private float float_6 = 0f;

		// Token: 0x04004126 RID: 16678
		[CompilerGenerated]
		private Class2476 class2476_0;

		// Token: 0x04004127 RID: 16679
		private List<GeoPoint> list_5;

		// Token: 0x04004128 RID: 16680
		private bool bool_12;

		// Token: 0x04004129 RID: 16681
		private List<Waypoint> list_6;

		// Token: 0x0400412A RID: 16682
		private List<Waypoint> list_7;

		// Token: 0x0400412B RID: 16683
		private List<Waypoint> list_8;

		// Token: 0x0400412C RID: 16684
		private List<Mission.Flight> list_9;

		// Token: 0x0400412D RID: 16685
		private Dictionary<Color, SolidBrush> dictionary_3;

		// Token: 0x0400412E RID: 16686
		private object object_2;

		// Token: 0x02000CF1 RID: 3313
		[CompilerGenerated]
		public sealed class Class2492
		{
			// Token: 0x060072E6 RID: 29414 RVA: 0x00030195 File Offset: 0x0002E395
			public Class2492(MainForm.Class2492 class2492_0)
			{
				if (class2492_0 != null)
				{
					this.concurrentDictionary_0 = class2492_0.concurrentDictionary_0;
				}
			}

			// Token: 0x060072E7 RID: 29415 RVA: 0x00418570 File Offset: 0x00416770
			internal void method_0(List<GraphicsPath> list_0)
			{
				Class2363 @class = new Class2363(0);
				using (List<GraphicsPath>.Enumerator enumerator = list_0.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						List<IntPoint> list_ = enumerator.Current.PathPoints.Select(MainForm.PointFFunc5).ToList<IntPoint>();
						@class.method_7(list_, Enum163.const_1, true);
					}
				}
				List<List<IntPoint>> list = new List<List<IntPoint>>();
				@class.method_20(Enum162.const_1, list, Enum164.const_1, Enum164.const_1);
				foreach (List<IntPoint> current in list)
				{
					this.concurrentDictionary_0.TryAdd(GameGeneral.GetRandom().NextDouble(), current);
				}
			}

			// Token: 0x04004152 RID: 16722
			public ConcurrentDictionary<double, List<IntPoint>> concurrentDictionary_0;
		}

		// Token: 0x02000CF2 RID: 3314
		[CompilerGenerated]
		public sealed class Class2493
		{
			// Token: 0x060072E8 RID: 29416 RVA: 0x000301AF File Offset: 0x0002E3AF
			public Class2493(MainForm.Class2493 class2493_0)
			{
				if (class2493_0 != null)
				{
					this.double_0 = class2493_0.double_0;
					this.double_1 = class2493_0.double_1;
					this.dictionary_0 = class2493_0.dictionary_0;
				}
			}

			// Token: 0x060072E9 RID: 29417 RVA: 0x0041863C File Offset: 0x0041683C
			internal void method_0(float float_0)
			{
				Point value = default(Point);
				double lng = 0.0;
				double lat = 0.0;
				GeoPointGenerator.GetOtherGeoPoint(this.double_0, this.double_1, ref lng, ref lat, (double)this.class2494_0.float_0, (double)float_0);
				value = WorldWindUtil.WorldToScreenCoordinate(ref Client.m_WorldWindow, lat, lng);
				this.dictionary_0[float_0] = value;
			}

			// Token: 0x04004153 RID: 16723
			public double double_0;

			// Token: 0x04004154 RID: 16724
			public double double_1;

			// Token: 0x04004155 RID: 16725
			public Dictionary<float, Point> dictionary_0;

			// Token: 0x04004156 RID: 16726
			public MainForm.Class2494 class2494_0;
		}

		// Token: 0x02000CF3 RID: 3315
		[CompilerGenerated]
		public sealed class Class2494
		{
			// Token: 0x060072EA RID: 29418 RVA: 0x000301E1 File Offset: 0x0002E3E1
			public Class2494(MainForm.Class2494 class2494_0)
			{
				if (class2494_0 != null)
				{
					this.float_0 = class2494_0.float_0;
				}
			}

			// Token: 0x04004157 RID: 16727
			public float float_0;
		}

        private void 启动UDP服务ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
